Searching between v0.9.1 and v0.9.2
Keywords: slow, fast, time, perf(ormance), optim(ize), regression
Additional keywords: quality,pass,bitrate,thread
Keywords: slow fast time perf optim regression speed quality pass bitrate thread
For keyword slow:
For keyword fast:
[33mcommit 3b95a46c5538ad4c5b765923d61d8d1b12a4569a[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Aug 10 21:12:04 2010 -0700

    Normalize quantizer's zero bin and rounding factors
    
    This patch changes a few numbers in the two constant arrays
    for quantizer's zerobin and rounding factors, in general to
    make the sum of the two factors for any Q to be 128.  While
    it might be beneficial to calibrate the two arrays for best
    quantizer performance, it is not the purpose of this patch.
    Normalizing the two arrays will enable quick optimization
    of the current [1;31mfast[mer quantizer, i.e .zerobin check can be
    removed.
    
    Change-Id: If9abfd7929bf4b8e9ecd64a79d817c6728c820bd
For keyword time:
[33mcommit daab4bcba60759a252bd210ee5f8d7cd390962e5[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Thu Sep 2 12:03:51 2010 -0400

    Use native win32 [1;31mtime[mrs on mingw
    
    Changed to use QueryPerformanceCounter on Windows rather than only
    when building with MSVC, so that MSVC can link libs built with
    MinGW.
    
    Fixes issue #149.
    
    Change-Id: Ie2dc7edc8f4d096cf95ec5ffb1ab00f2d67b3e7d

[33mcommit e105e245ef02e7ce3c78950af01cfc78ce2a7459[m
Author: Timothy B. Terriberry <tterribe@xiph.org>
Date:   Fri Aug 27 15:21:22 2010 -0700

    Fix two-pass framrate for Y4M input.
    
    The [1;31mtime[mbase was being set to the value in the Y4M file on each
     pass, but only doubled to account for the altref placement on
     the first past.
    This avoids reseting it on the second pass.
    
    Change-Id: Ie342639bad1ffe9c2214fbbaaded72cfed835b42

[33mcommit 8e7ebacb19be1a44a9b724ead70f7ae40a6827c3[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Fri Aug 20 11:04:10 2010 -0400

    increase rate control buffer level precision
    
    The external API exposes the RC initial/optimal/full buffer level in
    milliseconds, but this value was truncated internally to seconds. This
    patch allows the use of the full precision during the conversion from
    [1;31mtime[m to bits.
    
    Change-Id: If8dd2a87614c05747f81432cbe75dd9e6ed2f04e

[33mcommit 52852da7c9740c335e5295531a77363a413cc140[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Aug 19 13:37:40 2010 -0400

    cleanup simple loop filter
    
    move some things around, reorder some instructions
    
    constant 0 is used several [1;31mtime[ms. load it once per call in horiz,
    once per loop in vert.
    
    separate saturating instructions to avoid stalls.
    
    just use one usub8 call to set GE flags, rather than uqsub8 followed by
    usub8 w/ 0
    
    document some stalls for further consideration
    
    Change-Id: Ic3877e0ddbe314bb8a17fd5db73501a7d64570ec

[33mcommit 9602799cd9ecd0529e291f8d1af951bf2fde787b[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Aug 12 09:05:37 2010 -0400

    framework for assembly version of the detokenizer
    
    adds a compile [1;31mtime[m option: --enable-arm-asm-detok which pulls in
    vp8/decoder/arm/detokenize.asm
    
    currently about break even speed wise, but changes are pending to
    the fill code (branch and load 3 bytes versus conditionally always
    load one) and the error handling. Currently it doesn't handle zero
    runs or overrunning the buffer.
    
    this is really just so i don't have to rebase my changes all the
    [1;31mtime[m to run benchmarks - now just need to replace one file!
    
    Change-Id: I56d0e2354dc0ca3811bffd0e88fe1f952fa6c797

[33mcommit 38a20e030f442fb8dfa1e596c98500bd35919e6f[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Thu Jul 29 17:04:39 2010 -0400

    apple: include proper mach primatives
    
    Fixes implicit declaration warning for 'mach_task_self'.
    
    Patch courtesy of [1;31mtime[mless at gmail.com
    
    Change-Id: I9991dedd1ccfddc092eca86705ecbc3b764b799d

[33mcommit a570bbd418f7bffdf291a1752a198a4b84e717cb[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Tue Jul 27 12:10:48 2010 -0400

    x86/sse2: disable asm quantizer
    
    follow up to Change I0e51492d: neon: disable asm quantizer
    
    Now x86 doesn't segfault with --disable-run[1;31mtime[m-cpu-detect and -p=2
    
    Change-Id: I8ca127bb299198efebbcbd5a661e81788361933f

[33mcommit 3de8a958314fa33224b6f9a065f20aa57434d341[m
Merge: 2add72d9b 98fcccfe9
Author: Fritz Koenig <frkoenig@google.com>
Date:   Mon Jul 26 06:05:30 2010 -0700

    Merge changes I896fe6f9,I90d8b167
    
    * changes:
      Change the x86 idct functions to do reconstruction at the same [1;31mtime[m
      Combine idct and reconstruction steps

[33mcommit 98fcccfe9751894ace9693a39ba0609fe5ea904d[m
Author: Jeff Muizelaar <jmuizelaar@mozilla.com>
Date:   Thu Jun 3 10:16:07 2010 -0400

    Change the x86 idct functions to do reconstruction at the same [1;31mtime[m
    
    Change-Id: I896fe6f9664e6849c7cee2cc6bb4e045eb42540f

[33mcommit 160d671e349e0a879e93d4a7208beddac5d8ef0a[m
Merge: 7a89d4c3d 80f0e7a7d
Author: Johann Koenig <johannkoenig@google.com>
Date:   Wed Jul 21 12:59:39 2010 -0700

    Merge "limit range checking code for L[k] to CONFIG_DEBUG. patch by [1;31mtime[mless@gmail.com"

[33mcommit 80f0e7a7d0e0b3637e71dcfa55089feabdff6b59[m
Author: Michael Kohler <michaelkohler@live.com>
Date:   Mon Jul 12 18:41:45 2010 +0200

    limit range checking code for L[k] to CONFIG_DEBUG. patch by [1;31mtime[mless@gmail.com

[33mcommit 1ca39bf26dd114f224ce67f1f3f85076cdafaacc[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Jun 29 12:15:54 2010 +0100

    Further adjustment of RD behaviour with Q and Zbin.
    
    Following conversations with Tim T (Derf) I ran a large number of
    tests comparing the existing polynomial expression with a simpler
    ^2 variant. Though the polynomial was some[1;31mtime[ms a little better at
    the extremes of Q it was possible to get close for most clips and
    even a little better on some.
    
    This code also changes the way the RD multiplier is calculated
    when the ZBIN is extended to use a variant of the same ^2
    expression.
    
    I hope that this simpler expression will be easier to tune further
    as we expand our test set and consider adjustments based on content.
    
    Change-Id: I73b2564346e74d1332c33e2c1964ae093437456c

[33mcommit c17b62e1bd8fe9335ba247061c072b10392e88a7[m
Author: Timothy B. Terriberry <tterribe@xiph.org>
Date:   Wed May 5 17:58:19 2010 -0400

    Change bitreader to use a larger window.
    
    Change bitreading functions to use a larger window which is refilled less
     often.
    
    This makes it cheap enough to do bounds checking each [1;31mtime[m the window is
     refilled, which avoids the need to copy the input into a large circular
     buffer.
    This uses less memory and speeds up the total decode [1;31mtime[m by 1.6% on an ARM11,
     2.8% on a Cortex A8, and 2.2% on x86-32, but less than 1% on x86-64.
    
    Inlining vp8dx_bool_decoder_fill() has a big penalty on x86-32, as does moving
     the refill loop to the front of vp8dx_decode_bool().
    However, having the refill loop between computation of the split values and
     the branch in vp8_decode_mb_tokens() is a big win on ARM (presumably due to
     memory latency and code size: refilling after normalization duplicates the
     code in the DECODE_AND_BRANCH_IF_ZERO and DECODE_AND_LOOP_IF_ZERO cases.
    Unfortunately, refilling at the end of vp8dx_bool_decoder_fill() and at the
     beginning of each decode step in vp8_decode_mb_tokens() means the latter
     requires an extra refill at the end.
    Platform-specific versions could avoid the problem, but would require most of
     detokenize.c to be duplicated.
    
    Change-Id: I16c782a63376f2a15b78f8086d899b987204c1c7
For keyword perf:
[33mcommit 3b95a46c5538ad4c5b765923d61d8d1b12a4569a[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Aug 10 21:12:04 2010 -0700

    Normalize quantizer's zero bin and rounding factors
    
    This patch changes a few numbers in the two constant arrays
    for quantizer's zerobin and rounding factors, in general to
    make the sum of the two factors for any Q to be 128.  While
    it might be beneficial to calibrate the two arrays for best
    quantizer [1;31mperf[mormance, it is not the purpose of this patch.
    Normalizing the two arrays will enable quick optimization
    of the current faster quantizer, i.e .zerobin check can be
    removed.
    
    Change-Id: If9abfd7929bf4b8e9ecd64a79d817c6728c820bd

[33mcommit e4fe866949951c8eb79c5ebdb0a6dab37cef37a9[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Tue Aug 10 17:06:05 2010 -0400

    Added ssse3 version of sixtap filters
    
    Improved decoder [1;31mperf[mormance by 9% for the clip used.
    
    Change-Id: I8fc5609213b7bef10248372595dc85b29f9895b9

[33mcommit ba2e107d2878ae5bf225ff038e46d309be30dfd0[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Jul 29 16:24:26 2010 -0400

    First modification of multi-thread decoder
    
    This is the first modification of VP8 multi-thread decoder, which uses
    same threads to decode macroblocks and then do loopfiltering for each
    frame.
    
    Inspired by Rob Clark, synchronization was done on every 8 macroblocks
    instead of every macroblock to reduce lock contention.
    
    Comparing with the original code, this implementation gave about 15%-
    20% [1;31mperf[mormance gain while decoding my test clips on a Core2 Quad
    platform (Linux).
    
    The work is not done yet.
    
    Test on other platforms are needed.
    
    Change-Id: Ice9ddb0b511af1359b9f71e65066143c04fef3b5

[33mcommit b2fa74ac18c4a333f7913a346588b87087989202[m
Author: Jeff Muizelaar <jmuizelaar@mozilla.com>
Date:   Fri May 28 14:28:12 2010 -0400

    Combine idct and reconstruction steps
    
    This moves the prediction step before the idct and combines the idct and
    reconstruction steps into a single step. Combining them seems to give an
    overall decoder [1;31mperf[mormance improvement of about 1%.
    
    Change-Id: I90d8b167ec70d79c7ba2ee484106a78b3d16e318

[33mcommit bead039d4d316092bca20e62df001f92a86067d2[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Jun 25 09:18:11 2010 -0400

    Improve SSE2 loopfilter functions
    
    Restructured and rewrote SSE2 loopfilter functions. Combined u and
    v into one function to take advantage of SSE2 128-bit registers.
    Tests on test clips showed a 4% decoder [1;31mperf[mormance improvement on
    Linux desktop.
    
    Change-Id: Iccc6669f09e17f2224da715f7547d6f93b0a4987
For keyword optim:
[33mcommit c239a1b67c9c5ff25a04ba89eca45245b1e615a2[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Aug 20 12:27:26 2010 +0100

    Improved Force Key Frame Behaviour
    
    These changes improve the behaviour of the code with
    forced key frames sent in by a calling application.
    
    The sizing of the frames is still sub[1;31moptim[mal for two pass in
    particular but the behaviour is much better than it was.
    
    Change-Id: I35fae610c67688ccc69d11f385e87dfc884e65a1

[33mcommit 8e7ebacb19be1a44a9b724ead70f7ae40a6827c3[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Fri Aug 20 11:04:10 2010 -0400

    increase rate control buffer level precision
    
    The external API exposes the RC initial/[1;31moptim[mal/full buffer level in
    milliseconds, but this value was truncated internally to seconds. This
    patch allows the use of the full precision during the conversion from
    time to bits.
    
    Change-Id: If8dd2a87614c05747f81432cbe75dd9e6ed2f04e

[33mcommit 3b95a46c5538ad4c5b765923d61d8d1b12a4569a[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Aug 10 21:12:04 2010 -0700

    Normalize quantizer's zero bin and rounding factors
    
    This patch changes a few numbers in the two constant arrays
    for quantizer's zerobin and rounding factors, in general to
    make the sum of the two factors for any Q to be 128.  While
    it might be beneficial to calibrate the two arrays for best
    quantizer performance, it is not the purpose of this patch.
    Normalizing the two arrays will enable quick [1;31moptim[mization
    of the current faster quantizer, i.e .zerobin check can be
    removed.
    
    Change-Id: If9abfd7929bf4b8e9ecd64a79d817c6728c820bd

[33mcommit 8fa38096a39433c6b86848dce0e307acd2a54482[m
Author: Timothy B. Terriberry <tterribe@xiph.org>
Date:   Fri Jul 2 14:35:53 2010 -0700

    Add trellis quantization.
    
    Replace the exponential search for [1;31moptim[mal rounding during
     quantization with a linear Viterbi trellis and enable it
     by default when using --best.
    Right now this operates on top of the output of the adaptive
     zero-bin quantizer in vp8_regular_quantize_b() and gives a small
     gain.
    It can be tested as a replacement for that quantizer by
     enabling the call to vp8_strict_quantize_b(), which uses
     normal rounding and no zero bin offset.
    Ultimately, the quantizer will have to become a function of lambda
     in order to take advantage of activity masking, since there is
     limited ability to change the quantization factor itself.
    However, currently vp8_strict_quantize_b() plus the trellis
     quantizer (which is lambda-dependent) loses to
     vp8_regular_quantize_b() alone (which is not) on my test clip.
    
    Patch Set 3:
    
    Fix an issue related to the cost evaluation of successor
    states when a coefficient is reduced to zero. With this
    issue fixed, now the trellis search almost exactly matches
    the exponential search.
    
    Patch Set 2:
    
    Overall, the goal of this patch set is to make "trellis"
    search to produce encodings that match the exponential
    search version. There are three main differences between
    Patch Set 2 and 1:
    a. Patch set 1 did not properly account for the scale of
    2nd order error, so patch set 2 disable it all together
    for 2nd blocks.
    b. Patch set 1 was not consistent on when to enable the
    the quantization [1;31moptim[mization. Patch set 2 restore the
    condition to be consistent.
    c. Patch set 1 checks quantized level L-1, and L for any
    input coefficient was quantized to L. Patch set 2 limits
    the candidate coefficient to those that were rounded up
    to L. It is worth noting here that a strategy to check
    L and L+1 for coefficients that were truncated down to L
    might work.
    
    (a and b get trellis quant to basically match the exponential
    search on all mid/low rate encodings on cif set, without
    a, b, trellis quant can hurt the psnr by 0.2 to .3db at
    200kbps for some cif clips)
    (c gets trellis quant  to match the exponential search
    to match at Q0 encoding, without c, trellis quant can be
    1.5 to 2db lower for encodings with fixed Q at 0 on most
    derf cif clips)
    
    Change-Id:      Ib1a043b665d75fbf00cb0257b7c18e90eebab95e

[33mcommit cecdd73db786c2ea29f9d6eff1d30f1e8b75eeb5[m
Author: Fritz Koenig <frkoenig@google.com>
Date:   Thu Jun 24 12:18:23 2010 -0400

    vp8cx : bestsad declared and initialized incorrectly.
    
    bestsad should be an int initialized to INT_MAX.  The [1;31moptim[mized
    SAD function expects a signed value for bestsad to use for comparison
    and early loop termination.  When no match is made, which is
    determined by a comparison of bestsad to INT_MAX, INT_MAX is returned.
For keyword regression:
For keyword speed:
[33mcommit 9602799cd9ecd0529e291f8d1af951bf2fde787b[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Aug 12 09:05:37 2010 -0400

    framework for assembly version of the detokenizer
    
    adds a compile time option: --enable-arm-asm-detok which pulls in
    vp8/decoder/arm/detokenize.asm
    
    currently about break even [1;31mspeed[m wise, but changes are pending to
    the fill code (branch and load 3 bytes versus conditionally always
    load one) and the error handling. Currently it doesn't handle zero
    runs or overrunning the buffer.
    
    this is really just so i don't have to rebase my changes all the
    time to run benchmarks - now just need to replace one file!
    
    Change-Id: I56d0e2354dc0ca3811bffd0e88fe1f952fa6c797

[33mcommit c17b62e1bd8fe9335ba247061c072b10392e88a7[m
Author: Timothy B. Terriberry <tterribe@xiph.org>
Date:   Wed May 5 17:58:19 2010 -0400

    Change bitreader to use a larger window.
    
    Change bitreading functions to use a larger window which is refilled less
     often.
    
    This makes it cheap enough to do bounds checking each time the window is
     refilled, which avoids the need to copy the input into a large circular
     buffer.
    This uses less memory and [1;31mspeed[ms up the total decode time by 1.6% on an ARM11,
     2.8% on a Cortex A8, and 2.2% on x86-32, but less than 1% on x86-64.
    
    Inlining vp8dx_bool_decoder_fill() has a big penalty on x86-32, as does moving
     the refill loop to the front of vp8dx_decode_bool().
    However, having the refill loop between computation of the split values and
     the branch in vp8_decode_mb_tokens() is a big win on ARM (presumably due to
     memory latency and code size: refilling after normalization duplicates the
     code in the DECODE_AND_BRANCH_IF_ZERO and DECODE_AND_LOOP_IF_ZERO cases.
    Unfortunately, refilling at the end of vp8dx_bool_decoder_fill() and at the
     beginning of each decode step in vp8_decode_mb_tokens() means the latter
     requires an extra refill at the end.
    Platform-specific versions could avoid the problem, but would require most of
     detokenize.c to be duplicated.
    
    Change-Id: I16c782a63376f2a15b78f8086d899b987204c1c7
For keyword quality:
For keyword pass:
[33mcommit c239a1b67c9c5ff25a04ba89eca45245b1e615a2[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Aug 20 12:27:26 2010 +0100

    Improved Force Key Frame Behaviour
    
    These changes improve the behaviour of the code with
    forced key frames sent in by a calling application.
    
    The sizing of the frames is still suboptimal for two [1;31mpass[m in
    particular but the behaviour is much better than it was.
    
    Change-Id: I35fae610c67688ccc69d11f385e87dfc884e65a1

[33mcommit 6f4d4ab5ac86d76b3bf5207b5bc4eb9a427b8321[m
Merge: 674e477b8 e105e245e
Author: John Koleszar <jkoleszar@google.com>
Date:   Mon Aug 30 12:40:37 2010 -0700

    Merge "Fix two-[1;31mpass[m framrate for Y4M input."

[33mcommit e105e245ef02e7ce3c78950af01cfc78ce2a7459[m
Author: Timothy B. Terriberry <tterribe@xiph.org>
Date:   Fri Aug 27 15:21:22 2010 -0700

    Fix two-[1;31mpass[m framrate for Y4M input.
    
    The timebase was being set to the value in the Y4M file on each
     [1;31mpass[m, but only doubled to account for the altref placement on
     the first past.
    This avoids reseting it on the second [1;31mpass[m.
    
    Change-Id: Ie342639bad1ffe9c2214fbbaaded72cfed835b42

[33mcommit 23d68a5f3004960d1a50702e6d76323d5ea0a721[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue Jun 22 09:53:23 2010 -0400

    configure: [1;31mpass[m original arguments through to make dist
    
    When running configure automatically through the make dist target,
    reuse the arguments [1;31mpass[med to the original configure command.
    
    Change-Id: I40e5b8384d6485a565b91e6d2356d5bc9c4c5928

[33mcommit 9404c7db6d627e4b1bed24419a6e1d388af29d93[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Jul 23 17:01:12 2010 +0100

    Rate control bug with long key frame interval.
    
    In two [1;31mpass[m encodes, the calculation of the number of bits
    allocated to a KF group had the potential to overflow for high data
    rates if the interval is very long.
    
    We observed the problem in one test clip where there was one
    section where there was an 8000 frame gap between key frames.
    
    Change-Id: Ic48eb86271775d7573b4afd166b567b64f25b787

[33mcommit 0618ff14d6eeca27d6cca6b3999e4cd10fe7b096[m
Author: Adrian Grange <agrange@google.com>
Date:   Thu Jul 1 14:17:04 2010 +0100

    Fix bug in 1st [1;31mpass[m motion compensation
    
    In the case where the best reference mv is not (0,0) a secondary
    search is carried out centered on (0,0). However, rather than
    sending tmp_err into the search function, motion_error was
    inadvertently [1;31mpass[med.
    
    As a result tmp_err remains set at INT_MAX and the (0,0)-based
    search result will never be selected, even if it is better.
    
    Change-Id: I3c82b246c8c82ba887b9d3fb4c9e0a0f2fe5a76c

[33mcommit f1a3b1e0d94dec2d40008f36fdfad99338484b9a[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Thu Jun 24 13:11:30 2010 -0400

    Added first-[1;31mpass[m sse2 version of Yaowu's new fdct.
    
    Change-Id: Ib479210067510162879c368428b92690591120b2

[33mcommit b1e36f2872b8f645b806a151e3e88540adcde614[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Thu Jun 24 08:41:51 2010 -0400

    ivfenc: correct fixed kf interval, --disable-kf
    
    ivfenc was setting the VPX_KF_FIXED mode when the kf_min_dist and
    kf_max_dist parameters were set to each other. This flag actually means
    that keyframes are disabled, and that name was deprecated to avoid
    confusion such as this. Instead, a new option is exposed for setting the
    VPX_KF_DISABLED mode, and the intervals are [1;31mpass[med through to the codec,
    which will do automatic placement at a fixed interval as expected.
    
    Change-Id: I15abbec5936f39d5901878b4bc154372fbc23a43
For keyword bitrate:
For keyword thread:
[33mcommit d45e55015e85897c4307959b5f9df94da5b41f33[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Wed Sep 1 16:40:18 2010 -0400

    Fix rare deadlock before loop filter
    
    There was an extremely rare deadlock that happened when one [1;31mthread[m
    was waiting to start the loop filter on frame n while the other
    [1;31mthread[ms were starting to work on frame n+1.
    
    Change-Id: Icc94f728b3b6663405435640d9a2996735ba19ef

[33mcommit 0e78efad0be73d293880d1b71053c0d70a50a080[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Aug 30 18:16:04 2010 -0400

    Replace sleep(0) calls in multi-[1;31mthread[med decoder
    
    This is a workaround for gLucid problem.
    
    Change-Id: I188a016a07e4c2ea212444c5a6284ff3c48a5caa

[33mcommit ba2e107d2878ae5bf225ff038e46d309be30dfd0[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Jul 29 16:24:26 2010 -0400

    First modification of multi-[1;31mthread[m decoder
    
    This is the first modification of VP8 multi-[1;31mthread[m decoder, which uses
    same [1;31mthread[ms to decode macroblocks and then do loopfiltering for each
    frame.
    
    Inspired by Rob Clark, synchronization was done on every 8 macroblocks
    instead of every macroblock to reduce lock contention.
    
    Comparing with the original code, this implementation gave about 15%-
    20% performance gain while decoding my test clips on a Core2 Quad
    platform (Linux).
    
    The work is not done yet.
    
    Test on other platforms are needed.
    
    Change-Id: Ice9ddb0b511af1359b9f71e65066143c04fef3b5

[33mcommit 308e867f91ec1b76d59009060ada99f52a73c602[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Jun 30 10:22:40 2010 -0400

    Update loopfilter frame/filter/sharp info for multi[1;31mthread[m
    
    Change I9fd1a5a4 updated the multi[1;31mthread[med loopfilter to avoid
    reinitializing several parameteres if they haven't changed from the
    last frame, but the code to update the last frame's parameters wasn't
    invoked in the multi[1;31mthread[med case.
    
    Change-Id: Ia23d937af625c01dd739608e02d110f742b7e1f2

[33mcommit b2f77866aa69639d4126a1daa87a2c121e4c3ab4[m
Merge: cf49034b1 29d586b46
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Jun 30 06:56:36 2010 -0700

    Merge "Add loopfilter initialization fix in multi[1;31mthread[ming code"

[33mcommit 29d586b462f2c37bd468dd51cf32ef5982777056[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Jun 30 09:42:39 2010 -0400

    Add loopfilter initialization fix in multi[1;31mthread[ming code
    
    Modified loopfilter initialization to avoid unnecessary operations.
    
    Change-Id: I9fd1a5a49edc1cb8116c2a72a6908b1e437459ec
