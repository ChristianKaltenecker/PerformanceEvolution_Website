Searching between v1.3.0 and v1.4.0
Keywords: slow, fast, time, perf(ormance), optim(ize), regression
Additional keywords: pass,thread,quality
Keywords: slow fast time perf optim regression speed pass thread quality
For keyword slow:
[33mcommit e52109158aab3109db76c36117445f8d0e521244[m
Author: Marco Paniconi <marpan@google.com>
Date:   Sun Mar 15 19:19:29 2015 -0700

    Update to variance partition.
    
    Use force_split to constrain the partition selection.
    This is used because in the top-down approach to variance partition,
    a block size may be selected even though one of its subblocks may have
    high variance.
    
    In this patch the selection of the 64x64 block size will only
    be allowed if the variance of all the 32x32 subblocks are also below the threshold.
    
    Stil testing, but some visual improvement for areas near [1;31mslow[m moving boundary
    can be seen. Metrics for RTC set increase by about ~0.5%.
    
    Change-Id: Iab3e7b19bf70f534236f7a43fd873895a2bb261d

[33mcommit 54eda13f8df587fe0a5a202f232f66863aff445a[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Mar 9 18:55:38 2015 -0700

    Apply fast motion search to golden reference frame
    
    This commit enables the rtc coding mode to run integral projection
    based motion search for golden reference frame. It improves the
    speed -6 compression performance by 1.1% on average, 3.46% for
    jimred_vga, 6.46% for tacomascmvvga, and 0.5% for vidyo clips. The
    speed -6 is about 6% [1;31mslow[mer.
    
    Change-Id: I0fe402ad2edf0149d0349ad304ab9b2abdf0c804

[33mcommit ed2dc59c1b363ab510344b28ee0367c50c5080c4[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 13 11:23:45 2015 -0800

    Integral projection based motion estimation
    
    This commit introduces a new block match motion estimation
    using integral projection measurement. The 2-D block and the nearby
    region is projected onto the horizontal and vertical 1-D vectors,
    respectively. It then runs vector match, instead of block match,
    over the two separate 1-D vectors to locate the motion compensated
    reference block.
    
    This process is run per 64x64 block to align the reference before
    choosing partitioning in speed 6. The overall CPU cycle cost due
    to this additional 64x64 block match (SSE2 version) takes around 2%
    at low bit-rate rtc speed 6. When strong motion activities exist in
    the video sequence, it substantially improves the partition
    selection accuracy, thereby achieving better compression performance
    and lower CPU cycles.
    
    The experiments were tested in RTC speed -6 setting:
    cloud 1080p 500 kbps
    17006 b/f, 37.086 dB, 5386 ms ->
    16669 b/f, 37.970 dB, 5085 ms (>0.9dB gain and 6% faster)
    
    pedestrian_area 1080p 500 kbps
    53537 b/f, 36.771 dB, 18706 ms ->
    51897 b/f, 36.792 dB, 18585 ms (4% bit-rate savings)
    
    blue_sky 1080p 500 kbps
    70214 b/f, 33.600 dB, 13979 ms ->
    53885 b/f, 33.645 dB, 10878 ms (30% bit-rate savings, 25% faster)
    
    jimred 400 kbps
    13380 b/f, 36.014 dB, 5723 ms ->
    13377 b/f, 36.087 dB, 5831 ms  (2% bit-rate savings, 2% [1;31mslow[mer)
    
    Change-Id: Iffdb6ea5b16b77016bfa3dd3904d284168ae649c

[33mcommit be6aeadaf49de28f13355d5dd7f64b4074dcca7c[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Jan 27 12:26:28 2015 -0800

    Try again to merge branch 'frame-parallel' into master branch.
    
    In frame parallel decode, libvpx decoder decodes several frames on all
    cpus in parallel fashion. If not being flushed, it will only return frame
    when all the cpus are busy. If getting flushed, it will return all the
    frames in the decoder. Compare with current serial decode mode in which
    libvpx decoder is idle between decode calls, libvpx decoder is busy
    between decode calls.
    
    Current frame parallel decode will only speed up the decoding for frame
    parallel encoded videos. For non frame parallel encoded videos, frame
    parallel decode is [1;31mslow[mer than serial decode due to lack of loopfilter
    worker thread.
    
    There are still some known issues that need to be addressed. For example:
    decode frame parallel videos with segmentation enabled is not right sometimes.
    
    * frame-parallel:
      Add error handling for frame parallel decode and unit test for that.
      Fix a bug in frame parallel decode and add a unit test for that.
      Add two test vectors to test frame parallel decode.
      Add key frame seeking to webmdec and webm_video_source.
      Implement frame parallel decode for VP9.
      Increase the thread test range to cover 5, 6, 7, 8 threads.
      Fix a bug in adding frame parallel unit test.
      Add VP9 frame-parallel unit test.
      Manually pick "Make the api behavior conform to api spec." from master branch.
      Move vp9_dec_build_inter_predictors_* to decoder folder.
      Add segmentation map array for current and last frame segmentation.
      Include the right header for VP9 worker thread.
      Move vp9_thread.* to common.
      ctrl_get_reference does not need user_priv.
      Seperate the frame buffers from VP9 encoder/decoder structure.
      Revert "Revert "Revert "Revert 3 patches from Hangyu to get Chrome to build:"""
     Conflicts:
           test/codec_factory.h
           test/decode_test_driver.cc
           test/decode_test_driver.h
           test/invalid_file_test.cc
           test/test-data.sha1
           test/test.mk
           test/test_vectors.cc
           vp8/vp8_dx_iface.c
           vp9/common/vp9_alloccommon.c
           vp9/common/vp9_entropymode.c
           vp9/common/vp9_loopfilter_thread.c
           vp9/common/vp9_loopfilter_thread.h
           vp9/common/vp9_mvref_common.c
           vp9/common/vp9_onyxc_int.h
           vp9/common/vp9_reconinter.c
           vp9/decoder/vp9_decodeframe.c
           vp9/decoder/vp9_decodeframe.h
           vp9/decoder/vp9_decodemv.c
           vp9/decoder/vp9_decoder.c
           vp9/decoder/vp9_decoder.h
           vp9/encoder/vp9_encoder.c
           vp9/encoder/vp9_pickmode.c
           vp9/encoder/vp9_rdopt.c
           vp9/vp9_cx_iface.c
           vp9/vp9_dx_iface.c
    
    This reverts commit a18da9760a74d9ce6fb9f875706dc639c95402f5.
    
    Change-Id: I361442ffec1586d036ea2e0ee97ce4f077585f02

[33mcommit 4276eac294bfab431c4cd2de34418db0149a7b05[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri Dec 19 15:53:59 2014 -0800

    Resolve several style issues in decode_perf_test
    
    This allows us to track decode speed for new encodes so that we catch
    problems like an encode change that makes decode really [1;31mslow[m.
    
    Change-Id: I7210196415c4e53d455e9c81246d9fb324913a06

[33mcommit c2638bd80a7134ae2b04d258993ccd03e5586579[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Dec 9 12:44:45 2014 -0800

    Adds a decode perf test that builds a new file.
    
    This allows us to track decode speed for new encodes so that we catch
    problems like an encode change that makes decode really [1;31mslow[m.
    
    Change-Id: I92251a8b1f710b241f66e1042413df1b71b76038

[33mcommit 8f9d94ec17eea893ce35188416a9492317119d77[m
Author: Tamar Levy <tamar.levy@intel.com>
Date:   Fri Dec 5 11:14:33 2014 -0700

    SSSE3 Optimization for Atom processors using new instruction selection and ordering
    
    The function vp9_filter_block1d16_h8_ssse3 uses the PSHUFB instruction which has a 3 cycle latency and [1;31mslow[ms execution when done in blocks of 5 or more on Atom processors.
    By replacing the PSHUFB instructions with other more efficient single cycle instructions (PUNPCKLBW + PUNPCHBW + PALIGNR) performance can be improved.
    In the original code, the PSHUBF uses every byte and is consecutively copied.
    This is done more efficiently by PUNPCKLBW and PUNPCHBW, using PALIGNR to concatenate the intermediate result and then shift right the next consecutive 16 bytes for the final result.
    
    For example:
    filter = 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8
    Reg = 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
    REG1 = PUNPCKLBW Reg, Reg = 0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7
    REG2 = PUNPCHBW Reg, Reg = 8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15
    PALIGNR REG2, REG1, 1 = 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8
    
    This optimization improved the function performance by 23% and produced a 3% user level gain on 1080p content on Atom processors.
    There was no observed performance impact on Core processors (expected).
    
    Change-Id: I3cec701158993d95ed23ff04516942b5a4a461c0

[33mcommit 9f79259e545eb3b9ddabbbc6bd9eab842e5f629d[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Nov 13 11:20:04 2014 -0800

    adapt the adjustment limit for rate correction factor in RTC mode
    
    Rate correction factor is used to correct the estimated rate for any
    given quantizer, and feeds into rate control for quantizer selection.
    We make use of the actual bits used to calculate this rate correction
    factor with an adjustment limit to prevent over-adjustment.
    
    This commit adapts the adjustment limit to the difference between the
    estimated bits and the actual bits, allows the adjustment limit to vary
    between 0.125 (when estimate is close to actual) and 0.625 (when there
    is >10X factor off between estimated and actual bits). By doing this,
    the commit appears to have largely corrected two observed issues:
    1. Adjustment is too [1;31mslow[m when the actual bits used is way off from
    estimate due to the small adjustment limit.
    2. Extreme oscillating quantizer choices due to the feedback loop.
    
    Change-Id: I4ee148d2c9d26d173b6c48011313ddb07ce2d7d6

[33mcommit f2b978e895afb8102a5f16b760450935914c08b0[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Nov 10 11:46:58 2014 -0800

    Use normal rate_correction_factor for gf in CBR mode
    
    I0c5f010 changed to allow update golden reference buffer in CBR mode,
    this commit changes the use of rate_correction_factor for those frames
    to be aligned with the new usage. This commit attempts to solve two
    issues:
    
    a. Initialization of rate correction factor for Golden Frame
    Prior to this patch, even the regular inter frame has been update
    the rate correction factor based on content and encoding results,
    the first golden frame would still use the ininitialized value
    that can be way off.
    
    b. Allowing rate correction factor update to be slightly faster
    Prior to this patch, when the rate correction factor is off, the
    update to the factor is too [1;31mslow[m, the factor could not get close
    to a semi-correct value even after many frames.
    
    The commit helps all clips in psnr/ssim metric, but especially to
    a few clip in RTC set that rate correction was way off. For example
    thaloundeskmtgvga gained about .5dB for both overall/average psnr.
    
    Change-Id: I0be5c41691be57891d824505348b64be87fa3545

[33mcommit 2134eb2f054baaec9a796784aeeafb0b669ff601[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Fri Oct 31 13:42:55 2014 -0700

    Remove pair quantization
    
    The intrinsics version of the pair quant is [1;31mslow[mer than running it
    individually.
    
    Change-Id: I7b4ea8599d4aab04be0a5a0c59b8b29a7fc283f4

[33mcommit 9f128b3ed9fc2f431444f7cea238a288fb0e470c[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Oct 17 08:58:28 2014 -0700

    Hybrid partition search for rtc coding mode
    
    This commit re-designs the recursive partition search scheme in
    rtc speed -5. It first checks if the current block is under cyclic
    refresh mode. If so, apply recursive partition search. Otherwise,
    perform sub-sampled pixel based partition selection. When the
    pre-selection finds the partition size should be 32x32 or above,
    use the partition size directly. Otherwise, apply partition search
    at nearby levels around the preset partition size.
    
    It is enabled in speed -5. The compression performance of rtc
    speed -5 is improved by 9.4%. Speed wise, the run-time goes [1;31mslow[mer
    from 1% to 10%.
    
    nik_720p, 1000 kbps
    33220 b/f, 38.977 dB, 10109 ms -> 33200 b/f, 39.119 dB, 10210 ms
    
    vidyo1_720p, 1000 kbps
    16536 b/f, 40.495 dB, 10119 ms -> 16536 b/f, 40.827 dB, 11287 ms
    
    Change-Id: I65adba352e3adc03bae50854ddaea1b421653c6c

[33mcommit feee7d97b797dff46e9eaef0871098dee463d508[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Wed Oct 1 11:57:47 2014 -0700

    Drop the very [1;31mslow[m BEST encoding from the lossless test.
    
    BEST is used in very few tests.
    
    Change-Id: I71880534fe5a44721e7bac8be49b5f71766c1e5f

[33mcommit 8d363882fda9d5640e794e7df7da07edfbba5fd6[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Aug 22 15:45:11 2014 -0700

    Choosing GOOD mode by default.
    
    This patch fixes [1;31mslow[m first pass problem. Mode could only be determined
    from the deadline value during frame encode call. Unfortunately, we use
    mode value before any encode calls during the first pass encoding (see
    set_speed_features() logic). The mode for the first pass must be different
    from BEST to make first pass fast.
    
    Change-Id: I562a7d32004ff631695d91c09a44d8a9076fd6b5

[33mcommit 9d41313e4bd28d3c504c26079cbe4a499e7eceb7[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu May 1 15:14:39 2014 -0700

    Decide the partitioning threshold from the variance histogram
    
    Before encoding a frame, calculate and store each 16x16 block's
    variance of source difference between last and current frame.
    Find partitioning threshold T for the frame from its variance
    histogram, and then use T to make partition decisions.
    
    Comparing with fixed 16x16 partitioning, rtc set test showed an
    overall psnr gain of 3.242%, and ssim gain of 3.751%. The best
    psnr gain is 8.653%.
    
    The overall encoding speed didn't change much. It got faster for
    some clips(for example, 12% speedup for vidyo1), and a little
    [1;31mslow[mer for others.
    
    Also, a minor modification was made in datarate unit test.
    
    Change-Id: Ie290743aa3814e83607b93831b667a2a49d0932c

[33mcommit f13c99562ca6a6a8a543a911cdf1d89a526d30eb[m
Merge: c40a968e1 dbfc3692e
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Jun 2 09:02:32 2014 -0700

    Merge "seeing a 10x [1;31mslow[ming down, revert now for investigation"

[33mcommit dbfc3692ebaf96ef54f8d4e541b1d6a12b326ac0[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Jun 2 09:02:19 2014 -0700

    seeing a 10x [1;31mslow[ming down, revert now for investigation
    
    Revert "Fix a problem of using an uninitialized parameter"
    
    This reverts commit 538af7db5ffe2ab560511a3bc0ae74dae9316c14
    
    Change-Id: I071aa9b7068ef515abb8ae9584df15067706ccb5

[33mcommit 7ab9a9587b96db4edce6be916c1f02297a9555ff[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue May 13 10:11:42 2014 -0700

    Remove Wextra warnings from vp9_sad.c
    
    As a side-effect, the max_sad check is removed from the
    C-implementation of VP8, for consistency with VP9, and to
    ensure that the SAD tests common to VP8/VP9 pass.
    That will make the VP8 C implementation of sad a little [1;31mslow[mer
    but given that is rarely used in practice, the impact will be
    minimal.
    
    Change-Id: I7f43089fdea047fbf1862e40c21e4715c30f07ca

[33mcommit 0639b5cff5ac3e476f0ee76c3c3f51fdc9fd2758[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Mar 28 15:21:26 2014 +0000

    Speed 2 alternative balance.
    
    A previous path improved speed 2 quality a little but
    more extensive testing showed that it [1;31mslow[med encode
    by a few %.
    
    The change will have a similar effect for speed 3 but
    should not impact speeds 4+;
    
    This experiment should reverse that and give a speed
    up at the cost of a small quality loss.
    
    Borg results pending.
    
    Change-Id: I4493fc1541aaf44587f1a41ff219f7088da9252c

[33mcommit 06ec873f2c97d8b60b28a346d2e868badbd98d2d[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Apr 4 15:59:10 2014 -0700

    Select prediction filter type in non-RD mode decision
    
    This commit allows the non-RD mode decision flow to  select
    prediction filter type in NEWMV mode. It provides 8.14% compression
    performance gains in both settings of AQ=0 and 3. The current speed
    impact is about 5% to 10% [1;31mslow[mer.
    
    Change-Id: Id66ecebf77abd8f90fb3f6a066c0e8dfb4bf1c42

[33mcommit 01148d4548de6b0b8f6f277736580127cf7afe8b[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Mar 24 18:11:47 2014 +0000

    Further speed trade off adjustments.
    
    Small speed gain for speed 1.
    
    Quality is generally a little up for speed 2.
    
    Speed 3 was similar to speed 4 but now positioned more
    evenly between 2 and 4 speed and quality wise.
       (opsnr +5.6% ssim +8.25% across all sets)
    
    Speed 4 is a little [1;31mslow[mer than before but sizable quality gains.
       (opsnr +3.7% ssim +6.8% across all sets)
    
    The code has been cleaned up a bit so that for each incremental
    speed step changes over the previous speed step are applied.
    This makes it easier to see what is changing from one setting to
    the next.
    
    Change-Id: I2d98d0d6230af23486adaec01908f58942a7cdeb

[33mcommit 32c4fdec7862657bc3865ca0f2dd151ee0e45646[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Mar 21 16:14:46 2014 +0000

    Experimental change to speed 1 settings.
    
    Allow tx search for ARF and GF helps quality but a little [1;31mslow[mer.
    Setting subpel_iters_per_step to 1 improves encode speed.
    Setting sf->mode_skip_start = 10 improves speed.
    
    Initial local results suggest overall impact on quality is neutral
    but encode is up to 15% faster.
    
    Change-Id: Ibde02cae6626a44c10a1da0cefe888afbb51f037

[33mcommit abdb0650b41eb635e9c8a26f0712dcf57a013a9a[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Mar 26 13:00:06 2014 -0700

    Motion referenced partition search for non-RD coding flow
    
    This commit enables the non-RD mode decision coding flow to
    adaptively apply partition search in non-refresh frame, when the
    collocated block in previous frame suggests there might be a motion
    activity. It refactors the update_state_rt() function to support
    buffer swap of mode_info struct, thereby unifying the encoding
    stage across various non-RD coding modes.
    
    It provides 5% compression performance gains in speed -6 for rtc
    test set, at about 12% speed [1;31mslow[m down.
    
    Change-Id: Iefa374aed5a11c4b7ff9a3ed36a98ea8bd184edb

[33mcommit 1f7558949f54b65d233c45f4597e5e62b01f909f[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Wed Mar 12 11:22:49 2014 -0700

    Remove the vp8_vpxyv12_copy_y_neon.
    
    vp8_vpxyv12_copy_y_neon is [1;31mslow[mer than vp8_vpxyv12_copy_y_c.
    
    Change-Id: I7ba860619dc0714d700f232242ce915620461587

[33mcommit 5d185d107b8ff8f72a4c16cb322b0576c261a9f0[m
Merge: 954dbb282 6505b0753
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu Mar 13 06:08:29 2014 -0700

    Merge "datarate_test renaming with suffix large because it is [1;31mslow[m."

[33mcommit 6505b07537a73728ad1d0ae87dd8f462010545e5[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Mar 12 17:20:16 2014 -0700

    datarate_test renaming with suffix large because it is [1;31mslow[m.
    
    Change-Id: I5cdff078159a379bc48f1d8e249e144c6d27c946

[33mcommit d2059b0d2de0d43f1a1938c546e72847215b008c[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Mar 7 14:06:20 2014 -0800

    Skip mode check when mv has been tested
    
    This commit allows the non-RD mode decision to skip mode RD modelling
    check, if the motion vector associated with the current mode is
    same as that of NEARESTMV mode. This makes speed -7 about 2% faster.
    Previous change that converts cost metric from SAD to model based RD
    value makes the codec 6% [1;31mslow[mer at speed -7.
    
    Change-Id: I30cfec5452f606a671b8432a2f7f0c94fbb49fc8

[33mcommit c30d5703e5078337b7e01213145ae758d74df450[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Feb 26 09:52:23 2014 -0800

    Run sub-pixel motion search for NEWMV mode test
    
    As Yunqing suggested, this commit makes non-RD mode decision always run
    sub-pixel motion search in NEWMV mode. The compression performance
    gains becomes fairly significant after we enabled sub-pixel accuracy
    motion compensated prediction to calculate SAD cost.
    
    For test sequences pedestrian_area at 1080p and vidyo1 at 720p, the
    runtime goes [1;31mslow[mer by 5%. For rtc test set, the compression performance
    is improved by 21.20%.
    
    Change-Id: I38cbfdd5c53d79423e1fafb3154f8ddeed63bbf0

[33mcommit c0e99f84f9c2ff909020a7ce76f60d1f78b56fc7[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Feb 25 16:12:35 2014 -0800

    Use sub-pixel accuracy prediction non-RD mode
    
    This commit builds the actual prediction block in sub-pixel accuracy
    and uses which to calculate SAD for non-RD mode decision. In the trail
    run on pedestrian_area at 1080p, rtc speed -7 runtime goes from
    23495 ms -> 25107 ms (7% [1;31mslow[mer). The compression performance is
    improved by 20.57% for rtc test set.
    
    Change-Id: I438589cd103fe99f1b50c2d1939ac6ca43fa0157

[33mcommit ea8aaf15b55a19f569c328f26cc8d8ad82a9235c[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Jan 29 08:39:39 2014 -0800

    create super fast rtc mode
    
    This patch only works if the video is a width and height that are both
    a multiple of 32..   It sets every partition to 16x16, and does INTRADC
    only on the first frame and ZEROMV on every other frame.   It always does
    does the largest possible transform, and loop filter level is set to 4.
    
    Was ~20% faster than speed -5 of vp8
    
    Now 20% [1;31mslow[mer but adds motion search ( every block ), nearest, near
    and zeromv
    
    The SVC test was changed because - while this realtime mode produces
    bad quality albeit quickly, it isn't obeying all the rules it should
    about which frames are available.
    
    Change-Id: I235c0b22573957986d41497dfb84568ec1dec8c7
For keyword fast:
[33mcommit 594890a534bc1beb4fb7f00e9bf134ca43ed6729[m
Merge: 8fdddd5c0 54eda13f8
Author: Jingning Han <jingning@google.com>
Date:   Thu Mar 12 09:23:41 2015 -0700

    Merge "Apply [1;31mfast[m motion search to golden reference frame"

[33mcommit 54eda13f8df587fe0a5a202f232f66863aff445a[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Mar 9 18:55:38 2015 -0700

    Apply [1;31mfast[m motion search to golden reference frame
    
    This commit enables the rtc coding mode to run integral projection
    based motion search for golden reference frame. It improves the
    speed -6 compression performance by 1.1% on average, 3.46% for
    jimred_vga, 6.46% for tacomascmvvga, and 0.5% for vidyo clips. The
    speed -6 is about 6% slower.
    
    Change-Id: I0fe402ad2edf0149d0349ad304ab9b2abdf0c804

[33mcommit 6245a91e0b4fc4b1d1382f95991cc0ea2b3fc991[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Mar 9 10:59:29 2015 -0700

    Skip golden ref frame check when it is same as last ref frame
    
    When golden reference frame is refreshed, the next frame has both
    its last and golden reference frames point to the same reference
    frame in real-time coding mode. Experiments suggest that using
    two separate reference frames for frames right after golden refresh
    frame does not provide further compression performance advantage.
    This commit hence retains the current encoder implementation and
    shuts off the mode search over golden reference frame in this case.
    
    It makes the encoder run slightly [1;31mfast[mer at no coding performance
    change.
    
    Change-Id: I1561f7799253a10e675d05c63c1749fe9e85b472

[33mcommit 2deecdd5cbedfa977d3c3afd2d80df8242ce54b2[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Mar 4 10:28:33 2015 -0800

    Move integral projection motion search to vp9_mcomp.c
    
    Make it a general purpose [1;31mfast[m motion estimation function, to be
    used in the mode search process.
    
    Change-Id: Ib354cb0e664dc61c30c0b2314297835ee75b157a

[33mcommit ed2dc59c1b363ab510344b28ee0367c50c5080c4[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 13 11:23:45 2015 -0800

    Integral projection based motion estimation
    
    This commit introduces a new block match motion estimation
    using integral projection measurement. The 2-D block and the nearby
    region is projected onto the horizontal and vertical 1-D vectors,
    respectively. It then runs vector match, instead of block match,
    over the two separate 1-D vectors to locate the motion compensated
    reference block.
    
    This process is run per 64x64 block to align the reference before
    choosing partitioning in speed 6. The overall CPU cycle cost due
    to this additional 64x64 block match (SSE2 version) takes around 2%
    at low bit-rate rtc speed 6. When strong motion activities exist in
    the video sequence, it substantially improves the partition
    selection accuracy, thereby achieving better compression performance
    and lower CPU cycles.
    
    The experiments were tested in RTC speed -6 setting:
    cloud 1080p 500 kbps
    17006 b/f, 37.086 dB, 5386 ms ->
    16669 b/f, 37.970 dB, 5085 ms (>0.9dB gain and 6% [1;31mfast[mer)
    
    pedestrian_area 1080p 500 kbps
    53537 b/f, 36.771 dB, 18706 ms ->
    51897 b/f, 36.792 dB, 18585 ms (4% bit-rate savings)
    
    blue_sky 1080p 500 kbps
    70214 b/f, 33.600 dB, 13979 ms ->
    53885 b/f, 33.645 dB, 10878 ms (30% bit-rate savings, 25% [1;31mfast[mer)
    
    jimred 400 kbps
    13380 b/f, 36.014 dB, 5723 ms ->
    13377 b/f, 36.087 dB, 5831 ms  (2% bit-rate savings, 2% slower)
    
    Change-Id: Iffdb6ea5b16b77016bfa3dd3904d284168ae649c

[33mcommit aaccf6566de2d5c0401684a9369fea8cc07b2d17[m
Author: James Zern <jzern@google.com>
Date:   Thu Feb 5 19:31:38 2015 -0800

    configure: add --(disable|enable)-dependency-tracking
    
    defaults to enabled. when disabled skips dependency file (.d) generation
    allowing for [1;31mfast[mer one-time builds.
    
    Change-Id: I2d7d7f905f1663315b8eb2b2e81fffb6fcb15829

[33mcommit cc7fac39d5e733e3cddd48a40072c0cfb1ec2689[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Jan 29 11:33:50 2015 -0800

    Enable use_x86inc for 32bit pic enabled Darwin target
    
    The previous patch "Fix issues in 32bit PIC enabled build" fixed
    the x86inc.asm for macho32. Now we can enable use_x86inc while
    building libvpx for 32bit pic enabled Darwin target, which makes
    the encoder a lot [1;31mfast[mer(>2X) in this case by turning on the
    existing optimizations.
    
    Change-Id: I5f5c7add428d73f50c935c48d0a70aed2b1eb7af

[33mcommit bde04ce5039cbcf86c8b34bdb4127e18d7e1d0c7[m
Merge: 0dccb6277 d05cf10fe
Author: Hangyu Kuang <hkuang@google.com>
Date:   Wed Jan 21 14:51:08 2015 -0800

    Merge branch 'frame-parallel' to enable frame parallel decode in master branch.
    
    In frame parallel decode, libvpx decoder decodes several frames on all
    cpus in parallel fashion. If not being flushed, it will only return frame
    when all the cpus are busy. If getting flushed, it will return all the
    frames in the decoder. Compare with current serial decode mode in which
    libvpx decoder is idle between decode calls, libvpx decoder is busy
    between decode calls. VP9 frame parallel decode is >30% [1;31mfast[mer than serial
    decode with tile parallel threading which will makes devices play 1080P
    VP9 videos more easily.
    
    * frame-parallel:
      Add error handling for frame parallel decode and unit test for that.
      Fix a bug in frame parallel decode and add a unit test for that.
      Add two test vectors to test frame parallel decode.
      Add key frame seeking to webmdec and webm_video_source.
      Implement frame parallel decode for VP9.
      Increase the thread test range to cover 5, 6, 7, 8 threads.
      Fix a bug in adding frame parallel unit test.
      Add VP9 frame-parallel unit test.
      Manually pick "Make the api behavior conform to api spec." from master branch.
      Move vp9_dec_build_inter_predictors_* to decoder folder.
      Add segmentation map array for current and last frame segmentation.
      Include the right header for VP9 worker thread.
      Move vp9_thread.* to common.
      ctrl_get_reference does not need user_priv.
      Seperate the frame buffers from VP9 encoder/decoder structure.
      Revert "Revert "Revert "Revert 3 patches from Hangyu to get Chrome to build:"""
    
     Conflicts:
           test/codec_factory.h
           test/decode_test_driver.cc
           test/decode_test_driver.h
           test/invalid_file_test.cc
           test/test-data.sha1
           test/test.mk
           test/test_vectors.cc
           vp8/vp8_dx_iface.c
           vp9/common/vp9_alloccommon.c
           vp9/common/vp9_entropymode.c
           vp9/common/vp9_loopfilter_thread.c
           vp9/common/vp9_loopfilter_thread.h
           vp9/common/vp9_mvref_common.c
           vp9/common/vp9_onyxc_int.h
           vp9/common/vp9_reconinter.c
           vp9/decoder/vp9_decodeframe.c
           vp9/decoder/vp9_decodeframe.h
           vp9/decoder/vp9_decodemv.c
           vp9/decoder/vp9_decoder.c
           vp9/decoder/vp9_decoder.h
           vp9/encoder/vp9_encoder.c
           vp9/encoder/vp9_pickmode.c
           vp9/encoder/vp9_rdopt.c
           vp9/vp9_cx_iface.c
           vp9/vp9_dx_iface.c
    
    Change-Id: Ib92eb35851c172d0624970e312ed515054e5ca64

[33mcommit ea061a885deea564e52145d3affaf33c0f7871a6[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jan 7 18:30:50 2015 -0800

    Refactor denoiser frame buffer update
    
    Use frame buffer pointer swap instead of memcpy when possible.
    These two CLs make the denoiser when running on vidyo1 720p at
    speed -6 over 10% [1;31mfast[mer.
    
    Change-Id: I64fe8a2422cafca6787a50c7f4dfb961191c0a9d

[33mcommit 5c22224e9e43befc414cce2cf163616c9d56b0d3[m
Author: Peter de Rivaz <peter.derivaz@gmail.com>
Date:   Thu Dec 11 15:54:23 2014 +0000

    Corrected optimization of 8x8 DCT code
    
    The 8x8 DCT uses a [1;31mfast[m version whenever possible.
    There was a mistake in the checking code which
    meant sometimes the [1;31mfast[m version was used when it
    was not safe to do so.
    
    Change-Id: I154c84c9e2d836764768a11082947ca30f4b5ab7
    (cherry picked from commit fd05fb0c21e253b4d6f92d7e0b752850ff8ab188)

[33mcommit 9d88b308541669131d8b7c3b3f33d1869ae15556[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Dec 5 10:38:09 2014 -0800

    Remove redundant vp9_zero in choose_partitioning
    
    It makes the overall speed -6 about 2% [1;31mfast[mer with no compression
    performance change.
    
    Change-Id: I680a967b421caa2c5a5cdb821311c4726a2df45a

[33mcommit c6908fd5f744552db044dd034f88967e5fd980b4[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Nov 18 11:53:14 2014 -0800

    Combine fdct8x8 and quantization process
    
    This commit reworks the forward transform and quantization process
    for 8x8 block coding. It combines the two operations in a single
    function to save a store/load stage of the original transform
    coefficients. Overall the speed -6 is slightly [1;31mfast[mer (around 1%
    range). The compression performance of speed -6 is improved by
    3.4%.
    
    Change-Id: Id6628daef123f3e4649248735ec2ad7423629387

[33mcommit f2b978e895afb8102a5f16b760450935914c08b0[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Nov 10 11:46:58 2014 -0800

    Use normal rate_correction_factor for gf in CBR mode
    
    I0c5f010 changed to allow update golden reference buffer in CBR mode,
    this commit changes the use of rate_correction_factor for those frames
    to be aligned with the new usage. This commit attempts to solve two
    issues:
    
    a. Initialization of rate correction factor for Golden Frame
    Prior to this patch, even the regular inter frame has been update
    the rate correction factor based on content and encoding results,
    the first golden frame would still use the ininitialized value
    that can be way off.
    
    b. Allowing rate correction factor update to be slightly [1;31mfast[mer
    Prior to this patch, when the rate correction factor is off, the
    update to the factor is too slow, the factor could not get close
    to a semi-correct value even after many frames.
    
    The commit helps all clips in psnr/ssim metric, but especially to
    a few clip in RTC set that rate correction was way off. For example
    thaloundeskmtgvga gained about .5dB for both overall/average psnr.
    
    Change-Id: I0be5c41691be57891d824505348b64be87fa3545

[33mcommit 6eec73a747f3d14d327cdc33279de96d0deb48c8[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Jul 31 14:19:31 2014 -0700

    Remove asm offset dependencies
    
    The obj_int_extract code is no longer worth maintaining. It creates
    significant issues when adapting for different build systems and no
    longer offers as significant of a performance benefit due to
    improvements in intrinsics.
    
    Source files will remain until the various third-party builds are updated.
    
    The neon [1;31mfast[m quantizer has been moved to intrinsics. The armv6 version
    has been removed because so few remaining targets require it.
    
    Compilers and processors have improved significantly since the
    pack_tokens code was written. The assembly is no longer [1;31mfast[mer than the
    C code.
    
    pack_tokens were the only optimizations for the armv5te targets so the targets
    will be removed after the test infrastructure has been updated.
    
    BUG=710
    
    Change-Id: Ic785b167cd9f95eeff31c7c76b7b736c07fb30eb

[33mcommit caaf63b2c4d5e4ae18f0ae796fb92e4509450a0d[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Nov 4 14:32:04 2014 -0800

    Rework cut-off decisions in cyclic refresh aq mode
    
    This commit removes the cyclic aq mode dependency on
    in_static_area and reworks the corresponding cut-off thresholds.
    It improves the compression performance of speed -5 by 1.47% in
    PSNR and 2.07% in SSIM, and the compression performance of speed
    -6 by 3.10% in PSNR and 5.25% in SSIM. Speed wise, about 1% [1;31mfast[mer
    in both settings at high bit-rates.
    
    Change-Id: I1ffc775afdc047964448d9dff5751491ba4ff4a9

[33mcommit 7ae75c3d525d79b9b28652fb34082cf81a5de9ab[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Oct 20 16:03:28 2014 -0700

    vp8 quantization -> intrinsics
    
    Use intrinsics for neon quantization. Slight loss (<5%) of performance
    compared to the assembly. Roughly 10x [1;31mfast[mer on arm64 because that was
    running C code before.
    
    Change-Id: I7cf5242d8f29b7eab5bca6a1c20c89c9fc9ca66d

[33mcommit 9ce3a7d76c5ef702337b96b9aa2c944da1b31869[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Wed Jul 30 20:43:40 2014 -0700

    Implement frame parallel decode for VP9.
    
    Using 4 threads, frame parallel decode is ~3x [1;31mfast[mer than single thread
    decode and around 30% [1;31mfast[mer than tile parallel decode for frame parallel
    encoded video on both Android and desktop with 4 threads. Decode speed is
    scalable to threads too which means decode could be even [1;31mfast[mer with more threads.
    
    Change-Id: Ia0a549aaa3e83b5a17b31d8299aa496ea4f21e3e

[33mcommit 5e766ccee030a207a2edd37a5f7012665bc43796[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 15 12:18:48 2014 -0700

    Use rate/distortion thresholds to control non-RD partition search
    
    Compare the estimated rate and distortion to the thresholds scaled
    according to the operating block size and determine if further
    split partition search will be run. The compression performance of
    speed -5 is changed by -0.074%. The encoding speed is 10% - 15%
    [1;31mfast[mer.
    
    vidyo1 720p
    16545 b/f, 40.492 dB, 11475 ms -> 16535 b/f, 40.486 dB, 10100 ms
    
    nik720p
    16624 b/f, 36.310 dB, 10071 ms -> 16617 b/f, 36.313 dB, 8346 ms
    
    Change-Id: Ic9197ab5761279ae55d2fb7813b2af0e0db497b8

[33mcommit d78dbff09a1b3166fdd5be07b5227179e6e2dfcb[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Oct 7 02:48:08 2014 -0700

    Subpel search cleanups and enhancements
    
    - Some fixes to surface fit.
    - Returns variance function as cost rather than sad in the
      pattern search and diamond search functions. Only
      vp9_pattern_search_sad function used in bigdia search
      uses sad as integer 1-away costs.
    - Deploys SUBPEL_TREE_PRUNED_MORE for speed 4+.
    
    Results:
    derf [Speed 3]: About +0.036% in coding efficiency without any
    discernible speed loss.
    derf [Speed 4]: About 2-3% [1;31mfast[mer at -0.199% loss in coding efficiency.
    derf [Speed 5]: About 3-4% [1;31mfast[mer at -0.149% loss in coding efficiency.
    
    Change-Id: I8462f94f6adb46966ca964f2bd0400977357fd63

[33mcommit 6f6bd282c97e7161c847ac64d9758838c65444bf[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Sep 2 10:50:12 2014 -0700

    Replacing asm 16x16 variance calculation with intrinsics.
    
    New code is 20% [1;31mfast[mer for 64-bit and 15% [1;31mfast[mer for 32-bit. Compiled
    using clang.
    
    Change-Id: Icfea461238411001fd093561293dbfedfbf8d0bb

[33mcommit 0b721db543538672189cdf34fb73b7dbaa4f9415[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Aug 29 14:25:31 2014 -0700

    Replacing asm 8x8 variance calculation with intrinsics.
    
    New code is 10% [1;31mfast[mer for 64-bit and 25% [1;31mfast[mer for 32-bit. Compiled
    using clang.
    
    Change-Id: I8ba1544c30dd6f3ca479db806384317549650dfc

[33mcommit dcac083cf3550b4b2a22e50e9a80a731192e25b6[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Aug 27 17:39:44 2014 -0700

    Implementing 4x4 variance calculation with SSE2.
    
    New SSE2 function is three times [1;31mfast[mer than MMX one.
    
    Change-Id: I4f387ce9f75b88379176ec7bdc62d86eb5f70fbe

[33mcommit ec7ce316d2dff305bb068301301c498d9964ed1e[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Aug 26 12:34:54 2014 -0700

    Use max txfm size unit in rate-distortion cost modeling
    
    This commit makes the rate distortion modeling run in the unit of
    maximum transform block size. No compression/speed change observed.
    It is for the use of later [1;31mfast[m forward transform purpose.
    
    Change-Id: Ibaaedb69c765e8d0c5d5012f0ec07f36fd9f68fd

[33mcommit 8d363882fda9d5640e794e7df7da07edfbba5fd6[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Aug 22 15:45:11 2014 -0700

    Choosing GOOD mode by default.
    
    This patch fixes slow first pass problem. Mode could only be determined
    from the deadline value during frame encode call. Unfortunately, we use
    mode value before any encode calls during the first pass encoding (see
    set_speed_features() logic). The mode for the first pass must be different
    from BEST to make first pass [1;31mfast[m.
    
    Change-Id: I562a7d32004ff631695d91c09a44d8a9076fd6b5

[33mcommit c2c03f2b58cc4c821cd0ac38e5eb6de705fff415[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Wed Aug 13 12:45:03 2014 -0700

    Remove unused vp8 quantize functions
    
    Exact [1;31mfast[m quantize and inexact regular quantize are unused.
    
    Change-Id: I5a81f5059c896c919f70038af7de04d63823d26d

[33mcommit 245e57c78e9d78db0caa493194f0c0ec9b05eacc[m
Merge: 3839fd771 b4b09c979
Author: Jingning Han <jingning@google.com>
Date:   Mon Aug 11 17:56:48 2014 -0700

    Merge "Enable [1;31mfast[m forward txfm and quant for rate-distortion search"

[33mcommit 5b63c2797a50a6a007a9b20377b071cd0aa6d702[m
Merge: 9da4cd94f 8684c2326
Author: Jingning Han <jingning@google.com>
Date:   Mon Aug 11 08:53:34 2014 -0700

    Merge "Integrate [1;31mfast[m txfm and quant path into skip_recode system"

[33mcommit b4b09c97964d41134af2d58c48ae13f72ab40719[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 6 22:48:37 2014 -0700

    Enable [1;31mfast[m forward txfm and quant for rate-distortion search
    
    This commit enables encoder to select [1;31mfast[m forward transform and
    quantization path according to the prediction residual sse/variance,
    in the rate-distortion optimization scheme.
    
    Change-Id: Ief9fc3844fd4107166d401970e800c6e5ce2b5fe

[33mcommit 8684c232600997df2c8e41a2708cafee97086a99[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 6 16:11:22 2014 -0700

    Integrate [1;31mfast[m txfm and quant path into skip_recode system
    
    This commit integrates the [1;31mfast[m transform and quantization process
    into skip_recode scheme in the rate-distortion optimization loop.
    Previously the [1;31mfast[m transform and quantization process was only
    enabled for non-RD coding flow.
    
    Change-Id: Ib7db4d39b7033f1495c75897271f769799198ba8

[33mcommit ffd221366067ceda66e68d74778bf1b2d077188a[m
Merge: 6214038be 00fc0e3ff
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 7 12:07:09 2014 -0700

    Merge "Tune SSSE3 implementation of [1;31mfast[m path quantization"

[33mcommit 00fc0e3ff5e34472efc652686703493387fe36ee[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 7 11:04:37 2014 -0700

    Tune SSSE3 implementation of [1;31mfast[m path quantization
    
    This commit further simplifies the SSSE3 implementation of the [1;31mfast[m
    path quantization process.
    
    Change-Id: I5be3286ec0f1bd81d1cf5be3168fece6384fb9ca

[33mcommit 9ac2f6632044ad2ec268ed4921c31391f30ecd0c[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 1 16:10:44 2014 -0700

    Re-design quantization process
    
    This commit re-designs the quantization process for transform
    coefficient blocks of size 4x4 to 16x16. It improves compression
    performance for speed 7 by 3.85%. The SSSE3 version for the
    new quantization process is included.
    
    The average runtime of the 8x8 block quantization is reduced
    from 285 cycles -> 255 cycles, i.e., over 10% [1;31mfast[mer.
    
    Change-Id: I61278aa02efc70599b962d3314671db5b0446a50

[33mcommit 9d41313e4bd28d3c504c26079cbe4a499e7eceb7[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu May 1 15:14:39 2014 -0700

    Decide the partitioning threshold from the variance histogram
    
    Before encoding a frame, calculate and store each 16x16 block's
    variance of source difference between last and current frame.
    Find partitioning threshold T for the frame from its variance
    histogram, and then use T to make partition decisions.
    
    Comparing with fixed 16x16 partitioning, rtc set test showed an
    overall psnr gain of 3.242%, and ssim gain of 3.751%. The best
    psnr gain is 8.653%.
    
    The overall encoding speed didn't change much. It got [1;31mfast[mer for
    some clips(for example, 12% speedup for vidyo1), and a little
    slower for others.
    
    Also, a minor modification was made in datarate unit test.
    
    Change-Id: Ie290743aa3814e83607b93831b667a2a49d0932c

[33mcommit 5d0881237e1f8394b80cd1045168393745bf2f11[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu Jun 26 16:21:14 2014 -0700

    Add a CPU speed test with screen content.
    
    Encoding screen content exercises various [1;31mfast[m skip paths that are
    missed by natural video content.
    
    Change-Id: Ie359884ef9be89cbe5dda6d82f1f79360604a090

[33mcommit 46ea9ec7193ae3ee8401f8a1214dcf1b5a3fc899[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jun 24 10:45:31 2014 -0700

    Enable real-time version reference motion vector search
    
    This commit enables a [1;31mfast[m reference motion vector search scheme.
    It checks the nearest top and left neighboring blocks to decide the
    most probable predicted motion vector. If it finds the two have
    the same motion vectors, it then skip finding exterior range for
    the second most probable motion vector, and correspondingly skips
    the check for NEARMV.
    
    The runtime of speed -5 goes down
    pedestrian at 1080p 29377 ms -> 27783 ms
    vidyo at 720p       11830 ms -> 10990 ms
    i.e., 6%-8% speed-up.
    
    For rtc set, the compression performance
    goes down by about -1.3% for both speed -5 and -6.
    
    Change-Id: I2a7794fa99734f739f8b30519ad4dfd511ab91a5

[33mcommit ccba289f8d1760a45b972685a64eb829529b70ab[m
Author: Jingning Han <jingning@google.com>
Date:   Thu May 29 18:14:17 2014 -0700

    Fast computation path for forward transform and quantization
    
    This commit enables a [1;31mfast[m path computational flow for forward
    transformation. It checks the sse and variance of prediction
    residuals and decides if the quantized coefficients are all
    zero, dc only, or more. It then selects the corresponding coding
    path in the forward transformation and quantization stage.
    
    It is currently enabled in rtc coding mode. Will do it for rd
    coding mode next.
    
    In speed -6, the runtime for pedestrian_area 1080p at 1000 kbps
    goes down from 14234 ms to 13704 ms, i.e., about 4% speed-up.
    Overall coding performance for rtc set is changed by -0.18%.
    
    Change-Id: I0452da1786d59bc8bcbe0a35fdae9f623d1d44e1

[33mcommit 734c5ffa2c003e8668ae8b58413064c98591f3fd[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Apr 23 14:54:16 2014 -0700

    Apply constrained partition search range to non-RD mode decision
    
    This commit enables a chessboard pattern for partition search. All
    the black blocks run regular partition search ranging from 8x8 to
    32x32. The rest white blocks take the nearby blocks' information
    to adaptively decide the effective search range.
    
    The compression performance for rtc set at speed -5 is down by 1.5%.
    For pedestrian 1080p at speed -5, the runtime goes from 41594 ms to
    39697 ms, i.e., about 5% [1;31mfast[mer.
    
    Change-Id: Ia4b96e237abfaada487c743bca08fe1afd298685

[33mcommit 9e7b09bc5d45e309c0deeb1c95981ccb7b857876[m
Author: Jingning Han <jingning@google.com>
Date:   Fri May 2 16:29:08 2014 -0700

    SSSE3 8x8 inverse 2D-DCT with first 10 coeffs non-zero
    
    This commit enables ssse3 assembly implementation of the 8x8
    inverse 2D-DCT with only first 10 coefficients non-zero. The
    average runtime for this unit goes down from 198 cycles to 129
    cycles (34.8% [1;31mfast[mer).
    
    Change-Id: Ie7fa4386f6d3a2fe0d47a2eb26fc2a6bbc592ac7

[33mcommit 89fbf3de501b5d7fd90047192521eae3198705cd[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Mon May 5 14:10:41 2014 -0700

    Add an MMX fwht4x4
    
    7% [1;31mfast[mer encoding a desktop lossless at RT speed 4.
    
    Change-Id: I41627f5b737752616b6512bb91a36ec45995bf64

[33mcommit 1eaa3a76dc50fc8451cedbf4797d7e3b7a2d77d7[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Apr 23 09:13:45 2014 -0700

    Enable SSSE3 implementation of 8x8 forward 2D-DCT
    
    Assembly implementation of ssse3 8x8 forward 2D-DCT. The current
    version is turned on only for x86_64. The average unit runtime
    goes from 157 cycles down to 136 cycles, i.e., about 12.8% [1;31mfast[mer.
    This translates into about 1.5% speed-up for pedestrian_area 1080p
    at speed 2.
    
    Change-Id: I0f12435857e9425ed7ce12541344dfa16837f4f4

[33mcommit e88a28057311c24d61f1b122cdf7aa4d2685434e[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Apr 15 11:41:39 2014 -0700

    Enable more precise background detection for partition decision
    
    This commit compares the current original frame to the previous
    original frame at 64x64 block level and decides if the entire
    block belongs to background area. If it is in the background area,
    skip non-RD partition search and copy the partition types of the
    collocated block in the previous frame.
    
    For vidyo1 in the rtc set, this makes the speed -5 coding speed
    about 8% [1;31mfast[mer. The overall compression performance is down by
    1.37% for rtc set.
    
    Change-Id: Iccf920562fcc88f21d377fb6a44c547c8689b7ea

[33mcommit 32c4fdec7862657bc3865ca0f2dd151ee0e45646[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Mar 21 16:14:46 2014 +0000

    Experimental change to speed 1 settings.
    
    Allow tx search for ARF and GF helps quality but a little slower.
    Setting subpel_iters_per_step to 1 improves encode speed.
    Setting sf->mode_skip_start = 10 improves speed.
    
    Initial local results suggest overall impact on quality is neutral
    but encode is up to 15% [1;31mfast[mer.
    
    Change-Id: Ibde02cae6626a44c10a1da0cefe888afbb51f037

[33mcommit 355b8baf5599ab870d12f60409a854f3792050ac[m
Merge: 2786938a3 bbfbbbf67
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Mar 21 21:19:31 2014 -0700

    Merge "Convert use_[1;31mfast[m_lpf_pick to an enum."

[33mcommit bbfbbbf672521c001b672836980e14e497a34355[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Fri Mar 21 14:59:26 2014 -0700

    Convert use_[1;31mfast[m_lpf_pick to an enum.
    
    Change-Id: I06e17b489dea74dedea356c73ef72dc5ffad3a30

[33mcommit 44a203f5cd55e82dbf9463bbe317e1a855756950[m
Merge: 04e7607bd bead2e8fb
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Mar 10 09:53:21 2014 -0700

    Merge "Support for a [1;31mfast[m diamond search"

[33mcommit bead2e8fb455ae770379f9ac1a21553db7765889[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Mar 7 17:15:09 2014 -0800

    Support for a [1;31mfast[m diamond search
    
    Adds a [1;31mfast[m diamond search which is about 5% [1;31mfast[mer than FAST_HEX
    with only a 0.1% drop in psnr when turned on for both speeds 5 and 7.
    This search is turned on for speed 7.
    
    Change-Id: I497630aa88a5148926086bb3038e7975e5f4eb98

[33mcommit d2059b0d2de0d43f1a1938c546e72847215b008c[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Mar 7 14:06:20 2014 -0800

    Skip mode check when mv has been tested
    
    This commit allows the non-RD mode decision to skip mode RD modelling
    check, if the motion vector associated with the current mode is
    same as that of NEARESTMV mode. This makes speed -7 about 2% [1;31mfast[mer.
    Previous change that converts cost metric from SAD to model based RD
    value makes the codec 6% slower at speed -7.
    
    Change-Id: I30cfec5452f606a671b8432a2f7f0c94fbb49fc8

[33mcommit b80020d4db1761cfb312de7236cb27363e7c32cd[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Feb 28 14:29:22 2014 -0800

    Refactoring motion search libs
    
    The core motion estimation fucntions all return sad now consistently.
    The only exception is vp9_full_pixel_diamond(), however the core diamond
    and refining search routines called from vp9_full_pixel_diamond() also
    return SAD. If variance of pred error + mv cost is desired it must be
    calculated explicitly outside these functions. For very [1;31mfast[m encoding,
    hopefully this will eliminate some redundant computations.
    
    Also suggests reimplementing FAST_HEX with the vp9_pattern_search
    framework. It is not exactly the same as the existing FAST_HEX, but
    performance is slightly better and speed is very similar. Enables
    removing a lot of duplicate code.
    
    Change-Id: I152736393438c25bdf7e96b37cbb8ce330f4f94a

[33mcommit 17b1e92d6cdf2fbb9ae984b6d36465d3c9b7b3f3[m
Merge: 44078390f e6fd07124
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Feb 28 08:29:02 2014 -0800

    Merge "Enable using [1;31mfast[m HEX search in non-rd pick mode"

[33mcommit e6fd071243f83dab27b9028ee75b3424664eb72a[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Feb 27 09:16:25 2014 -0800

    Enable using [1;31mfast[m HEX search in non-rd pick mode
    
    Added [1;31mfast[m HEX search while doing non-rd partition picking to
    speed up the encoder.
    
    Borg test(speed 7) on rtc set showed 1.8% overall PSNR loss.
    Encoder speedup was 5% - 15% for different rtc clips.
    
    Change-Id: I9c83026eabc70b69fcc747c90369ec60bfa3ca24

[33mcommit d66a63f02b4fe6c4ba310b8dff384c00f3dcd5ce[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Feb 19 15:30:09 2014 -0800

    Enable reduced set of intra modes in rtc coding
    
    This commit enables the use of DC, vertical, and horizontal intra
    prediction mode in rtc non-RD mode decision. When the best cost value
    of inter modes is above a given threshold, the encoder runs the
    above three intra modes and selects the one that has minimum
    prediction residual in terms of SAD.
    
    This together with recent changes on non-RD mode decision and coding
    control improves compression performance of speed -6 by
    derf  91%
    yt    61%
    hd    46%
    stdhd 52%
    
    In terms of encoding speed, it is about 3 times [1;31mfast[mer than speed -5.
    
    Change-Id: I6b483bfd0307e6482bb22a6676ae4e25a52b1310

[33mcommit cde6b50cb15947be71014c011824f962e30bb6f6[m
Merge: 1d3499113 360c80cfb
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Feb 20 12:07:10 2014 -0800

    Merge "Use [1;31mfast[m HEX search in real time mode"

[33mcommit 360c80cfb95559b3a49fc4624a24dee01e1abb6a[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Feb 14 15:55:49 2014 -0800

    Use [1;31mfast[m HEX search in real time mode
    
    In good quality mode motion search, the best matches are normally
    found after searching in a large area. In real time mode, to make
    encoding [1;31mfast[m, a center-biased [1;31mfast[m HEX search is used, which
    converges quickly most of the time. A 4-point diamond search is
    also carried out as the following refining search, which gives more
    precise results, and maintains good motion search quality.
    
    At speed 5, the borg test on rtc set showed an overall PSNR loss of
    0.936%. The encoding speed gain is 4% - 5%.
    
    Change-Id: I42cd68bb56a09ca1b86293c99d5f7312225ca7ae

[33mcommit 5750f78d6107f924ca4c808c95d7a6d31f59892d[m
Merge: e727bcf7c 9e190dfbf
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri Feb 14 09:08:52 2014 -0800

    Merge "[1;31mfast[m approximate model_rd_from_var_lapndz"

[33mcommit 9e190dfbfe5a5d4662370f6580ff08de3c0a8d01[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Feb 12 14:16:55 2014 -0800

    [1;31mfast[m approximate model_rd_from_var_lapndz
    
    Change-Id: Ieceaa16312941992d4a57455e336d625dfe4e094

[33mcommit 507fd5220b50be735c462308778efed9709404a6[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Feb 4 11:09:34 2014 -0800

    Enable encode_breakout in real time encoding
    
    In real time encoding, we enable encode_breakout to make encoding
    [1;31mfast[m. A speed feature "use_encode_breakout" is defined to set
    encode_breakout thresholds for different speeds.
    
    However, currently, static_thresh is an encoder option. The encode_
    breakout can be turned off if user sets static_thresh=0 specifically.
    
    The rtc set borg test result: (need to set --static_thresh=1)
    speed -5, psnr loss -3.543%;
    speed -4, psnr loss -2.358%;
    speed -3, psnr loss -0.771%.
    
    Encoding speed test:
    speed -5, 11% - 60% speedup;
    speed -4, 5.5% - 28% speedup;
    speed -3, 0.8% - 7% speedup.
    
    Change-Id: Icde592ffbe77eac7446f872a2e9eb2051733677b

[33mcommit 4fff8566f8eb7f58571e470dfd2c572ec5b7b4b6[m
Merge: 28f46aa63 e1fdcbcb8
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Feb 11 11:12:29 2014 -0800

    Merge "Cleaning up compute_[1;31mfast[m_motion_search_level()."

[33mcommit 855070e2540f84d0260c7910c2464fec833893a4[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Feb 10 11:25:23 2014 -0800

    Merged two similar functions to reduce duplication
    
    Function encode_rtc_frame_internal() and encode_frame_internal() only
    differed by a couple of speed features, this commit relocation those
    difference into the setup of speed features and merged two functions
    into one to remove duplication.
    
    It also fixed a subtle bug super_[1;31mfast[m_rtc was used before it was
    initialized.
    
    Change-Id: I234a5a1d11a4450930e5b4943dbab434208d5030

[33mcommit e1fdcbcb82e2ebcfe9f09f690853528a26d9b857[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Feb 7 16:39:40 2014 -0800

    Cleaning up compute_[1;31mfast[m_motion_search_level().
    
    Change-Id: I151bd3de689bceb72969120095257c37656db92f

[33mcommit 538b1c6d523e27ed3122de06f7f919bab926f9e8[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Jan 31 11:08:27 2014 -0800

    Only allow interp_filter change in SWITCHABLE mode
    
    This commit added a logic to prevent the inter_filter type from being
    changed if the default interp_filter mode is not switchable. Also, it
    sets the default interp_filter to BILINEAR at very and super [1;31mfast[m rtc
    encoding modes
    
    Change-Id: Ic41e6d31de29795a4ce536ec79afb01cab6daad3

[33mcommit 6a4e2ddabc7af605ab65b6510539e6aa9d63b5d2[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jan 30 18:33:26 2014 -0800

    Properly merge two different real time modes
    
    --rt --cpu-used=-5 uses the progressive rtc mode
    --rt --cpu-used=-6 uses the new super [1;31mfast[m rtc mode
    
    Change-Id: Id6469ca996100cdf794a0e42d76430161f22f976

[33mcommit 96dc80da6135ee4587384dda829e890ac36adc7f[m
Merge: 08b912b4d ea8aaf15b
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Jan 29 16:36:20 2014 -0800

    Merge "create super [1;31mfast[m rtc mode"

[33mcommit ea8aaf15b55a19f569c328f26cc8d8ad82a9235c[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Jan 29 08:39:39 2014 -0800

    create super [1;31mfast[m rtc mode
    
    This patch only works if the video is a width and height that are both
    a multiple of 32..   It sets every partition to 16x16, and does INTRADC
    only on the first frame and ZEROMV on every other frame.   It always does
    does the largest possible transform, and loop filter level is set to 4.
    
    Was ~20% [1;31mfast[mer than speed -5 of vp8
    
    Now 20% slower but adds motion search ( every block ), nearest, near
    and zeromv
    
    The SVC test was changed because - while this realtime mode produces
    bad quality albeit quickly, it isn't obeying all the rules it should
    about which frames are available.
    
    Change-Id: I235c0b22573957986d41497dfb84568ec1dec8c7

[33mcommit af87148a225e695fbb95e4ee9dde72e12f5d7096[m
Merge: 00bfacb76 770454f3a
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Jan 28 09:57:08 2014 -0800

    Merge "Add vp9_tm_predictor_32x32 neon implementation which is 7.8 times [1;31mfast[mer than C."

[33mcommit 770454f3a8d62c2698538fdff3b15bf900c60392[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Jan 27 14:03:06 2014 -0800

    Add vp9_tm_predictor_32x32 neon implementation
    which is 7.8 times [1;31mfast[mer than C.
    
    Change-Id: I858ef4ec09202a07d445da8db702783d6d9d7321

[33mcommit 92ab96a7ae4a568f96e8036b944e93ee049a131e[m
Merge: 26c88ec14 3633ffcbf
Author: Hangyu Kuang <hkuang@google.com>
Date:   Fri Jan 24 10:48:44 2014 -0800

    Merge "Add vp9_tm_predictor_16x16 neon implementation which is 3.5 times [1;31mfast[mer than C."

[33mcommit 3633ffcbf7b04b15e2dcb6b2834e1685fbbf6bf4[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Jan 21 14:49:15 2014 -0800

    Add vp9_tm_predictor_16x16 neon implementation
    which is 3.5 times [1;31mfast[mer than C.
    
    Change-Id: I24439ba7a2971829c11620f34848facf2c916678

[33mcommit ba6ab46cdcb1b3ae977984c9e18b122c72370eb6[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jan 7 14:35:02 2014 -0800

    Optimze inv 16x16 DCT with 10 non-zero coeffs - P1
    
    This commit is the first patch optimizing SSE2 implementation of inverse
    16x16 DCT with <10 non-zero coefficients. It focused on the first 1-D (row)
    transformation. It exploits the fact that only top-left 4x4 block contains
    non-zero coefficients, in a 2-D inverse 16x16 DCT with <10 coeffients.
    
    The average runtime of idct16x16_10 unit is reduced from
    883 cycles -> 779 cycles (12% [1;31mfast[mer).
    
    For pedestrian_area_1080p 300 frames at 4000 kbps, the speed 2 runtime goes
    down from 310651 ms  -> 305910 ms. The decoding speed goes up from
    80.37 fps -> 80.87 fps.
    
    Change-Id: Ic6f3ac5a637a76c07ba73ddaafe318a699fea645
For keyword time:
[33mcommit 1f00a9b9d570b410e4b5b6e292528400ff0c027f[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Mar 13 16:51:29 2015 -0700

    Fix choose_partitioning threshold setup for speed -5
    
    The compression performance of speed -5 is on average 12.6% better
    than speed -6. At lower bit-rates, the gains are typically 20% or
    more. For 2-thread encoding, the speed -5 takes about 1.6x [1;31mtime[m of
    speed -6.
    
    Change-Id: If7a73464a24d33e8f49b9533b51ec51c8da7fc80

[33mcommit 427cdf0a41988320c721462d02884a6a4f19aee4[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Mar 12 16:18:12 2015 -0700

    Reduce the number of full block SAD calls
    
    This commit uses a 6-point 1-step refine motion search in the
    integral projection based full pixel motion estimation, to replace
    the current 9-point search.
    
    It reduces run[1;31mtime[m cost of speed -6 on some noisy clips, e.g.,
    dark720p single thread
    33314 b/f, 40.076 dB, 18231 ms ->
    33307 b/f, 40.067 dB, 17768 ms
    
    The compression performance for rtc set remains unchanged.
    
    Change-Id: I194ea5a9ce52e5a10baeee36338633adc22f764c

[33mcommit fb31aa09e245bdc24ebee252b5acf4093bc9213b[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Mar 5 17:26:52 2015 -0800

    Modify update golden reference update under aq-mode=3 mode.
    
    For non-SVC 1 pass CBR: make the GF update interval a multiple of the
    cyclic refresh period, and use encoding stats to prevent GF update at certain [1;31mtime[ms.
    
    Change-Id: I4c44cacc2f70f1d27391a47644837e1eaa065017

[33mcommit 066ed601a5293e529cf1f93e842716bac3a3e321[m
Merge: 9708f9d66 06b59299c
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Mon Mar 9 13:02:16 2015 -0700

    Merge "Don't waste [1;31mtime[m partitioning skip superblocks."

[33mcommit 6245a91e0b4fc4b1d1382f95991cc0ea2b3fc991[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Mar 9 10:59:29 2015 -0700

    Skip golden ref frame check when it is same as last ref frame
    
    When golden reference frame is refreshed, the next frame has both
    its last and golden reference frames point to the same reference
    frame in real-[1;31mtime[m coding mode. Experiments suggest that using
    two separate reference frames for frames right after golden refresh
    frame does not provide further compression performance advantage.
    This commit hence retains the current encoder implementation and
    shuts off the mode search over golden reference frame in this case.
    
    It makes the encoder run slightly faster at no coding performance
    change.
    
    Change-Id: I1561f7799253a10e675d05c63c1749fe9e85b472

[33mcommit 06b59299c81f7a794d7b28ef76d56f69a09f4a43[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Mon Mar 9 10:45:38 2015 -0700

    Don't waste [1;31mtime[m partitioning skip superblocks.
    
    Force 64x64 partitioning when a whole superblock is SEGMENT_LVL_SKIP. This
    drops encode [1;31mtime[ms of screens mostly at rest by 20%.
    
    Change-Id: Ieba554b0b8a0c1679aae784a8bd11f038ab942c3

[33mcommit 55639c383bdbdf8ce270ea6783f3a360b8efbfd3[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Mar 2 16:19:23 2015 -0800

    fix a race condition caused by intra function pointer initialization
    
    This patch fixed webm issue 962.
    (https://code.google.com/p/webm/issues/detail?id=962)
    The data races occurred when an encoder and a decoder were created
    at the same [1;31mtime[m, and the function pointers were initialized twice.
    
    Change-Id: I8851b753c4b4ad4767d6eea781b61f0ac9abb44b

[33mcommit f87e315e1e34de158581cbf7bc96248542d4b3fb[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Feb 23 12:55:50 2015 -0800

    Re-distribute hierarchical vector match pattern
    
    This commit modifies the hierarchical vector match patter. It
    avoids repeated SAD computation at same points. The function
    vp9_vector_sad_sse2 is called 12 [1;31mtime[ms per 64x64 block, instead
    of 15 [1;31mtime[ms as before. The effective coverage remains the same.
    
    Change-Id: I91ad9d27d40db8963c907d02af84e10702136994

[33mcommit 56435bb7b6ed888572c8a20ce873e95afd9f1ee9[m
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Feb 3 12:34:37 2015 -0800

    Add skin detection.
    
    Simple skin detection, from vp8; works reasonable on most of the
    RTC clips, but could miss some[1;31mtime[ms.
    
    Added debug flag to write out skin map over source input.
    
    Change-Id: I2caea7592f1c459047aac46627eeb24a94946464

[33mcommit aaccf6566de2d5c0401684a9369fea8cc07b2d17[m
Author: James Zern <jzern@google.com>
Date:   Thu Feb 5 19:31:38 2015 -0800

    configure: add --(disable|enable)-dependency-tracking
    
    defaults to enabled. when disabled skips dependency file (.d) generation
    allowing for faster one-[1;31mtime[m builds.
    
    Change-Id: I2d7d7f905f1663315b8eb2b2e81fffb6fcb15829

[33mcommit bdfb5f986e3e890d5082fab058f866482f9ae1dc[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Feb 4 10:37:57 2015 -0800

    Adjust partitioning threshold based rtc speed
    
    On rtc set:
    speed 7 quality improves about 0.5%
    speed 8 quality improves about 1.0%
    
    Encoding [1;31mtime[m for speed 7 changes from 67804ms to 65889ms
    Encoding [1;31mtime[m for speed 8 changes from 58659ms to 56808ms
    
    Change-Id: Iabcfb53012fc1b9f3326cdbc167e5758b8c7ad30

[33mcommit 0c6d3a03e196e50410d8e2f06b3a4adb553d17d7[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jan 21 09:32:23 2015 -0800

    Account for chroma component costs in RTC mode decision
    
    This commit allows the encoder to account for additional chroma
    plane costs in the mode decision process, if the current block
    potentially contains significant color change. It improves the
    visual quality at very low bit-rates.
    
    The compression performance of dark720p is improved by 12.39% in
    speed 6. For jimred at 150 kbps, the PSNR of V component (red)
    increased by 0.2 dB, at the expense of about 5% increase in
    encoding [1;31mtime[m. Note that for sequences where the chroma components
    are fairly consistent, the encoding [1;31mtime[m increase is negligible.
    
    On average the rtc set compression performance is improved by
    1.172% in PSNR and 1.920% in SSIM.
    
    Change-Id: Ia55b24ef23a25304f7ec9958fbf07fd6e658505c

[33mcommit be6aeadaf49de28f13355d5dd7f64b4074dcca7c[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Jan 27 12:26:28 2015 -0800

    Try again to merge branch 'frame-parallel' into master branch.
    
    In frame parallel decode, libvpx decoder decodes several frames on all
    cpus in parallel fashion. If not being flushed, it will only return frame
    when all the cpus are busy. If getting flushed, it will return all the
    frames in the decoder. Compare with current serial decode mode in which
    libvpx decoder is idle between decode calls, libvpx decoder is busy
    between decode calls.
    
    Current frame parallel decode will only speed up the decoding for frame
    parallel encoded videos. For non frame parallel encoded videos, frame
    parallel decode is slower than serial decode due to lack of loopfilter
    worker thread.
    
    There are still some known issues that need to be addressed. For example:
    decode frame parallel videos with segmentation enabled is not right some[1;31mtime[ms.
    
    * frame-parallel:
      Add error handling for frame parallel decode and unit test for that.
      Fix a bug in frame parallel decode and add a unit test for that.
      Add two test vectors to test frame parallel decode.
      Add key frame seeking to webmdec and webm_video_source.
      Implement frame parallel decode for VP9.
      Increase the thread test range to cover 5, 6, 7, 8 threads.
      Fix a bug in adding frame parallel unit test.
      Add VP9 frame-parallel unit test.
      Manually pick "Make the api behavior conform to api spec." from master branch.
      Move vp9_dec_build_inter_predictors_* to decoder folder.
      Add segmentation map array for current and last frame segmentation.
      Include the right header for VP9 worker thread.
      Move vp9_thread.* to common.
      ctrl_get_reference does not need user_priv.
      Seperate the frame buffers from VP9 encoder/decoder structure.
      Revert "Revert "Revert "Revert 3 patches from Hangyu to get Chrome to build:"""
     Conflicts:
           test/codec_factory.h
           test/decode_test_driver.cc
           test/decode_test_driver.h
           test/invalid_file_test.cc
           test/test-data.sha1
           test/test.mk
           test/test_vectors.cc
           vp8/vp8_dx_iface.c
           vp9/common/vp9_alloccommon.c
           vp9/common/vp9_entropymode.c
           vp9/common/vp9_loopfilter_thread.c
           vp9/common/vp9_loopfilter_thread.h
           vp9/common/vp9_mvref_common.c
           vp9/common/vp9_onyxc_int.h
           vp9/common/vp9_reconinter.c
           vp9/decoder/vp9_decodeframe.c
           vp9/decoder/vp9_decodeframe.h
           vp9/decoder/vp9_decodemv.c
           vp9/decoder/vp9_decoder.c
           vp9/decoder/vp9_decoder.h
           vp9/encoder/vp9_encoder.c
           vp9/encoder/vp9_pickmode.c
           vp9/encoder/vp9_rdopt.c
           vp9/vp9_cx_iface.c
           vp9/vp9_dx_iface.c
    
    This reverts commit a18da9760a74d9ce6fb9f875706dc639c95402f5.
    
    Change-Id: I361442ffec1586d036ea2e0ee97ce4f077585f02

[33mcommit 645b7cdf034727eb7bc946cb1e9fc1532ad44877[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Jan 26 15:29:15 2015 -0800

    move clear_system_state() call before using double
    
    Floating point is used in vp9_convert_qindex_to_q(), so some[1;31mtime[m unit
    test ActiveMapTest would cause run [1;31mtime[m error without properly call
    to clear_system_state to reset register status.
    
    Change-Id: I181e9395148c44a6ca8b97d6e109bd4a152143c6

[33mcommit eda179764f5b270c7298660a12fb8f9176902e2a[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jan 22 15:27:43 2015 -0800

    Replace divide with look-up
    
    This commit replaces an integer divide with a table-lookup. It is
    to improve decoding speed, and at the same [1;31mtime[m, to reduce possible
    complications with a bug in AMD Family 12h processors:
    
    "665 Integer Divide Instruction May Cause Unpredictable Behavior"
    
    Change-Id: I678b707a538798a923850bac467e66e847e6def7

[33mcommit e76eaf05b1a20b906d166b7e8db402a9883c6025[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jan 6 14:14:26 2015 -0800

    vp9_ethread: add parallel loopfilter
    
    1. Added row-based loopfilter in encoder;
    2. Moved common multi-threaded loopfilter functions from decoder
       to common;
    3. Merged multi-threaded loopfilter code, and made encoder/
       decoder call same function to reduce code duplication.
    
    Encoder tests showed that 1% - 2% speedup was seen for good-quality
    2-pass mode(at speed 3); 1% - 3% speedup using 2 threads and 4% - 6%
    speedup using 4 threads were seen for real-[1;31mtime[m mode(at speed 7).
    
    Change-Id: I8a4ac51c2ad9bab9fa7b864e90743931c53ec1c4

[33mcommit 27582e573b0f6fcee45dd860d67fe6ffa6ba86ba[m
Author: Jingning Han <jingning@google.com>
Date:   Sat Jan 3 12:00:46 2015 -0800

    Skip duplicate denoiser frame buffer allocation
    
    Allocate the frame buffer allocation for denoiser once during the
    encoder initialization. This avoids allocating frame buffer
    multiple [1;31mtime[ms and overwriting the buffer pointer without proper
    releasing.
    
    Change-Id: I9b3baa6283449d86fd164534d344c036bb035700

[33mcommit b62064f3383eb548a7a8ff43e6fe78311f31b460[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Dec 15 11:58:43 2014 -0800

    Enhance the end to end psnr tests
    
    Includes more speed settings and also real-[1;31mtime[m mode now.
    
    Change-Id: I71c77c4a2471d715c61cc30db092aa053cf012e1

[33mcommit ccdc448b70fe766430b4dd77feb664debe1cebb7[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Dec 16 09:21:22 2014 -0800

    Remove reset mode_info array per frame
    
    The mode_info array was unnecessarily reset to zero every frame
    when error resilient mode turned on, given that the mode info
    values per block will be assigned during mode search stage.
    
    This commit removes this reset operation. It reduces the run[1;31mtime[m
    cost on memset operation to 1/3. The overall speed -6 run[1;31mtime[m is
    reduced by 2%.
    
    Change-Id: I32ecb73338d8995cc0c5147de09357364f13d45b

[33mcommit b6c75c5a8d019bde1b4d654b705f820015fc3ad5[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Dec 11 16:22:03 2014 +0000

    Improve motion detection for low complexity regions.
    
    Where there is very subtle motion, especially when combined
    with low spatial complexity, the codec some[1;31mtime[ms fails to quickly
    pick up the ambient motion field.
    
    Once it has been established though the field propagates well using
    Nearest and Near MV.
    
    This patch looks specifically at the case where the Nearest and Near
    have not been established as non zero vectors and in this case
    discounts the cost of searching for a new vector in the rd code.
    
    This will almost certainly have some implications in terms of encode
    speed but it should be possible to mitigate the impact in a subsequent
    using first pass stats and the local spatial complexity.
    
    Average results for test sets approximately neutral.
    
    Change-Id: I44a29e20f11f7ab10f8c93ffbdc50183d9801524

[33mcommit 3c7a06c3cce396deecad5a925258f6cf10bcc7ee[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Thu Dec 11 12:27:25 2014 -0800

    Remove unnecessary dqcoeff memset.
    
    dqcoeff is set to be 0 on initialization. And set back to 0 after being
    used every[1;31mtime[m.
    
    Change-Id: I32b8e149bba40a8d707849f737a8e49a691f319c

[33mcommit 5c22224e9e43befc414cce2cf163616c9d56b0d3[m
Author: Peter de Rivaz <peter.derivaz@gmail.com>
Date:   Thu Dec 11 15:54:23 2014 +0000

    Corrected optimization of 8x8 DCT code
    
    The 8x8 DCT uses a fast version whenever possible.
    There was a mistake in the checking code which
    meant some[1;31mtime[ms the fast version was used when it
    was not safe to do so.
    
    Change-Id: I154c84c9e2d836764768a11082947ca30f4b5ab7
    (cherry picked from commit fd05fb0c21e253b4d6f92d7e0b752850ff8ab188)

[33mcommit 377d2f027a60fac5d83a4c9de9767ac90997d1fa[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Dec 11 09:29:36 2014 -0800

    Refactor choose_partitioning computing scheme
    
    This commit refactors the choose_partitioning function. It removes
    redundant memset calls and makes the encoder to calculate
    variance value per block only when it is needed. It reduces the
    average run[1;31mtime[m cost of choose_partitioning by 60%. Overall it
    reduces speed -6 run[1;31mtime[m by 2-5%.
    
    Change-Id: I951922c50d901d0fff77a3bafc45992179bacef9

[33mcommit eba9c762a1710e29967207a1df092ae0eca40313[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Dec 2 15:47:41 2014 -0800

    vp9_ethread: the tile-based multi-threaded encoder
    
    Currently, VP9 supports column-tile encoding, which allows a frame
    to be encoded in multiple column tiles independently. The number of
    column tiles are set by encoder option "--tile-columns". This
    provides a way to encode a frame in parallel.
    
    Based on previous set of patches, this patch implemented the tile-
    based multi-threaded encoder. Each thread processes one or more
    tiles.
    
    Usage:
    For HD clips:
    --tile-columns=2 --threads=1/2/3/4
    
    While using 4 threads, tests showed that the encoder achieved
    2.3X - 2.5X speedup at good-quality speed 3, and 2X speedup at
    real[1;31mtime[m speed 5.
    
    Change-Id: Ied987f8f2618b1283a8643ad255e88341733c9d4

[33mcommit 8fe50191c665a384db918461096580f31e4fc7b2[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Dec 2 18:16:06 2014 -0800

    Rework coeff probability model update for rtc coding
    
    This commit reworks the ONE_LOOP_REDUCED coefficient probability
    model update process. It allows model update for every coefficient
    across the spectrum at a coarser resolution, instead of performing
    precise update only for certain subset of probability models.
    
    The overall run[1;31mtime[m remains nearly same (<1% change) for speed -6.
    The compression performance is improved by 7.5% in PSNR for speed
    -5 and 4.57% for speed -6, respectively.
    
    Change-Id: Ifb17136382ee7e39a9f34ff4a4f09a753125c8d1

[33mcommit bf758b6afa7f006f3c8efdd445c82b6d6617b1c3[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Dec 2 10:50:39 2014 -0800

    Enforce error resilient mode on in temporal svc real-[1;31mtime[m mode
    
    This commit makes the codec automatically turn on error resilient
    mode when using real-[1;31mtime[m mode for temporal scalable coding. It
    fixes an enc/dec mismatch issue and re-enables the corresponding
    unit test.
    
    Change-Id: Ie1f7134e9a78ddd43e9b1555b3ee991c8a3afd0d

[33mcommit 92a7cfc8bfb050870b238e9174829d5af136c403[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Nov 24 14:40:42 2014 -0800

    Adaptively adjust mode test kick-off thresholds in RTC coding
    
    This commit allows the encoder to increase the mode test kick-off
    thresholds if the previous best mode renders all zero quantized
    coefficients, thereby saving motion search runs when possible.
    The compression performance of speed -5 and -6 is down by -0.446%
    and 0.591%, respectively. The run[1;31mtime[m of speed -6 is improved by
    10% for many test clips.
    
    vidyo1, 1000 kbps
    16578 b/f, 40.316 dB, 7873 ms -> 16575 b/f, 40.262 dB, 7126 ms
    
    nik720p, 1000 kbps
    33311 b/f, 38.651 dB, 7263 ms -> 33304 b/f, 38.629 dB, 6865 ms
    
    dark720p, 1000 kbps
    33331 b/f, 39.718 dB, 13596 ms -> 33324 b/f, 39.651 dB, 12000 ms
    
    mmoving, 1000 kbps
    33263 b/f, 40.983 dB, 7566 ms -> 33259 b/f, 40.978 dB, 7531 ms
    
    Change-Id: I7591617ff113e91125ec32c9b853e257fbc41d90

[33mcommit 7428cebe4f5d2227bb4bf094bb7e7bd420455533[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Nov 21 12:18:53 2014 -0800

    Rework forward txfm/quantization skip system in RTC coding mode
    
    This commit allows more aggressive decision to skip forward
    transform and quantization for luma component in RTC coding mode.
    The chroma components remains going through the normal coding
    routine, since they are not included in the non-RD mode search
    process.
    
    It reduces the run[1;31mtime[m cost by 2% - 10%. In speed -6,
    vidyo1 1000 kbps
    16576 b/f, 40.281 dB, 8402 ms -> 16576 b/f, 40.323 dB, 7764 ms
    
    nik720p 1000 kbps
    33337 b/f, 38.622 dB, 7473 ms -> 33299 b/f, 38.660 dB, 7314 ms
    
    dark720p 1000 kbps
    33330 b/f, 39.785 dB, 13505 ms -> 33325 b/f, 39.714 dB, 13105 ms
    
    The compression performance of speed -6 is improved by 0.44% in
    PSNR and 1.31% in SSIM.
    
    Change-Id: Iae9e3738de6255babea734e5897f29118bebc6d7

[33mcommit bc1b3d8412abd4843a178e045cee700b05d93fe1[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Fri Oct 24 15:57:48 2014 -0700

    Allow DC/H/V/TM on screen content.
    
    6.3% better compression
    less than 1% compression [1;31mtime[m increase
    
    Change-Id: Ie83c059436e54c09de9e7c87e06e0a6d40dc38fe

[33mcommit b64359110bc42fd5908f57cd9b4f2dc09a92dc5c[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Nov 13 15:03:45 2014 -0800

    Add more rate control stats to vpx_temporal_svc_encoder.
    
    Average and variance of actual encoding bitrate over fixed short-[1;31mtime[m window.
    
    Change-Id: Icc3d6d93792c81e1fb9fd3b56008bf47a503b204

[33mcommit 1434f7695bd6cc2517438085e6c1d06b16c8bf89[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Nov 3 11:36:34 2014 -0800

    Skip ref frame mode search conditioned on predicted mv residuals
    
    This commit makes the RTC coding mode to conditionally skip the
    reference frame mode search, when the predicted motion vector of
    the current reference frame gives more than two [1;31mtime[ms sum of
    absolute difference compared to that of other reference frames.
    
    It reduces the runtim by 1% - 4% for speed -5 and -6. The average
    compression performance is improved by about 0.1% in both settings.
    
    It is of particular benefit to light change scenarios. The
    compression performance of test clip mmmovingvga.y4m is improved by
    6.39% and 15.69% at high bit rates for speed -5 and -6, respectively.
    
    Speed -5
    vidyo1 16555 b/f, 40.818 dB, 12422 ms ->
           16552 b/f, 40.804 dB, 12100 ms
    
    nik    33211 b/f, 39.138 dB, 11341 ms ->
           33228 b/f, 39.139 dB, 11023 ms
    
    mmmoving 33263 b/f, 40.935 dB, 13508 ms ->
             33256 b/f, 41.068 dB, 12861 ms
    
    Speed -6
    vidyo1 16541 b/f, 40.227 dB, 8437 ms ->
           16540 b/f, 40.220 dB, 8216 ms
    
    nik    33272 b/f, 38.399 dB, 7610 ms ->
           33267 b/f, 38.414 dB, 7490 ms
    
    mmmoving 33255 b/f, 40.555 dB, 7523 ms ->
             33257 b/f, 40.975 dB, 7493 ms
    
    Change-Id: Id2aef76ef74a3cba5e9a82a83b792144948c6a91

[33mcommit 7bea8c59f934aa8bfab43935b2355b88adaa12f0[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 29 16:37:16 2014 -0700

    Rework pred pixel buffer system in non-RD coding mode
    
    This commit makes the inter prediction buffer system to support
    hybrid partition search. It reduces the run[1;31mtime[m of speed -5 by
    about 3%. No compression performance change.
    
    vidyo1 720p 1000 kbps
    11831 ms -> 11497 ms
    
    nik 720p 1000 kbps
    10919 ms -> 10645 ms
    
    Change-Id: I5b2da747c6395c253cd074d3907f5402e1840c36

[33mcommit 9f128b3ed9fc2f431444f7cea238a288fb0e470c[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Oct 17 08:58:28 2014 -0700

    Hybrid partition search for rtc coding mode
    
    This commit re-designs the recursive partition search scheme in
    rtc speed -5. It first checks if the current block is under cyclic
    refresh mode. If so, apply recursive partition search. Otherwise,
    perform sub-sampled pixel based partition selection. When the
    pre-selection finds the partition size should be 32x32 or above,
    use the partition size directly. Otherwise, apply partition search
    at nearby levels around the preset partition size.
    
    It is enabled in speed -5. The compression performance of rtc
    speed -5 is improved by 9.4%. Speed wise, the run-[1;31mtime[m goes slower
    from 1% to 10%.
    
    nik_720p, 1000 kbps
    33220 b/f, 38.977 dB, 10109 ms -> 33200 b/f, 39.119 dB, 10210 ms
    
    vidyo1_720p, 1000 kbps
    16536 b/f, 40.495 dB, 10119 ms -> 16536 b/f, 40.827 dB, 11287 ms
    
    Change-Id: I65adba352e3adc03bae50854ddaea1b421653c6c

[33mcommit 62848d2a87284fc80e2918e068175dfac9acf121[m
Merge: 0b3560c7a c53a95ad1
Author: Hangyu Kuang <hkuang@google.com>
Date:   Thu Sep 25 13:58:54 2014 -0700

    Merge "Avoid calling vp9_is_scaled two [1;31mtime[ms in a function."

[33mcommit c53a95ad1d7f8171f66c512b54da05a09552f615[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Thu Sep 25 11:47:29 2014 -0700

    Avoid calling vp9_is_scaled two [1;31mtime[ms in a function.
    
    Use a local variable to hold the result of vp9_is_scaled.
    
    Change-Id: I5e203909805923e20eefef596bc84424da47dbe2

[33mcommit e6165041074bdf3f2bc2a3283ee58e72027164ba[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Sep 25 08:58:57 2014 -0700

    Fix IOCs
    
    A left shift of negative value causes IOC run[1;31mtime[m warnings, this
    commit converts two such left shifts to multiply to avoid IOCs.
    
    Change-Id: I8811428768d7135e6e16af4b3094d0341589a995

[33mcommit 4a101310e8fc7bf7bc0cd947d863634d40fb19fc[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Sep 23 12:14:51 2014 -0700

    Adapt mode based rd_threshold for similar block size
    
    The rd_thresholds are adaptively changed based on best mode tested.
    It was only changed for the same block size, this commit makes the
    adaptation for similar block sizes too. The commit also made minor
    adjustment and code cleanups.
    
    The impact on encoding [1;31mtime[m for _ped:
    118089 ms -> 111927 ms
    
    The impact on compression:
    derf:  -0.339%
    stdhd: -0.303%
    
    Change-Id: I8817fed1102350497f2ec631849e43f753878e5d

[33mcommit 1def634f1a3dc136a1f69bcfe4f809f18de2ba54[m
Author: Adrian Grange <agrange@google.com>
Date:   Tue Sep 16 11:01:54 2014 -0700

    Fix ARF construction when scaling
    
    The ARF frame should always be the same size as the
    native resolution of the input frames.
    
    It will be scaled to the required resolution at
    encode [1;31mtime[m.
    
    Change-Id: I0afe858129aa6ef65b1648f43476331715346896

[33mcommit 56fa3ab886c47ccab74e7457dc57d43537dcaf75[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 16 09:49:17 2014 -0700

    Use non-zero mode threshold for NEARESTMV modes
    
    This commit makes the encoder to use non-zero mode threshold for
    NEARESTMV modes. The run[1;31mtime[m for test clips of speed 3 is reduced
    by about 1%.
    
    pedestrian 1080p 2000 kbps, 143239 ms -> 141989 ms
    bus CIF 1000 kbps, 7835 ms -> 7749 ms
    
    The compression performance change is about -0.02% for both derf
    and stdhd.
    
    Change-Id: Ib71808922c41ae2997100cb7c561f68dcebfa08e

[33mcommit 175d9dfe0af6912fb9ecf7f94bd581a6b45d57a9[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Thu Sep 11 08:39:38 2014 -0700

    Remove memset of every external frame buffer.
    
    Libvpx was memseting every external frame buffer before decode. This
    was to work around a valgrind issue in our C loop filter. Most of
    the [1;31mtime[m this was not needed and we have noticed some significant
    performance loss on some platforms. Now we require the application to
    zero out the buffers if it is using external frame buffers.
    
    Change-Id: I7330d00a315e65137ed30edd5f813e8929b76242

[33mcommit 8cefed156818acc47510a4f1527d0f33e3eece77[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 11 10:17:12 2014 -0700

    Remove inter_mode_mask from rate-distortion search loop
    
    This speed feature is used in real-[1;31mtime[m setting only. Remove the
    related condition check in the rate-distortion optimization search
    loop.
    
    Change-Id: Iaacc1e268214634e6f95c5048c28a60cec6c42fc

[33mcommit f10d7eeda23bfccdb49a7fefc471132ae3eacca1[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Sep 9 10:18:55 2014 -0700

    Remove the use of use_lastframe_partitioning at speed 4
    
    The use of use_lastframe_partitioning is totally removed in good-
    quality encoding. Its usage in real-[1;31mtime[m encoding needs to be
    evaluated to see if it can be removed too.
    
    The Borg tests at speed 4 showed:
    stdhd set: 0.220% psnr gain, 0.166% ssim gain;
    derf set:  0.329% psnr gain, 0.476% ssim gain.
    
    Speed test on selected clips showed 1.54% speedup.(Worst case:
    pedestrian_area_1080p25.y4m, speed loss: 1.5%)
    
    Change-Id: I1c844d329b0b5678558439b887297c1be7ddab00

[33mcommit d435148fe6b9bc2a34ddb6b3bec8bd300a072786[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 4 16:09:14 2014 -0700

    Enable adaptive motion search for ARF coding
    
    This commit turns on adaptive motion search for ARF coding, in
    addition to other normal inter frame coding. It improves the
    average compression efficiency:
    
    stdhd 0.1%
    derf  0.04%
    
    For the test sequences, the speed 3 run[1;31mtime[m is reduced:
    
    pedestrian 1080p 2000 kbps, 149932 ms -> 144580 ms, (3.3% speed-up)
    bus CIF 1000 kbps, 8050 ms -> 7895 ms, (1.9%)
    highway CIF 100 bkps, 45033 ms -> 44078 ms, (2.2%)
    
    Change-Id: I5228565b609f99e8ae04f6140a2bf2b64a831d21

[33mcommit d62d804e647e6726abe23726e43cac622713da94[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 2 17:32:12 2014 -0700

    Speed up compound inter prediction mode check
    
    This commit allows the encoder to store outcomes of single reference
    frame modes and compares them to decide if the inter prediction
    filter, forward transform, and quantization can be skipped.
    
    The compression performance of speed 3 is down
    derf  -0.364%
    stdhd -0.198%
    
    For test sequences, the speed 3 run[1;31mtime[m is reduced
    highway CIF 100 kbps, 51976 ms -> 45033 ms, 13% speed-up
    stockholm 720p 1000 kbps, 71826 ms -> 67838 ms, 5.5% speed-up
    pedestrian 1080p 2000 kbps, 154924 ms -> 150702 ms, 2.6% speed-up
    
    Change-Id: I5aa26f918d2b4b5197a2c0afa2779319f1c88e44

[33mcommit dcbfacbb984cdcd5b5a5030103305fa3669dfece[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Sep 3 11:26:27 2014 -0700

    Neon version of vp8_build_intra_predictors_mby_s() and
    
    vp8_build_intra_predictors_mbuv_s().
    
    This patch replaces the assembly version with an intrinsic
    version.
    
    On a Nexus 7, vpxenc (in real[1;31mtime[m mode, speed -12)
    reported a performance improvement of ~2.6%.
    
    Change-Id: I9ef65bad929450c0215253fdae1c16c8b4a8f26f

[33mcommit 7a33712475f670efe480728ac65b50b6b9553782[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Sep 2 18:53:10 2014 -0700

    Change last_partition_redo_frequency for speed 3
    
    From 3 to 2, which seems to be slightly positive on compression for
    all test sets, also reduces encoding [1;31mtime[m by 2%-5%, varying on the
    test clips.
    
    Change-Id: If045417bd27311700c919b4a335eff0dc1130ae0

[33mcommit be3b08da3e0ee44d7c52fa3aa883b351d969c1cc[m
Author: Minghai Shang <minghai@google.com>
Date:   Tue Sep 2 12:05:14 2014 -0700

    [svc] Temporal svc with two pass rate control
    
    It's built based on current spatial svc code.
    We only support one spatial two temporal layers at this [1;31mtime[m.
    Change-Id: I1fdc8584354b910331e626bfae60473b3b701ba1

[33mcommit 33176fef872c5d812d7ce8f9875d5166de460c5d[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 2 10:57:10 2014 -0700

    Skip comp inter mode tests for arf coding
    
    This commit skips the compound inter mode prediction check in the
    rate-distortion optimization loop for ARF coding. It reduces the
    run[1;31mtime[m for certain test clips at speed 3, at no compression
    performance change:
    
    bus CIF 1000 kbps, 8260 ms -> 8090 ms, 1.8% speed-up
    stockholm 720p 1000 kbps, 74453 ms -> 71826 ms, 2.9% speed-up
    
    No visible speed-up for pedestrian area 1080p at 2000 kbps.
    
    Change-Id: Ic68aa56837159b726563b784e2e3729e846465ad

[33mcommit 4282955ee12cc884ff9fd0875c82bd4c0940f8ea[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Aug 28 22:58:30 2014 -0700

    Skip intra mode tests depending on inter residuals
    
    This commit allows encoder to skip intra coding mode test, when
    the known inter residual is less than the source variance. It
    reduces the run[1;31mtime[m of speed 3 for test clips:
    bus cif 1000 kbps: 8587 ms -> 8260 ms, 3.8% speed-up
    pedestrian 1080p 2000 kbps: 161381 ms -> 155241 ms, 3.7% speed-up.
    
    The compression performance is down by
    derf   -0.36%
    stdhd  -0.25%
    
    Change-Id: I75ce1e035b4da2153cb1ac14111d1a07c05a735d

[33mcommit dcac083cf3550b4b2a22e50e9a80a731192e25b6[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Aug 27 17:39:44 2014 -0700

    Implementing 4x4 variance calculation with SSE2.
    
    New SSE2 function is three [1;31mtime[ms faster than MMX one.
    
    Change-Id: I4f387ce9f75b88379176ec7bdc62d86eb5f70fbe

[33mcommit 73edeb03ea1730d3a602a888fc9beb2141d951d4[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Aug 20 17:02:10 2014 -0700

    Removing alg_priv from vpx_codec_priv struct.
    
    In order to understand memory layout consider the declaration of the
    following structs. The first one is a part of our API:
    
    struct vpx_codec_ctx {
      // ...
      struct vpx_codec_priv *priv;
    };
    
    The second one is defined in vpx_codec_internal.h:
    
    struct vpx_codec_priv {
      // ...
    };
    
    The following struct is defined 4 [1;31mtime[ms for encoder/decoder VP8/VP9:
    
    struct vpx_codec_alg_priv {
      struct vpx_codec_priv base;
      // ...
    };
    
    Private data allocation for the given ctx:
    
    struct vpx_codec_ctx *ctx = <get>
    struct vpx_codec_alg_priv *alg_priv = <allocate>
    ctx->priv = (struct vpx_codec_priv *)alg_priv;
    
    The cast works because vpx_codec_alg_priv has a
    vpx_codec_priv instance as a first member 'base'.
    
    Change-Id: I10d1afc8c9a7dfda50baade8c7b0296678bdb0d0

[33mcommit 1144fee3d509aa4cb6dffba04ea0abcc0f9cf909[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Aug 20 11:17:05 2014 -0700

    add a new interp filter search strategy.
    
    This commit addes a new strategy to reduce the search for optimal
    interpolation filter type. The encoder counts and store how many each
    filter type is selected and used for each of the reference frames.
    A filter type that is rarely used for all three reference frames is
    masked out to avoid computation.
    
    The impact on compression is neglectible:
    -0.02% on derf
    +0.02% on stdhd
    
    Encoding [1;31mtime[m is seen to reduce by 2~3%.
    
    Change-Id: Ibafa92291b51185de40da513716222db4b230383

[33mcommit 8b2abdeed7ddb930eaf79284fdca946bc52e9651[m
Merge: eba83a0fd 4aab42325
Author: Tom Finegan <tomfinegan@google.com>
Date:   Mon Aug 25 14:27:11 2014 -0700

    Merge "vpxenc.sh: Add real [1;31mtime[m tests."

[33mcommit 4aab42325545c93017ebfce16a56cbcede4874e1[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Fri Aug 22 16:40:46 2014 -0700

    vpxenc.sh: Add real [1;31mtime[m tests.
    
    Add --rt tests for VP8 and VP9.
    
    Change-Id: I401d2962bf27e8a775ee5d71784d63ba4c014dfd

[33mcommit 340da0da1c7453e25b45b8f9b6b71aa9990bd4f7[m
Merge: 22bbdc48f 07a47466e
Author: Johann Koenig <johannkoenig@google.com>
Date:   Wed Aug 20 14:47:29 2014 -0700

    Merge "Include vpx_config.h in vpx_[1;31mtime[mr.h"

[33mcommit 6a464eca0549fb1a539c9f5968d66e66cdf4cce9[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Aug 18 10:42:23 2014 -0700

    Speed up mode search depending on relative ref frame position
    
    This commit enables the encoder to record the location of the
    center frame to generate alter reference frame. It then allows to
    skip checking prediction modes of other reference frame types when
    it comes to encode this frame.
    
    The speed 3 run[1;31mtime[m is reduced for the test sequences:
    bus at CIF 1000 kbps, 9791 ms -> 9446 ms, i.e., 3.5% speed-up,
    pedestrian at 1080p 2000 kbps, 184043 ms -> 175730 ms, i.e., 4.5%
    speed-up.
    
    No compression performance change observed.
    
    Change-Id: Iacfde3bcc1445964e7a241f239bd6ea11cb94bd1

[33mcommit 07a47466eeabc434de5d072855d486493b988121[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Aug 18 11:02:16 2014 -0700

    Include vpx_config.h in vpx_[1;31mtime[mr.h
    
    vpx_[1;31mtime[mr.h uses several defines from the config file including
    CONFIG_OS_SUPPORT and INLINE
    
    Change-Id: I16cb45237787cbc1ae79a67e16b8042811dda336

[33mcommit eca93642e28102e5e30d6499f9661b89e8fdc27b[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Wed Aug 13 20:07:39 2014 -0700

    Add a speed feature to give the tighter search range
    
    Add a speed feature to give the tighter partition search
    range. Before partition search, calculate the histogram
    of the partition sizes of the left, above and previous
    co-located blocks of the current block. If the variance of
    observed partition sizes is small enough, adjust the search
    range around the mean partition size, which will be tigher.
    
    The feature is currently turned on at speed 2. Experiments on
    sample youtube clips show on average the run[1;31mtime[m is reduced
    by 3-7%.
    
    For hard stdhd clips:
    park_joy_1080p @ 15000kbps:       509251 ms -> 491953 ms (3.3%)
    pedestrian_area_1080p @ 2000kbps: 223941 ms -> 214226 ms (4.3%)
    
    The PSNR performance is changed:
    derf: -0.112%
    yt:   -0.099%
    hd:   -0.090%
    stdhd:-0.102%
    
    Change-Id: Ie205ec5325bf92ec5676c243e30ba9d0adca10f2

[33mcommit 4d6d061316e948603b9a1b917e97fd4ace91f0ad[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Aug 13 15:07:16 2014 -0700

    Set max_intra_bsize to 32x32
    
    At --good and speed 3 or above for resolution less than 720p. This
    disables the tests for 64x64 intra prediction modes. Encoding [1;31mtime[m
    reduction is about 1%.
    
    Change-Id: Ib396e3d1417fece416e3f0fee929b128acbb130f

[33mcommit ccef8842d2f4df4f52efe66b6b94de707244804f[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 13 10:38:21 2014 -0700

    Allow full coeff probability model and cost update
    
    This commit moves the simplified coefficient probability model
    and costing update to speed 4, and turns on chessboard pattern
    mode search for sub 720p sequences. The overall coding performance
    of speed 3 is improved:
    derf  0.889%
    stdhd 1.744%
    
    The speed 3 run[1;31mtime[m for test sequences are improved:
    bus cif at 1000 kbps 9823 ms -> 9642 ms
    pedestrian 1080p 2000 kbps 189559 ms -> 183284 ms
    
    Change-Id: Iecbc7496a68f31fd49fb09f8dfd97c028d675a5d

[33mcommit 1e30547984e1d80f5b98214efc9f781cbcc85999[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Aug 11 18:02:18 2014 -0700

    Skip mode search based on reference frame consistency
    
    This commit enables the encoder to skip NEARMV and ZEROMV if the
    above and left blocks have identical reference frame, and the
    current reference is different from that. It reduces the run[1;31mtime[m
    of speed 3 for test sequences:
    bus cif at 1000 kbps 10064 ms -> 9823 ms
    pedestrian 1080p at 2000 kbps 193078 ms -> 189559 ms
    
    The compression performance is changed by
    derf  -0.085%
    stdhd -0.103%
    
    Change-Id: If304f26d42e6412152a84c3dd7b02635c38444f4

[33mcommit 8910cf8d69be050dfd7be4b9cb540f97c95fcd03[m
Merge: 94fbfb9f1 3011c53d3
Author: James Zern <jzern@google.com>
Date:   Tue Aug 12 19:21:20 2014 -0700

    Merge "Fix a run-[1;31mtime[m integer overflow"

[33mcommit 3011c53d36b4a3be4a583929a05e3da45f34ad94[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Aug 8 08:56:24 2014 -0700

    Fix a run-[1;31mtime[m integer overflow
    
    Change-Id: I87255d8a25ef8c7d235cbf3c8887d7bed7892cfe

[33mcommit 5a78c4065727c6bc113d1c83222cc0ba4abf9e36[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Aug 8 15:29:37 2014 -0700

    Moving framerate from VP9EncoderConfig to VP9_COMP.
    
    Framerate changes over [1;31mtime[m, VP9EncoderConfig supposed to have static
    read-only data.
    
    Change-Id: I36580a7ee71243c1eabb57691089691731d03e67

[33mcommit 7035527c9a1acac4bcd8e10acd84f8ffb9285b35[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Fri Aug 8 13:57:25 2014 -0700

    Improved vp9_quantize_fp_neon()
    
    Eliminated instructions by using better neon instructions
    and rearranging the loop.
    
    On a Nexus 7, vpxenc (in real[1;31mtime[m mode, speed -12)
    reported a performance improvement of ~1.0%.
    
    Change-Id: I6b1700e79318f647ea67ef25e954c308932950ec

[33mcommit ae249d8602fd553b91391dc112385b890bb89d2e[m
Merge: 566716e3a 545c32497
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Aug 7 10:18:08 2014 -0700

    Merge "Adding ticks <-> [1;31mtime[mbase units conversion functions."

[33mcommit 0a2b25dcb9e3a2ad6f4d8f1bbb9a192429f32831[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Jul 29 13:40:55 2014 -0700

    configure: add --enable-coefficient-range-checking
    
    This commit adds a configure [1;31mtime[m option used to enable strict error
    checking in decoder to make sure intermediate stage cofficients of
    inverse transforms are within valid range of signed 16 bit integer.
    
    For valid VP9 input streams, intermediate stage coefficients should
    always stay within the range of a signed 16 bit integer. Coefficients
    can go out of this range for invalid/corrupt VP9 streams. However,
    strictly checking this range for every intermediate coefficient can
    be a burden for decoder, therefore such validation is only enabled
    with configure option --enable-coefficient-range-checking.
    
    Change-Id: I47d47c8c4e48a922c3d223ca59064f51b3f0f5ed

[33mcommit 545c324971fb891a760507a51b0f472cf6a49ea8[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Aug 6 14:58:53 2014 -0700

    Adding ticks <-> [1;31mtime[mbase units conversion functions.
    
    Change-Id: I75abd57367a7974a9fab8a727b2bbc54dea428c3

[33mcommit 98165ec0744ebf7a786954691489face68e3ab03[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Fri Aug 1 11:35:55 2014 -0700

    Neon version of vp9_sub_pixel_variance8x8(),
    
    vp9_variance8x8(), and vp9_get8x8var().
    
    On a Nexus 7, vpxenc (in real[1;31mtime[m mode, speed -12)
    reported a performance improvement of ~1.2%.
    
    Change-Id: I8a66ac2a0f550b407caa27816833bdc563395102

[33mcommit 6f4b8dcdc2fb0595a20f1e05469f4d42147055dd[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Jul 30 12:16:04 2014 -0700

    Neon version of vp9_subtract_block()
    
    On a Nexus 7, vpxenc (in real[1;31mtime[m mode, speed -12)
    reported a performance improvement of ~3.2%
    
    Change-Id: I8862497264142171b7efc32df1a67714a23539f4

[33mcommit ca2dcb7feddc37f18060285fd9e381142e23df5d[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 29 09:50:03 2014 -0700

    Chessboard pattern partition search
    
    This commit enables a chessboard pattern constrained partition
    search for 720p and above resolutions. The scheme applies stricter
    partition search to alternative blocks based on its above/left
    neighboring blocks' partition range, as well as that of the
    collocated blocks in the previous frame. It is currently turned
    on at 16x16 block size level. The chessboard pattern is flipped
    per coding frame.
    
    The speed 3 run[1;31mtime[m is reduced:
    park_joy_1080p, 652832 ms -> 607738 ms (7% speed-up)
    pedestrian_area_1080p, 215998 ms -> 200589 ms (8% speed-up)
    
    The compression performance is changed:
    hd     -0.223%
    stdhd  -0.295%
    
    Change-Id: I2d4d123ae89f7171562f618febb4d81789575b19

[33mcommit d4a37db5b8389b8913056969b9cd1b5aa5a79abb[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Mon Jul 28 05:47:55 2014 -0700

    Neon version of vp9_quantize_fp()
    
    On a Nexus 7, vpxenc (in real[1;31mtime[m mode, speed -12)
    reported a performance improvement of ~12.4%
    
    Change-Id: Id29d215acf58bb108489e218a259adf74b4768d7

[33mcommit 521cf7e8795d38da8aa7b7356d97a6e561d02449[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Tue Jul 29 16:47:34 2014 -0700

    Neon version of vp9_sub_pixel_variance16x16(),
    
    vp9_variance16x16(), and vp9_get16x16var().
    
    On a Nexus 7, vpxenc (in real[1;31mtime[m mode, speed -12)
    reported a performance improvement of ~16.7%.
    
    Change-Id: Ib163aa99f56e680194aabe00dacdd7f0899a4ecb

[33mcommit 24fbfa42f1eaff737df420e7c93b2f286e5416af[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Tue Jul 29 11:28:23 2014 -0700

    Require armv6/media when building armv7
    
    When building with run[1;31mtime[m cpu detect assume that armv7 targets can be
    relied upon to have at least armv6 support. This may allow dead code
    detectors to remove some _c functions.
    
    Change-Id: Iaec4414011fcbbdf6f4ed0d90ef4a8fe8af540b5

[33mcommit d19d222db62503c91addbb20f97ddafc7cd636c8[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Mon Jul 28 15:21:10 2014 -0700

    Added vp9_fdct8x8_neon(), vp9_fdct8x8_1_neon()
    
    On a Nexus 7, vpxenc (in real[1;31mtime[m mode, speed -12)
    reported a performance improvement of ~3.7%.
    
    Change-Id: I428c72c40df82c6d537955e320a8debf99343004

[33mcommit e956c00762d9a7955be15ff9ae892227cf3429b4[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Wed Jul 16 02:30:21 2014 -0700

    Set and use uv_crop_[width|height]
    
    Ensure consistent border extension by rounding uv_crop_* at image
    creation [1;31mtime[m. Where it was rounded problems could arise with the right
    and bottom extensions.
    When padding = 32, y_width = 64, and y_crop_width = 63:
     (padding + width - crop_width + 1) / 2
     32 + 64 - 63 + 1 should equal 32 *but*
     32 + 1 + 1 equals 34 giving a right buffer of 17 instead of 16.
    By calculating uv_crop_* earlier we round up at the appropriate [1;31mtime[m and
    for the same values:
     (y_crop_width + 1) / 2
     63 + 1 / 2
     64
     (padding / 2) + uv_width - uv_crop_width
     16 + 16 - 16
     16
    
    Change-Id: If866cd1b63444771440edb1432280ac83875969b

[33mcommit 4f2f86725b3e56b28762318f3f810edcd6d619ef[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 23 11:47:56 2014 -0700

    Use the chessboard pattern pred search in newmv mode
    
    This commit extends the chessboard pattern prediction filter search.
    If the above and left blocks have the same prediction filter type,
    the encoder will skip the prediction filter type search and use the
    reference one.
    
    The overall chessboard pattern prediction filter type search reduces
    speed 3 run[1;31mtime[m for hard clips. Experiments on park joy at 1080p
    and 15000 kbps show that the run[1;31mtime[m goes from 723265 ms to 65832 ms,
    i.e., about 10% speed-up. Compression performance wise, it affects
    the coding quality by
    
    Change-Id: I880975497c7ad166532e9eea9bf46684d77ff327
    derf:    -0.326%
    yt:      -0.257%
    hd:      -0.241%
    stdhd:   -0.417%

[33mcommit 54ad09586c0deb26e7d305623dff78e200fdadef[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 22 16:32:20 2014 -0700

    Enable chessboard inter prediction filter type search
    
    This commit enables a chessboard pattern prediction filter type
    search scheme for rate-distortion optimization speed-up. For the
    inferred motion vector modes, the encoder can re-use its above/left
    neighbor blocks' prediction filter type and skip a full test on
    all possible filter types. Such operation is turned on/off
    alternatively in a chessboard manner.
    
    It is turned on in speed 3. For test clip pedestrian 1080p, the
    run[1;31mtime[m is reduced from 231500 ms -> 221700 ms. The compression
    performance is changed:
    derf:  -0.147%
    yt:    -0.134%
    hd:    -0.079%
    stdhd: -0.220%
    
    Change-Id: I1912f278e7576c2dc632688e3ad7a257410c605a

[33mcommit ffd948bbd527e7491d0e9f240251eb3f86fd7aa4[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 21 16:22:56 2014 -0700

    Turn on adaptive pred filter scheme for sub8x8 below 720p
    
    For sequences of resolution below 720p, the encoder will check
    intra prediction modes and inter prediction modes from LAST_FRAME.
    This commit turns on adaptive prediction filter scheme for sub8x8
    blocks, where inter prediction modes are enabled. For the test
    sequence bus at CIF, the speed 2 run[1;31mtime[m goes down from 17879 ms
    to 16783 ms, i.e., 6% speed up. The compression performance of
    derf set is down by -0.128%.
    
    Change-Id: I01d5321a5ceab4e0666ac5be56c52d896c7a8d45

[33mcommit 696fa52eaa35d1aaed497f3403fac6ef432e4822[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Jul 16 12:54:46 2014 -0700

    Added vp9_sad64x64_neon(), vp9_sad32x32_neon()
    
    and vp9_sad16x16_neon()
    
    On a Nexus 7, vpxenc (in real[1;31mtime[m mode, speed -6)
    reported a performance improvement of ~17%.
    
    Change-Id: I91e070cde2973451083d3f3d63b49b7886de9a85

[33mcommit a51e389b426d69f920dad77f4a30a6ff5187306c[m
Merge: 0e99f3a38 9bd3be69a
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Jul 9 13:46:42 2014 -0700

    Merge "Adjust full-pixel search method in real-[1;31mtime[m mode"

[33mcommit 9bd3be69a447766780e6164ad69eda8b7d0a266f[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jul 8 14:52:47 2014 -0700

    Adjust full-pixel search method in real-[1;31mtime[m mode
    
    Use FAST_HEX in speed 5 and 6, which covers more points than
    FAST_DIAMOND and improves motion search quality.
    
    At speed 6, RTC set borg tests showed slight quality gain (psnr
    gain: 0.143%, ssim gain: 0.226%). No noticeable encoding speed
    change.
    
    Change-Id: Ifa62875d9a52ee382ec494f271382bb77d8c67bf

[33mcommit 10aa23f751069fe464fbc3c0e35dcf9294f055f7[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Wed Jul 2 17:20:45 2014 -0700

    ctrl_get_reference does not need user_priv.
    
    The relationship of the user private data at run[1;31mtime[m
    is not preserved from decode() to this call which may
    occur at an unknown point in the future
    
    Change-Id: Ia7eb25365c805147614574c3af87aedbe0305fc6

[33mcommit 92a6db79288d1163ad1b429d63ba72db5c2b9434[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Jul 1 10:52:17 2014 -0700

    Added a speed feature controlling a motion search parameter
    
    This commit added a speed feature to control the step_param used in
    full pixel motion search. The intention is to reduced the search
    steps for high speed real [1;31mtime[m coding.
    
    Change-Id: I21d2f0105c2b647783a6688615da7fcf2b6d670b

[33mcommit 9ac2f6632044ad2ec268ed4921c31391f30ecd0c[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 1 16:10:44 2014 -0700

    Re-design quantization process
    
    This commit re-designs the quantization process for transform
    coefficient blocks of size 4x4 to 16x16. It improves compression
    performance for speed 7 by 3.85%. The SSSE3 version for the
    new quantization process is included.
    
    The average run[1;31mtime[m of the 8x8 block quantization is reduced
    from 285 cycles -> 255 cycles, i.e., over 10% faster.
    
    Change-Id: I61278aa02efc70599b962d3314671db5b0446a50

[33mcommit 64742f825d1e17a33ed412001414848789258e03[m
Merge: 2f16e79e6 f31ff029d
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jul 1 16:05:51 2014 -0700

    Merge "Elevate NEWMV mode checking threshold in real [1;31mtime[m"

[33mcommit f31ff029df13a415ab2eb8c2abbc212b41d5d6af[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jul 1 12:18:27 2014 -0700

    Elevate NEWMV mode checking threshold in real [1;31mtime[m
    
    The current threshold is knid of low, and in many cases NEWMV
    mode is checked but not picked as the best mode. This patch
    added a speed feature to increase NEWMV threshold, so that
    less partition mode checking goes to check NEWMV. This feature
    is enabled for speed 6 and 7.
    
    Rtc set borg tests showed:
    1. Speed 6, overall psnr: -0.088%, ssim: -1.339%;
       Average speedup on rtc set is 11.1%.
    2. Speed 7, overall psnr: -0.505%, ssim: -2.320%
       Average speedup on rtc set is 12.9%.
    
    Change-Id: I953b849eeb6e0d5a1f13eacba30c14204472c5be

[33mcommit dee5782f93cf9dcbe5e7fdad1873039fc0ab8cbf[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Jun 27 17:44:32 2014 -0700

    Enable encode breakout in real [1;31mtime[m
    
    For real [1;31mtime[m speed 7, once encode breakout is on(i.e. encoding
    setting --static-thresh=1), a proper encode breakout threshold
    is set to speed up the encoder.
    
    Set --static-thresh=1, RTC set borg test showed a slight overall
    psnr loss of 0.162%, but ssim gain of 0.287%. The average speedup
    on RTC set is 6%, and for some clips, the speedup can be 10+%.
    
    Change-Id: Id522d9ce779ff7c699936d13d0c47083de4afb85

[33mcommit 44472cde550764a2919ff2025e1d1ae40bc38ddf[m
Author: James Zern <jzern@google.com>
Date:   Fri Jun 27 15:08:07 2014 -0700

    vp9: disable postproc buffer alloc when unnecessary
    
    the buffer is only used in encoding and only when
    CONFIG_INTERNAL_STATS or CONFIG_VP9_POSTPROC is enabled.
    a future change should decouple this from the frame buffer allocation
    and make it conditional based on run[1;31mtime[m flags when the above config
    options are enabled.
    reduces decode heap usage by at least 12%
    
    Change-Id: Id0b97620d4936afefa538d3aadf32106743d9caf

[33mcommit 83269ff8ff1b17ebf5abffafd56d1bbf04420f21[m
Merge: 5ca7c65e0 df3819645
Author: Minghai Shang <minghai@google.com>
Date:   Fri Jun 27 11:48:22 2014 -0700

    Merge "[spatial svc] Remove encoding modes since we only need one mode at this [1;31mtime[m."

[33mcommit a9a13ce9443c468eb223fc775d020f4baf86f35c[m
Merge: 3cac9f0a0 340e7433b
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Fri Jun 27 10:07:03 2014 -0700

    Merge "Add real[1;31mtime[m coverage to cpu speed test"

[33mcommit 340e7433b7153311a3dd293f4bf1cc4709e54be2[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu Jun 26 16:16:38 2014 -0700

    Add real[1;31mtime[m coverage to cpu speed test
    
    Change-Id: I33e8d1788ce29ffc695f7e9b84167ef446b1b56c

[33mcommit 5a3e3c6d3fa308066e2cef1f8cbc407cd540c176[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jun 25 16:53:07 2014 -0700

    Adaptive txfm size selection depending on residual sse/variance
    
    This commit enables an adaptive transform size selection method
    for speed -6. It uses largest transform size when the sse is more
    than 4 [1;31mtime[ms of variance, i.e., most energy is compacted in the
    DC coefficient. Otherwise, use the default TX_8X8. It improves
    the compression efficiency for rtc set of speed -6 by 0.8%, no
    speed change observed.
    
    Change-Id: Ie6ed1e728ff7bf88ebe940a60811361cdd19969c

[33mcommit 56afb9c41ae31c9bd60e49b909940abc4bf25d71[m
Merge: 46218c9cb 46ea9ec71
Author: Jingning Han <jingning@google.com>
Date:   Thu Jun 26 11:00:25 2014 -0700

    Merge "Enable real-[1;31mtime[m version reference motion vector search"

[33mcommit 46ea9ec7193ae3ee8401f8a1214dcf1b5a3fc899[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jun 24 10:45:31 2014 -0700

    Enable real-[1;31mtime[m version reference motion vector search
    
    This commit enables a fast reference motion vector search scheme.
    It checks the nearest top and left neighboring blocks to decide the
    most probable predicted motion vector. If it finds the two have
    the same motion vectors, it then skip finding exterior range for
    the second most probable motion vector, and correspondingly skips
    the check for NEARMV.
    
    The run[1;31mtime[m of speed -5 goes down
    pedestrian at 1080p 29377 ms -> 27783 ms
    vidyo at 720p       11830 ms -> 10990 ms
    i.e., 6%-8% speed-up.
    
    For rtc set, the compression performance
    goes down by about -1.3% for both speed -5 and -6.
    
    Change-Id: I2a7794fa99734f739f8b30519ad4dfd511ab91a5

[33mcommit df381964539bde62e0961f1f255e1baa18862078[m
Author: Minghai Shang <minghai@google.com>
Date:   Wed Jun 25 10:42:04 2014 -0700

    [spatial svc] Remove encoding modes since we only need one mode at this [1;31mtime[m.
    
    Change-Id: I1b6ed2e82a7e3e8a9e790bf29d667a3f856a9518

[33mcommit bccc785f63458136a8a72a51ed7b34a5811ffc4f[m
Merge: b8c382f8e 0aae10007
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Jun 25 08:18:33 2014 -0700

    Merge "Reuse inter prediction result in real-[1;31mtime[m speed 6"

[33mcommit 0aae10007684fc3aa84ebf38a1a1d20e12ca8930[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Jun 20 10:11:34 2014 -0700

    Reuse inter prediction result in real-[1;31mtime[m speed 6
    
    In real-[1;31mtime[m speed 6, no partition search is done. The inter
    prediction results got from picking mode can be reused in the
    following encoding process. A speed feature reuse_inter_pred_sby
    is added to only enable the resue in speed 6.
    
    This patch doesn't change encoding result. RTC set tests showed
    that the encoding speed gain is 2% - 5%.
    
    Change-Id: I3884780f64ef95dd8be10562926542528713b92c

[33mcommit ccba289f8d1760a45b972685a64eb829529b70ab[m
Author: Jingning Han <jingning@google.com>
Date:   Thu May 29 18:14:17 2014 -0700

    Fast computation path for forward transform and quantization
    
    This commit enables a fast path computational flow for forward
    transformation. It checks the sse and variance of prediction
    residuals and decides if the quantized coefficients are all
    zero, dc only, or more. It then selects the corresponding coding
    path in the forward transformation and quantization stage.
    
    It is currently enabled in rtc coding mode. Will do it for rd
    coding mode next.
    
    In speed -6, the run[1;31mtime[m for pedestrian_area 1080p at 1000 kbps
    goes down from 14234 ms to 13704 ms, i.e., about 4% speed-up.
    Overall coding performance for rtc set is changed by -0.18%.
    
    Change-Id: I0452da1786d59bc8bcbe0a35fdae9f623d1d44e1

[33mcommit cdffeaaae05f9261ab9be5aebe0fbb2454b295fb[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Jun 9 16:01:53 2014 -0700

    Add mode info arrays and mode info index.
    
    In non frame-parallel decoding, this works the same way as
    current decoding scheme. Every [1;31mtime[m after decoder finish
    decoding a frame, it will swap the current mode info pointer
    and  previous mode info pointer if the decoded frame needs
    to be shown. Both mode info pointer and previous mode info
    pointer are from mode info arrays.
    
    In frame-parallel decoding, this will become more complicated
    as current frame's mode info pointer will be shared with next
    frame as previous mode info pointer. But when one decoder
    thread finishes decoding one frame and starts to work on next
    available frame, it needs to retain the decoded frame's mode
    info pointers until next frame finishes decoding. The mode info
    index will serve this purpose. The decoder will use different
    buffer in the mode info arrays and use the other buffer to save
    previous decoded frame’s mode info.
    
    Change-Id: If11d57d8eb0ee38c8876158e5482177fcb229428

[33mcommit 70eb862fd3ea11bcbd6d7811dffd5bc62d48c3d1[m
Merge: e0c650722 b04d76680
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Jun 9 13:07:24 2014 -0700

    Merge "Use small transform size in non-rd real-[1;31mtime[m mode"

[33mcommit b04d766800f39ed97361d2ec13b740cbf5bca534[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu May 29 16:53:23 2014 -0700

    Use small transform size in non-rd real-[1;31mtime[m mode
    
    In non-rd real-[1;31mtime[m mode, choosing smaller transform size in
    encoding gives better video quality and good speed gain than
    choosing larger transform size. This patch set tx size search
    method to ALLOW_8X8, which is better than using 4x4 or other
    larger sizes.
    
    Borg tests on rtc set at speed 6 showed significant gain on quality.
    PSNR gain: 11.034% and SSIM gain: 15.466%.
    
    The speed gain is 5% - 12% for <720p clips, and 2% - 7% for
    720p clips.
    
    Change-Id: If4dc74ed2df359346b059f47fb73b4a0193ec548

[33mcommit a4f747921ae9b0a11dc032ebc3a6364d2f6dd8b9[m
Author: Adrian Grange <agrange@google.com>
Date:   Fri Jun 6 10:37:22 2014 -0700

    Revert "Removing this_frame_stats member from TWO_PASS struct."
    
    Use of stack frame variable "fps" beyond the life[1;31mtime[m of the function.
    
    fps is sent as a paremeter to output_stats and stored in the
    packet holding this encoded frame. This has scope beyond the
    life[1;31mtime[m of the calling function.
    
    This reverts commit 3f95a230c7e54104201b3f6c577dfa9251b4642a
    
    Change-Id: Icd8e14b3d7dd733590ada12e619b9dce95b6b0f5

[33mcommit 6d21cbd20b07dd66f60add80cadd330470f5f529[m
Author: Jingning Han <jingning@google.com>
Date:   Wed May 28 10:51:09 2014 -0700

    Enable SSSE3 inverse 2D-DCT with 10 non-zero coeffs
    
    This commit enables SSSE3 implementation of the inverse 2D-DCT
    with only first 10 coefficients non-zero. It reduces the run[1;31mtime[m
    of SSE2 version from 745 cycles to 538 cycles, i.e., 27% speed-up.
    
    Change-Id: I18ba4128859b09c704a6ee361d69a86c09fe8dfe

[33mcommit 48b089137023cb7df2e750658e1c532f02db2ee5[m
Author: Jingning Han <jingning@google.com>
Date:   Thu May 22 09:44:40 2014 -0700

    Inverse 16x16 2D-DCT SSSE3 implementation
    
    This commit enables the SSSE3 implementation of full inverse 16x16
    2D-DCT. The unit run[1;31mtime[m goes down from 1642 cycles to 1519 cycles,
    about 7% speed-up.
    
    Change-Id: I14d2fdf9da1fb4ed1e5db7ce24f77a1bfc8ea90d

[33mcommit 03eb06212ab59c8d02f171740832822d3262e02f[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri May 16 15:12:31 2014 +0100

    Re-factor bit allocation in first pass.
    
    Restructuring to allocate the bits for each frame in
    a GF group at the [1;31mtime[m the group is defined.
    
    At the moment the allocation closely mirrors what
    we had before.
    
    Also changes the default rate adjustment method to
    LONG_TERM_VBR_CORRECTION.
    
    Change-Id: Ie5793c46c6b9c888cead5d8790792efd7d60b7c1

[33mcommit 3bda7ec1bab9b7336cf3218d1e7596f79930208c[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue May 20 11:36:44 2014 -0700

    Enable various thresholds of motion detection
    
    This commit changed to enable the encoder to adjust motion dection
    speed threshold based on picture size. In addition, cpu-used 1 now
    does a partition search every other frame instead of every third
    frame for low resolution inputs.
    
    The change has no quality/speed impact for 720p and above. Test
    showed the change increase encoding [1;31mtime[m by between 3% to 6% for
    cpu-used 2 encodiong of 360p sequences. It also has a compression
    gain about .3%.
    
    For cpu-used 2, the change resolved some very disturbing visual
    artifacts in certain sequences when large block partitionings and
    transforms are used as a result of copying the partition from a
    previous frame.
    
    Change-Id: Ic7fd22508cdb811d4ca935655adbf20109286cfa

[33mcommit 1fbab853c8b215c5787883618a80cc3e8ae8e44c[m
Author: Tamar Levy <tamar.levy@intel.com>
Date:   Tue Apr 22 22:40:48 2014 -0700

    AVX2 To VP9 Block Error Optimization
    
    vp9_block_error_sse2 can only handle 16 bytes at a [1;31mtime[m but
    the function requires to handle a sequence of 32 bytes at a [1;31mtime[m
    so each 16 bytes is handled in a different register.
    With AVX2 optimization the 32 bytes can be handled in one register instead
    of two in the SSE2
    The vp9_block_error was optimized by 85%.
    The user level was optimized by 1.2%
    
    Change-Id: Ia8fffe60e61eff7432a5fbd538757894f6c319fd

[33mcommit 734c5ffa2c003e8668ae8b58413064c98591f3fd[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Apr 23 14:54:16 2014 -0700

    Apply constrained partition search range to non-RD mode decision
    
    This commit enables a chessboard pattern for partition search. All
    the black blocks run regular partition search ranging from 8x8 to
    32x32. The rest white blocks take the nearby blocks' information
    to adaptively decide the effective search range.
    
    The compression performance for rtc set at speed -5 is down by 1.5%.
    For pedestrian 1080p at speed -5, the run[1;31mtime[m goes from 41594 ms to
    39697 ms, i.e., about 5% faster.
    
    Change-Id: Ia4b96e237abfaada487c743bca08fe1afd298685

[33mcommit 41a350a83dd080b40d8d0ee209ef400e6c72bde1[m
Author: Jingning Han <jingning@google.com>
Date:   Thu May 8 09:42:26 2014 -0700

    Change eob threshold for partial inverse 8x8 2D-DCT to 12
    
    The scanning order has the first 12 coefficients of the 8x8 2D-DCT
    sitting in the top left 4x4 block. Hence the partial inverse 8x8
    2D-DCT allows to handle cases with eob below 12.
    
    The overall run[1;31mtime[m of the inverse 8x8 2D-DCT unit is reduced from
    166 cycles (using SSE2) to 150 cycles (using SSSE3).
    
    Change-Id: I4514f9748042809ac84df4c14382c00f313f1cd2

[33mcommit 9e7b09bc5d45e309c0deeb1c95981ccb7b857876[m
Author: Jingning Han <jingning@google.com>
Date:   Fri May 2 16:29:08 2014 -0700

    SSSE3 8x8 inverse 2D-DCT with first 10 coeffs non-zero
    
    This commit enables ssse3 assembly implementation of the 8x8
    inverse 2D-DCT with only first 10 coefficients non-zero. The
    average run[1;31mtime[m for this unit goes down from 198 cycles to 129
    cycles (34.8% faster).
    
    Change-Id: Ie7fa4386f6d3a2fe0d47a2eb26fc2a6bbc592ac7

[33mcommit 52ae97b6aad982b51a121566282ccfc3d56452df[m
Author: Jingning Han <jingning@google.com>
Date:   Thu May 1 18:34:46 2014 -0700

    SSSE3 implementation of full inverse 8x8 2D-DCT
    
    This commit enables SSSE3 version full inverse 8x8 2D-DCT and
    reconstruction. It makes the run[1;31mtime[m of vp9_idct8x8_64_add down
    from 256 cycles (SSE2) to 246 cycles.
    
    Change-Id: I0600feac894d6a443a3c9d18daf34156d4e225c3

[33mcommit 1eaa3a76dc50fc8451cedbf4797d7e3b7a2d77d7[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Apr 23 09:13:45 2014 -0700

    Enable SSSE3 implementation of 8x8 forward 2D-DCT
    
    Assembly implementation of ssse3 8x8 forward 2D-DCT. The current
    version is turned on only for x86_64. The average unit run[1;31mtime[m
    goes from 157 cycles down to 136 cycles, i.e., about 12.8% faster.
    This translates into about 1.5% speed-up for pedestrian_area 1080p
    at speed 2.
    
    Change-Id: I0f12435857e9425ed7ce12541344dfa16837f4f4

[33mcommit 8969f7c8922c4e35d8d1267e82f82bf5f2f970b5[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Apr 23 10:33:41 2014 -0700

    Chessboard pattern prediction filter type search in non-RD coding
    
    This commit introduces a chessboard pattern search for the prediction
    filter type search. It runs extensive search in alternate blocks and
    allows the rest blocks to refer coding decisions of their nearby
    neighbors.
    
    For pedestrian 1080p at 4000 kbps, the run[1;31mtime[m of speed -5 goes down
    from 43990 ms to 42200 ms. The overall compression performance for
    RTC set is changed by -1.37%.
    
    Change-Id: Icfe220c49451cda796f0ca91d935c9ed01e56c9d

[33mcommit d928b34efec30d216515ed5e300023efd3900ff3[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Apr 21 12:04:59 2014 -0700

    Allow full RD TX size search for GF/ALT at speed 2
    
    For speed 3 and above, such search is only allowed at speed 3.
    The change helped cif and stdhd set by 1.2% and .7% in compression,
    but increased the encoding [1;31mtime[m by around 5%.
    
    Change-Id: Ifa4832327f1c1bef3decb032ceb769cbf50e059f

[33mcommit 1f58f9d09217d35d0d0901fe49965ef2014a53ce[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Apr 11 17:14:15 2014 -0700

    Fixing error found by ioc.
    
    vp9/encoder/vp9_rdopt.c:3913:44: run[1;31mtime[m error: index -1 out of bounds for
    type 'RefBuffer [3]'.
    
    Change-Id: Ic0ec755328853b359e3a1ee84d319589183e38b7

[33mcommit 181949948e6572a199a3de8046b553c903eb373b[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Apr 4 15:10:14 2014 -0700

    Add constrained-copy partition to speed features.
    
    Copy up to a certain bsize, otherwise set to a fixed bsize.
    This helsp to reduce artifact near moving boundary caused by full partition
    copy without checking motion of super-block.
    This artifact can occur at speeds 3,4 in real-[1;31mtime[m mode.
    Issue: https://code.google.com/p/webm/issues/detail?id=738.
    
    Change-Id: I05812521fd38816a467f72eb6a951cae4c227931

[33mcommit 516d0b1180dc7712373e571c0cd74e621dc2e185[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Apr 3 18:04:04 2014 -0700

    Set up early RD cost check for NEWMV in non-RD mode decision flow
    
    This commit estimates the motion vector rate cost right after full
    pixel motion search. It combines this and the mode cost and compares
    the corresponding rate-distortion cost. If it is already above the
    current best one, skip the rest sub-pixel motion search and modeling
    process. For pedestrian_area 1080p at 4000 kpbs, the speed -5 run[1;31mtime[m
    goes down from 39425 ms -> 38399 ms.
    
    Change-Id: If4cd7119fd6c266798d5cf1d19d19ab425e52a26

[33mcommit 36f61aa836665f257f8a2eb0d1af9b9fb9648451[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Apr 2 11:03:27 2014 -0700

    Set min_block_size for aq_mode=3 to 8x8.
    
    For real-[1;31mtime[m mode under cbr, this increases the gain (5-10%)
    for speed 5 (none/little change for 6), on vc-clips.
    
    Change-Id: I9b38beeb3c820de22c43a0ba53a9456168dd24ba

[33mcommit 12dd53d06a895a188ac491751e5c21acc12f42e8[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Mon Mar 31 16:54:33 2014 -0700

    Propagate active map state.
    
    This fixes active map for non-rd real[1;31mtime[m speeds.
    
    Change-Id: I1bf416de3f7ef2e5dd2eabde052cce3c0683a52c

[33mcommit 49b2330d8b3e8efa39af9195c984ca46d0b761e2[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Mar 19 11:52:13 2014 -0700

    Add prediction mode skipping in non-rd situation
    
    In non-rd pick_mode code, added mode skipping according to
    thresholds. Used rd thresholds now, but we can modified them
    later for real-[1;31mtime[m case.
    
    RTC set borg test showed a 0.095% PSNR gain. For different rtc
    clips, the real-[1;31mtime[m(speed 7) encoder speedup is 2% - 10%.
    
    Change-Id: Ic72535c96b891092c662453be32d3168f7e34dcc

[33mcommit fcdabb105f10c069bf4c671650cff454a9739e61[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Mar 20 17:58:35 2014 -0700

    Disable speed 6 for datarate test.
    
    One of the tests for real-[1;31mtime[m mode is failing at speed 6.
    Introduced recently, will enable again when fixed.
    
    Change-Id: I8f42de6a3eca226c9aa5c5e1fab98d629993c087

[33mcommit 16c15c10932c33595d349a74c82e68a49ebbac13[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Mar 20 11:32:39 2014 -0700

    Log encoding [1;31mtime[m/fps in vpx_temporal_scalable_patterns
    
    Change-Id: I368750c3641c5daaa8871f3880af5cfcf5e79bba

[33mcommit 60f9ebc3f1119ce2d0a56f8b17b98304a1b5780f[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Mar 19 11:25:40 2014 -0700

    Enable variable block size test in non-RD mode decision
    
    This is an initial attempt to allow variable block size partition
    in non-RD coding flow. It tests 8x8, 16x16 and 32x32 block size per
    64x64 block, all using non-RD mode decision and the associated rate
    distortion costs from modeling, then selects the best block size to
    encode the entire 64x64 block. Such operations are triggered every
    other 3 frames. The blocks of intermediate frames will reuse the
    collocated block's partition type.
    
    It improves the compression performance by 13.2%. Note that the gains
    are not evenly distributed. For many hard clips, the compression
    performance is improved by 20% to 28%. Local speed test shows that
    it will also increase run[1;31mtime[m by 50%, as compared to speed -7. It is
    now enabled in speed -6 setting.
    
    Change-Id: Ib4fb8659d21621c9075b3c369ddaa9ecb0a4b204

[33mcommit 762df0b95b5b653700f551728c257b8264bc040c[m
Merge: 44a203f5c 188074414
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Mar 10 10:05:27 2014 -0700

    Merge "Add real[1;31mtime[m-mode to datarate tests."

[33mcommit 188074414ee9b878a197d1d22894b183d88b306f[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Mar 6 18:34:48 2014 -0800

    Add real[1;31mtime[m-mode to datarate tests.
    
    Change-Id: Ib7ef6afbc80a38b134522bff283c01fadbec874b

[33mcommit 2f4eb5f0966f45e824650fb7ad40442e6cda6fc4[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Feb 28 15:41:53 2014 -0800

    Remove vp9_create_common()
    
    The function has evolved over [1;31mtime[m, now only calls vp9_rtcd(), so this
    commit removes the function and changes to call vp9_rtcd() directly.
    
    Change-Id: I8cfa6190daa4b28f6f3d1e11bb3a07f9c95322bf

[33mcommit bf5e9221d69eddbd77ca336c82a14a05c08e9ab8[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 28 09:15:36 2014 -0800

    Fix potential invalid partition size use
    
    For blocks at frame boundary, the selected block size some[1;31mtime[ms needs
    to be smaller than that was first given. This commit forces such block
    size change only between square blocks, so as to avoid the potential
    use case containing 32x16 + 16x8 + 16x8, for 1080p sequences.
    
    Local test suggested no visible coding speed difference. Borg test
    reveals no difference in terms of compression performance.
    
    Change-Id: Ie8de87f3c6febc3acf11b4cbfdf2077f9f6def52

[33mcommit 24c7ee78c59eb2237d12658f8ca01ad0862bc444[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 28 09:35:08 2014 -0800

    Skip some mode SAD calculation in non-RD mode
    
    This commit checks if the motion vector associated with the current
    mode has been computed in previous mode tests. If possible, skip the
    redundant reference block generation and SAD calculation in the
    non-RD mode decision process.
    
    For test sequence pedestrian_area 1080p, the run[1;31mtime[m goes from
    24261 ms to 23770 ms. This does not change compression performance.
    The speed-up is mostly around places with consistent motion.
    
    Change-Id: I97be63c6a2d07c57be26b3c600fbda3803adddda

[33mcommit c30d5703e5078337b7e01213145ae758d74df450[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Feb 26 09:52:23 2014 -0800

    Run sub-pixel motion search for NEWMV mode test
    
    As Yunqing suggested, this commit makes non-RD mode decision always run
    sub-pixel motion search in NEWMV mode. The compression performance
    gains becomes fairly significant after we enabled sub-pixel accuracy
    motion compensated prediction to calculate SAD cost.
    
    For test sequences pedestrian_area at 1080p and vidyo1 at 720p, the
    run[1;31mtime[m goes slower by 5%. For rtc test set, the compression performance
    is improved by 21.20%.
    
    Change-Id: I38cbfdd5c53d79423e1fafb3154f8ddeed63bbf0

[33mcommit fe0c09c2aab48da32d2a1e78efad2f5310b1385f[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Feb 25 14:15:00 2014 -0800

    Reduce the frequency of partition size adjsutment
    
    The commit change to use partitions sizes directly from last frame
    for frames directly where last frame selects partitions sizes based
    on coding efficiency.
    
    On --rt --cpu-used=-5, the change hurts compression by 4% but reduces
    encoding [1;31mtime[m by ~20%
    
    Change-Id: Ia68665e5c8489b7bfcf5fac7768332fba88928e6

[33mcommit c0e99f84f9c2ff909020a7ce76f60d1f78b56fc7[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Feb 25 16:12:35 2014 -0800

    Use sub-pixel accuracy prediction non-RD mode
    
    This commit builds the actual prediction block in sub-pixel accuracy
    and uses which to calculate SAD for non-RD mode decision. In the trail
    run on pedestrian_area at 1080p, rtc speed -7 run[1;31mtime[m goes from
    23495 ms -> 25107 ms (7% slower). The compression performance is
    improved by 20.57% for rtc test set.
    
    Change-Id: I438589cd103fe99f1b50c2d1939ac6ca43fa0157

[33mcommit 008ef8dd0d667471592bb488829955913ed6cf3c[m
Merge: da6b224e3 6d1513274
Author: Tom Finegan <tomfinegan@google.com>
Date:   Tue Feb 25 09:44:31 2014 -0800

    Merge "Change dx_[1;31mtime[m data type in vpxdec.c"

[33mcommit 6d1513274296d0d7846604c29c94b51d36b8c0b6[m
Author: James Yu <james.yu@linaro.org>
Date:   Sat Feb 22 14:51:11 2014 +0800

    Change dx_[1;31mtime[m data type in vpxdec.c
    
    Change dx_[1;31mtime[m data type to int64_t to prevent
    test [1;31mtime[m overflow when decoding long video.
    
    Change-Id: I3dd5e324a246843e07e635fd25c50e71e385ed70
    Signed-off-by: James Yu <james.yu@linaro.org>

[33mcommit 836252bfa6338ca29bbfe3c9ccc8798ea32140d2[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 21 18:25:43 2014 -0800

    Periodically update mode and mv costs
    
    Skip coefficient cost update in non-RD mode decision setting. Allow
    periodical mode and motion vector cost update. Currently every other
    8 frames. The increment run[1;31mtime[m is a constant number. Hence more
    visible for CIF resolution, while negligible for 1080p.
    
    Speed -6 compression performance for rtc set is improved by 4.5%.
    
    Change-Id: I27e0ad7c521fcc2af1d825582cbdd1a27ac4c323

[33mcommit bc28ee7bb1d8b67e544ce236e7a441e9d79efaa6[m
Merge: 67a1bff91 d66bd2252
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Fri Feb 21 15:45:33 2014 -0800

    Merge "Require an --experimental-bitstream flag at run[1;31mtime[m for encoding profile 1."

[33mcommit d66bd225263c7f644ff886bb7b1a4743a633385f[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Fri Feb 21 10:52:09 2014 -0800

    Require an --experimental-bitstream flag at run[1;31mtime[m for encoding profile 1.
    
    Change-Id: I73865bbbf6ea74434f15b73783ae97b4d273be80

[33mcommit d66a63f02b4fe6c4ba310b8dff384c00f3dcd5ce[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Feb 19 15:30:09 2014 -0800

    Enable reduced set of intra modes in rtc coding
    
    This commit enables the use of DC, vertical, and horizontal intra
    prediction mode in rtc non-RD mode decision. When the best cost value
    of inter modes is above a given threshold, the encoder runs the
    above three intra modes and selects the one that has minimum
    prediction residual in terms of SAD.
    
    This together with recent changes on non-RD mode decision and coding
    control improves compression performance of speed -6 by
    derf  91%
    yt    61%
    hd    46%
    stdhd 52%
    
    In terms of encoding speed, it is about 3 [1;31mtime[ms faster than speed -5.
    
    Change-Id: I6b483bfd0307e6482bb22a6676ae4e25a52b1310

[33mcommit cde6b50cb15947be71014c011824f962e30bb6f6[m
Merge: 1d3499113 360c80cfb
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Feb 20 12:07:10 2014 -0800

    Merge "Use fast HEX search in real [1;31mtime[m mode"

[33mcommit 360c80cfb95559b3a49fc4624a24dee01e1abb6a[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Feb 14 15:55:49 2014 -0800

    Use fast HEX search in real [1;31mtime[m mode
    
    In good quality mode motion search, the best matches are normally
    found after searching in a large area. In real [1;31mtime[m mode, to make
    encoding fast, a center-biased fast HEX search is used, which
    converges quickly most of the [1;31mtime[m. A 4-point diamond search is
    also carried out as the following refining search, which gives more
    precise results, and maintains good motion search quality.
    
    At speed 5, the borg test on rtc set showed an overall PSNR loss of
    0.936%. The encoding speed gain is 4% - 5%.
    
    Change-Id: I42cd68bb56a09ca1b86293c99d5f7312225ca7ae

[33mcommit 0000e3a8c7a100bd60cc41f28d553f4b6a2a9c88[m
Merge: cd6b9936a 25f22d2e0
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Feb 14 09:27:01 2014 -0800

    Merge "In real[1;31mtime[m mode enforce one pass with 0 lag"

[33mcommit 25f22d2e0b82271f59dc67b0dc7ac6ff2f55e0dd[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Feb 13 15:34:42 2014 -0800

    In real[1;31mtime[m mode enforce one pass with 0 lag
    
    vpxenc level changes to enforce one pass encoding with 0
    lag_in_frames when --rt mode is on.
    
    Change-Id: I3e71719e87c9f66566cb4d944cf5705904f9a5b8

[33mcommit 356a7e96420c297d87fad5c00640ddc2ea0556c3[m
Merge: 9453c6472 507fd5220
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Feb 11 21:07:24 2014 -0800

    Merge "Enable encode_breakout in real [1;31mtime[m encoding"

[33mcommit 507fd5220b50be735c462308778efed9709404a6[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Feb 4 11:09:34 2014 -0800

    Enable encode_breakout in real [1;31mtime[m encoding
    
    In real [1;31mtime[m encoding, we enable encode_breakout to make encoding
    fast. A speed feature "use_encode_breakout" is defined to set
    encode_breakout thresholds for different speeds.
    
    However, currently, static_thresh is an encoder option. The encode_
    breakout can be turned off if user sets static_thresh=0 specifically.
    
    The rtc set borg test result: (need to set --static_thresh=1)
    speed -5, psnr loss -3.543%;
    speed -4, psnr loss -2.358%;
    speed -3, psnr loss -0.771%.
    
    Encoding speed test:
    speed -5, 11% - 60% speedup;
    speed -4, 5.5% - 28% speedup;
    speed -3, 0.8% - 7% speedup.
    
    Change-Id: Icde592ffbe77eac7446f872a2e9eb2051733677b

[33mcommit d1961e6fbfd5642cf2250e17e65d6499d8819e8e[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Feb 3 12:40:18 2014 -0800

    Optimize bilinear sub-pixel filters in ssse3
    
    This patch added ssse3 optimization of bilinear sub-pixel filters.
    The real [1;31mtime[m encoder was speeded up by ~1%.
    
    Change-Id: Ie82e98976f411183cb8c61ab8d2ba0276e55a338

[33mcommit 2488cb34bc894cb5f5e0d5afaa85605c60e2f5ab[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Jan 29 15:49:03 2014 -0800

    Optimize bilinear sub-pixel filters in sse2
    
    Using bilinear filters could speed up the codec in real-[1;31mtime[m mode.
    This patch added sse2 optimizations of bilinear filters that
    operate on different-sized blocks.
    
    Tests showed that the real-[1;31mtime[m encoder was speeded up by 3%.
    
    Change-Id: If99a7ee4385fcc225c3ee7445d962d5752e57c3f

[33mcommit 17b899322c7b6f9e18fdacf1fc261ed562f874d5[m
Author: James Zern <jzern@google.com>
Date:   Fri Jan 31 20:10:28 2014 -0800

    resize_test: silence a warning
    
    the [1;31mtime[mbase of pts is 1/fps, so casting down to unsigned is safe here.
    
    Change-Id: I2e2f9bb68604c3c5539804685e6166beb54fe83e

[33mcommit d6a319c62c94adbe9125aeff4d995e1584984a69[m
Merge: 903801f1e 6a4e2ddab
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Jan 31 15:31:33 2014 -0800

    Merge "Properly merge two different real [1;31mtime[m modes"

[33mcommit 6a4e2ddabc7af605ab65b6510539e6aa9d63b5d2[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jan 30 18:33:26 2014 -0800

    Properly merge two different real [1;31mtime[m modes
    
    --rt --cpu-used=-5 uses the progressive rtc mode
    --rt --cpu-used=-6 uses the new super fast rtc mode
    
    Change-Id: Id6469ca996100cdf794a0e42d76430161f22f976

[33mcommit 1ca118652901b8ea8beccc71bc7079c77cc5554d[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Jan 29 10:03:07 2014 -0800

    Add a strict mode for auto_min_max_partition_size feature
    
    In this new mode, the size range is strictly determined by the min
    and max partition size in neighborhood blocks.
    
    Niklas720 encoding [1;31mtime[m at cpu-used -5 goes from 56250ms to 50676ms,
    a 10% reduction.
    
    Change-Id: I316b0e2ac967ff3fad57b28d69c0ec80b7d8b34e

[33mcommit a8285de7a8d53ca07ceb62335448f02be76798cf[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Jan 29 14:15:34 2014 -0800

    Removing SECTIONBITS_OUTPUT.
    
    This code seems to be unmaintaned for a long [1;31mtime[m (e.g. because of __int64
    type usage).
    
    Change-Id: I35fd60d985032fe824f6fd6266910378adcca519

[33mcommit ea8aaf15b55a19f569c328f26cc8d8ad82a9235c[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Jan 29 08:39:39 2014 -0800

    create super fast rtc mode
    
    This patch only works if the video is a width and height that are both
    a multiple of 32..   It sets every partition to 16x16, and does INTRADC
    only on the first frame and ZEROMV on every other frame.   It always does
    does the largest possible transform, and loop filter level is set to 4.
    
    Was ~20% faster than speed -5 of vp8
    
    Now 20% slower but adds motion search ( every block ), nearest, near
    and zeromv
    
    The SVC test was changed because - while this real[1;31mtime[m mode produces
    bad quality albeit quickly, it isn't obeying all the rules it should
    about which frames are available.
    
    Change-Id: I235c0b22573957986d41497dfb84568ec1dec8c7

[33mcommit af87148a225e695fbb95e4ee9dde72e12f5d7096[m
Merge: 00bfacb76 770454f3a
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Jan 28 09:57:08 2014 -0800

    Merge "Add vp9_tm_predictor_32x32 neon implementation which is 7.8 [1;31mtime[ms faster than C."

[33mcommit 770454f3a8d62c2698538fdff3b15bf900c60392[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Jan 27 14:03:06 2014 -0800

    Add vp9_tm_predictor_32x32 neon implementation
    which is 7.8 [1;31mtime[ms faster than C.
    
    Change-Id: I858ef4ec09202a07d445da8db702783d6d9d7321

[33mcommit c0214e715592d90bfe985b148ab0417fa22e6b46[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Fri Jan 24 15:57:40 2014 -0800

    Cache loop filter errors.
    
    This avoids fitlering a frame multiple [1;31mtime[ms at the same level.
    
    Change-Id: I1fd54dd7ea257d16da8569f48036b8fad3a3ed61

[33mcommit 92ab96a7ae4a568f96e8036b944e93ee049a131e[m
Merge: 26c88ec14 3633ffcbf
Author: Hangyu Kuang <hkuang@google.com>
Date:   Fri Jan 24 10:48:44 2014 -0800

    Merge "Add vp9_tm_predictor_16x16 neon implementation which is 3.5 [1;31mtime[ms faster than C."

[33mcommit 3633ffcbf7b04b15e2dcb6b2834e1685fbbf6bf4[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Jan 21 14:49:15 2014 -0800

    Add vp9_tm_predictor_16x16 neon implementation
    which is 3.5 [1;31mtime[ms faster than C.
    
    Change-Id: I24439ba7a2971829c11620f34848facf2c916678

[33mcommit a72cc78ec581a12affea7e053cd6e56f226270c3[m
Merge: e0ec51d32 3fcaf97fd
Author: James Zern <jzern@google.com>
Date:   Wed Jan 22 19:45:43 2014 -0800

    Merge "cpplint: restore run[1;31mtime[m/sizeof"

[33mcommit 3fcaf97fd5ad54211e92d02327b0c5ceb4544054[m
Author: James Zern <jzern@google.com>
Date:   Tue Jan 21 17:56:04 2014 -0800

    cpplint: restore run[1;31mtime[m/sizeof
    
    dropped in r113; this check is helpful in this project
    
    Change-Id: If810607b7cbf89ad701b4865d685f4b96aeee2dc

[33mcommit 2f52decd22ca02187ccc9f5d88bd4f5bc921b47d[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jan 10 11:51:20 2014 -0800

    Inter-frame non-RD mode decision
    
    This commit setups a test framework for real-[1;31mtime[m coding. It enables
    a light motion search for non-RD mode decision purpose.
    
    Change-Id: I8bec656331539e963c2b685a70e43e0ae32a6e9d

[33mcommit 94bb09cab8a31cb28c265d509b24353c01263c9f[m
Merge: 8f0d21349 150fbfc7b
Author: Tom Finegan <tomfinegan@google.com>
Date:   Wed Jan 15 17:42:39 2014 -0800

    Merge "vpxenc: Warn on lagged encoding with real [1;31mtime[m."

[33mcommit 3977e64fc78e4d30bbbceaa0432a86c49a343e2b[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Jan 15 15:30:13 2014 -0800

    don't dummy pack if we won't recode
    
    Avoid packing the bitstream 2 [1;31mtime[ms unless we need to.  For me this
    at speed -5 was a 2% speed up.
    
    Change-Id: I32205c98f55eedd4ff031ed5fb498c84bdaa855d

[33mcommit 150fbfc7b68ac7236225fbe11251692e03c239d6[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Tue Jan 14 18:04:35 2014 -0800

    vpxenc: Warn on lagged encoding with real [1;31mtime[m.
    
    Restore warning when attempting to use lagged encoding with real [1;31mtime[m mode.
    
    Change-Id: I109026db64566906f288f42d2686084ae5c13500

[33mcommit d66c7486351530662c2c906b55c1c0e89ec6299d[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jan 9 18:01:30 2014 -0800

    Enable skipping reference frame check in rd loop
    
    This commit allows encoder to compare the SAD cost associated with
    the best motion vector predictor, per frame. If one reference frame
    has this cost more than 4 [1;31mtime[ms of the best SAD cost given by other
    reference frames, skip NEARESTMV, NEARMV, ZEROMV mode check of this
    reference frame.
    
    This setting is turned on in speed 2 and above. Compression quality
    change in speed 2:
    derf  -0.014%
    yt    -0.097%
    hd    -0.023%
    stdhd  0.046%
    
    It reduces the speed 2 run[1;31mtime[m of test sequences:
    pedestrian_area_1080p 4000 kbps 310763 ms -> 303595 ms
    bluesky_1080p 6000 kbps         259852 ms -> 251920 ms
    
    Change-Id: I7f59cf79503d51836d61d56d50dc5bdf0e502e22

[33mcommit 2d381d76d867d70e946b62a82f5f3fcedd25d330[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jan 9 11:50:24 2014 -0800

    Simplify set_rt_speed_feature()
    
    1. Made speed choices to be progressive
    2. Adjusted rt speed settings to achieve better speed/quality
    
    Overall, rt-5 gained 2.5% in compression/quality, encoding [1;31mtime[m of 720p
    niklas clip goes from 137,052ms to 121,874ms
    
    Change-Id: Ia6e7e1e15225395a868a2f1059c3db8e266e1600

[33mcommit af31b27aae70d18bf5d52307bde1ab356b7c42b5[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jan 9 12:43:40 2014 -0800

    Optimze inv 16x16 DCT with 10 non-zero coeffs - P2
    
    This commit further optimizes SSE2 operations in the second 1-D
    inverse 16x16 DCT, with (<10) non-zero coefficients. The average
    run[1;31mtime[m of this module goes down from 779 cycles -> 725 cycles.
    
    Change-Id: Iac31b123640d9b1e8f906e770702936b71f0ba7f

[33mcommit ba6ab46cdcb1b3ae977984c9e18b122c72370eb6[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jan 7 14:35:02 2014 -0800

    Optimze inv 16x16 DCT with 10 non-zero coeffs - P1
    
    This commit is the first patch optimizing SSE2 implementation of inverse
    16x16 DCT with <10 non-zero coefficients. It focused on the first 1-D (row)
    transformation. It exploits the fact that only top-left 4x4 block contains
    non-zero coefficients, in a 2-D inverse 16x16 DCT with <10 coeffients.
    
    The average run[1;31mtime[m of idct16x16_10 unit is reduced from
    883 cycles -> 779 cycles (12% faster).
    
    For pedestrian_area_1080p 300 frames at 4000 kbps, the speed 2 run[1;31mtime[m goes
    down from 310651 ms  -> 305910 ms. The decoding speed goes up from
    80.37 fps -> 80.87 fps.
    
    Change-Id: Ic6f3ac5a637a76c07ba73ddaafe318a699fea645

[33mcommit 06e4f825af0a2dfe799364a50c19dfa2654437ad[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jan 7 09:53:38 2014 -0800

    Fix an issue in motion vector prediction stage
    
    The previous implementation stops motion vector prediction test when
    the zero motion vector appears for the second [1;31mtime[m. This commit fixes
    it by simply skipping the second [1;31mtime[m check on zero mv and continuing
    on to next mv candidate.
    
    It slightly improves stdhd in speed 2 by 0.06% on average. Most static
    sequences are not affected. A few hard ones, like jet, ped, and riverbed
    were improved by 0.1 - 0.2%.
    
    Change-Id: Ia8d4e2ffb7136669e8ad1fb24ea6e8fdd6b9a3c1

[33mcommit 9aa16eecd0f9c8071bd2d9791d9940191f345ee2[m
Merge: 11660c6b3 a2c01ed5b
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Jan 6 16:26:57 2014 -0800

    Merge "Added placeholder for real [1;31mtime[m mode"

[33mcommit 393a8ccef9384e84490b1c7f940b5f87408e94b4[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jan 6 13:29:16 2014 -0800

    Remove avoid_frame_with_high_error from RD loop
    
    The feature undergoes prior assumption that the recursive partition
    size search from 4x4 to 64x64, hence utilizing information from small
    blocks to determine early termination in large block rate-distortion
    optimization search. The current codebase is now going from top down.
    The previous function might go with not properly initialized values,
    hence removed.
    
    Tested on pedestrian_area_1080p at 4000 kbps running under speed 2.
    No visible difference in run[1;31mtime[m observed.
    
    Change-Id: I553df415c6191413762db7ae34e8790c71d8118e

[33mcommit a2c01ed5b45bcb42a30244e3272d9c833aed39be[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Jan 6 11:51:18 2014 -0800

    Added placeholder for real [1;31mtime[m mode
    
    Change-Id: I203d10f76c7ca78d875eaae15557cd765c6240d1

[33mcommit 1bb11781e2be1a047e5f38a5cd3d6f5c8d0a107b[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jan 2 15:33:38 2014 -0800

    Rework idct8x8_10 SSE2 implementation
    
    This commit optimizes the SSE2 implmentation of idct8x8_10. It exploits
    the fact that only top-left 4x4 block contains non-zero coefficients,
    and hence reduces the instructions needed.
    
    The run[1;31mtime[m of idct8x8_10_sse2 goes down from 216 to 198 CPU cycles,
    estimated by averaging over 100000 runs. For pedestrian_area_1080p 300
    frames coded at 4000kbps, the average decoding speed goes up from
    79.3 fps to 79.7 fps.
    
    Change-Id: I6d277bbaa3ec9e1562667906975bae06904cb180

[33mcommit d24f4e49c104c2489bc1e6402370170e1762cddf[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Dec 27 16:10:18 2013 -0800

    Removing CONFIG_MD5.
    
    We don't need compile [1;31mtime[m md5 configuration because --md5 is a run[1;31mtime[m
    option.
    
    Change-Id: Ic0a2427ae5de5a18f31e5ee60c3732481b377ca1

[33mcommit 19c53534bd86f8ee49b431f34b5d43560954b115[m
Author: James Zern <jzern@google.com>
Date:   Wed Dec 18 15:59:09 2013 -0800

    test/partial_idct_test: fix formatting and a warning
    
    test/partial_idct_test.cc:74:5: warning: variable 'size' is
    used uninitialized whenever 'if' condition is true
    [-Wsome[1;31mtime[ms-uninitialized]
        ASSERT_TRUE(0) << "Wrong Size!";
    
    Change-Id: Ic2f880ae09268561c9f036b4d6de220fde6dc5c4

[33mcommit b295092b8fcac34fd657df45b15fed54ed89b814[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Dec 6 09:16:36 2013 -0800

    Full range motion search for regular block sizes
    
    Add a full range motion search for regular block sizes. This runs
    exhaustive search within the given reference area. This commit further
    optimizes the search process by combining 4 points test into one
    pipeline, which gives 30% speed-up as compared to run each individual
    point at a [1;31mtime[m.
    
    This full range search serves as a best possible motion search reference.
    When replacing the diamond search with full range search, the speed 0
    run[1;31mtime[m of bus CIF at 2000 kbps goes from 153872ms to 623051ms. The
    compression performance compared to speed 0 setting gains 0.585% for
    derf set.
    
    Change-Id: Ieef1225216b0b86b4ac4872fa7fb9e18bf2eabb3

[33mcommit d427fab587842abee67f0f29c1aa8a904fd0a2b0[m
Author: Adrian Grange <agrange@google.com>
Date:   Thu Nov 21 17:19:04 2013 -0800

    Fix bug in extend_frame chroma extended too far
    
    This fixes issue 667.
    
    In the case where the frame was an odd number of pixels
    wide or high, the border was being extended by one col
    or row too far.
    
    The calculation of color plane dimensions was modified
    to use those already computed at the [1;31mtime[m the frame
    buffer was allocated.
    
    Also freed the temporary scaling buffer in vpxdec to
    prevent a memory leak.
    
    Change-Id: Ied04bdcdfd77469731408c05da205db1a6f89bf5

[33mcommit b5e6d6cccfa2b3b819300f8e35a3e0d51188586f[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Nov 15 11:04:09 2013 -0800

    Add filter_selectively_vert_row2 to enable parallel loopfiltering
    
    Added filter_selectively_vert_row2 to be ready for parallel
    loopfiltering in vertical direction. This change did 2-row
    filtering at a [1;31mtime[m. If 2 vertically adjacent 8x8 blocks do same
    type of filtering, we can do 16-pixel filtering in parallel.
    
    Next, we need to provide 16-pixel loopfiltering functions in c
    and optimized versions for codec speedup.
    
    Change-Id: Idf97bbdd70566e55bd30e1fd25cb8544e33291be

[33mcommit 9f268611472bbdfa751aedb74a306ee502e7faca[m
Author: Erik Niemeyer <erik.a.niemeyer@intel.com>
Date:   Tue Nov 19 21:11:57 2013 -0700

    Support for extended feature flags enumeration leaf in CPUID instruction
    
    This CL fixes an overcite with the AVX2 support CL previously
    merged (Change-Id: Idc03f3fca4bf2d0afd33631ea1d3caf8fc34ec29) that
    prevented run[1;31mtime[m execution of AVX2 code in WebM.
    
    Background:
    Starting with the Sandybridge processor, the CPUID instruction was
    enhanced to add various extended feature flag enumeration leaves.
    Reading these leaves requires an additional input value for the CPUID
    instruction which is stored in ECX. This change adds this second input
    value for all ARCH_X86 and ARCH_x86_64 targets to the CPUID macros,
    allowing checks of EBX bit 5 for AVX2 support. This capability will be
    required moving forward to check for future processor features.
    
    Change-Id: Ie9d872bc9ff68dad4b6578e4544e4dfd0ae26c36
For keyword perf:
[33mcommit 6126afe62e0044df3664edfed9b84a7f36c23c3a[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Mon Mar 16 14:49:56 2015 -0700

    Fix external resize memory issues.
    
    These were uncovered by the chromoting [1;31mperf[mtest.
    
    Change-Id: Ia5a90fd1718ff757c1484decf3861295260e6722

[33mcommit 1f00a9b9d570b410e4b5b6e292528400ff0c027f[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Mar 13 16:51:29 2015 -0700

    Fix choose_partitioning threshold setup for speed -5
    
    The compression [1;31mperf[mormance of speed -5 is on average 12.6% better
    than speed -6. At lower bit-rates, the gains are typically 20% or
    more. For 2-thread encoding, the speed -5 takes about 1.6x time of
    speed -6.
    
    Change-Id: If7a73464a24d33e8f49b9533b51ec51c8da7fc80

[33mcommit 427cdf0a41988320c721462d02884a6a4f19aee4[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Mar 12 16:18:12 2015 -0700

    Reduce the number of full block SAD calls
    
    This commit uses a 6-point 1-step refine motion search in the
    integral projection based full pixel motion estimation, to replace
    the current 9-point search.
    
    It reduces runtime cost of speed -6 on some noisy clips, e.g.,
    dark720p single thread
    33314 b/f, 40.076 dB, 18231 ms ->
    33307 b/f, 40.067 dB, 17768 ms
    
    The compression [1;31mperf[mormance for rtc set remains unchanged.
    
    Change-Id: I194ea5a9ce52e5a10baeee36338633adc22f764c

[33mcommit 54eda13f8df587fe0a5a202f232f66863aff445a[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Mar 9 18:55:38 2015 -0700

    Apply fast motion search to golden reference frame
    
    This commit enables the rtc coding mode to run integral projection
    based motion search for golden reference frame. It improves the
    speed -6 compression [1;31mperf[mormance by 1.1% on average, 3.46% for
    jimred_vga, 6.46% for tacomascmvvga, and 0.5% for vidyo clips. The
    speed -6 is about 6% slower.
    
    Change-Id: I0fe402ad2edf0149d0349ad304ab9b2abdf0c804

[33mcommit 6245a91e0b4fc4b1d1382f95991cc0ea2b3fc991[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Mar 9 10:59:29 2015 -0700

    Skip golden ref frame check when it is same as last ref frame
    
    When golden reference frame is refreshed, the next frame has both
    its last and golden reference frames point to the same reference
    frame in real-time coding mode. Experiments suggest that using
    two separate reference frames for frames right after golden refresh
    frame does not provide further compression [1;31mperf[mormance advantage.
    This commit hence retains the current encoder implementation and
    shuts off the mode search over golden reference frame in this case.
    
    It makes the encoder run slightly faster at no coding [1;31mperf[mormance
    change.
    
    Change-Id: I1561f7799253a10e675d05c63c1749fe9e85b472

[33mcommit 7d8061a44a8a8cd4ecb0463723cd6a2493c24b56[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Mar 4 09:40:01 2015 -0800

    Use SAD value to set chroma cost flag
    
    This saves an extra 64x64 variance calculation and replaces two
    32x32 variance functions with sad functions. The compression
    [1;31mperf[mormance change is unnoticeable.
    
    Change-Id: I6d33868695664ec73b56c42945162ae61c484856

[33mcommit 1790d45252efb29903baae3d1776bb24cee76558[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 27 13:35:22 2015 -0800

    Use variance metric for integral projection vector match
    
    This commit replaces the SAD with variance as metric for the
    integral projection vector match. It improves the search accuracy
    in the presence of slight light change. The average speed -6
    compression [1;31mperf[mormance for rtc set is improved by 1.7%. No speed
    changes are observed for the test clips.
    
    Change-Id: I71c1d27e42de2aa429fb3564e6549bba1c7d6d4d

[33mcommit fe85fabbac668b2426ce56387906b34539edbf64[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 27 15:37:18 2015 -0800

    Fix source frame border extension
    
    This commit fixes an issue in source frame border extension. It
    causes certain frame resolution such as 640x480 to have a portion
    of the right/bottom extension filled by zeros, which misleads
    motion search and degrades transform coding [1;31mperf[mormance when large
    block size is used.
    
    This fix improves the speed 2 compression [1;31mperf[mormance of a few
    yt sequence, typically ranging from 1% - 2%, up to 5% at median
    to low bit-rate.
    
    Change-Id: Id6b09a5695d9e7651c6dfbc2c6a72288b08af7fb

[33mcommit 8ef6dadbbeb313b1012665bb039fed9833403744[m
Author: James Zern <jzern@google.com>
Date:   Thu Feb 26 23:14:54 2015 -0800

    test-data.mk: fix [1;31mperf[m test data dependency
    
    both the encode and decode [1;31mperf[m tests require niklas_1280_720_30.yuv
    broken since:
    28eebf3 Merge "tests: add a shorter 720p test clip"
    7839d03 tests: add a shorter 720p test clip
    
    Change-Id: I51ebbf7261832e25d8f2c1da5c7df5c2e47f748e

[33mcommit 7839d0382ad8f1fbaff6d8f79cf5b18eed49c718[m
Author: James Zern <jzern@google.com>
Date:   Wed Feb 25 19:09:59 2015 -0800

    tests: add a shorter 720p test clip
    
    niklas_1280_720_30.y4m 60 frames @ 30fps
    only a small number of frames are being used; this reduces the test data
    download size in non-[1;31mperf[m-test cases by >500M.
    retain niklas_1280_720_30.yuv for encode+decode [1;31mperf[m tests
    
    Change-Id: I56b3433104acd462f952a9554280de5a3ec0b6d2

[33mcommit b7050c0be34c8a9f8a4c2a249b676bc5cd23e834[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Feb 23 12:33:24 2015 -0800

    Motion compensated reference refinement
    
    This commit applies one-step refinement search to the resulting
    motion vector of the integral projectiion based motion estimation,
    per 64x64 block. It improves the coding [1;31mperf[mormance of speed -6.
    
    pedestrian 1080p 500 kbps
    51735 b/f, 36.794 dB, 16044 ms ->
    51382 b/f, 36.793 dB, 16282 ms
    
    cloud 1080p 500 kbps
    24081 b/f, 37.988 dB, 14016 ms ->
    23597 b/f, 38.076 dB, 12774 ms
    
    vidyo1 720p 1000 kbps
    16552 b/f, 40.514 dB, 8279 ms ->
    16553 b/f, 40.543 dB, 8510 ms
    
    The rtc set compression [1;31mperf[mormance is improved by 0.5%.
    
    Change-Id: I3d09bea2caf58b2a4f3b38aa26fffafcbe9a2c17

[33mcommit ed2dc59c1b363ab510344b28ee0367c50c5080c4[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 13 11:23:45 2015 -0800

    Integral projection based motion estimation
    
    This commit introduces a new block match motion estimation
    using integral projection measurement. The 2-D block and the nearby
    region is projected onto the horizontal and vertical 1-D vectors,
    respectively. It then runs vector match, instead of block match,
    over the two separate 1-D vectors to locate the motion compensated
    reference block.
    
    This process is run per 64x64 block to align the reference before
    choosing partitioning in speed 6. The overall CPU cycle cost due
    to this additional 64x64 block match (SSE2 version) takes around 2%
    at low bit-rate rtc speed 6. When strong motion activities exist in
    the video sequence, it substantially improves the partition
    selection accuracy, thereby achieving better compression [1;31mperf[mormance
    and lower CPU cycles.
    
    The experiments were tested in RTC speed -6 setting:
    cloud 1080p 500 kbps
    17006 b/f, 37.086 dB, 5386 ms ->
    16669 b/f, 37.970 dB, 5085 ms (>0.9dB gain and 6% faster)
    
    pedestrian_area 1080p 500 kbps
    53537 b/f, 36.771 dB, 18706 ms ->
    51897 b/f, 36.792 dB, 18585 ms (4% bit-rate savings)
    
    blue_sky 1080p 500 kbps
    70214 b/f, 33.600 dB, 13979 ms ->
    53885 b/f, 33.645 dB, 10878 ms (30% bit-rate savings, 25% faster)
    
    jimred 400 kbps
    13380 b/f, 36.014 dB, 5723 ms ->
    13377 b/f, 36.087 dB, 5831 ms  (2% bit-rate savings, 2% slower)
    
    Change-Id: Iffdb6ea5b16b77016bfa3dd3904d284168ae649c

[33mcommit 4ce70e8847f73e70ad3e2ffa5ce3773b06addac0[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Feb 11 10:51:50 2015 -0800

    Add ref frame rate cost to non-RD mode decision
    
    This commit adds a heuristic rate cost of reference frame to the
    non-RD mode decision. It improves the compression [1;31mperf[mormance of
    speed -6 by 0.31% and speed -5 by 0.69%.
    
    Change-Id: If7f3b45519d49b2cb640bcb7316a254efc8be446

[33mcommit b2762a8853762a7f13bbf084ae1ae99992013ce2[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Feb 5 17:13:25 2015 -0800

    Re-arrange inter mode search order in RTC coding flow
    
    This commit makes the ZEROMV mode first in the search order to
    ensure that the zero mv is always checked in the RTC coding mode.
    It improves the average speed -6 compression [1;31mperf[mormance by 0.3%
    in both PSNR and SSIM at no visible speed change.
    
    Change-Id: I465a7e59f4e20cd84fee3f02ced6f98036945949

[33mcommit 0c6d3a03e196e50410d8e2f06b3a4adb553d17d7[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jan 21 09:32:23 2015 -0800

    Account for chroma component costs in RTC mode decision
    
    This commit allows the encoder to account for additional chroma
    plane costs in the mode decision process, if the current block
    potentially contains significant color change. It improves the
    visual quality at very low bit-rates.
    
    The compression [1;31mperf[mormance of dark720p is improved by 12.39% in
    speed 6. For jimred at 150 kbps, the PSNR of V component (red)
    increased by 0.2 dB, at the expense of about 5% increase in
    encoding time. Note that for sequences where the chroma components
    are fairly consistent, the encoding time increase is negligible.
    
    On average the rtc set compression [1;31mperf[mormance is improved by
    1.172% in PSNR and 1.920% in SSIM.
    
    Change-Id: Ia55b24ef23a25304f7ec9958fbf07fd6e658505c

[33mcommit e3167f7fbf3a251c69ebfdcc36ee8eba8b285596[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Sat Jan 24 16:28:20 2015 -0800

    Add vp9_sad32x32x4d_neon Neon intrinsic function.
    
    On Nexus 7 speed -6 saw ~18% increase in [1;31mperf[m.
    
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    BUG=https://code.google.com/p/webm/issues/detail?id=908
    
    Change-Id: I70ccdea0326750552ed946fb004507d6efe02d5c

[33mcommit 9f574d03168ae4a25dadf315099fa0296412bdd2[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Sat Jan 24 15:43:36 2015 -0800

    Add vp9_sad16x16x4d_neon Neon intrinsic function.
    
    On Nexus 7 speed -6 saw ~15% increase in [1;31mperf[m.
    
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    BUG=https://code.google.com/p/webm/issues/detail?id=908
    
    Change-Id: I4b2006b644c488f42bf06d8a22ef0e6120a96bf9

[33mcommit 54fa956715d8603e5c8acd02e6794d681abcfdbd[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Sat Jan 24 12:11:16 2015 -0800

    Add vp9_sad64x64x4d_neon Neon intrinsic function.
    
    On Nexus 7 speed -6 saw ~30% increase in [1;31mperf[m.
    
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    BUG=https://code.google.com/p/webm/issues/detail?id=908
    
    Change-Id: Id12af7d1883243c23e6692e898aea82299633d58

[33mcommit 9f6eba419a876598aa7edaee9e99610fcbf6362b[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Thu Jan 15 19:29:46 2015 -0800

    Add Neon intrinsic vp9_fdct8x8_quant_neon
    
    On Nexus 7 speed -5 got ~2%, -6 got ~15%, -7 and -8 got ~30%
    increase in [1;31mperf[m.
    
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    Change-Id: I83246d63b96674d170098a572fa4fe28a05aaf51

[33mcommit 6e7e1cf32f85f91ddfcb49a807e598e8ead131fe[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Thu Jan 15 14:36:41 2015 -0800

    Add Neon intrinsics for vp9_avg_8x8_neon
    
    On Nexus 7 speed -5, -6, -7, and -8 saw about a 1% increase
    in [1;31mperf[m for 480p. Speeds -5, -6, -7, and -8 saw about a 1.5%
    increase in [1;31mperf[m for 720p.
    
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    Change-Id: Ibf17ebfd952a6aec941719bd8306df8ec4574bee

[33mcommit ec1d8387e11ff95b5766a32c8e33c7f078d8bde4[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Tue Jan 13 23:01:06 2015 -0800

    Add 64x64 sub_pel_variance Neon function
    
    On Nexus 7 speed -5, -6, -7, and -8 saw about a 15% increase
    in [1;31mperf[m for 480p. Speeds -5, -6, -7, and -8 saw about a 10%
    increase in [1;31mperf[m for 720p.
    
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    Change-Id: I2fa5315845e3021c9a6e2ea47e52e68b398d8334

[33mcommit 74d40cd507594fe775644d52a8f03b23f3ddf8c9[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Tue Jan 13 11:15:24 2015 -0800

    Add 64x variance Neon functions
    
    Add optimized Neon functions of:
    vp9_variance32x64
    vp9_variance64x32
    vp9_variance64x64
    
    On Nexus 7 speed -5 and -6 saw about a 4% increase in [1;31mperf[m.
    Speeds -7 and -8 saw about a 6% increase in [1;31mperf[m.
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    Change-Id: I5a81f13c9897eb927fa39662530f5524a0f768fa

[33mcommit 29a5deb40cd1c86da04bff0cd448cd43324c7ec4[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jan 7 18:20:38 2015 -0800

    Use vp9_convolve_copy in denoiser output
    
    Replace copy_block with vp9_convolve_copy for speed [1;31mperf[mormance
    improvement.
    
    Change-Id: I3a08c4d01dff2253b6ee573efd02f65ccdc1b5a5

[33mcommit 238c4fa74effeb789ee211638cb6d9790b5ab316[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Tue Jan 6 11:06:33 2015 -0800

    Fix encode [1;31mperf[m test.
    
    JSON was missing a comma.
    
    Change-Id: I7e6b6251b17bc4e74b0197a449ef0313255997e7

[33mcommit 1f0c4991d6b719248899068a3ef7f3ae33aaff3a[m
Merge: f4eab151c d80d94498
Author: Frank Galligan <fgalligan@google.com>
Date:   Mon Dec 22 11:37:24 2014 -0800

    Merge "Add multithread encodes to the encode [1;31mperf[m test"

[33mcommit 9152537f3e58c1d03839f20d65173ec541831f9f[m
Merge: 2c5dc477b 4276eac29
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Sun Dec 21 16:50:00 2014 -0800

    Merge "Resolve several style issues in decode_[1;31mperf[m_test"

[33mcommit 4276eac294bfab431c4cd2de34418db0149a7b05[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri Dec 19 15:53:59 2014 -0800

    Resolve several style issues in decode_[1;31mperf[m_test
    
    This allows us to track decode speed for new encodes so that we catch
    problems like an encode change that makes decode really slow.
    
    Change-Id: I7210196415c4e53d455e9c81246d9fb324913a06

[33mcommit d80d94498c77c247279ddf43eea342eefd9765e8[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Fri Dec 19 11:21:52 2014 -0800

    Add multithread encodes to the encode [1;31mperf[m test
    
    Encode the files with 1, 2, and 4 threads.
    
    Explicitly turn on error resilient and frame parallel
    decoding and turn off altref frames.
    
    Change-Id: I02b66f72b7d35c666c3ba685b33015508e440209

[33mcommit bc8b0ada3ad3e6311f34544561b07d3f17f7e203[m
Merge: 9946ee23e 0f3d38868
Author: Frank Galligan <fgalligan@google.com>
Date:   Fri Dec 19 08:11:36 2014 -0800

    Merge "Fix encode [1;31mperf[m test"

[33mcommit 0f3d3886854160e9d2ccde158f3ca6d1d6db9e18[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Thu Dec 18 15:19:21 2014 -0800

    Fix encode [1;31mperf[m test
    
    The accepted range changed to -8..8.
    BUG:https://code.google.com/p/webm/issues/detail?id=901
    
    Change-Id: I53ac80b58f4819b82c76db61db5dc476f821191f

[33mcommit e3d19bfc63347b01e30cd6fb8856c5d64d515c56[m
Author: Peter de Rivaz <peter.derivaz@gmail.com>
Date:   Tue Dec 16 10:55:49 2014 +0000

    Fix for crash in highbitdepth rt mode
    
    Change 72141 introduced a new use of vp9_avg_4x4.
    This call needs to switch to using vp9_highbd_avg_4x4
    when [1;31mperf[morming high bitdepth encodes.
    
    Change-Id: I6a8ba4b62f8a75d0a917b365a55245e2f0438ea1

[33mcommit 6a24dbd71f8e29d5367c5ecec28cb7e11142c7ac[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Fri Dec 12 11:48:47 2014 -0800

    Remove redundant loads on 1d16_v8 filter.
    
    This CL showed about a 3% gain in [1;31mperf[mormance on some systems.
    
    Change-Id: Id27e7e0b8e69068aa364e67859436da852669250

[33mcommit 44ee77790516969af6d2098dab0fd39c8e23dcb4[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Fri Dec 12 11:34:24 2014 -0800

    Remove redundant loads on 1d8_v8 filter.
    
    This CL showed a modest gain in [1;31mperf[mormance on some systems.
    
    Change-Id: Iad636a89a1a9804ab7a0dea302bf2c6a4d1653a4

[33mcommit 5fe9a5c64918795df262455f67d567aa12975780[m
Author: James Zern <jzern@google.com>
Date:   Wed Dec 10 18:42:07 2014 -0800

    don't set INLINE to 'always_inline'
    
    INLINE is used quite widely in vp9, this change improves [1;31mperf[mormance
    1-2% on most modern platforms.
    
    Change-Id: I8a9974aab89fa588ea4923cc7eaf6199e344a528

[33mcommit e2c2a65695af695d67cbcf4c29627b197ebe2713[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Dec 11 17:17:53 2014 -0800

    Fix PICK_MODE_CONTEXT index in non-RD coding mode
    
    This commit fixes a bug in the PICK_MODE_CONTEXT index for
    horizontal partition case. The compression [1;31mperf[mormance change
    is less than 0.01% level, since most blocks are selected to
    use square block size in RTC coding mode.
    
    Change-Id: I67effc18ae8795fccdd82a55f4efc609fa5cb3e1

[33mcommit d01c7e3544b0c128c09bdb7bf5a3d7e3f4b0c27c[m
Merge: d12757f5c c2638bd80
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Dec 10 06:42:08 2014 -0800

    Merge changes I92251a8b,I5d23a685
    
    * changes:
      Adds a decode [1;31mperf[m test that builds a new file.
      Make the decoder Cfg available to encoder tests..

[33mcommit c2638bd80a7134ae2b04d258993ccd03e5586579[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Dec 9 12:44:45 2014 -0800

    Adds a decode [1;31mperf[m test that builds a new file.
    
    This allows us to track decode speed for new encodes so that we catch
    problems like an encode change that makes decode really slow.
    
    Change-Id: I92251a8b1f710b241f66e1042413df1b71b76038

[33mcommit 8f9d94ec17eea893ce35188416a9492317119d77[m
Author: Tamar Levy <tamar.levy@intel.com>
Date:   Fri Dec 5 11:14:33 2014 -0700

    SSSE3 Optimization for Atom processors using new instruction selection and ordering
    
    The function vp9_filter_block1d16_h8_ssse3 uses the PSHUFB instruction which has a 3 cycle latency and slows execution when done in blocks of 5 or more on Atom processors.
    By replacing the PSHUFB instructions with other more efficient single cycle instructions (PUNPCKLBW + PUNPCHBW + PALIGNR) [1;31mperf[mormance can be improved.
    In the original code, the PSHUBF uses every byte and is consecutively copied.
    This is done more efficiently by PUNPCKLBW and PUNPCHBW, using PALIGNR to concatenate the intermediate result and then shift right the next consecutive 16 bytes for the final result.
    
    For example:
    filter = 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8
    Reg = 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
    REG1 = PUNPCKLBW Reg, Reg = 0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7
    REG2 = PUNPCHBW Reg, Reg = 8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15
    PALIGNR REG2, REG1, 1 = 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8
    
    This optimization improved the function [1;31mperf[mormance by 23% and produced a 3% user level gain on 1080p content on Atom processors.
    There was no observed [1;31mperf[mormance impact on Core processors (expected).
    
    Change-Id: I3cec701158993d95ed23ff04516942b5a4a461c0

[33mcommit f925e5ce0fa2981317f76f0960706ae99694ed10[m
Merge: 127f65531 382f86f94
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Dec 8 10:24:17 2014 -0800

    Merge "Improve the [1;31mperf[mormance by caching the left_mi and right_mi in macroblockd."

[33mcommit 382f86f945e9bb1e215613eb5cd524f826a15238[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Fri Dec 5 14:39:21 2014 -0800

    Improve the [1;31mperf[mormance by caching the left_mi and right_mi in macroblockd.
    
    This improve the deocde [1;31mperf[mormance by ~2% on Nexus 7 2013.
    
    Change-Id: Ie9c4ba0371a149eb7fddc687a6a291c17298d6c3

[33mcommit eadffb2d6edd4d369533ae5688e389bbd4f63c6a[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Dec 5 15:56:39 2014 -0800

    Fix a motion search skip condition in vp9_pick_inter_mode
    
    Compare the current best mode rate-distortion cost with the skip
    threshold to decide if [1;31mperf[morming motion search.
    
    Change-Id: Ia071824f8dd3b7db485f424692a485a2da6a1a9f

[33mcommit 9d88b308541669131d8b7c3b3f33d1869ae15556[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Dec 5 10:38:09 2014 -0800

    Remove redundant vp9_zero in choose_partitioning
    
    It makes the overall speed -6 about 2% faster with no compression
    [1;31mperf[mormance change.
    
    Change-Id: I680a967b421caa2c5a5cdb821311c4726a2df45a

[33mcommit 74ded4863e60be648791f20ca9cc1ff456ae40ad[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Dec 4 14:53:36 2014 -0800

    Enable conditional skip path in rd_pick_intra_sby_mode
    
    These speed-up features for key frame coding are only turned on
    in the settings of hybrid non-RD and RD mode decision. It provides
    about 20% speed-up to the hybrid key frame coding at the expense
    of certain compression [1;31mperf[mormance loss. For vidyo1, the key frame
    coding statistics are changed
    9838F, 35.020 dB, 61677 us -> 9920F, 34.834 dB, 47556 us
    
    Overall rtc set compression [1;31mperf[mormance is down by -0.257%.
    
    Change-Id: I0025447fda26bb7855e982955642b5f55d71b51f

[33mcommit 07711e9b2733ef89bb6dd87f4008dc7aea39ba1d[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Dec 4 09:29:24 2014 -0800

    Use hybrid RD and non-RD coding flow for key frame coding
    
    When block size is below 16x16, the encoder swap from non-RD to
    RD mode for key frame coding. This largely brough back the key
    frame compression [1;31mperf[mormance. For vidyo1 at 1000 kbps, the key
    frame coding statistics are changed
    
    9978F, 34.183 dB, 36807 us -> 9838F, 35.020 dB, 61677 us
    
    As compared to the full RD case
    7187F, 34.930 dB, 214470 us
    
    The overall rtc set coding [1;31mperf[mormance (single key frame setting)
    is improved by 1.5%.
    
    Change-Id: I78a4ecf025d7b24ec911e85be94e01da05e77878

[33mcommit 8fe50191c665a384db918461096580f31e4fc7b2[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Dec 2 18:16:06 2014 -0800

    Rework coeff probability model update for rtc coding
    
    This commit reworks the ONE_LOOP_REDUCED coefficient probability
    model update process. It allows model update for every coefficient
    across the spectrum at a coarser resolution, instead of [1;31mperf[morming
    precise update only for certain subset of probability models.
    
    The overall runtime remains nearly same (<1% change) for speed -6.
    The compression [1;31mperf[mormance is improved by 7.5% in PSNR for speed
    -5 and 4.57% for speed -6, respectively.
    
    Change-Id: Ifb17136382ee7e39a9f34ff4a4f09a753125c8d1

[33mcommit 92a7cfc8bfb050870b238e9174829d5af136c403[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Nov 24 14:40:42 2014 -0800

    Adaptively adjust mode test kick-off thresholds in RTC coding
    
    This commit allows the encoder to increase the mode test kick-off
    thresholds if the previous best mode renders all zero quantized
    coefficients, thereby saving motion search runs when possible.
    The compression [1;31mperf[mormance of speed -5 and -6 is down by -0.446%
    and 0.591%, respectively. The runtime of speed -6 is improved by
    10% for many test clips.
    
    vidyo1, 1000 kbps
    16578 b/f, 40.316 dB, 7873 ms -> 16575 b/f, 40.262 dB, 7126 ms
    
    nik720p, 1000 kbps
    33311 b/f, 38.651 dB, 7263 ms -> 33304 b/f, 38.629 dB, 6865 ms
    
    dark720p, 1000 kbps
    33331 b/f, 39.718 dB, 13596 ms -> 33324 b/f, 39.651 dB, 12000 ms
    
    mmoving, 1000 kbps
    33263 b/f, 40.983 dB, 7566 ms -> 33259 b/f, 40.978 dB, 7531 ms
    
    Change-Id: I7591617ff113e91125ec32c9b853e257fbc41d90

[33mcommit 7428cebe4f5d2227bb4bf094bb7e7bd420455533[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Nov 21 12:18:53 2014 -0800

    Rework forward txfm/quantization skip system in RTC coding mode
    
    This commit allows more aggressive decision to skip forward
    transform and quantization for luma component in RTC coding mode.
    The chroma components remains going through the normal coding
    routine, since they are not included in the non-RD mode search
    process.
    
    It reduces the runtime cost by 2% - 10%. In speed -6,
    vidyo1 1000 kbps
    16576 b/f, 40.281 dB, 8402 ms -> 16576 b/f, 40.323 dB, 7764 ms
    
    nik720p 1000 kbps
    33337 b/f, 38.622 dB, 7473 ms -> 33299 b/f, 38.660 dB, 7314 ms
    
    dark720p 1000 kbps
    33330 b/f, 39.785 dB, 13505 ms -> 33325 b/f, 39.714 dB, 13105 ms
    
    The compression [1;31mperf[mormance of speed -6 is improved by 0.44% in
    PSNR and 1.31% in SSIM.
    
    Change-Id: Iae9e3738de6255babea734e5897f29118bebc6d7

[33mcommit c42715b72142c7f4f6ddebe0394b18589133c1ed[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Nov 18 12:37:59 2014 -0800

    Enable ssse3 version of vp9_fdct8x8_quant
    
    It improves the speed [1;31mperf[mormance of vp9_fdct8x8_quant_sse2 by
    about 5%.
    
    Change-Id: I74b093ba4d81df64caf71ac7693f3d917f673097

[33mcommit c6908fd5f744552db044dd034f88967e5fd980b4[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Nov 18 11:53:14 2014 -0800

    Combine fdct8x8 and quantization process
    
    This commit reworks the forward transform and quantization process
    for 8x8 block coding. It combines the two operations in a single
    function to save a store/load stage of the original transform
    coefficients. Overall the speed -6 is slightly faster (around 1%
    range). The compression [1;31mperf[mormance of speed -6 is improved by
    3.4%.
    
    Change-Id: Id6628daef123f3e4649248735ec2ad7423629387

[33mcommit e717d22b633c8df8af8654f517f53187a4ae5244[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Nov 7 17:50:55 2014 -0800

    Use reconstructed pixels for intra prediction
    
    This commit makes the speed -6 and above use the reconstructed
    boundary pixels for precise intra prediction. This allows more
    intra prediction modes to be tested in the non-RD coding process.
    
    Enabling horizontal and vertical intra prediction modes can
    improve the speed -6 compression [1;31mperf[mormance for rtc set
    by 0.331%.
    
    Change-Id: I3a99f9d12c6af54de2bdbf28c76eab8e0905f744

[33mcommit 0ba1542f1242f2b076180aa0a8ebf279941eb520[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Nov 7 11:01:53 2014 -0800

    Vidyo: Support for one-pass rc-enabled SVC encoder
    
    Adds support for one-pass rc-enabled SVC encoder with callbacks for
    getting per-layer packets.
    - the callback function registration is implemented as an encoder
    control function.
    - if the callback function is not registered, the old way of
    aggregating packets with su[1;31mperf[mrame will take effect.
    - one more control function “VP9E_GET_SVC_LAYER_ID” has been
    implemented to get the temporal/spatial id from the encoder
    within the callback. This can be used to get the ids to put on RTP
    packet.
    
    Change-Id: I1a90e00135dde65da128b758e6c00b57299a111a

[33mcommit 6eec73a747f3d14d327cdc33279de96d0deb48c8[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Jul 31 14:19:31 2014 -0700

    Remove asm offset dependencies
    
    The obj_int_extract code is no longer worth maintaining. It creates
    significant issues when adapting for different build systems and no
    longer offers as significant of a [1;31mperf[mormance benefit due to
    improvements in intrinsics.
    
    Source files will remain until the various third-party builds are updated.
    
    The neon fast quantizer has been moved to intrinsics. The armv6 version
    has been removed because so few remaining targets require it.
    
    Compilers and processors have improved significantly since the
    pack_tokens code was written. The assembly is no longer faster than the
    C code.
    
    pack_tokens were the only optimizations for the armv5te targets so the targets
    will be removed after the test infrastructure has been updated.
    
    BUG=710
    
    Change-Id: Ic785b167cd9f95eeff31c7c76b7b736c07fb30eb

[33mcommit caaf63b2c4d5e4ae18f0ae796fb92e4509450a0d[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Nov 4 14:32:04 2014 -0800

    Rework cut-off decisions in cyclic refresh aq mode
    
    This commit removes the cyclic aq mode dependency on
    in_static_area and reworks the corresponding cut-off thresholds.
    It improves the compression [1;31mperf[mormance of speed -5 by 1.47% in
    PSNR and 2.07% in SSIM, and the compression [1;31mperf[mormance of speed
    -6 by 3.10% in PSNR and 5.25% in SSIM. Speed wise, about 1% faster
    in both settings at high bit-rates.
    
    Change-Id: I1ffc775afdc047964448d9dff5751491ba4ff4a9

[33mcommit 1434f7695bd6cc2517438085e6c1d06b16c8bf89[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Nov 3 11:36:34 2014 -0800

    Skip ref frame mode search conditioned on predicted mv residuals
    
    This commit makes the RTC coding mode to conditionally skip the
    reference frame mode search, when the predicted motion vector of
    the current reference frame gives more than two times sum of
    absolute difference compared to that of other reference frames.
    
    It reduces the runtim by 1% - 4% for speed -5 and -6. The average
    compression [1;31mperf[mormance is improved by about 0.1% in both settings.
    
    It is of particular benefit to light change scenarios. The
    compression [1;31mperf[mormance of test clip mmmovingvga.y4m is improved by
    6.39% and 15.69% at high bit rates for speed -5 and -6, respectively.
    
    Speed -5
    vidyo1 16555 b/f, 40.818 dB, 12422 ms ->
           16552 b/f, 40.804 dB, 12100 ms
    
    nik    33211 b/f, 39.138 dB, 11341 ms ->
           33228 b/f, 39.139 dB, 11023 ms
    
    mmmoving 33263 b/f, 40.935 dB, 13508 ms ->
             33256 b/f, 41.068 dB, 12861 ms
    
    Speed -6
    vidyo1 16541 b/f, 40.227 dB, 8437 ms ->
           16540 b/f, 40.220 dB, 8216 ms
    
    nik    33272 b/f, 38.399 dB, 7610 ms ->
           33267 b/f, 38.414 dB, 7490 ms
    
    mmmoving 33255 b/f, 40.555 dB, 7523 ms ->
             33257 b/f, 40.975 dB, 7493 ms
    
    Change-Id: Id2aef76ef74a3cba5e9a82a83b792144948c6a91

[33mcommit 7ae75c3d525d79b9b28652fb34082cf81a5de9ab[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Oct 20 16:03:28 2014 -0700

    vp8 quantization -> intrinsics
    
    Use intrinsics for neon quantization. Slight loss (<5%) of [1;31mperf[mormance
    compared to the assembly. Roughly 10x faster on arm64 because that was
    running C code before.
    
    Change-Id: I7cf5242d8f29b7eab5bca6a1c20c89c9fc9ca66d

[33mcommit 64348d9f8d82050f799058c3f2fc75a7a1599c5b[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 29 19:30:12 2014 -0700

    Fix mode index use case in vp9_pick_inter_mode
    
    This improves coding [1;31mperf[mormance of speed -5 and -6 by 0.6%,
    respectively.
    
    Change-Id: Ic5a7746a88c73285f0b14333d35dc16b02152c25

[33mcommit 7bea8c59f934aa8bfab43935b2355b88adaa12f0[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 29 16:37:16 2014 -0700

    Rework pred pixel buffer system in non-RD coding mode
    
    This commit makes the inter prediction buffer system to support
    hybrid partition search. It reduces the runtime of speed -5 by
    about 3%. No compression [1;31mperf[mormance change.
    
    vidyo1 720p 1000 kbps
    11831 ms -> 11497 ms
    
    nik 720p 1000 kbps
    10919 ms -> 10645 ms
    
    Change-Id: I5b2da747c6395c253cd074d3907f5402e1840c36

[33mcommit 9349a28e80b568495d56d6364d3c7ed1abb51188[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Oct 28 14:50:10 2014 -0700

    Enable mode search threshold update in non-RD coding mode
    
    Adaptively adjust the mode thresholds after each mode search round
    to skip checking less likely selected modes. Local tests indicate
    5% - 10% speed-up in speed -5 and -6. Average coding [1;31mperf[mormance
    loss is -1.055%.
    
    speed -5
    vidyo1 720p 1000 kbps
    16533 b/f, 40.851 dB, 12607 ms -> 16556 b/f, 40.796 dB, 11831 ms
    
    nik 720p 1000 kbps
    33229 b/f, 39.127 dB, 11468 ms -> 33235 b/f, 39.131 dB, 10919 ms
    
    speed -6
    vidyo1 720p 1000 kbps
    16549 b/f, 40.268 dB, 10138 ms -> 16538 b/f, 40.212 dB, 8456 ms
    
    nik 720p 1000 kbps
    33271 b/f, 38.433 dB,  7886 ms -> 33279 b/f, 38.416 dB, 7843 ms
    
    Change-Id: I2c2963f1ce4ed9c1cf233b5b2c880b682e1c1e8b

[33mcommit 08cdd006e1b25a9d803bfd13c4fb1400f3e4ca93[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 22 14:47:15 2014 -0700

    Allow checking zeromv mode in vp9_pick_inter_mode
    
    This improves the compression [1;31mperf[mormance of speed -5 by 0.6%. The
    speed impact is less than 1%.
    
    Change-Id: Ie77daa561976dfc8b479061e1221bdf428eb0c3b

[33mcommit 9f128b3ed9fc2f431444f7cea238a288fb0e470c[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Oct 17 08:58:28 2014 -0700

    Hybrid partition search for rtc coding mode
    
    This commit re-designs the recursive partition search scheme in
    rtc speed -5. It first checks if the current block is under cyclic
    refresh mode. If so, apply recursive partition search. Otherwise,
    [1;31mperf[morm sub-sampled pixel based partition selection. When the
    pre-selection finds the partition size should be 32x32 or above,
    use the partition size directly. Otherwise, apply partition search
    at nearby levels around the preset partition size.
    
    It is enabled in speed -5. The compression [1;31mperf[mormance of rtc
    speed -5 is improved by 9.4%. Speed wise, the run-time goes slower
    from 1% to 10%.
    
    nik_720p, 1000 kbps
    33220 b/f, 38.977 dB, 10109 ms -> 33200 b/f, 39.119 dB, 10210 ms
    
    vidyo1_720p, 1000 kbps
    16536 b/f, 40.495 dB, 10119 ms -> 16536 b/f, 40.827 dB, 11287 ms
    
    Change-Id: I65adba352e3adc03bae50854ddaea1b421653c6c

[33mcommit 5e766ccee030a207a2edd37a5f7012665bc43796[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 15 12:18:48 2014 -0700

    Use rate/distortion thresholds to control non-RD partition search
    
    Compare the estimated rate and distortion to the thresholds scaled
    according to the operating block size and determine if further
    split partition search will be run. The compression [1;31mperf[mormance of
    speed -5 is changed by -0.074%. The encoding speed is 10% - 15%
    faster.
    
    vidyo1 720p
    16545 b/f, 40.492 dB, 11475 ms -> 16535 b/f, 40.486 dB, 10100 ms
    
    nik720p
    16624 b/f, 36.310 dB, 10071 ms -> 16617 b/f, 36.313 dB, 8346 ms
    
    Change-Id: Ic9197ab5761279ae55d2fb7813b2af0e0db497b8

[33mcommit 89b8c7a51390351db4fd5f7bbf1c8a3c547898e5[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 15 11:37:20 2014 -0700

    Replace copy_partitioning use case with choose_partitioning
    
    This commit replaces the use of copy_partitioning with
    choose_partitioning based on the sse of subsamped pixels, which
    provides significantly better coding [1;31mperf[mormance and runs at
    similar speed, as compared to copy_partitioning. It improves rtc
    speed 5 coding [1;31mperf[mormance by 3%.
    
    Change-Id: I52d3682a12dce0147f5e52383a594fc242ca3228

[33mcommit a75551585b0fb1ea8705e7e5c53433cfffabbab6[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Oct 6 15:53:27 2014 -0700

    Fix eobs buffer pointer mis-use
    
    This commit fixes a buffer pointer mis-use in store_coding_context.
    The compression [1;31mperf[mormance for stdhd set of speed 3 is improved by
    0.097%. It fixes issue 869.
    
    Change-Id: Idc59e22035eaf39f7133ca04174894374d647ff7

[33mcommit bb260d90764226c48d40f5b4fdeaa6a113cd9ba5[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Oct 2 17:49:00 2014 -0700

    Rework partition search skip scheme
    
    This commit enables the encoder to skip split partition search if
    the bigger block size has all non-zero quantized coefficients in low
    frequency area and the total rate cost is below a certain threshold.
    It logarithmatically scales the rate threshold according to the
    current block size. For speed 3, the compression [1;31mperf[mormance loss:
    derf  -0.093%
    stdhd -0.066%
    
    Local experiments show 4% - 20% encoding speed-up for speed 3.
    blue_sky_1080p, 1500 kbps
    51051 b/f, 35.891 dB, 67236 ms ->
    50554 b/f, 35.857 dB, 59270 ms (12% speed-up)
    
    old_town_cross_720p, 1500 kbps
    14431 b/f, 36.249 dB, 57687 ms ->
    14108 b/f, 36.172 dB, 46586 ms (19% speed-up)
    
    pedestrian_area_1080p, 1500 kbps
    50812 b/f, 40.124 dB, 100439 ms ->
    50755 b/f, 40.118 dB,  96549 ms (4% speed-up)
    
    mobile_calendar_720p, 1000 kbps
    10352 b/f, 35.055 dB, 51837 ms ->
    10172 b/f, 35.003 dB, 44076 ms (15% speed-up)
    
    Change-Id: I412e34db49060775b3b89ba1738522317c3239c8

[33mcommit 891793a54026315e1ef326f4caf750b94fa29e1e[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Sep 29 12:42:07 2014 -0700

    Conditionally skip reference frame check
    
    For regular inter frames, if the distance from GOLDEN_FRAME is larger
    than 2 and if the predicted motion vector of LAST_FRAME gives lower
    sse than that of GOLDEN_FRAME, skip the GOLDE_FRAME mode checking in
    the rate-distortion optimization. It provides about 5% speed-up at
    expense of -0.137% and -0.230% [1;31mperf[mormance down for speed 3. Local
    experiment results:
    
    pedestrian 1080p 2000 kbps
    66712 b/f, 40.908 dB, 113688 ms ->
    66768 b/f, 40.911 dB, 108752 ms
    
    blue_sky 1080p 2000 kbps
    51054 b/f, 35.894 dB, 70406 ms ->
    51051 b/f, 35.891 dB, 67236 ms
    
    old_town_cross 720p 1500 kbps
    14412 b/f, 36.252 dB, 60690 ms ->
    14431 b/f, 36.249 dB, 57346 ms
    
    Change-Id: Idfcafe7f63da7a4896602fc60bd7093f0f0d82ca

[33mcommit ccdb518ff8082bc1a3f9ec3027e051e3a8317851[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 26 12:43:14 2014 -0700

    Skip certain ALTREF inter modes in ARF coding
    
    This commit enables the encoder to skip checking ALTREF inter modes
    in ARF coding, if the predicted motion vectors suggest that the
    GOLDEN_FRAME provides higher prediction accuracy than ALTREF_FRAME.
    
    It improves the speed 3 encoding speed by about 5%, at the expense
    of compression [1;31mperf[mormance loss -0.041% and -0.225% for derf and
    stdhd, respectively.
    
    pedestrian_area 1080p 2000 kbps
    66705 b/f, 40.909 dB, 118738 ms ->
    66732 b/f, 40.908 dB, 113688 ms
    
    old_town_cross 720p 1500 kbps
    14427 b/f, 36.256 dB, 62746 ms ->
    14412 b/f, 36.252 dB, 60690 ms
    
    blue_sky 1080p 1500 kbps
    51026 b/f, 35.897 dB, 73310 ms ->
    50921 b/f, 35.893 dB, 70406 ms
    
    bus CIF 1000 kbps
    21301 b/f, 34.841 dB, 7326 ms ->
    21248 b/f, 34.837 dB, 7196 ms
    
    Change-Id: I76cf88b4d655e1ee3c0cb03c8a5745493040e8d2

[33mcommit eee904c9b91b62510169c52d5fc05580fd1f18c0[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 18 13:37:20 2014 -0700

    Adaptive mode search scheduling
    
    This commit enables an adaptive mode search order scheduling scheme
    in the rate-distortion optimization. It changes the compression
    [1;31mperf[mormance by -0.433% and -0.420% for derf and stdhd respectively.
    It provides speed improvement for speed 3:
    
    bus CIF 1000 kbps
    24590 b/f, 35.513 dB, 7864 ms ->
    24696 b/f, 35.491 dB, 7408 ms (6% speed-up)
    
    stockholm 720p 1000 kbps
    8983 b/f, 35.078 dB, 65698 ms ->
    8962 b/f, 35.054 dB, 60298 ms (8%)
    
    old_town_cross 720p 1000 kbps
    11804 b/f, 35.666 dB, 62492 ms ->
    11778 b/f, 35.609 dB, 56040 ms (10%)
    
    blue_sky 1080p 1500 kbps
    57173 b/f, 36.179 dB, 77879 ms ->
    57199 b/f, 36.131 dB, 69821 ms (10%)
    
    pedestrian_area 1080p 2000 kbps
    74241 b/f, 41.105 dB, 144031 ms ->
    74271 b/f, 41.091 dB, 133614 ms (8%)
    
    Change-Id: Iaad28cbc99399030fc5f9951eb5aa7fa633f320e

[33mcommit 217e3cb1fb82e531499325df76276fa54ebccbb7[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Sep 17 11:58:17 2014 -0700

    Improved mb_lpf_horizontal_edge_w_sse2_16() #2
    
    The decoder [1;31mperf[mormance improved up to 1% for the
    test clips used.
    
    Change-Id: I4621112bdccfba01640322facfa4ba8da8290ea5

[33mcommit 73ef5360b549d84c5fb59a265b9194974317bc31[m
Merge: 2b3b63f42 601f3a886
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Sep 16 12:58:47 2014 -0700

    Merge "Fix a [1;31mperf[mormance regression"

[33mcommit 601f3a886e4f643783fd5fe824dcb9b79e251111[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Sep 16 10:46:18 2014 -0700

    Fix a [1;31mperf[mormance regression
    
    This commit adds back sse2 or ssse3 optimized versio of a couple of
    functions, fixes a ~10% [1;31mperf[mormance regression.
    
    Change-Id: I049786906e5a641224dced63c6492aec9d86d183

[33mcommit 56fa3ab886c47ccab74e7457dc57d43537dcaf75[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 16 09:49:17 2014 -0700

    Use non-zero mode threshold for NEARESTMV modes
    
    This commit makes the encoder to use non-zero mode threshold for
    NEARESTMV modes. The runtime for test clips of speed 3 is reduced
    by about 1%.
    
    pedestrian 1080p 2000 kbps, 143239 ms -> 141989 ms
    bus CIF 1000 kbps, 7835 ms -> 7749 ms
    
    The compression [1;31mperf[mormance change is about -0.02% for both derf
    and stdhd.
    
    Change-Id: Ib71808922c41ae2997100cb7c561f68dcebfa08e

[33mcommit 175d9dfe0af6912fb9ecf7f94bd581a6b45d57a9[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Thu Sep 11 08:39:38 2014 -0700

    Remove memset of every external frame buffer.
    
    Libvpx was memseting every external frame buffer before decode. This
    was to work around a valgrind issue in our C loop filter. Most of
    the time this was not needed and we have noticed some significant
    [1;31mperf[mormance loss on some platforms. Now we require the application to
    zero out the buffers if it is using external frame buffers.
    
    Change-Id: I7330d00a315e65137ed30edd5f813e8929b76242

[33mcommit 29071a418e1a12fb2f614f962c24f1417153d7fc[m
Author: Alexander Voronov <avoronov@graphics.cs.msu.ru>
Date:   Tue Sep 9 14:56:00 2014 +0400

    Fix invalid memory access on 2x downscale.
    
    The issue was discovered on bitstream with 2x vertical downscale. For
    zero MVs, y_pad is set to 1 only when vertical convolution is
    required. The original code assumes that for y_step_q4 == 32 we don't
    [1;31mperf[morm vertical convolution. But vp9_setup_scale_factors_for_frame()
    sets convolve functions so that when x_step and y_step are both not
    equal to 16, convolve in both directions is [1;31mperf[mormed. And convolve()
    unconditionally subtracts one stride from source pointer when calls
    convolve_horiz(). This leads to invalid memory access.
    
    Change-Id: I882dfa6081a58e172b5ffa55842bfcd6727f10bf

[33mcommit d62d804e647e6726abe23726e43cac622713da94[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 2 17:32:12 2014 -0700

    Speed up compound inter prediction mode check
    
    This commit allows the encoder to store outcomes of single reference
    frame modes and compares them to decide if the inter prediction
    filter, forward transform, and quantization can be skipped.
    
    The compression [1;31mperf[mormance of speed 3 is down
    derf  -0.364%
    stdhd -0.198%
    
    For test sequences, the speed 3 runtime is reduced
    highway CIF 100 kbps, 51976 ms -> 45033 ms, 13% speed-up
    stockholm 720p 1000 kbps, 71826 ms -> 67838 ms, 5.5% speed-up
    pedestrian 1080p 2000 kbps, 154924 ms -> 150702 ms, 2.6% speed-up
    
    Change-Id: I5aa26f918d2b4b5197a2c0afa2779319f1c88e44

[33mcommit dcbfacbb984cdcd5b5a5030103305fa3669dfece[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Sep 3 11:26:27 2014 -0700

    Neon version of vp8_build_intra_predictors_mby_s() and
    
    vp8_build_intra_predictors_mbuv_s().
    
    This patch replaces the assembly version with an intrinsic
    version.
    
    On a Nexus 7, vpxenc (in realtime mode, speed -12)
    reported a [1;31mperf[mormance improvement of ~2.6%.
    
    Change-Id: I9ef65bad929450c0215253fdae1c16c8b4a8f26f

[33mcommit 33176fef872c5d812d7ce8f9875d5166de460c5d[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 2 10:57:10 2014 -0700

    Skip comp inter mode tests for arf coding
    
    This commit skips the compound inter mode prediction check in the
    rate-distortion optimization loop for ARF coding. It reduces the
    runtime for certain test clips at speed 3, at no compression
    [1;31mperf[mormance change:
    
    bus CIF 1000 kbps, 8260 ms -> 8090 ms, 1.8% speed-up
    stockholm 720p 1000 kbps, 74453 ms -> 71826 ms, 2.9% speed-up
    
    No visible speed-up for pedestrian area 1080p at 2000 kbps.
    
    Change-Id: Ic68aa56837159b726563b784e2e3729e846465ad

[33mcommit 4282955ee12cc884ff9fd0875c82bd4c0940f8ea[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Aug 28 22:58:30 2014 -0700

    Skip intra mode tests depending on inter residuals
    
    This commit allows encoder to skip intra coding mode test, when
    the known inter residual is less than the source variance. It
    reduces the runtime of speed 3 for test clips:
    bus cif 1000 kbps: 8587 ms -> 8260 ms, 3.8% speed-up
    pedestrian 1080p 2000 kbps: 161381 ms -> 155241 ms, 3.7% speed-up.
    
    The compression [1;31mperf[mormance is down by
    derf   -0.36%
    stdhd  -0.25%
    
    Change-Id: I75ce1e035b4da2153cb1ac14111d1a07c05a735d

[33mcommit 6a464eca0549fb1a539c9f5968d66e66cdf4cce9[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Aug 18 10:42:23 2014 -0700

    Speed up mode search depending on relative ref frame position
    
    This commit enables the encoder to record the location of the
    center frame to generate alter reference frame. It then allows to
    skip checking prediction modes of other reference frame types when
    it comes to encode this frame.
    
    The speed 3 runtime is reduced for the test sequences:
    bus at CIF 1000 kbps, 9791 ms -> 9446 ms, i.e., 3.5% speed-up,
    pedestrian at 1080p 2000 kbps, 184043 ms -> 175730 ms, i.e., 4.5%
    speed-up.
    
    No compression [1;31mperf[mormance change observed.
    
    Change-Id: Iacfde3bcc1445964e7a241f239bd6ea11cb94bd1

[33mcommit eca93642e28102e5e30d6499f9661b89e8fdc27b[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Wed Aug 13 20:07:39 2014 -0700

    Add a speed feature to give the tighter search range
    
    Add a speed feature to give the tighter partition search
    range. Before partition search, calculate the histogram
    of the partition sizes of the left, above and previous
    co-located blocks of the current block. If the variance of
    observed partition sizes is small enough, adjust the search
    range around the mean partition size, which will be tigher.
    
    The feature is currently turned on at speed 2. Experiments on
    sample youtube clips show on average the runtime is reduced
    by 3-7%.
    
    For hard stdhd clips:
    park_joy_1080p @ 15000kbps:       509251 ms -> 491953 ms (3.3%)
    pedestrian_area_1080p @ 2000kbps: 223941 ms -> 214226 ms (4.3%)
    
    The PSNR [1;31mperf[mormance is changed:
    derf: -0.112%
    yt:   -0.099%
    hd:   -0.090%
    stdhd:-0.102%
    
    Change-Id: Ie205ec5325bf92ec5676c243e30ba9d0adca10f2

[33mcommit ccef8842d2f4df4f52efe66b6b94de707244804f[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 13 10:38:21 2014 -0700

    Allow full coeff probability model and cost update
    
    This commit moves the simplified coefficient probability model
    and costing update to speed 4, and turns on chessboard pattern
    mode search for sub 720p sequences. The overall coding [1;31mperf[mormance
    of speed 3 is improved:
    derf  0.889%
    stdhd 1.744%
    
    The speed 3 runtime for test sequences are improved:
    bus cif at 1000 kbps 9823 ms -> 9642 ms
    pedestrian 1080p 2000 kbps 189559 ms -> 183284 ms
    
    Change-Id: Iecbc7496a68f31fd49fb09f8dfd97c028d675a5d

[33mcommit 1e30547984e1d80f5b98214efc9f781cbcc85999[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Aug 11 18:02:18 2014 -0700

    Skip mode search based on reference frame consistency
    
    This commit enables the encoder to skip NEARMV and ZEROMV if the
    above and left blocks have identical reference frame, and the
    current reference is different from that. It reduces the runtime
    of speed 3 for test sequences:
    bus cif at 1000 kbps 10064 ms -> 9823 ms
    pedestrian 1080p at 2000 kbps 193078 ms -> 189559 ms
    
    The compression [1;31mperf[mormance is changed by
    derf  -0.085%
    stdhd -0.103%
    
    Change-Id: If304f26d42e6412152a84c3dd7b02635c38444f4

[33mcommit 0daadeb60c14ebb1c1657f2091dc7abc30640970[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Aug 11 17:48:14 2014 -0700

    Enable motion field based mode seach skip
    
    This commit allows the encoder to check the above and left neighbor
    blocks' reference frames and motion vectors. If they are all
    consistent, skip checking the NEARMV and ZEROMV modes. This is
    enabled in speed 3. The coding [1;31mperf[mormance is improved:
    
    pedestrian area 1080p at 2000 kbps,
    from  74773 b/f, 41.101 dB, 198064 ms
    to    74795 b/f, 41.099 dB, 193078 ms
    
    park joy 1080p at 15000 kbps,
    from 290727 b/f, 30.640 dB, 609113 ms
    to   290558 b/f, 30.630 dB, 592815 ms
    
    Overall compression [1;31mperf[mormance of speed 3 is changed
    derf  -0.171%
    stdhd -0.168%
    
    Change-Id: I8d47dd543a5f90d7a1c583f74035b926b6704b95

[33mcommit 7035527c9a1acac4bcd8e10acd84f8ffb9285b35[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Fri Aug 8 13:57:25 2014 -0700

    Improved vp9_quantize_fp_neon()
    
    Eliminated instructions by using better neon instructions
    and rearranging the loop.
    
    On a Nexus 7, vpxenc (in realtime mode, speed -12)
    reported a [1;31mperf[mormance improvement of ~1.0%.
    
    Change-Id: I6b1700e79318f647ea67ef25e954c308932950ec

[33mcommit 74593c1eae3a09bb296829c59826b626810ae12a[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Tue Aug 5 14:39:06 2014 -0700

    Directly split the block in partition search
    
    This patch allows the encoder to directly split the block
    in partition search, therefore skip searching NONE. It
    computes a score which measures whether 16x16 motion vectors
    from the first pass in the current block are consistent with
    each others. If they are inconsistent and we have enough Q
    to encode, split the block directly, and skip searching NONE.
    
    This feature is under flag CONFIG_FP_MB_STATS. In speed 2,
    it further gives a speedup of 3-8% on sample yt clips as
    compared to the previous version under the same flag. Overall,
    the features under the flag will give 7-15% on typical yt
    clips at up to 6000kbps data rate. The speedup at very high
    data rate is not significant.
    
    For hard stdhd clips:
    park_joy_1080p @ 15000kbps:       504541ms -> 506293ms (-0.35%)
    pedestrian_area_1080p @ 2000kbps: 326610ms -> 290090ms (+11.2%)
    
    The compression [1;31mperf[mormance using the features under the flag:
    derf: -0.068%
    yt:   -0.189%
    hd:   -0.318%
    stdhd:-0.183%
    
    To use the feature, set CONFIG_FP_MB_STATS and turn on
    cpi->use_fp_mb_stats.
    
    Change-Id: Iad58a2966515c8861aa9eb211565b1864048d47f

[33mcommit 98165ec0744ebf7a786954691489face68e3ab03[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Fri Aug 1 11:35:55 2014 -0700

    Neon version of vp9_sub_pixel_variance8x8(),
    
    vp9_variance8x8(), and vp9_get8x8var().
    
    On a Nexus 7, vpxenc (in realtime mode, speed -12)
    reported a [1;31mperf[mormance improvement of ~1.2%.
    
    Change-Id: I8a66ac2a0f550b407caa27816833bdc563395102

[33mcommit 6f4b8dcdc2fb0595a20f1e05469f4d42147055dd[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Jul 30 12:16:04 2014 -0700

    Neon version of vp9_subtract_block()
    
    On a Nexus 7, vpxenc (in realtime mode, speed -12)
    reported a [1;31mperf[mormance improvement of ~3.2%
    
    Change-Id: I8862497264142171b7efc32df1a67714a23539f4

[33mcommit 49866baae60f863d36ca42f40ff4fddd987461cc[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Tue Jul 29 19:49:47 2014 -0700

    Early termination after partition NONE is done in RD.
    
    This patch allows the encoder to skip the search for partition
    SPLIT, HORZ, VERT after the search for partition NONE is done
    in RD optimization. It uses the first pass block-wise statistics
    to make the decision. If all 16x16 blocks in the current partition
    have zero motions and small residues from the frist pass statistics,
    and it has small difference variance, further partition search is
    skipped.
    
    For speed 2 setting, experiments on general youtube clips show that
    the speedup varies from 1% - 10%, 5% on average. On the [1;31mperf[mormance
    side in PSNR, derf 0.004%, yt -0.059%, hd -0.106%, stdhd 0.032%.
    
    For hard stdhd clips:
    park_joy_1080p, 502952 ms -> 503307 ms (-0.07%)
    pedestrian_area_1080p, 227049 ms -> 220531 ms (+3%)
    
    This feature is under the compilation flag CONFIG_FP_MB_STATS and
    it is off in current setting.
    
    Change-Id: I554537e9242178263b65ebe14a04f9c221b58bae

[33mcommit ca2dcb7feddc37f18060285fd9e381142e23df5d[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 29 09:50:03 2014 -0700

    Chessboard pattern partition search
    
    This commit enables a chessboard pattern constrained partition
    search for 720p and above resolutions. The scheme applies stricter
    partition search to alternative blocks based on its above/left
    neighboring blocks' partition range, as well as that of the
    collocated blocks in the previous frame. It is currently turned
    on at 16x16 block size level. The chessboard pattern is flipped
    per coding frame.
    
    The speed 3 runtime is reduced:
    park_joy_1080p, 652832 ms -> 607738 ms (7% speed-up)
    pedestrian_area_1080p, 215998 ms -> 200589 ms (8% speed-up)
    
    The compression [1;31mperf[mormance is changed:
    hd     -0.223%
    stdhd  -0.295%
    
    Change-Id: I2d4d123ae89f7171562f618febb4d81789575b19

[33mcommit d4a37db5b8389b8913056969b9cd1b5aa5a79abb[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Mon Jul 28 05:47:55 2014 -0700

    Neon version of vp9_quantize_fp()
    
    On a Nexus 7, vpxenc (in realtime mode, speed -12)
    reported a [1;31mperf[mormance improvement of ~12.4%
    
    Change-Id: Id29d215acf58bb108489e218a259adf74b4768d7

[33mcommit 521cf7e8795d38da8aa7b7356d97a6e561d02449[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Tue Jul 29 16:47:34 2014 -0700

    Neon version of vp9_sub_pixel_variance16x16(),
    
    vp9_variance16x16(), and vp9_get16x16var().
    
    On a Nexus 7, vpxenc (in realtime mode, speed -12)
    reported a [1;31mperf[mormance improvement of ~16.7%.
    
    Change-Id: Ib163aa99f56e680194aabe00dacdd7f0899a4ecb

[33mcommit d19d222db62503c91addbb20f97ddafc7cd636c8[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Mon Jul 28 15:21:10 2014 -0700

    Added vp9_fdct8x8_neon(), vp9_fdct8x8_1_neon()
    
    On a Nexus 7, vpxenc (in realtime mode, speed -12)
    reported a [1;31mperf[mormance improvement of ~3.7%.
    
    Change-Id: I428c72c40df82c6d537955e320a8debf99343004

[33mcommit a7ba80f4cb0387e368b88ed8037572f215b72945[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Jul 24 21:52:16 2014 -0700

    Remove copy frame neon
    
    No [1;31mperf[mormance benefit
    
    Change-Id: I7f0cfa98ac2bb5b823d0972827b45f32cd3f6b4c

[33mcommit 071c95d8a13fbfceb53923122312524b646c22a7[m
Merge: 4005b2d82 83b843f4b
Author: Joshua Litt <joshualitt@google.com>
Date:   Fri Jul 25 13:16:36 2014 -0700

    Merge "Encode [1;31mperf[m test"

[33mcommit 83b843f4b167afd486676ca92327637e3574957a[m
Author: Joshua Litt <joshualitt@google.com>
Date:   Mon Jul 21 10:57:16 2014 -0700

    Encode [1;31mperf[m test
    
    Change-Id: I61993946fe5cbcd7ebeb6302efd9538bff022e5a

[33mcommit 4d33a01ca37a4753fec9ce046561ea91068ee808[m
Merge: bc6360880 64db43d6a
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Jul 25 08:42:41 2014 -0700

    Merge "vp8: reduce refresh_max_mbs_[1;31mperf[mrame with fewer layers."

[33mcommit 64db43d6a78b60dcd3529ce3372f79c89efe9cc3[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Jul 24 15:44:29 2014 -0700

    vp8: reduce refresh_max_mbs_[1;31mperf[mrame with fewer layers.
    
    Change-Id: Ib39cc0218a1f232c0cde8e99ca3319c17274bd48

[33mcommit 4f2f86725b3e56b28762318f3f810edcd6d619ef[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 23 11:47:56 2014 -0700

    Use the chessboard pattern pred search in newmv mode
    
    This commit extends the chessboard pattern prediction filter search.
    If the above and left blocks have the same prediction filter type,
    the encoder will skip the prediction filter type search and use the
    reference one.
    
    The overall chessboard pattern prediction filter type search reduces
    speed 3 runtime for hard clips. Experiments on park joy at 1080p
    and 15000 kbps show that the runtime goes from 723265 ms to 65832 ms,
    i.e., about 10% speed-up. Compression [1;31mperf[mormance wise, it affects
    the coding quality by
    
    Change-Id: I880975497c7ad166532e9eea9bf46684d77ff327
    derf:    -0.326%
    yt:      -0.257%
    hd:      -0.241%
    stdhd:   -0.417%

[33mcommit 54ad09586c0deb26e7d305623dff78e200fdadef[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 22 16:32:20 2014 -0700

    Enable chessboard inter prediction filter type search
    
    This commit enables a chessboard pattern prediction filter type
    search scheme for rate-distortion optimization speed-up. For the
    inferred motion vector modes, the encoder can re-use its above/left
    neighbor blocks' prediction filter type and skip a full test on
    all possible filter types. Such operation is turned on/off
    alternatively in a chessboard manner.
    
    It is turned on in speed 3. For test clip pedestrian 1080p, the
    runtime is reduced from 231500 ms -> 221700 ms. The compression
    [1;31mperf[mormance is changed:
    derf:  -0.147%
    yt:    -0.134%
    hd:    -0.079%
    stdhd: -0.220%
    
    Change-Id: I1912f278e7576c2dc632688e3ad7a257410c605a

[33mcommit ffd948bbd527e7491d0e9f240251eb3f86fd7aa4[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 21 16:22:56 2014 -0700

    Turn on adaptive pred filter scheme for sub8x8 below 720p
    
    For sequences of resolution below 720p, the encoder will check
    intra prediction modes and inter prediction modes from LAST_FRAME.
    This commit turns on adaptive prediction filter scheme for sub8x8
    blocks, where inter prediction modes are enabled. For the test
    sequence bus at CIF, the speed 2 runtime goes down from 17879 ms
    to 16783 ms, i.e., 6% speed up. The compression [1;31mperf[mormance of
    derf set is down by -0.128%.
    
    Change-Id: I01d5321a5ceab4e0666ac5be56c52d896c7a8d45

[33mcommit c3314b7ce37f06b5844f749b0ae9da716387e59e[m
Author: James Zern <jzern@google.com>
Date:   Wed Jul 16 18:55:08 2014 -0700

    decode_[1;31mperf[m_test: drop '_t' from local typenames
    
    _t is reserved by posix
    
    + switch to camelcase
      http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Type_Names
    
    Change-Id: I5fdd6319449364f2e930667d3bd54f68ba3cbb2e

[33mcommit 4fae9264941d0151268f7a027539a2aa5c809b33[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Thu Jul 17 16:47:31 2014 -0700

    iosbuild.sh: Add VPX_FRAMEWORK_TARGET preproc symbol
    
    Mainly for determining the actual arch when running [1;31mperf[mormance
    tests.
    
    Change-Id: Ia6a1c4fcf83e6db1bf94f3e869d146ec32df02f8

[33mcommit 422acd0a071aa40f46e4a6251567a39543767600[m
Merge: f744f19cf bcfcd7c37
Author: Joshua Litt <joshualitt@google.com>
Date:   Wed Jul 16 16:38:49 2014 -0700

    Merge "New decode [1;31mperf[m test files"

[33mcommit bcfcd7c377c3f3e1102f8455403b9dec342cc53f[m
Author: Joshua Litt <joshualitt@google.com>
Date:   Wed Jul 16 16:01:34 2014 -0700

    New decode [1;31mperf[m test files
    
    Change-Id: I89ff8d4243e0438c8fe4ad74b9745c060b4460d8

[33mcommit 696fa52eaa35d1aaed497f3403fac6ef432e4822[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Jul 16 12:54:46 2014 -0700

    Added vp9_sad64x64_neon(), vp9_sad32x32_neon()
    
    and vp9_sad16x16_neon()
    
    On a Nexus 7, vpxenc (in realtime mode, speed -6)
    reported a [1;31mperf[mormance improvement of ~17%.
    
    Change-Id: I91e070cde2973451083d3f3d63b49b7886de9a85

[33mcommit 9ad1b9fc67921cfaf58ed85732ed139530edab4a[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 7 12:08:40 2014 -0700

    Re-design quantization process for 32x32 transform block
    
    This commit enables a new quantization process for 32x32 2D-DCT
    transform coefficient blocks. It improves the compression
    [1;31mperf[mormance of speed 5 by 1.4%. The overall compression gains of
    speed 5 due to the new quantization scheme is 4.7%. It also includes
    the SSSE3 implementation of the 32x32 quantization process.
    
    Change-Id: I0855b124fd6462418683f783f5bcb44255c9993b

[33mcommit 9ac2f6632044ad2ec268ed4921c31391f30ecd0c[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 1 16:10:44 2014 -0700

    Re-design quantization process
    
    This commit re-designs the quantization process for transform
    coefficient blocks of size 4x4 to 16x16. It improves compression
    [1;31mperf[mormance for speed 7 by 3.85%. The SSSE3 version for the
    new quantization process is included.
    
    The average runtime of the 8x8 block quantization is reduced
    from 285 cycles -> 255 cycles, i.e., over 10% faster.
    
    Change-Id: I61278aa02efc70599b962d3314671db5b0446a50

[33mcommit a4b7ae7e8239b678957144ad8afb3e37895628e5[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Fri Jun 27 11:03:58 2014 -0700

    Neon version of vp8_denoiser_filter_uv()
    
    The encoder [1;31mperf[mormance improved by 5% (vs "C")
    for the test clip used.
    
    Change-Id: I866b35eb2a06092edce7b37fc409562d0dacd7e7

[33mcommit 12861260732a4fd5f6b667ce9d5105dc9b606eda[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Mon Jun 23 13:00:16 2014 -0700

    Skip the partition search for the frame with no motion
    
    This patch allows the encoder to skip the partition search for the
    frame if it is an inter frame and only zero motion vectors have
    been detected in the first pass. The partition size is directly
    assigned according to the difference variance.
    
    Borg tests show overall little [1;31mperf[mormance changes in term of PSNR
    (derf -0.027%, yt 0.152%, hd 0.078%, stdhd 0%). The worst case of
    PSNR loss is -0.514% from yt. The best PSNR gain is 4.293% from yt.
    The second pass encoding speedup for slideshow clips is 15%-40%.
    
    Change-Id: I881f347d286553ee5594a9ea09ba1a61ac684045

[33mcommit 94ae0430d28c7204af0ee911e90e598542c65fdc[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Jun 25 11:28:02 2014 -0700

    vp8: Add temporal denoising for UV-channel.
    
    C version and sse2 version, and off by default.
    For the test clip used, the sse2 [1;31mperf[mormance improved by ~5.6%
    
    Change-Id: Ic2d815968849db51b9d62085d7a490d0e01574f6

[33mcommit 46ea9ec7193ae3ee8401f8a1214dcf1b5a3fc899[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jun 24 10:45:31 2014 -0700

    Enable real-time version reference motion vector search
    
    This commit enables a fast reference motion vector search scheme.
    It checks the nearest top and left neighboring blocks to decide the
    most probable predicted motion vector. If it finds the two have
    the same motion vectors, it then skip finding exterior range for
    the second most probable motion vector, and correspondingly skips
    the check for NEARMV.
    
    The runtime of speed -5 goes down
    pedestrian at 1080p 29377 ms -> 27783 ms
    vidyo at 720p       11830 ms -> 10990 ms
    i.e., 6%-8% speed-up.
    
    For rtc set, the compression [1;31mperf[mormance
    goes down by about -1.3% for both speed -5 and -6.
    
    Change-Id: I2a7794fa99734f739f8b30519ad4dfd511ab91a5

[33mcommit 3abfee9addc711ad2b0e5cfd3739453d181ac433[m
Author: James Zern <jzern@google.com>
Date:   Wed Jun 25 11:04:14 2014 -0700

    test.mk: remove renamed file
    
    vp90-2-15-fuzz-flicker.webm was renamed in:
    c3db2d8 error check vp9 su[1;31mperf[mrame parsing
    
    Change-Id: I229dd6ca4c662802c457beea0f7b4128153a65dc

[33mcommit 5aae059cdd6790eb76c9eba0af5a587932aa8c9a[m
Merge: 9be46e456 c3db2d8bc
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Mon Jun 23 08:58:36 2014 -0700

    Merge "error check vp9 su[1;31mperf[mrame parsing"

[33mcommit c3db2d8bc86b891f4a33dcb370d7172d1007cddc[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Mon Jun 23 07:04:57 2014 -0700

    error check vp9 su[1;31mperf[mrame parsing
    
    This patch insures that the last byte of a chunk that contains a
    valid su[1;31mperf[mrame marker byte,  actually has a proper su[1;31mperf[mrame index.
    If not it returns an error.
    
    As part of doing that the file : vp90-2-15-fuzz-flicker.webm now fails
    to decode properly and moves to the invalid file test from the test
    vector suite.
    
    Change-Id: I5f1da7eb37282ec0c6394df5c73251a2df9c1744

[33mcommit c99a8fd7c896fad03d43514bb6a7708cecbbede6[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jun 19 09:24:09 2014 -0700

    Allow key frame more flexibility in mode search
    
    This commit allows the key frame to search through more prediction
    modes and more flexible block sizes. No speed change observed. The
    coding [1;31mperf[mormance for rtc set is improved by 1.7% for speed -5 and
    3.0% for speed -6.
    
    Change-Id: Ifd1bc28558017851b210b4004f2d80838938bcc5

[33mcommit 625fbb3068815aa47dd42df90b461a22d7a6ae4d[m
Merge: b202e475e 1eb6e683f
Author: Hangyu Kuang <hkuang@google.com>
Date:   Thu Jun 19 12:16:37 2014 -0700

    Merge "Add su[1;31mperf[mrame support for frame parallel decoding."

[33mcommit 1eb6e683f26b0ef060d3f78b32cbf5665531c76d[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Fri Jun 13 14:14:02 2014 -0700

    Add su[1;31mperf[mrame support for frame parallel decoding.
    
    A su[1;31mperf[mrame is a bunch of frames that bundled as one frame. It is mostly
    used to combine one or more non-displayable frames and one displayable frame.
    
    For frame parallel decoding, libvpx decoder will only support decoding one
    normal frame or a super frame with su[1;31mperf[mrame index.
    
    If an application pass a su[1;31mperf[mrame without su[1;31mperf[mrame index or a chunk
    of displayable frames without su[1;31mperf[mrame index to libvpx decoder, libvpx
    will not decode it in frame parallel mode. But libvpx decoder still could
    decode it in serial mode.
    
    Change-Id: I04c9f2c828373d64e880a8c7bcade5307015ce35

[33mcommit 7c45dc98a8c80030c7f2994ab749d779b55b3047[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jun 18 10:50:38 2014 -0700

    Separate rate-distortion modeling for DC and AC coefficients
    
    This is the first step to rework the rate-distortion modeling used
    in rtc coding mode. The overall goal is to make the modeling
    customized for the statistics encountered in the rtc coding.
    
    This commit makes encoder to [1;31mperf[morm rate-distortion modeling for
    DC and AC coefficients separately. No speed changes observed.
    The coding [1;31mperf[mormance for pedestrian_area_1080p is largely
    improved:
    
    speed -5, from 79558 b/f, 37.871 dB -> 79598 b/f, 38.600 dB
    speed -6, from 79515 b/f, 37.822 dB -> 79544 b/f, 38.130 dB
    
    Overall [1;31mperf[mormance for rtc set at speed -6 is improved by 0.67%.
    
    Change-Id: I9153444567e5f75ccdcaac043c2365992c005c0c

[33mcommit cdc954fdc842c8bba298d8ca523511bd242cbc8c[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Mon Jun 16 09:17:45 2014 -0700

    skip the un-necessary motion search in the first pass
    
    This patch allows the VP9 encoder to skip the un-necessary
    motion search in the first pass. It computes the motion error
    of 0,0 motion using the last source frame as the reference,
    and skips the further motion search if this error is small.
    
    Borg test shows overall the patch gives PSNR gain (derf -0.001%,
    yt 0.341%, hd 0.282%). Individual clips may have PSNR gain or
    loss. The best PSNR [1;31mperf[mormance is 7.347% and the worst is -0.662%.
    The first pass encoding speedup for slideshow clips is over 30%.
    
    Change-Id: I4cac4dbd911f277ee858e161f3ca652c771344fe

[33mcommit 1ba18717861c5da614619428389f29e00b175e8e[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jun 12 12:23:06 2014 -0700

    Fix out of boundary memory read in fuzz test on vpxdec
    
    This commit fixes frame header decoding for su[1;31mperf[mrame index, to
    prevent out of boundary memory read triggered by fuzz test
    vector. It resolves a chromium security violation issue
    crbug.com/376802.
    
    The issue was introduced in the change:
    
    Add VPXD_SET_DECRYPTOR support to the VP9 decoder.
    cl-id I88f86c8ff9af34e0b6531028b691921b54c2fc48
    
    where the buffer was read before validation check on index offset
    applied.
    
    A test vector is added accordingly.
    
    Change-Id: I41c988e776bbdd1033312a668e03a3dbcf44ca99

[33mcommit ccba289f8d1760a45b972685a64eb829529b70ab[m
Author: Jingning Han <jingning@google.com>
Date:   Thu May 29 18:14:17 2014 -0700

    Fast computation path for forward transform and quantization
    
    This commit enables a fast path computational flow for forward
    transformation. It checks the sse and variance of prediction
    residuals and decides if the quantized coefficients are all
    zero, dc only, or more. It then selects the corresponding coding
    path in the forward transformation and quantization stage.
    
    It is currently enabled in rtc coding mode. Will do it for rd
    coding mode next.
    
    In speed -6, the runtime for pedestrian_area 1080p at 1000 kbps
    goes down from 14234 ms to 13704 ms, i.e., about 4% speed-up.
    Overall coding [1;31mperf[mormance for rtc set is changed by -0.18%.
    
    Change-Id: I0452da1786d59bc8bcbe0a35fdae9f623d1d44e1

[33mcommit 5daef90efc4613efd7e7ee80ba4e1ecf9a57a966[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Tue Jun 3 17:16:00 2014 -0700

    skip un-neccessary motion search in the first pass
    
    This patch allows the encoder to skip the
    un-neccessary motion search in the first pass. It
    calculates the error of the zero motion vector using
    the last source frame as reference and skips the
    further motion search in the first pass if the error
    is small.
    
    The encoding speedup of the first pass for slideshow
    videos is over 30%. Borg test shows the overall PSNR
    [1;31mperf[mormance remain approximately the same (derf -0.009,
    hd 0.387, yt 0.021, stdhd 0.065). Individual clips may
    have either PSNR gain or loss. The worst PSNR [1;31mperf[momance
    is from yt set, with a PSNR loss of -1.1.
    
    Change-Id: I08b2ab110b695e4689573b2567fa531b6457616e

[33mcommit 3f96081a15093604f9eca116c9e7a9493db37253[m
Author: Jingning Han <jingning@google.com>
Date:   Mon May 12 10:55:14 2014 -0700

    Tune minq index table for P frames in one_pass_cbr coding mode
    
    Allow slightly larger minq-maxq range for P frames. This improves
    the compression [1;31mperf[mormance of speed -5 for rtc set by 2.7% in psnr.
    
    Change-Id: I438653d52d0fe51111509c6092e2334bac2de0cf

[33mcommit f4b736a64640702aa3ab6ba36434faeb96c9b548[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon May 12 16:41:17 2014 -0700

    Removing decode_one_iter() function.
    
    When su[1;31mperf[mrame index is available we completely rely on it and use frame
    size values from the index.
    
    Change-Id: I0011d08b223303a8b912c2bcc8a02b74d0426ee0

[33mcommit 734c5ffa2c003e8668ae8b58413064c98591f3fd[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Apr 23 14:54:16 2014 -0700

    Apply constrained partition search range to non-RD mode decision
    
    This commit enables a chessboard pattern for partition search. All
    the black blocks run regular partition search ranging from 8x8 to
    32x32. The rest white blocks take the nearby blocks' information
    to adaptively decide the effective search range.
    
    The compression [1;31mperf[mormance for rtc set at speed -5 is down by 1.5%.
    For pedestrian 1080p at speed -5, the runtime goes from 41594 ms to
    39697 ms, i.e., about 5% faster.
    
    Change-Id: Ia4b96e237abfaada487c743bca08fe1afd298685

[33mcommit 81ad047ee57ecb0e2c1ee4dcebda54a44ea54ae9[m
Author: James Yu <james.yu@linaro.org>
Date:   Tue Dec 17 21:23:08 2013 +0800

    VP8 for ARMv8 by using NEON intrinsics 06
    
    Add idct_dequant_full_2x_neon.c
    - idct_dequant_full_2x_neon
    
    ==== Summary of apply VP8 decode patch series ====
    Benchmark on Samsung Chromebook, Cortex-A15, 1.7GHz, Dual core
    Toolchain: linaro-1.13.1-4.8-2014.01
    Compile argument: CROSS=arm-linux-gnueabihf- ../libvpx/configure
                         --target=armv7-linux-gcc --prefix=$HOME/out
                         --enable-shared --cpu=cortex-a7
    Test argument: vpxdec --summary --noblit ./tears_of_steel_1080p.webm
    
    NEON assembly   46.68 (fps)
    Apply patch 06  46.65, -0.03
    Apply patch 07  46.86, +0.21
    Apply patch 08  46.58, -0.28
    Apply patch 09  46.57, -0.01
    Apply patch 10  46.51, -0.06
    Apply patch 11  46.13, -0.38
    Apply patch 12  45.42, -0.71
    Apply patch 13  46.06, +0.64
    Apply patch 14  45.19, -0.87
    Apply patch 15  45.93, +0.74
    Apply patch 16  45.48, -0.45
    Apply patch 17  45.84, +0.36
    Apply patch 18  45.91, +0.07  <= With all NEON intrinsics patches
                     Total -0.77 fps, 1.65% [1;31mperf[mormance regression
    
    Change-Id: I77bfc9eaccfb97b8d401e949ceff8795e26ca6b7
    Signed-off-by: James Yu <james.yu@linaro.org>

[33mcommit 307b6c22a30b31aa0c8f48f1863e8e0e8bfcb254[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu May 1 12:10:25 2014 +0100

    Switch the default 2 pass vbr variant.
    
    On balance Deb's  modified rate control for VBR seems
    to be out[1;31mperf[morming especially on some low motion YT
    clips so I have switched this to be the default mode for
    now.
    
    Change-Id: I0713d430cad6425ac5c48fccdf332e12814ee44a

[33mcommit ff209de82b90ac2361da0bd40497a08add25920b[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Apr 30 06:58:16 2014 -0700

    Improved intrinsic version of vp8_denoiser_filter_neon
    
    Used horizonal add instructions instead of adding
    byte lanes.  The encoder [1;31mperf[mormance improved by
    ~4% for the test clip used.
    
    Change-Id: Iaddd10403fcffb5b3f53b1f591ab2fe0ff002c08

[33mcommit 8969f7c8922c4e35d8d1267e82f82bf5f2f970b5[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Apr 23 10:33:41 2014 -0700

    Chessboard pattern prediction filter type search in non-RD coding
    
    This commit introduces a chessboard pattern search for the prediction
    filter type search. It runs extensive search in alternate blocks and
    allows the rest blocks to refer coding decisions of their nearby
    neighbors.
    
    For pedestrian 1080p at 4000 kbps, the runtime of speed -5 goes down
    from 43990 ms to 42200 ms. The overall compression [1;31mperf[mormance for
    RTC set is changed by -1.37%.
    
    Change-Id: Icfe220c49451cda796f0ca91d935c9ed01e56c9d

[33mcommit 02104ebbdcd7fa690db0b625eee41d7018ced0df[m
Merge: 0bba4f1ef 26210c672
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Apr 22 06:53:18 2014 -0700

    Merge "Adds test code for supplemental su[1;31mperf[mrame data"

[33mcommit 26210c672a075319aaf1dda40d95f1f0590c5bda[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Apr 4 14:38:29 2014 -0700

    Adds test code for supplemental su[1;31mperf[mrame data
    
    Adds test code to verify that supplemental su[1;31mperf[mrame information
    that precedes the normal su[1;31mperf[mrame information will not break
    decoding.
    
    Change-Id: Ia252b887d7ee138f51dc9a778376ff739402c455

[33mcommit 80a4f559891cf7553c087a6120cc5ed9fff30390[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Apr 17 09:58:17 2014 -0700

    Enable background detection for adaptive quantizer control
    
    This commit enables a background detection approach for adaptive
    quantizer control. It combines the cyclic refresh pattern and the
    background information to determine the segment id for adaptive
    quantizer selection, prior to the non-RD mode decision process.
    It hence allows proper quantization information update for a more
    precise rate-distortion modeling in the non-RD mode decision.
    
    The compression [1;31mperf[mormance of speed -5 for rtc set is improved
    by 2.5%, at no speed change.
    
    Change-Id: Ic3713e8ed9185b403b5b1679d19dabd57506d452

[33mcommit e88a28057311c24d61f1b122cdf7aa4d2685434e[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Apr 15 11:41:39 2014 -0700

    Enable more precise background detection for partition decision
    
    This commit compares the current original frame to the previous
    original frame at 64x64 block level and decides if the entire
    block belongs to background area. If it is in the background area,
    skip non-RD partition search and copy the partition types of the
    collocated block in the previous frame.
    
    For vidyo1 in the rtc set, this makes the speed -5 coding speed
    about 8% faster. The overall compression [1;31mperf[mormance is down by
    1.37% for rtc set.
    
    Change-Id: Iccf920562fcc88f21d377fb6a44c547c8689b7ea

[33mcommit 06ec873f2c97d8b60b28a346d2e868badbd98d2d[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Apr 4 15:59:10 2014 -0700

    Select prediction filter type in non-RD mode decision
    
    This commit allows the non-RD mode decision flow to  select
    prediction filter type in NEWMV mode. It provides 8.14% compression
    [1;31mperf[mormance gains in both settings of AQ=0 and 3. The current speed
    impact is about 5% to 10% slower.
    
    Change-Id: Id66ecebf77abd8f90fb3f6a066c0e8dfb4bf1c42

[33mcommit 2536a89a4f6398b9b48e5443f8259b9968ae9da6[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Apr 2 22:44:06 2014 -0700

    Adjust key frame quantization index for rtc coding
    
    This commit slightly increases the bit allocation for key frame. This
    improves speed -5 coding [1;31mperf[mormance by 2.77% with aq-mode=0 and by
    2.78% with aq-mode=3.
    
    Change-Id: Iaa3e777f80b9706306606af06e89852bac146659

[33mcommit 99893f2410f618b712037db4d3ec60e81aa9de1f[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Mar 28 17:42:45 2014 -0700

    Apply finer quantizer to partition search frames in non-RD flow
    
    This commit optimizes the bit allocation for the non-RD coding flow.
    It applies slightly better quantizer to the frames, where all blocks
    run a non-RD partition search. Such frames typically have better
    rate-distortion trade off, thus improving the reconstruction quality
    for next few frames reference at reasonably low increment in rate
    cost.
    
    The coding [1;31mperf[mormance for rtc set at speed -5 with error-resilient
    tuned on and rate control set as cbr is improved by 19.58%. It improved
    the coding speed by about 10% for a portion of local test clips.
    
    Change-Id: I9d56696cd4359dc8136ca10aff10fff05aaa2686

[33mcommit abdb0650b41eb635e9c8a26f0712dcf57a013a9a[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Mar 26 13:00:06 2014 -0700

    Motion referenced partition search for non-RD coding flow
    
    This commit enables the non-RD mode decision coding flow to
    adaptively apply partition search in non-refresh frame, when the
    collocated block in previous frame suggests there might be a motion
    activity. It refactors the update_state_rt() function to support
    buffer swap of mode_info struct, thereby unifying the encoding
    stage across various non-RD coding modes.
    
    It provides 5% compression [1;31mperf[mormance gains in speed -6 for rtc
    test set, at about 12% speed slow down.
    
    Change-Id: Iefa374aed5a11c4b7ff9a3ed36a98ea8bd184edb

[33mcommit 60f9ebc3f1119ce2d0a56f8b17b98304a1b5780f[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Mar 19 11:25:40 2014 -0700

    Enable variable block size test in non-RD mode decision
    
    This is an initial attempt to allow variable block size partition
    in non-RD coding flow. It tests 8x8, 16x16 and 32x32 block size per
    64x64 block, all using non-RD mode decision and the associated rate
    distortion costs from modeling, then selects the best block size to
    encode the entire 64x64 block. Such operations are triggered every
    other 3 frames. The blocks of intermediate frames will reuse the
    collocated block's partition type.
    
    It improves the compression [1;31mperf[mormance by 13.2%. Note that the gains
    are not evenly distributed. For many hard clips, the compression
    [1;31mperf[mormance is improved by 20% to 28%. Local speed test shows that
    it will also increase runtime by 50%, as compared to speed -7. It is
    now enabled in speed -6 setting.
    
    Change-Id: Ib4fb8659d21621c9075b3c369ddaa9ecb0a4b204

[33mcommit 7686c950b563b63bd39f3699558bb22ba965274b[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Mar 12 10:03:28 2014 -0700

    Tune rate-distortion modeling for non-RD mode decision
    
    This commit adjusts the rate-distortion modeling for non-RD mode
    decision. It puts more weights on energy from AC coefficients when
    estimating the cost. The coding [1;31mperf[mormance for rtc testset is
    improved by 0.72%.
    
    Change-Id: Ifa6ff11311a513ec2b10586589e82a9a21f6c61c

[33mcommit 539c961ed4825bace64647e122893a77eeb9a0c4[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Mar 6 18:56:50 2014 -0800

    Use modeled rate distortion costs for non-RD mode
    
    This commit replaces SAD cost with modeled rate-distortion cost
    for non-RD mode decision. It translates the prediction residual
    SSE into estimate rate and reconstruction distorion costs, hence
    capturing the quantization setting effect. The compression
    [1;31mperf[mormance of speed -7 for rtc set is improved by 14.79%.
    
    Change-Id: Ifda014eb0501d13109fe7f92680bf1410b463632

[33mcommit b80020d4db1761cfb312de7236cb27363e7c32cd[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Feb 28 14:29:22 2014 -0800

    Refactoring motion search libs
    
    The core motion estimation fucntions all return sad now consistently.
    The only exception is vp9_full_pixel_diamond(), however the core diamond
    and refining search routines called from vp9_full_pixel_diamond() also
    return SAD. If variance of pred error + mv cost is desired it must be
    calculated explicitly outside these functions. For very fast encoding,
    hopefully this will eliminate some redundant computations.
    
    Also suggests reimplementing FAST_HEX with the vp9_pattern_search
    framework. It is not exactly the same as the existing FAST_HEX, but
    [1;31mperf[mormance is slightly better and speed is very similar. Enables
    removing a lot of duplicate code.
    
    Change-Id: I152736393438c25bdf7e96b37cbb8ce330f4f94a

[33mcommit bf5e9221d69eddbd77ca336c82a14a05c08e9ab8[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 28 09:15:36 2014 -0800

    Fix potential invalid partition size use
    
    For blocks at frame boundary, the selected block size sometimes needs
    to be smaller than that was first given. This commit forces such block
    size change only between square blocks, so as to avoid the potential
    use case containing 32x16 + 16x8 + 16x8, for 1080p sequences.
    
    Local test suggested no visible coding speed difference. Borg test
    reveals no difference in terms of compression [1;31mperf[mormance.
    
    Change-Id: Ie8de87f3c6febc3acf11b4cbfdf2077f9f6def52

[33mcommit 24c7ee78c59eb2237d12658f8ca01ad0862bc444[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 28 09:35:08 2014 -0800

    Skip some mode SAD calculation in non-RD mode
    
    This commit checks if the motion vector associated with the current
    mode has been computed in previous mode tests. If possible, skip the
    redundant reference block generation and SAD calculation in the
    non-RD mode decision process.
    
    For test sequence pedestrian_area 1080p, the runtime goes from
    24261 ms to 23770 ms. This does not change compression [1;31mperf[mormance.
    The speed-up is mostly around places with consistent motion.
    
    Change-Id: I97be63c6a2d07c57be26b3c600fbda3803adddda

[33mcommit c30d5703e5078337b7e01213145ae758d74df450[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Feb 26 09:52:23 2014 -0800

    Run sub-pixel motion search for NEWMV mode test
    
    As Yunqing suggested, this commit makes non-RD mode decision always run
    sub-pixel motion search in NEWMV mode. The compression [1;31mperf[mormance
    gains becomes fairly significant after we enabled sub-pixel accuracy
    motion compensated prediction to calculate SAD cost.
    
    For test sequences pedestrian_area at 1080p and vidyo1 at 720p, the
    runtime goes slower by 5%. For rtc test set, the compression [1;31mperf[mormance
    is improved by 21.20%.
    
    Change-Id: I38cbfdd5c53d79423e1fafb3154f8ddeed63bbf0

[33mcommit c0e99f84f9c2ff909020a7ce76f60d1f78b56fc7[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Feb 25 16:12:35 2014 -0800

    Use sub-pixel accuracy prediction non-RD mode
    
    This commit builds the actual prediction block in sub-pixel accuracy
    and uses which to calculate SAD for non-RD mode decision. In the trail
    run on pedestrian_area at 1080p, rtc speed -7 runtime goes from
    23495 ms -> 25107 ms (7% slower). The compression [1;31mperf[mormance is
    improved by 20.57% for rtc test set.
    
    Change-Id: I438589cd103fe99f1b50c2d1939ac6ca43fa0157

[33mcommit 836252bfa6338ca29bbfe3c9ccc8798ea32140d2[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 21 18:25:43 2014 -0800

    Periodically update mode and mv costs
    
    Skip coefficient cost update in non-RD mode decision setting. Allow
    periodical mode and motion vector cost update. Currently every other
    8 frames. The increment runtime is a constant number. Hence more
    visible for CIF resolution, while negligible for 1080p.
    
    Speed -6 compression [1;31mperf[mormance for rtc set is improved by 4.5%.
    
    Change-Id: I27e0ad7c521fcc2af1d825582cbdd1a27ac4c323

[33mcommit 1fc0bde675e74740981b38861b80636c194b0fc9[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 21 14:33:27 2014 -0800

    Refactor selected partition size coding for rtc
    
    This commit makes a refactoring of the rtc_use_partition. It allows
    the encoder to take a preferred block size for non-RD mode decision.
    The boundary blocks are handled such that smaller block sizes that
    fit in the boundary size will be used instread.
    
    In rtc mode, the coding [1;31mperf[mormance of speed -6 for pedestrian_1080p
    goes from
    158980 b/f, 38.934 dB, 22721 ms to
    159008 b/f, 40.064 dB, 23721 ms.
    
    For rtc set, the speed -6 compression [1;31mperf[mormance is improved by
    26%. Still about 2dB behind speed -5 at this point.
    
    Change-Id: If0944f0880eaf1ad340bc325d97cea8d0f9dd53f

[33mcommit d66a63f02b4fe6c4ba310b8dff384c00f3dcd5ce[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Feb 19 15:30:09 2014 -0800

    Enable reduced set of intra modes in rtc coding
    
    This commit enables the use of DC, vertical, and horizontal intra
    prediction mode in rtc non-RD mode decision. When the best cost value
    of inter modes is above a given threshold, the encoder runs the
    above three intra modes and selects the one that has minimum
    prediction residual in terms of SAD.
    
    This together with recent changes on non-RD mode decision and coding
    control improves compression [1;31mperf[mormance of speed -6 by
    derf  91%
    yt    61%
    hd    46%
    stdhd 52%
    
    In terms of encoding speed, it is about 3 times faster than speed -5.
    
    Change-Id: I6b483bfd0307e6482bb22a6676ae4e25a52b1310

[33mcommit 6478673933912195394d80fec5db94ea79c12105[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 14 14:41:47 2014 -0800

    Enable sub-pixel motion search for rtc mode
    
    Run sub-pixel motion search when NEWMV gives lower rate-distortion
    cost. This improves coding [1;31mperf[mormance of derf set by 8%, std-hd by
    2.2%.
    
    Change-Id: Ife50f7fda8463927784fe59a41cc439c833e941a

[33mcommit b41acbf9bb173ff18fb2119936c55e55b6080fa2[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Wed Feb 12 16:55:14 2014 -0800

    Fix neon wide loopfilter for filter8 only branch
    
    The current code removed the check to only [1;31mperf[morm the filter8.
    
    Change-Id: Ie54e19a77745042a5660eab986d9ef1c42e82410

[33mcommit d23e339202b46f6d54595d2464f9312a95f26075[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Feb 10 17:52:44 2014 -0800

    Removes active_worst_quality feedback
    
    Removes certain cases of feedback of active_worst_quality,
    and removes it from the RATE_CONTROL structure. Now active
    worst quality is expected to be computed locally in the
    q picking function during the encode.
    Making temporal filter strength depend on avg_frame_qindex
    rather than on active_worst_quality actually improves
    [1;31mperf[mormance esp. for yt.
    derf: +0.038%
    yt: +0.359%
    
    Change-Id: I1fe5a343034b55af9322289165321f00ac0827b1

[33mcommit 357b65369f7d41a3c66eadb390224d260bd6dc63[m
Author: Tamar Levy <tamar.levy@intel.com>
Date:   Sun Dec 29 01:23:50 2013 -0700

    AVX2 Variance Optimization
    
    Optimizing the variance functions: vp9_variance16x16, vp9_variance32x32,
    vp9_variance64x64, vp9_variance32x16, vp9_variance64x32,
    vp9_mse16x16 by migrating to AVX2
    some of the functions were optimized by processing 32 elements instead of 16.
    some of the functions were optimized by processing 2 loop strides of 16
    elements in a single 256 bit register
    This optimization gives between 2.4% - 2.7% user level [1;31mperf[mormance gain
    and 42% function level gain.
    
    Change-Id: I265ae08a2b0196057a224a86450153ef3aebd85d

[33mcommit a4ce53f14d25ffea989fc83ee7f039762a142c83[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Dec 20 15:24:22 2013 -0800

    Adaptive motion control on ref and search range
    
    This commit takes a preliminary attempt to refine the motion search
    control. It detects the SAD associated with mv predictor per reference
    frame, and based on which to determine whether the encoder wants to
    reduce the motion search range (if the predicted mv provides fairly
    small SAD), or to skip the current reference frame (if there exists
    another ref frame that gives much smaller SAD cost).
    
    This feature is turned on in the settings of speed 1 and above.
    
    In speed 1, compression [1;31mperf[mormance changed
    derf  -0.018%
    yt    -0.043%
    hd    -0.045%
    stdhd -0.281%
    
    speed-up
    pedestrian_area_1080p at 4000 kbps 100 frames
    199651ms -> 188846ms (5.5% speed-up)
    blue_sky_1080p at 6000 kbps
    443531ms -> 415239ms (6.3% speed-up)
    
    In speed 2, compression [1;31mperf[mormance changed
    derf  -0.026%
    yt    -0.090%
    hd    -0.055%
    stdhd -0.210%
    
    speed-up
    pedstrian 113949ms -> 108855ms (4.5% speed-up)
    blue_sky  271057ms -> 257322ms (5% speed-up)
    
    Change-Id: I1b74ea28278c94fea329d971d706d573983d810d

[33mcommit 46444c268a0ec55e95b84354846a4ab12ab4dc7c[m
Merge: cb8659981 d2fdea107
Author: Tom Finegan <tomfinegan@google.com>
Date:   Thu Dec 19 10:35:41 2013 -0800

    Merge "test/decode_[1;31mperf[m_test: fix msvc build"

[33mcommit d2fdea1079f0e3ffc419502b2c94050606042edf[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Wed Dec 18 18:32:59 2013 -0800

    test/decode_[1;31mperf[m_test: fix msvc build
    
    Change-Id: I46590947dfde0bce727b20c12e3a0a8c27be8433

[33mcommit 3b5a90bd868a3469659e4cb78ec37032863cb92d[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Dec 12 17:31:04 2013 -0800

    Enable adaptive pred filter type for sub8x8
    
    This commit enables an adaptive prediction filter type selection
    for sub8x8 block sizes. In speed 1, it re-uses the filter type of
    collocated 8x8 block if it is tested in the rate-distortion optimization
    loop, for the sub8x8 blocks. Otherwise, it runs the normal test
    over all the three filter types. In speed 2, it re-uses the 8x8
    block's prediction filter type, if available. Otherwise, force it
    to be EIGHTTAP.
    
    Compression and speed [1;31mperf[mormance wise:
    speed 1
    derf -0.266%
    yt   -0.138%
    
    bus at 2000 kbps: 33766ms -> 30451ms (10% speed-up)
    football at 600 kbps: 48173ms -> 43786ms (9% speed-up)
    
    speed 2
    derf -0.026%
    yt   +0.134%
    
    bus at 2000 kbps: 18973ms -> 17698ms (6% speed-up)
    football at 600 kbps: 26748ms -> 25096ms (6% speed-up)
    
    Change-Id: I77e097533b969fd3472147225fa79fc98095d342

[33mcommit b295092b8fcac34fd657df45b15fed54ed89b814[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Dec 6 09:16:36 2013 -0800

    Full range motion search for regular block sizes
    
    Add a full range motion search for regular block sizes. This runs
    exhaustive search within the given reference area. This commit further
    optimizes the search process by combining 4 points test into one
    pipeline, which gives 30% speed-up as compared to run each individual
    point at a time.
    
    This full range search serves as a best possible motion search reference.
    When replacing the diamond search with full range search, the speed 0
    runtime of bus CIF at 2000 kbps goes from 153872ms to 623051ms. The
    compression [1;31mperf[mormance compared to speed 0 setting gains 0.585% for
    derf set.
    
    Change-Id: Ieef1225216b0b86b4ac4872fa7fb9e18bf2eabb3

[33mcommit e4419ab691f34d975001a3ddf5617ca0b8e96c7b[m
Author: Abo Talib Mahfoodh <ab.mahfoodh@gmail.com>
Date:   Mon Dec 2 21:04:18 2013 -0500

    Improve idct16x16: _256_add_sse2(x1.107)&_10_add_sse2(x1.012)
    
    The [1;31mperf[mormance gain of idct16x16_10_add_sse2 function is not
    noticeable. However since both functions use the IDCT16_1D,
    idct16x16_10_add_sse2 should be modified as well.
    Tested with: park_joy_420_720p50.y4m
    
    Change-Id: I02b957e36fcf997c677d15baf496533895271bff

[33mcommit a782d63954812eadbdb54d71a4cc68375c17c027[m
Author: Joshua Litt <joshualitt@google.com>
Date:   Fri Nov 15 12:29:26 2013 -0800

    Decoder [1;31mperf[mormance test added to unit tests
    
    Change-Id: Id578a5fe2039631cefd82dc2ef98cc62683194c3
For keyword optim:
[33mcommit 51d529a5786ef5654ac318c14971eb6857c420e3[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Mar 16 09:42:33 2015 -0700

    vp9_pick_inter_mode(): minor [1;31moptim[mizations
    
    1. remove duplicate initialization to mbmi->interp_filter.
    2. move mv clamping into ref_frame loop instead of mode checking loop.
    3. move the check if last frame is same as golden frame earlier to
    avoid initialization of Golden reference related variables.
    
    Change-Id: Idf2d05e19e94a24f69cc289687869fc71d2ff289

[33mcommit cc7fac39d5e733e3cddd48a40072c0cfb1ec2689[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Jan 29 11:33:50 2015 -0800

    Enable use_x86inc for 32bit pic enabled Darwin target
    
    The previous patch "Fix issues in 32bit PIC enabled build" fixed
    the x86inc.asm for macho32. Now we can enable use_x86inc while
    building libvpx for 32bit pic enabled Darwin target, which makes
    the encoder a lot faster(>2X) in this case by turning on the
    existing [1;31moptim[mizations.
    
    Change-Id: I5f5c7add428d73f50c935c48d0a70aed2b1eb7af

[33mcommit 74d40cd507594fe775644d52a8f03b23f3ddf8c9[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Tue Jan 13 11:15:24 2015 -0800

    Add 64x variance Neon functions
    
    Add [1;31moptim[mized Neon functions of:
    vp9_variance32x64
    vp9_variance64x32
    vp9_variance64x64
    
    On Nexus 7 speed -5 and -6 saw about a 4% increase in perf.
    Speeds -7 and -8 saw about a 6% increase in perf.
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    Change-Id: I5a81f13c9897eb927fa39662530f5524a0f768fa

[33mcommit dd33c656daf8dc2658dfe7a435ff4bc65a4474eb[m
Merge: d9892e846 5c22224e9
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Dec 11 12:28:45 2014 -0800

    Merge "Corrected [1;31moptim[mization of 8x8 DCT code"

[33mcommit 5c22224e9e43befc414cce2cf163616c9d56b0d3[m
Author: Peter de Rivaz <peter.derivaz@gmail.com>
Date:   Thu Dec 11 15:54:23 2014 +0000

    Corrected [1;31moptim[mization of 8x8 DCT code
    
    The 8x8 DCT uses a fast version whenever possible.
    There was a mistake in the checking code which
    meant sometimes the fast version was used when it
    was not safe to do so.
    
    Change-Id: I154c84c9e2d836764768a11082947ca30f4b5ab7
    (cherry picked from commit fd05fb0c21e253b4d6f92d7e0b752850ff8ab188)

[33mcommit 8f9d94ec17eea893ce35188416a9492317119d77[m
Author: Tamar Levy <tamar.levy@intel.com>
Date:   Fri Dec 5 11:14:33 2014 -0700

    SSSE3 Optimization for Atom processors using new instruction selection and ordering
    
    The function vp9_filter_block1d16_h8_ssse3 uses the PSHUFB instruction which has a 3 cycle latency and slows execution when done in blocks of 5 or more on Atom processors.
    By replacing the PSHUFB instructions with other more efficient single cycle instructions (PUNPCKLBW + PUNPCHBW + PALIGNR) performance can be improved.
    In the original code, the PSHUBF uses every byte and is consecutively copied.
    This is done more efficiently by PUNPCKLBW and PUNPCHBW, using PALIGNR to concatenate the intermediate result and then shift right the next consecutive 16 bytes for the final result.
    
    For example:
    filter = 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8
    Reg = 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
    REG1 = PUNPCKLBW Reg, Reg = 0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7
    REG2 = PUNPCHBW Reg, Reg = 8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15
    PALIGNR REG2, REG1, 1 = 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8
    
    This [1;31moptim[mization improved the function performance by 23% and produced a 3% user level gain on 1080p content on Atom processors.
    There was no observed performance impact on Core processors (expected).
    
    Change-Id: I3cec701158993d95ed23ff04516942b5a4a461c0

[33mcommit 15cf55b3ca44fd58c8d0fd51819146e8544e8e81[m
Merge: b43c27ab6 a306bd827
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Dec 4 19:22:27 2014 -0800

    Merge "Use the RTC [1;31moptim[mizations when in high bitdepth mode."

[33mcommit a306bd8274763e5aa684dd33aaf3fb0e2871310f[m
Author: Peter de Rivaz <peter.derivaz@gmail.com>
Date:   Thu Dec 4 10:51:10 2014 +0000

    Use the RTC [1;31moptim[mizations when in high bitdepth mode.
    
    Change 72193 made the encoder behave differently
    when configured with and without high bitdepth.
    This change means the same algorithm is used for both.
    
    Change-Id: I707a44a94afca773a9e0c2f7ebeeea83030257c5

[33mcommit 6eec73a747f3d14d327cdc33279de96d0deb48c8[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Jul 31 14:19:31 2014 -0700

    Remove asm offset dependencies
    
    The obj_int_extract code is no longer worth maintaining. It creates
    significant issues when adapting for different build systems and no
    longer offers as significant of a performance benefit due to
    improvements in intrinsics.
    
    Source files will remain until the various third-party builds are updated.
    
    The neon fast quantizer has been moved to intrinsics. The armv6 version
    has been removed because so few remaining targets require it.
    
    Compilers and processors have improved significantly since the
    pack_tokens code was written. The assembly is no longer faster than the
    C code.
    
    pack_tokens were the only [1;31moptim[mizations for the armv5te targets so the targets
    will be removed after the test infrastructure has been updated.
    
    BUG=710
    
    Change-Id: Ic785b167cd9f95eeff31c7c76b7b736c07fb30eb

[33mcommit 7d07f512cd87446eef541e9af4af19b1e8c6342a[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Wed Nov 5 12:56:04 2014 -0800

    Fix SSSE3 partial_idct_test detection
    
    The test filter is not a prefix matcher. It requires test type to
    contain no more than the [1;31moptim[mization type. In this example, SSSE3_64
    fails to match and the test is not skipped even when SSSE3 is not
    available.
    
    Change-Id: Ia74229a167c88da4e6da169012a7a77d438c3f75

[33mcommit e083f6bd0857bb325980501632d8f4666433cd00[m
Author: Jingning Han <jingning@google.com>
Date:   Sun Nov 2 10:45:32 2014 -0800

    Refactor sub-pixel motion search unit
    
    This commit unfolds the legacy macro definitions used in the
    sub-pixel motion search and refactors the operational flow for
    later [1;31moptim[mizations.
    
    Change-Id: I3e3f770cad961d03d1a6eb0b2a0186cc77eaf2b8

[33mcommit eee201c221cdff90a4e74d4cf8917875684f0e2a[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Oct 23 16:54:45 2014 -0700

    Tile based adaptive mode search in RD loop
    
    Make the spatially adaptive mode search in rate-distortion
    [1;31moptim[mization loop inter tile independent. Experiments suggest that
    this does not significantly change the coding staticstics.
    
    Single tile, speed 3:
    pedestrian_area 1080p 1500 kbps
    59192 b/f, 40.611 dB, 101689 ms
    
    blue_sky 1080p 1500 kbps
    58505 b/f, 36.347 dB, 62458 ms
    
    mobile_cal 720p 1000 kbps
    13335 b/f, 35.646 dB, 45655 ms
    
    as compared to 4 column tiles, speed 3:
    pedestrian_area 1080p 1500 kbps
    59329 b/f, 40.597 dB, 101917 ms
    
    blue_sky 1080p 1500 kbps
    58712 b/f, 36.320 dB, 62693 ms
    
    mobile_cal 720p 1000 kbps
    13191 b/f, 35.485 dB, 45319 ms
    
    Change-Id: I35c6e1e0a859fece8f4145dec28623cbc6a12325

[33mcommit 7045aec00a94bd49ed979b8dbd73bb81d58670dc[m
Author: Tamar Levy <tamar.levy@intel.com>
Date:   Wed Oct 1 23:47:31 2014 -0700

    SAD32xh and SAD64xh for AVX2
    
    All sad function that process above 32 consecutive elements are [1;31moptim[mized
    for AVX2:
    vp9_sad64x64
    vp9_sad64x32
    vp9_sad32x64
    vp9_sad32x32
    vp9_sad32x16
    vp9_sad64x64_avg
    vp9_sad64x32_avg
    vp9_sad32x64_avg
    vp9_sad32x32_avg
    vp9_sad32x16_avg
    The functions that appeared as a hotspot is vp9_sad32x32 and vp9_sad64x64
    vp9_sad32x32 was [1;31moptim[mized by 68% and vp9_sad64x64 was [1;31moptim[mized by 90%
    both of them gave and overall ~2.3% user level gain
    
    Change-Id: Iccf86b375a2b54c5fbbe685902ead0c9a561b9fd

[33mcommit 891793a54026315e1ef326f4caf750b94fa29e1e[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Sep 29 12:42:07 2014 -0700

    Conditionally skip reference frame check
    
    For regular inter frames, if the distance from GOLDEN_FRAME is larger
    than 2 and if the predicted motion vector of LAST_FRAME gives lower
    sse than that of GOLDEN_FRAME, skip the GOLDE_FRAME mode checking in
    the rate-distortion [1;31moptim[mization. It provides about 5% speed-up at
    expense of -0.137% and -0.230% performance down for speed 3. Local
    experiment results:
    
    pedestrian 1080p 2000 kbps
    66712 b/f, 40.908 dB, 113688 ms ->
    66768 b/f, 40.911 dB, 108752 ms
    
    blue_sky 1080p 2000 kbps
    51054 b/f, 35.894 dB, 70406 ms ->
    51051 b/f, 35.891 dB, 67236 ms
    
    old_town_cross 720p 1500 kbps
    14412 b/f, 36.252 dB, 60690 ms ->
    14431 b/f, 36.249 dB, 57346 ms
    
    Change-Id: Idfcafe7f63da7a4896602fc60bd7093f0f0d82ca

[33mcommit eee904c9b91b62510169c52d5fc05580fd1f18c0[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 18 13:37:20 2014 -0700

    Adaptive mode search scheduling
    
    This commit enables an adaptive mode search order scheduling scheme
    in the rate-distortion [1;31moptim[mization. It changes the compression
    performance by -0.433% and -0.420% for derf and stdhd respectively.
    It provides speed improvement for speed 3:
    
    bus CIF 1000 kbps
    24590 b/f, 35.513 dB, 7864 ms ->
    24696 b/f, 35.491 dB, 7408 ms (6% speed-up)
    
    stockholm 720p 1000 kbps
    8983 b/f, 35.078 dB, 65698 ms ->
    8962 b/f, 35.054 dB, 60298 ms (8%)
    
    old_town_cross 720p 1000 kbps
    11804 b/f, 35.666 dB, 62492 ms ->
    11778 b/f, 35.609 dB, 56040 ms (10%)
    
    blue_sky 1080p 1500 kbps
    57173 b/f, 36.179 dB, 77879 ms ->
    57199 b/f, 36.131 dB, 69821 ms (10%)
    
    pedestrian_area 1080p 2000 kbps
    74241 b/f, 41.105 dB, 144031 ms ->
    74271 b/f, 41.091 dB, 133614 ms (8%)
    
    Change-Id: Iaad28cbc99399030fc5f9951eb5aa7fa633f320e

[33mcommit 601f3a886e4f643783fd5fe824dcb9b79e251111[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Sep 16 10:46:18 2014 -0700

    Fix a performance regression
    
    This commit adds back sse2 or ssse3 [1;31moptim[mized versio of a couple of
    functions, fixes a ~10% performance regression.
    
    Change-Id: I049786906e5a641224dced63c6492aec9d86d183

[33mcommit 252822e81c1d6f7edb359f4358fe9cec2fbb14a8[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Sep 15 10:12:05 2014 -0700

    Remove redundant reference frame check in sub8x8 RD search
    
    The valid reference frame check in sub8x8 rate-distortion
    [1;31moptim[mization search has been included in the ref_frame_skip_mask
    scheme. This commit removes the later further validation checks
    that are not in effect.
    
    Change-Id: I853b477c44037d3dc0afec6cbfce08a96c597a75

[33mcommit 888a848453acfc0a9b92f8c624f6d6c1b26945cc[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 12 14:36:51 2014 -0700

    Remove redundant reference frame threshold settings
    
    When a reference frame type is not in the frame buffer, the mode
    search threshold will be set to INT_MAX, so as to effectively
    turn off the mode entries in the rate-distortion [1;31moptim[mization loop
    that involves this reference frame type. This operation is now
    integrated in the ref_frame_skip_mask scheme. This commit hence
    removes the redundant mode search threshold setting.
    
    Change-Id: Ib18f45da611afda2af275201efd367df7f5101ab

[33mcommit adb20849b6bdc27211b7f230d3eb38ffd6b822d2[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 12 11:00:15 2014 -0700

    Refactor reference frame control in sub8x8 block RD search
    
    This commit unifies the reference frame control in the rate-
    distortion [1;31moptim[mization search loop of sub8x8 block size to remove
    the control dependency on mode search order.
    
    Change-Id: I3a174099f71a7cc176ede9fd60e2374243ae9232

[33mcommit 8645a5303971a0e9ac7dc0c589dc493cfd0be69e[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Wed Sep 10 10:27:58 2014 -0700

    Allow specifying opt dependencies
    
    If [1;31moptim[mizations use more than one cpu feature, allow
    specifying them so that '--disable-X' still works
    
    https://code.google.com/p/webm/issues/detail?id=854
    
    Change-Id: I3108ea37b397371a2be84dd5f2380b304db23f18

[33mcommit 8cefed156818acc47510a4f1527d0f33e3eece77[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 11 10:17:12 2014 -0700

    Remove inter_mode_mask from rate-distortion search loop
    
    This speed feature is used in real-time setting only. Remove the
    related condition check in the rate-distortion [1;31moptim[mization search
    loop.
    
    Change-Id: Iaacc1e268214634e6f95c5048c28a60cec6c42fc

[33mcommit f9f0879756c6c6a5af3cd43986ffde39b3b5deae[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 9 18:43:27 2014 -0700

    Refactor to remove speed feature dependency on mode search order
    
    This commit refactor the rate-distortion [1;31moptim[mization search for
    regular block sizes to remove the speed feature dependency on mode
    search order.
    
    Change-Id: Ied033ee484c2957e17baa7b6450b720fe7dd0e7d

[33mcommit 9a9e2aef09bad382aa21c2e92aee100b38168ea9[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 9 15:10:00 2014 -0700

    Remove redundant ref frame pointer assignment
    
    Assigning selected reference frame pointer is done in the
    encode_superblock function. No need to do this at the end of
    rate-distortion [1;31moptim[mization search.
    
    Change-Id: I33fcede0fd304b4a4c4deef2d126d79546a9c070

[33mcommit 801fef26ecf7c50f99442d3d27562c784971f676[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 2 18:05:03 2014 -0700

    Skip comp inter mode test in RD loop with same frame bias signs
    
    This commit allows the encoder to skip check on compound inter
    modes in the rate-distortion [1;31moptim[mization loop, if the reference
    frame bias signs are the same.
    
    Change-Id: Ib753e6bb11cbdd338aee69dbe2b649671f75a6b0

[33mcommit 33176fef872c5d812d7ce8f9875d5166de460c5d[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 2 10:57:10 2014 -0700

    Skip comp inter mode tests for arf coding
    
    This commit skips the compound inter mode prediction check in the
    rate-distortion [1;31moptim[mization loop for ARF coding. It reduces the
    runtime for certain test clips at speed 3, at no compression
    performance change:
    
    bus CIF 1000 kbps, 8260 ms -> 8090 ms, 1.8% speed-up
    stockholm 720p 1000 kbps, 74453 ms -> 71826 ms, 2.9% speed-up
    
    No visible speed-up for pedestrian area 1080p at 2000 kbps.
    
    Change-Id: Ic68aa56837159b726563b784e2e3729e846465ad

[33mcommit 1144fee3d509aa4cb6dffba04ea0abcc0f9cf909[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Aug 20 11:17:05 2014 -0700

    add a new interp filter search strategy.
    
    This commit addes a new strategy to reduce the search for [1;31moptim[mal
    interpolation filter type. The encoder counts and store how many each
    filter type is selected and used for each of the reference frames.
    A filter type that is rarely used for all three reference frames is
    masked out to avoid computation.
    
    The impact on compression is neglectible:
    -0.02% on derf
    +0.02% on stdhd
    
    Encoding time is seen to reduce by 2~3%.
    
    Change-Id: Ibafa92291b51185de40da513716222db4b230383

[33mcommit b4b09c97964d41134af2d58c48ae13f72ab40719[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 6 22:48:37 2014 -0700

    Enable fast forward txfm and quant for rate-distortion search
    
    This commit enables encoder to select fast forward transform and
    quantization path according to the prediction residual sse/variance,
    in the rate-distortion [1;31moptim[mization scheme.
    
    Change-Id: Ief9fc3844fd4107166d401970e800c6e5ce2b5fe

[33mcommit 8684c232600997df2c8e41a2708cafee97086a99[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 6 16:11:22 2014 -0700

    Integrate fast txfm and quant path into skip_recode system
    
    This commit integrates the fast transform and quantization process
    into skip_recode scheme in the rate-distortion [1;31moptim[mization loop.
    Previously the fast transform and quantization process was only
    enabled for non-RD coding flow.
    
    Change-Id: Ib7db4d39b7033f1495c75897271f769799198ba8

[33mcommit 49866baae60f863d36ca42f40ff4fddd987461cc[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Tue Jul 29 19:49:47 2014 -0700

    Early termination after partition NONE is done in RD.
    
    This patch allows the encoder to skip the search for partition
    SPLIT, HORZ, VERT after the search for partition NONE is done
    in RD [1;31moptim[mization. It uses the first pass block-wise statistics
    to make the decision. If all 16x16 blocks in the current partition
    have zero motions and small residues from the frist pass statistics,
    and it has small difference variance, further partition search is
    skipped.
    
    For speed 2 setting, experiments on general youtube clips show that
    the speedup varies from 1% - 10%, 5% on average. On the performance
    side in PSNR, derf 0.004%, yt -0.059%, hd -0.106%, stdhd 0.032%.
    
    For hard stdhd clips:
    park_joy_1080p, 502952 ms -> 503307 ms (-0.07%)
    pedestrian_area_1080p, 227049 ms -> 220531 ms (+3%)
    
    This feature is under the compilation flag CONFIG_FP_MB_STATS and
    it is off in current setting.
    
    Change-Id: I554537e9242178263b65ebe14a04f9c221b58bae

[33mcommit 54ad09586c0deb26e7d305623dff78e200fdadef[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 22 16:32:20 2014 -0700

    Enable chessboard inter prediction filter type search
    
    This commit enables a chessboard pattern prediction filter type
    search scheme for rate-distortion [1;31moptim[mization speed-up. For the
    inferred motion vector modes, the encoder can re-use its above/left
    neighbor blocks' prediction filter type and skip a full test on
    all possible filter types. Such operation is turned on/off
    alternatively in a chessboard manner.
    
    It is turned on in speed 3. For test clip pedestrian 1080p, the
    runtime is reduced from 231500 ms -> 221700 ms. The compression
    performance is changed:
    derf:  -0.147%
    yt:    -0.134%
    hd:    -0.079%
    stdhd: -0.220%
    
    Change-Id: I1912f278e7576c2dc632688e3ad7a257410c605a

[33mcommit 75cd57503d022d9c368f9b44f3568319ea8302dd[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Jul 10 09:19:03 2014 -0700

    Refactor vp9_diamond_search_sad function
    
    Currently, vp9_diamond_search_sadx4() is only called when sse3 is
    enabled, which is improper since sse2 [1;31moptim[mization of sdx4df
    functions are available. Changed to always use
    vp9_diamond_search_sadx4().
    
    Change-Id: I4b95d6b7a3c6c645783c373f0ba8d645ece24717

[33mcommit 30117a576dc1590d95d840bb90f95e57277a0c9d[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Jul 9 16:50:11 2014 -0700

    Refactor refining_search_sad code
    
    There are sse2 [1;31moptim[mization of sdx4df functions. Instead of calling
    vp9_refining_search_sadx4 only when sse3 is enabled, call it always.
    
    Change-Id: I24f93818f7d4209d1425039e0eb099ff9ff08fe9

[33mcommit 03c276ea171ff2972ae96d08732d8b311ae113fb[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Wed Jul 2 12:36:48 2014 -0700

    Split vp9_rdopt into vp9_rdopt and vp9_rd.
    
    vp9_rdopt is for making rd [1;31moptim[mal mode decisions. vp9_rd is for all
    other rd related routines. Anything used outside of making an rd [1;31moptim[mal
    decision belongs in rd.
    
    Change-Id: I772a3073f7588bdf139f551fb9810b6864d8e64b

[33mcommit 077144d2064edbd5dcd13ac677bfef87e807da6a[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri May 23 12:23:29 2014 -0700

    Use extreme values for input in convovle tests
    
    The intepolation filter functions can be better tested withe extreme
    values, especially given the [1;31moptim[mization functions are prone to
    overflow signed 16 bit intermediate value when operation order is
    wrong.
    
    Change-Id: I712142b0bc1e5969c692c0486a57ffa37c9742b5

[33mcommit f625b2ac9344990c160f7293073e0ffd6560361f[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Fri May 16 08:14:18 2014 -0700

    Correct HAVE_NEON_ASM define
    
    These [1;31moptim[mizations are currently disabled.
    
    Change-Id: I19c58c9cb82d017638b86196641b9e001dfa798b

[33mcommit 1fbab853c8b215c5787883618a80cc3e8ae8e44c[m
Author: Tamar Levy <tamar.levy@intel.com>
Date:   Tue Apr 22 22:40:48 2014 -0700

    AVX2 To VP9 Block Error Optimization
    
    vp9_block_error_sse2 can only handle 16 bytes at a time but
    the function requires to handle a sequence of 32 bytes at a time
    so each 16 bytes is handled in a different register.
    With AVX2 [1;31moptim[mization the 32 bytes can be handled in one register instead
    of two in the SSE2
    The vp9_block_error was [1;31moptim[mized by 85%.
    The user level was [1;31moptim[mized by 1.2%
    
    Change-Id: Ia8fffe60e61eff7432a5fbd538757894f6c319fd

[33mcommit 33df6d1fc1d268b4901b74b4141f83594266f041[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Apr 28 14:42:23 2014 -0700

    Save NEON registers in VP8 NEON functions
    
    The recent compiler can generate [1;31moptim[mized code that uses NEON registers
    for various operations besides floating-point operations. Therefore,
    only saving callee-saved registers d8 - d15 at the beginning of the
    encoder/decoder is not enough anymore. This patch added register saving
    code in VP8 NEON functions that use those registers.
    
    Change-Id: Ie9e44f5188cf410990c8aaaac68faceee9dffd31

[33mcommit 25435257000505b8af36bd4d46744c3f65266d0a[m
Merge: 908e1218c a4c3e2e4f
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Apr 14 10:32:58 2014 -0700

    Merge "Cleaning up [1;31moptim[mize_b()."

[33mcommit a4c3e2e4f26b5f76ca75aa994c9466644bae6bdd[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Apr 10 17:45:07 2014 -0700

    Cleaning up [1;31moptim[mize_b().
    
    Change-Id: I81eb1e931e00acfcb65f824e394bbe7795d6deaa

[33mcommit 5053845a70de37291dfae8258a33041bcd15e4d9[m
Merge: 01c4b5ddd 9cf7a0f0d
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Apr 10 17:15:19 2014 -0700

    Merge "Cleaning up [1;31moptim[mize_b()."

[33mcommit 9cf7a0f0da1f91c71f07971e84f72914a913c397[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Apr 10 11:19:38 2014 -0700

    Cleaning up [1;31moptim[mize_b().
    
    Change-Id: I5c62fabd380492740c1c2c0d71861e64ee1b05e8

[33mcommit 99893f2410f618b712037db4d3ec60e81aa9de1f[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Mar 28 17:42:45 2014 -0700

    Apply finer quantizer to partition search frames in non-RD flow
    
    This commit [1;31moptim[mizes the bit allocation for the non-RD coding flow.
    It applies slightly better quantizer to the frames, where all blocks
    run a non-RD partition search. Such frames typically have better
    rate-distortion trade off, thus improving the reconstruction quality
    for next few frames reference at reasonably low increment in rate
    cost.
    
    The coding performance for rtc set at speed -5 with error-resilient
    tuned on and rate control set as cbr is improved by 19.58%. It improved
    the coding speed by about 10% for a portion of local test clips.
    
    Change-Id: I9d56696cd4359dc8136ca10aff10fff05aaa2686

[33mcommit 0fa8b668c1019005030b3f584c048d8ddf3012d8[m
Author: Tamar Levy <tamar.levy@intel.com>
Date:   Thu Mar 13 14:47:30 2014 -0700

    AVX2 SAD Optimization:
    
    2 functions were [1;31moptim[mized for avx2 by using full 256 bit register
    In order to handle 32 elements in parallel instead of only 16 in parallel:
    1. vp9_sad32x32x4d
    2. vp9_sad64x64x4d
    
    The function level gain is 66% and the user level gain is ~1%.
    
    Change-Id: I4efbb3bc7d8bc03b64b6c98f5cd5c4a9dd3212cb

[33mcommit 9b5df3fabe6466594183a644473519162f16dc77[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Mar 21 12:23:47 2014 -0700

    Fix libvpx VP9 decoder dr memory errors
    
    Fixed dr memory errors reported in Issue 736:
    https://code.google.com/p/webm/issues/detail?id=736
    
    All elements in left_col buffer need to be initialized to ensure
    the correctness of SIMD operations in x86 [1;31moptim[mized code.
    
    Change-Id: I8e7f26ab45cca8099c1f9342bcf852f828bda7e4

[33mcommit 99ef2f75e9ea58f4bdc5bb86be0bc6b9fb696cce[m
Merge: 762df0b95 b07ae88ec
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Mar 10 10:40:44 2014 -0700

    Merge "Cleaning up [1;31moptim[mize_b() function."

[33mcommit b07ae88ec490cde22ce16435b038822d442f7163[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Mar 6 12:47:55 2014 -0800

    Cleaning up [1;31moptim[mize_b() function.
    
    Change-Id: Id4c5b73ad747a8851969e9daf5bac40b4b9beefc

[33mcommit e4e25ac965210fa1e49490d560e51381f1751555[m
Merge: 78bc1b0b1 6c7b5e38a
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Feb 27 18:23:18 2014 -0800

    Merge "Inlining [1;31moptim[mize_init_b() function."

[33mcommit 6c7b5e38a9f24ee0de25d7d08b61e1757bab9c96[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Feb 27 14:54:20 2014 -0800

    Inlining [1;31moptim[mize_init_b() function.
    
    Change-Id: If41459f8ba186bb47d977b76e2f4bab97078462d

[33mcommit 9774962a24516f268555de4f8b14c6dae3fe784c[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Feb 26 13:51:12 2014 -0800

    Cleaning up vp9_encodemb.c file.
    
    Usage of encode_b_args is unnecessary because encode_block_pass1() doesn't
    use them. That's why [1;31moptim[mize_init_b() call is also not required.
    
    Change-Id: Ib6cfe4916c2ca85749c90bb0adcba6fea592f9ac

[33mcommit b13ee81d186c5c2884c05359920bf623de89aede[m
Merge: 0eca2cd3c 0444deb8d
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Feb 26 09:19:28 2014 -0800

    Merge "Removing vp9_[1;31moptim[mize_b() function."

[33mcommit 0444deb8d1d0f656cdeb1cf0bff3914c8456246f[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Feb 25 17:23:01 2014 -0800

    Removing vp9_[1;31moptim[mize_b() function.
    
    Change-Id: If859c9d58a8fe3f478d409b9e9ca59bcee8fd35d

[33mcommit df9c8d5bd9c5def7dde730adede3e2adca3db659[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Mon Feb 24 17:34:27 2014 -0800

    resolve issue with arm code failing unit test
    
    The [1;31moptim[mizer did something funny with the code around
    line 1412.  Before the call to encode_sb split_dist was
    set properly but after it was adjusted and converted to
    a negative.
    
    https://code.google.com/p/webm/issues/detail?id=714
    
    Change-Id: I9a7631d5325ade2dc28c1030653a23eecec8721b

[33mcommit 0cc71c9c9fe8f212ba233f8d112bf48e9aa2a2d3[m
Merge: ad8d4454f 3068d7d94
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Feb 18 12:55:34 2014 -0800

    Merge "SSSE3 convolution [1;31moptim[mization"

[33mcommit 3068d7d94428d32e0c33a5d3061ba8e362838a41[m
Author: Tamar Levy <tamar.levy@intel.com>
Date:   Thu Nov 21 15:49:29 2013 -0700

    SSSE3 convolution [1;31moptim[mization
    
    Optimizing all SSSE3 assembly for convolution:
    1. vp9_filter_block1d4_h8_sse2
    2. vp9_filter_block1d8_h8_sse2
    3. vp9_filter_block1d16_h8_sse2
    4. vp9_filter_block1d4_v8_sse2
    5. vp9_filter_block1d8_v8_sse2
    6. vp9_filter_block1d16_v8_sse2
    my [1;31moptim[mization include:
    -processing 2x8 elements in one 128 bit register instead of processing
    8 elements in one 128 bit register.
    -removing unecessary loads.
    This [1;31moptim[mization gives between 2.4% user level gain for 480p input
    and 1.6% user level gain for 720p.
    This Optimization is done only for 64 bit
    
    Change-Id: Ic07fce2f9360329b4f2d956efda1480ae958766b

[33mcommit 876c72a093f9d209e98522d1ef17ceef08689a2b[m
Author: Tamar Levy <tamar.levy@intel.com>
Date:   Fri Jan 17 12:39:16 2014 -0700

    AVX2 Convolve Optimization
    
    Two convolve functions were [1;31moptim[mized for AVX2:
    1. vp9_filter_block1d16_h8
    2. vp9_filter_block1d16_v8
    vp9_filter_block1d16_v8 was [1;31moptim[mized for AVX2 by reducing the number of
    loop strides by half, two strides were processed in parallel.
    vp9_filter_block1d16_v8 was also [1;31moptim[mized in the same way also some of the
    loads were being done outside of the loop and by that preventing redundant
    loads.
    This Optimization gives 43% function level gain and 1.3% user level gain.
    Now can be compiled in Windows
    
    Change-Id: I2714124cfb0c14a77d7a0ce126a20db92ffbf92c

[33mcommit d1961e6fbfd5642cf2250e17e65d6499d8819e8e[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Feb 3 12:40:18 2014 -0800

    Optimize bilinear sub-pixel filters in ssse3
    
    This patch added ssse3 [1;31moptim[mization of bilinear sub-pixel filters.
    The real time encoder was speeded up by ~1%.
    
    Change-Id: Ie82e98976f411183cb8c61ab8d2ba0276e55a338

[33mcommit 2488cb34bc894cb5f5e0d5afaa85605c60e2f5ab[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Jan 29 15:49:03 2014 -0800

    Optimize bilinear sub-pixel filters in sse2
    
    Using bilinear filters could speed up the codec in real-time mode.
    This patch added sse2 [1;31moptim[mizations of bilinear filters that
    operate on different-sized blocks.
    
    Tests showed that the real-time encoder was speeded up by 3%.
    
    Change-Id: If99a7ee4385fcc225c3ee7445d962d5752e57c3f

[33mcommit 3cd37dfeb5078dd6a84b55e55fa7fe5f8cffa218[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Jan 17 12:56:36 2014 -0800

    Adds a non-normative resize library to vp9 encoder
    
    Adds an arbitrary-size resize library for use in scaling of input
    frames in a non-normative manner in the vp9 encoder. The method
    used is as follows:
    Downsampling - Uses a 8 tap filter for factor of 2 decimation upto
    a size just higher than the desired size. Then interpolates pixels
    at a precision of 1/32 pel using a set of 8-tap filters.
    Upsampling - Interpolates pixels at a precision of 1/32 pel using
    a set of 8-tap filters.
    
    There is no assembly [1;31moptim[mization yet.
    
    Change-Id: Ib5b81e174fc139da322bb97c8214d52289d60d8a

[33mcommit d2bb0c51d397019e22bc920ac36ae3d09924c87d[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Jan 16 16:09:31 2014 -0800

    Revert "Revert "Revert "SSSE3 convolution [1;31moptim[mization"""
    
    This reverts commit f9404f240642222775a371acde8fc0721b3812df.
    
    This patch caused some ASAN error.
    
    Change-Id: If15b7e581310e19061d111c69f2931809662ed19

[33mcommit 056db03d17fa84089a6918598c0439e167eb6776[m
Merge: 3c1134521 f9404f240
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Jan 15 15:03:25 2014 -0800

    Merge "Revert "Revert "SSSE3 convolution [1;31moptim[mization"""

[33mcommit f9404f240642222775a371acde8fc0721b3812df[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Jan 13 11:58:47 2014 -0800

    Revert "Revert "SSSE3 convolution [1;31moptim[mization""
    
    This reverts commit b645257121da20b422dbbebf02aae0fc6dff95d4.
    
    Change-Id: I60d1bf57ae8e9eb6127f42f2d5a780124ac51b45

[33mcommit db2b350d33c3f04e8cd779982005422843715043[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jan 10 12:48:04 2014 -0800

    Declare setup_buffer_inter in vp9_rdopt.h
    
    This funtion initializes buffer pointers and first stage motion vector
    prediction. It will be needed by both regular rate-distortion
    [1;31moptim[mization loop and the non-RD mode decision. Hence move its
    declaration in vp9_rdopt.h
    
    Change-Id: I64e8b6316c9d05f20756a62721533a2e4d158235

[33mcommit b645257121da20b422dbbebf02aae0fc6dff95d4[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Jan 10 12:28:16 2014 +0000

    Revert "SSSE3 convolution [1;31moptim[mization"
    
    This reverts commit 511d218c60b9b6c1ab9383db746815e907af0359.
    
    In current form intrinsics break borg build.
    
    Change-Id: Ied37936af841250ecff449802e69a3d3761c91b9

[33mcommit af31b27aae70d18bf5d52307bde1ab356b7c42b5[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jan 9 12:43:40 2014 -0800

    Optimze inv 16x16 DCT with 10 non-zero coeffs - P2
    
    This commit further [1;31moptim[mizes SSE2 operations in the second 1-D
    inverse 16x16 DCT, with (<10) non-zero coefficients. The average
    runtime of this module goes down from 779 cycles -> 725 cycles.
    
    Change-Id: Iac31b123640d9b1e8f906e770702936b71f0ba7f

[33mcommit f3b9b97c0ea982dc71d31eda3c2c039699650e5a[m
Merge: 6d812d6f2 511d218c6
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Jan 9 12:39:47 2014 -0800

    Merge "SSSE3 convolution [1;31moptim[mization"

[33mcommit 511d218c60b9b6c1ab9383db746815e907af0359[m
Author: Tamar Levy <tamar.levy@intel.com>
Date:   Thu Nov 21 15:49:29 2013 -0700

    SSSE3 convolution [1;31moptim[mization
    
    Optimizing all SSSE3 assembly for convolution:
    1. vp9_filter_block1d4_h8_sse2
    2. vp9_filter_block1d8_h8_sse2
    3. vp9_filter_block1d16_h8_sse2
    4. vp9_filter_block1d4_v8_sse2
    5. vp9_filter_block1d8_v8_sse2
    6. vp9_filter_block1d16_v8_sse2
    my [1;31moptim[mization include:
    -processing 2x8 elements in one 128 bit register instead of processing
    8 elements in one 128 bit register.
    -removing unecessary loads.
    This [1;31moptim[mization gives between 2.4% user level gain for 480p input
    and 1.6% user level gain for 720p.
    This Optimization done only for 64bit.
    
    Change-Id: Icb586dc0c938b56699864fcee6c52fd43b36b969

[33mcommit ba6ab46cdcb1b3ae977984c9e18b122c72370eb6[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jan 7 14:35:02 2014 -0800

    Optimze inv 16x16 DCT with 10 non-zero coeffs - P1
    
    This commit is the first patch [1;31moptim[mizing SSE2 implementation of inverse
    16x16 DCT with <10 non-zero coefficients. It focused on the first 1-D (row)
    transformation. It exploits the fact that only top-left 4x4 block contains
    non-zero coefficients, in a 2-D inverse 16x16 DCT with <10 coeffients.
    
    The average runtime of idct16x16_10 unit is reduced from
    883 cycles -> 779 cycles (12% faster).
    
    For pedestrian_area_1080p 300 frames at 4000 kbps, the speed 2 runtime goes
    down from 310651 ms  -> 305910 ms. The decoding speed goes up from
    80.37 fps -> 80.87 fps.
    
    Change-Id: Ic6f3ac5a637a76c07ba73ddaafe318a699fea645

[33mcommit 5be0ed30dcf8ba836da78ee38460d4fa0ddc1b67[m
Merge: feab7e114 691111aac
Author: Hangyu Kuang <hkuang@google.com>
Date:   Wed Jan 8 14:41:43 2014 -0800

    Merge "Add initial intra frame neon [1;31moptim[mization. 1~2% gain."

[33mcommit 691111aacf58b050ee7f40c9a6a9ac69bfc612a2[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Jan 6 14:34:09 2014 -0800

    Add initial intra frame neon [1;31moptim[mization. 1~2% gain.
    
    More intra [1;31moptim[mizations will be added.
    
    Change-Id: I33ae8d93f6002bf7b64cc2669602d9e6bfa5a6e8

[33mcommit 357b65369f7d41a3c66eadb390224d260bd6dc63[m
Author: Tamar Levy <tamar.levy@intel.com>
Date:   Sun Dec 29 01:23:50 2013 -0700

    AVX2 Variance Optimization
    
    Optimizing the variance functions: vp9_variance16x16, vp9_variance32x32,
    vp9_variance64x64, vp9_variance32x16, vp9_variance64x32,
    vp9_mse16x16 by migrating to AVX2
    some of the functions were [1;31moptim[mized by processing 32 elements instead of 16.
    some of the functions were [1;31moptim[mized by processing 2 loop strides of 16
    elements in a single 256 bit register
    This [1;31moptim[mization gives between 2.4% - 2.7% user level performance gain
    and 42% function level gain.
    
    Change-Id: I265ae08a2b0196057a224a86450153ef3aebd85d

[33mcommit 393a8ccef9384e84490b1c7f940b5f87408e94b4[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jan 6 13:29:16 2014 -0800

    Remove avoid_frame_with_high_error from RD loop
    
    The feature undergoes prior assumption that the recursive partition
    size search from 4x4 to 64x64, hence utilizing information from small
    blocks to determine early termination in large block rate-distortion
    [1;31moptim[mization search. The current codebase is now going from top down.
    The previous function might go with not properly initialized values,
    hence removed.
    
    Tested on pedestrian_area_1080p at 4000 kbps running under speed 2.
    No visible difference in runtime observed.
    
    Change-Id: I553df415c6191413762db7ae34e8790c71d8118e

[33mcommit 1bb11781e2be1a047e5f38a5cd3d6f5c8d0a107b[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jan 2 15:33:38 2014 -0800

    Rework idct8x8_10 SSE2 implementation
    
    This commit [1;31moptim[mizes the SSE2 implmentation of idct8x8_10. It exploits
    the fact that only top-left 4x4 block contains non-zero coefficients,
    and hence reduces the instructions needed.
    
    The runtime of idct8x8_10_sse2 goes down from 216 to 198 CPU cycles,
    estimated by averaging over 100000 runs. For pedestrian_area_1080p 300
    frames coded at 4000kbps, the average decoding speed goes up from
    79.3 fps to 79.7 fps.
    
    Change-Id: I6d277bbaa3ec9e1562667906975bae06904cb180

[33mcommit 243327f43cb48ef745e75f156ee24c0021bdd2c4[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Dec 19 18:41:29 2013 -0800

    Store the SSE of prediction residuals
    
    Buffer the SSE of prediction residuals in the rate-distortion
    [1;31moptim[mization loop of a given block. This information would be used
    for later encoding control.
    
    Change-Id: If4e63f3462490513c48be9407d3327c8dd438367

[33mcommit 3b5a90bd868a3469659e4cb78ec37032863cb92d[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Dec 12 17:31:04 2013 -0800

    Enable adaptive pred filter type for sub8x8
    
    This commit enables an adaptive prediction filter type selection
    for sub8x8 block sizes. In speed 1, it re-uses the filter type of
    collocated 8x8 block if it is tested in the rate-distortion [1;31moptim[mization
    loop, for the sub8x8 blocks. Otherwise, it runs the normal test
    over all the three filter types. In speed 2, it re-uses the 8x8
    block's prediction filter type, if available. Otherwise, force it
    to be EIGHTTAP.
    
    Compression and speed performance wise:
    speed 1
    derf -0.266%
    yt   -0.138%
    
    bus at 2000 kbps: 33766ms -> 30451ms (10% speed-up)
    football at 600 kbps: 48173ms -> 43786ms (9% speed-up)
    
    speed 2
    derf -0.026%
    yt   +0.134%
    
    bus at 2000 kbps: 18973ms -> 17698ms (6% speed-up)
    football at 600 kbps: 26748ms -> 25096ms (6% speed-up)
    
    Change-Id: I77e097533b969fd3472147225fa79fc98095d342

[33mcommit b295092b8fcac34fd657df45b15fed54ed89b814[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Dec 6 09:16:36 2013 -0800

    Full range motion search for regular block sizes
    
    Add a full range motion search for regular block sizes. This runs
    exhaustive search within the given reference area. This commit further
    [1;31moptim[mizes the search process by combining 4 points test into one
    pipeline, which gives 30% speed-up as compared to run each individual
    point at a time.
    
    This full range search serves as a best possible motion search reference.
    When replacing the diamond search with full range search, the speed 0
    runtime of bus CIF at 2000 kbps goes from 153872ms to 623051ms. The
    compression performance compared to speed 0 setting gains 0.585% for
    derf set.
    
    Change-Id: Ieef1225216b0b86b4ac4872fa7fb9e18bf2eabb3

[33mcommit f01ad926d0b2b5c7f79f39f05168d6837cfd54a7[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Dec 2 18:44:08 2013 -0800

    Fix intra prediction ref selection in skip_encode
    
    This commit fixes the intra prediction reference source selection
    in the settings of skip_encode. Use original boundary pixels as
    prediction reference, when the inverse transform and reconstruction
    are skipped in the per block size rate-distortion [1;31moptim[mization loop.
    
    Change-Id: I36081aa30aa46e203e0e6f4e8a420fd08269469a

[33mcommit e9c19617bfdd1274a75a0398aff5167852bac65c[m
Merge: d3a2e55af 8def766de
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Nov 27 10:27:32 2013 -0800

    Merge "vp9_short_fdct32x32_rd vp9_short_fdct32x32 [1;31moptim[mized for AVX2"

[33mcommit f97d91ab673f57e2fa5a44cbee2e1cdec188c43c[m
Author: Abo Talib Mahfoodh <ab.mahfoodh@gmail.com>
Date:   Tue Nov 26 12:26:43 2013 -0500

    improve vp9_idct32x32_34(x1.472)&1024(x1.032)_add_sse2
    
    vp9_idct32x32_34_add_sse2:
    speedup: 1.472
    IDCT32_1D_34 and MULTIPLICATION_AND_ADD_2 are [1;31moptim[mized
    based on the fact that Only upper-left 8x8 has
    non-zero values.
    
    vp9_idct32x32_1024_add_sse2:
    speedup: 1.032
    
    Tested with: park_joy_420_720p50.y4m
    
    Change-Id: I8670ce547552b48695049de298e2fc46ce28dfbc

[33mcommit ba8b5e8d6d5db6972d1ce662626c839457b63f28[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Nov 22 11:56:29 2013 -0800

    Use separate inter predictors for enc/dec
    
    The decoder will construct inter predictor using lazy border extension,
    while the encoder, going with multiple runs of motion search in the rate-
    distortion [1;31moptim[mization loop for each block, does border extension at
    frame level. This commit makes separate the inter predictors for encoder
    and decoder, respectively.
    
    Change-Id: Ieca2fecba3a7201a6d64ef9f219e5d91e50559c3

[33mcommit ed36720b66ca71438a8e14a41f05e837d030da61[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Nov 21 16:43:37 2013 -0800

    Do vertical loopfiltering in parallel
    
    This patch followed "Add filter_selectively_vert_row2 to enable
    parallel loopfiltering" commit, and added x86 SSE2 [1;31moptim[mization
    to do 16-pixel filtering in parallel. For other [1;31moptim[mizations
    (neon and dspr2), current 16-pixel functions were done by calling
    8-pixel functions twice, and real 16-pixel functions could be added
    later.
    
    Decoder speedup:
    tulip clip:     2% speed gain;
    old_town_cross: 1.2% speed gain;
    bus:            2% speed gain.
    
    Change-Id: I4818a0c72f84b34f5fe678e496cf4a10238574b7

[33mcommit 8def766de24e082c74a0012774864badce3c4f51[m
Author: Tamar Levy <tamar.levy@intel.com>
Date:   Thu Nov 21 12:31:10 2013 -0700

    vp9_short_fdct32x32_rd vp9_short_fdct32x32 [1;31moptim[mized for AVX2
    
    Change-Id: I6366e84490883b72362f762369d7e5bccb64f02f

[33mcommit b5e6d6cccfa2b3b819300f8e35a3e0d51188586f[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Nov 15 11:04:09 2013 -0800

    Add filter_selectively_vert_row2 to enable parallel loopfiltering
    
    Added filter_selectively_vert_row2 to be ready for parallel
    loopfiltering in vertical direction. This change did 2-row
    filtering at a time. If 2 vertically adjacent 8x8 blocks do same
    type of filtering, we can do 16-pixel filtering in parallel.
    
    Next, we need to provide 16-pixel loopfiltering functions in c
    and [1;31moptim[mized versions for codec speedup.
    
    Change-Id: Idf97bbdd70566e55bd30e1fd25cb8544e33291be

[33mcommit 64f728caef5d9f019222c6989a9c6df17464dd69[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Nov 12 16:51:15 2013 -0800

    Do horizontal loopfiltering in parallel
    
    This patch followed "Rewrite filter_selectively_horiz for parallel
    loopfiltering" commit, and added x86 SSE2 [1;31moptim[mization to do
    16-pixel filtering in parallel. Also, corrected the declaration
    of aligned arrays. For 8-pixel-in-parallel case, improved the
    calculation of the masks and filters. Updated the threshold loading
    since the thresholds were already duplicated. Updated neon C functions
    to call neon loopfilters twice.
    
    Using tulip clip, tests showed it gave a ~1.5% decoder speed gain.
    
    Change-Id: Id02638626ac27a4b0e0b09d71792a24c0499bd35
For keyword regression:
[33mcommit b29c48b03c4bff441b0d43ab8c5eab214fd0ab1b[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Mar 6 16:32:20 2015 +0000

    Shorten GF/arf interval in hard scenes.
    
    This patch accounts in the first pass stats for blocks that
    while not coded as intra, are complex and have an intra error /
    best error ratio below a threshold.
    
    The modification shortens the GF arf interval for a particular
    class of content that contains a lot of blocks matching the
    above criteria. (In one short problem test sequence the average
    interval dropped from about 14-15 to 10-11)
    
    The change results in small net gains in metrics results for the
    Yt(~0.2%) and yt-hd (~0.5%) sets and is approximately neutral
    for the other test sets.
    
    The change is currently shielded by a flag and off by default
    pending verification that it does not cause other [1;31mregression[ms
    in tests on a wider YT test set.
    
    Change-Id: I6b803daa6a4ac09a6f428fb3a18be1ecedd974b7

[33mcommit d5130af5687a2401a45190b5bd68638995e74dde[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Oct 16 15:53:21 2014 +0100

    Revert "Move input frame scaling into the recode loop"
    
    This reverts commit 452dc21500a2339ee685cb28efbd2af1b856ea12.
    
    This change has introduced a significant quality [1;31mregression[m on content
    with forced key frames. (e.g. the YT and yt-hd set). It is most
    noticeable in static content where the kf bits dominate. Here, despite
    key frames being apparently coded at the same Q, there is a drop in all
    metrics of ~20% (e.g clXR and BFa0).
    
    Change-Id: Iba14cc61778c0846fa0a59c33c55a9fc49512cb4

[33mcommit 73ef5360b549d84c5fb59a265b9194974317bc31[m
Merge: 2b3b63f42 601f3a886
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Sep 16 12:58:47 2014 -0700

    Merge "Fix a performance [1;31mregression[m"

[33mcommit 601f3a886e4f643783fd5fe824dcb9b79e251111[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Sep 16 10:46:18 2014 -0700

    Fix a performance [1;31mregression[m
    
    This commit adds back sse2 or ssse3 optimized versio of a couple of
    functions, fixes a ~10% performance [1;31mregression[m.
    
    Change-Id: I049786906e5a641224dced63c6492aec9d86d183

[33mcommit 2528051f41161fbe092cb773d66fe07aac1c73b7[m
Author: James Zern <jzern@google.com>
Date:   Tue Jul 22 15:48:25 2014 -0700

    frame_size_tests: reduce default 'large' frame size
    
    VP9FrameSizeTestsLarge exposed an integer overflow in the VP9 encoder,
    for now reduce the size to allow the tests to clear and prevent further
    [1;31mregression[ms.
    4096x4096 -> 4096x2160
    
    this should be restored after the bug is fixed:
    https://code.google.com/p/webm/issues/detail?id=828
    
    Change-Id: I47fdf0648f1d9a3951f731bbf0b727f85ada4fa1

[33mcommit 46218c9cb91ab19ab395e6ed1797f89e41d67730[m
Merge: e84e86857 1c27e1f12
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Jun 26 09:41:40 2014 -0700

    Merge "Fix quality [1;31mregression[m for multi arf off case."

[33mcommit 1c27e1f127e9f6c775b71922eb85de1e11fc81d4[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Jun 26 09:48:31 2014 +0100

    Fix quality [1;31mregression[m for multi arf off case.
    
    Bug introduced during multiple iterations on: I3831*
    
    gf_group->arf_update_idx[] cannot currently be used
    to select the arf buffer index if buffer flipping on overlays
    is enabled (still currently the case when multi arf OFF).
    
    Change-Id: I4ce9ea08f1dd03ac3ad8b3e27375a91ee1d964dc

[33mcommit 81ad047ee57ecb0e2c1ee4dcebda54a44ea54ae9[m
Author: James Yu <james.yu@linaro.org>
Date:   Tue Dec 17 21:23:08 2013 +0800

    VP8 for ARMv8 by using NEON intrinsics 06
    
    Add idct_dequant_full_2x_neon.c
    - idct_dequant_full_2x_neon
    
    ==== Summary of apply VP8 decode patch series ====
    Benchmark on Samsung Chromebook, Cortex-A15, 1.7GHz, Dual core
    Toolchain: linaro-1.13.1-4.8-2014.01
    Compile argument: CROSS=arm-linux-gnueabihf- ../libvpx/configure
                         --target=armv7-linux-gcc --prefix=$HOME/out
                         --enable-shared --cpu=cortex-a7
    Test argument: vpxdec --summary --noblit ./tears_of_steel_1080p.webm
    
    NEON assembly   46.68 (fps)
    Apply patch 06  46.65, -0.03
    Apply patch 07  46.86, +0.21
    Apply patch 08  46.58, -0.28
    Apply patch 09  46.57, -0.01
    Apply patch 10  46.51, -0.06
    Apply patch 11  46.13, -0.38
    Apply patch 12  45.42, -0.71
    Apply patch 13  46.06, +0.64
    Apply patch 14  45.19, -0.87
    Apply patch 15  45.93, +0.74
    Apply patch 16  45.48, -0.45
    Apply patch 17  45.84, +0.36
    Apply patch 18  45.91, +0.07  <= With all NEON intrinsics patches
                     Total -0.77 fps, 1.65% performance [1;31mregression[m
    
    Change-Id: I77bfc9eaccfb97b8d401e949ceff8795e26ca6b7
    Signed-off-by: James Yu <james.yu@linaro.org>
For keyword speed:
[33mcommit 83cbe226231b1affa2826cd6b88aef51578d47b8[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Mar 17 18:40:40 2015 -0700

    Speed up non-rd mode decision search
    
    This commit makes the encoder to explicitly calculate the SAD
    associated with the LAST_FRAME motion vector and compare it to
    that of the GOLDEN_FRAME given by integral projection motion
    estimation. It skips the expensive sub-pixel motion search over
    GOLDEN_FRAME when the LAST_FRAME can provide fairly good motion
    compensated prediction quality.
    
    For dark720p [1;31mspeed[m -6 single thread goes from
    33304 b/f, 40.070 dB, 18156 ms ->
    33319 b/f, 40.061 dB, 17611 ms
    
    Change-Id: I01bc94b9b598075567a392111046b97a9bc30efe

[33mcommit 1f9b2b77ad794a68b267d70c88288d5700297384[m
Merge: b03cf9317 1f00a9b9d
Author: Jingning Han <jingning@google.com>
Date:   Sun Mar 15 09:04:07 2015 -0700

    Merge "Fix choose_partitioning threshold setup for [1;31mspeed[m -5"

[33mcommit 1f00a9b9d570b410e4b5b6e292528400ff0c027f[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Mar 13 16:51:29 2015 -0700

    Fix choose_partitioning threshold setup for [1;31mspeed[m -5
    
    The compression performance of [1;31mspeed[m -5 is on average 12.6% better
    than [1;31mspeed[m -6. At lower bit-rates, the gains are typically 20% or
    more. For 2-thread encoding, the [1;31mspeed[m -5 takes about 1.6x time of
    [1;31mspeed[m -6.
    
    Change-Id: If7a73464a24d33e8f49b9533b51ec51c8da7fc80

[33mcommit 427cdf0a41988320c721462d02884a6a4f19aee4[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Mar 12 16:18:12 2015 -0700

    Reduce the number of full block SAD calls
    
    This commit uses a 6-point 1-step refine motion search in the
    integral projection based full pixel motion estimation, to replace
    the current 9-point search.
    
    It reduces runtime cost of [1;31mspeed[m -6 on some noisy clips, e.g.,
    dark720p single thread
    33314 b/f, 40.076 dB, 18231 ms ->
    33307 b/f, 40.067 dB, 17768 ms
    
    The compression performance for rtc set remains unchanged.
    
    Change-Id: I194ea5a9ce52e5a10baeee36338633adc22f764c

[33mcommit 2b368097c8b7837caaeddb189f46dcf068989792[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Mar 11 10:16:39 2015 -0700

    vp9_pick_inter_mode(): Use single loop to evaluate inter modes
    
    This commit changes to use single loop to evaluate all inter modes.
    There is no impact on compression quality and [1;31mspeed[m, but allow future
    experiment with the order of modes evaluated.
    
    Change-Id: I71696ce1014cbe127e25e98710d835987f5ecc09

[33mcommit 5d677c97eb3737e15399dcd5c1ee26dc5a3f7ba9[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Mar 11 11:31:47 2015 -0700

    Minorly modify model_rd_for_sb_y function
    
    Added a skip_dc check. If skip_dc = 1, we could eliminate calling
    of vp9_model_rd_from_var_lapndz(). This gave slight PSNR & SSIM
    gain(<0.1%), and no [1;31mspeed[m change.
    
    Change-Id: If5ca733366148c86b98e196a00cc890f50e9a3e5

[33mcommit 90ea10ec91509aeafcfda588b7ab9ea75f038264[m
Merge: 594890a53 313c28f8b
Author: Jingning Han <jingning@google.com>
Date:   Thu Mar 12 09:23:51 2015 -0700

    Merge "Remove unnecessary [1;31mspeed[m feature checking"

[33mcommit 313c28f8b8fb88db23e009120388395dcd2eb13f[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Mar 11 16:08:59 2015 -0700

    Remove unnecessary [1;31mspeed[m feature checking
    
    This commit removes the pred_mv_sad comparison from rtc motion
    search, given that a stronger comparison has been done at the
    mode search level to eliminate unlikely selected reference frames.
    
    Change-Id: I49b8d24b2174303066fd8eff2102c0648f2869df

[33mcommit 54eda13f8df587fe0a5a202f232f66863aff445a[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Mar 9 18:55:38 2015 -0700

    Apply fast motion search to golden reference frame
    
    This commit enables the rtc coding mode to run integral projection
    based motion search for golden reference frame. It improves the
    [1;31mspeed[m -6 compression performance by 1.1% on average, 3.46% for
    jimred_vga, 6.46% for tacomascmvvga, and 0.5% for vidyo clips. The
    [1;31mspeed[m -6 is about 6% slower.
    
    Change-Id: I0fe402ad2edf0149d0349ad304ab9b2abdf0c804

[33mcommit d549aa3b175015d865a6fc050b4b18942e4c3713[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Mar 10 19:06:52 2015 -0700

    Separate rd_thresh adaption by ref_frame
    
    Only update the rd_thresh factors for modes sharing same reference
    frame. This helps overall compression of 6 and 7 by .13% and .19%
    respectively without any noticeable [1;31mspeed[m difference.
    
    Change-Id: Idb3a3879512c5d7d0880034516079949290690c5

[33mcommit 059a473b353dd45b2f0c4a7cd61702417459fe51[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Mar 6 13:45:39 2015 -0800

    Enable using Golden reference in choose_partition()
    
    Choose_partition uses only the last frame as reference frame in making
    partition decision, this commit adds the check on how well Golden
    frame with (0,0) predicts the current block, and uses GF(0,0) as
    basis for partition decision if it produces better prediction.
    
    The commit improves rtc [1;31mspeed[m 6 and 7 encoding by 0.14% and 0.19%
    respectively.
    
    Change-Id: I156acf925bd6e0b586d48155d1940d27270a3915

[33mcommit 268f260d64d0ce5516af14d7ab7370e70e07be8e[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Mar 5 09:44:18 2015 -0800

    Modify the setting of transform skip flags in non-rd mode
    
    While searching for the best mode in non-rd case, SSE of
    a partition block is calculated and the transform size is set.
    This patch rewrites the skip checking conditions based on
    transform size instead of partition size to be more precise.
    
    Small gains were seen in rtc set borg test ([1;31mspeed[m 6).
    AVG PSNR: 0.087%, overall PSNR: 0.073%, SSIM: 0.146%.
    No noticeable [1;31mspeed[m change.
    
    Change-Id: I5603ca5339c784dfa02263f4005988ccd8c32f6e

[33mcommit 2eb113d00a1596255a7158ecb6f9b7c96bfe2ef6[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu Mar 5 12:39:02 2015 -0800

    Don't inline cost_coeffs.
    
    It was tiny when it was orginally marked INLINE. Forcing this function
    to be inlined prevents the compiler from inlining its much smaller
    callers.
    
    No measurable [1;31mspeed[m impact, 28320 byte smaller libvpx.a
    
    Change-Id: I6bf4c917157d15cbadb3cd3e20a9e82d35dc7d6f

[33mcommit 47ac3ea0bbeac8df3f0d6de043c4083ddd98f55b[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Mar 2 15:35:58 2015 -0800

    Adapt color sensitiviy threshold to luma signal energy
    
    Instead using only a fixed threshold, this commit adapts the threshold
    for color sensitivity decision to luma signal energy: chroma channel's
    sse is at least 1/6 of that in luma for color sensitivity flag to be
    set to active.
    
    This recoups a large portion of the [1;31mspeed[m loss due to accounting for
    chroma component costs in RTC mode decision.
    
    Change-Id: Ie01f747f6037dba6a1d1ed3e10b71a0ef1abc42c

[33mcommit 1790d45252efb29903baae3d1776bb24cee76558[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 27 13:35:22 2015 -0800

    Use variance metric for integral projection vector match
    
    This commit replaces the SAD with variance as metric for the
    integral projection vector match. It improves the search accuracy
    in the presence of slight light change. The average [1;31mspeed[m -6
    compression performance for rtc set is improved by 1.7%. No [1;31mspeed[m
    changes are observed for the test clips.
    
    Change-Id: I71c1d27e42de2aa429fb3564e6549bba1c7d6d4d

[33mcommit fe85fabbac668b2426ce56387906b34539edbf64[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 27 15:37:18 2015 -0800

    Fix source frame border extension
    
    This commit fixes an issue in source frame border extension. It
    causes certain frame resolution such as 640x480 to have a portion
    of the right/bottom extension filled by zeros, which misleads
    motion search and degrades transform coding performance when large
    block size is used.
    
    This fix improves the [1;31mspeed[m 2 compression performance of a few
    yt sequence, typically ranging from 1% - 2%, up to 5% at median
    to low bit-rate.
    
    Change-Id: Id6b09a5695d9e7651c6dfbc2c6a72288b08af7fb

[33mcommit b7050c0be34c8a9f8a4c2a249b676bc5cd23e834[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Feb 23 12:33:24 2015 -0800

    Motion compensated reference refinement
    
    This commit applies one-step refinement search to the resulting
    motion vector of the integral projectiion based motion estimation,
    per 64x64 block. It improves the coding performance of [1;31mspeed[m -6.
    
    pedestrian 1080p 500 kbps
    51735 b/f, 36.794 dB, 16044 ms ->
    51382 b/f, 36.793 dB, 16282 ms
    
    cloud 1080p 500 kbps
    24081 b/f, 37.988 dB, 14016 ms ->
    23597 b/f, 38.076 dB, 12774 ms
    
    vidyo1 720p 1000 kbps
    16552 b/f, 40.514 dB, 8279 ms ->
    16553 b/f, 40.543 dB, 8510 ms
    
    The rtc set compression performance is improved by 0.5%.
    
    Change-Id: I3d09bea2caf58b2a4f3b38aa26fffafcbe9a2c17

[33mcommit 0187f4b411b80e09d861085b9027757cd6a36eef[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jan 28 11:34:24 2015 -0800

    Adjustments to cyclic refresh (aq-mode=3).
    
    Target higher delta-qp for big blocks with zero motion,
    and for segment#1: avoid 64x64 partition size and force 8x8 tx size.
    
    Metrics on RTC set mostly positive: SSIM up by ~4%, PSRN by ~1.5%.
    Doesn't seem to be any change in [1;31mspeed[m.
    
    Change-Id: I1f68fa3c4f62dab3b90cc58041f05ebb048ae5ac

[33mcommit 81fc5bf81c4199883a891791a0a5539e029e8077[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Feb 18 16:38:08 2015 -0800

    Improve skip_txfm thresholds in the non-rd mode selection
    
    Modified the thresholds of deciding whether or not to skip
    the transforms in model_rd_for_sb_y(). Used zbin[] instead
    of dequant[] to be more precise. Also, modified the checking
    coditions.
    
    Rtc set borg test results (at [1;31mspeed[m 6) showed:
    average PSNR gain: 0.138%, overall PSNR gain: 0.158%,
    and SSIM gain: 0.177%.
    
    The data rate test was modified slightly as suggested by
    Marco.
    
    Change-Id: Ieaf633ab77f4838cb3c45cf69065b29d55f8ae6c

[33mcommit ed2dc59c1b363ab510344b28ee0367c50c5080c4[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 13 11:23:45 2015 -0800

    Integral projection based motion estimation
    
    This commit introduces a new block match motion estimation
    using integral projection measurement. The 2-D block and the nearby
    region is projected onto the horizontal and vertical 1-D vectors,
    respectively. It then runs vector match, instead of block match,
    over the two separate 1-D vectors to locate the motion compensated
    reference block.
    
    This process is run per 64x64 block to align the reference before
    choosing partitioning in [1;31mspeed[m 6. The overall CPU cycle cost due
    to this additional 64x64 block match (SSE2 version) takes around 2%
    at low bit-rate rtc [1;31mspeed[m 6. When strong motion activities exist in
    the video sequence, it substantially improves the partition
    selection accuracy, thereby achieving better compression performance
    and lower CPU cycles.
    
    The experiments were tested in RTC [1;31mspeed[m -6 setting:
    cloud 1080p 500 kbps
    17006 b/f, 37.086 dB, 5386 ms ->
    16669 b/f, 37.970 dB, 5085 ms (>0.9dB gain and 6% faster)
    
    pedestrian_area 1080p 500 kbps
    53537 b/f, 36.771 dB, 18706 ms ->
    51897 b/f, 36.792 dB, 18585 ms (4% bit-rate savings)
    
    blue_sky 1080p 500 kbps
    70214 b/f, 33.600 dB, 13979 ms ->
    53885 b/f, 33.645 dB, 10878 ms (30% bit-rate savings, 25% faster)
    
    jimred 400 kbps
    13380 b/f, 36.014 dB, 5723 ms ->
    13377 b/f, 36.087 dB, 5831 ms  (2% bit-rate savings, 2% slower)
    
    Change-Id: Iffdb6ea5b16b77016bfa3dd3904d284168ae649c

[33mcommit f4c29ae9ea16c502c980a81ca9683327d5051929[m
Merge: ee83243da 7a4e0b226
Author: Jingning Han <jingning@google.com>
Date:   Thu Feb 12 09:14:49 2015 -0800

    Merge "Update partition rate cost in rtc [1;31mspeed[m 5"

[33mcommit 7a4e0b22650ef57c7787903f55f01634ce9bc434[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Feb 11 12:25:51 2015 -0800

    Update partition rate cost in rtc [1;31mspeed[m 5
    
    The block partition rate cost should be updated when recursive
    partition search is needed.
    
    Change-Id: I7bc5ad1fc2cbd3577dee7f7e8da111a2742bdeb9

[33mcommit 4ce70e8847f73e70ad3e2ffa5ce3773b06addac0[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Feb 11 10:51:50 2015 -0800

    Add ref frame rate cost to non-RD mode decision
    
    This commit adds a heuristic rate cost of reference frame to the
    non-RD mode decision. It improves the compression performance of
    [1;31mspeed[m -6 by 0.31% and [1;31mspeed[m -5 by 0.69%.
    
    Change-Id: If7f3b45519d49b2cb640bcb7316a254efc8be446

[33mcommit b2762a8853762a7f13bbf084ae1ae99992013ce2[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Feb 5 17:13:25 2015 -0800

    Re-arrange inter mode search order in RTC coding flow
    
    This commit makes the ZEROMV mode first in the search order to
    ensure that the zero mv is always checked in the RTC coding mode.
    It improves the average [1;31mspeed[m -6 compression performance by 0.3%
    in both PSNR and SSIM at no visible [1;31mspeed[m change.
    
    Change-Id: I465a7e59f4e20cd84fee3f02ced6f98036945949

[33mcommit a844a778c71919822ee472214738c13bd97cb41c[m
Merge: 3bc0c6576 bdfb5f986
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Feb 4 12:52:03 2015 -0800

    Merge "Adjust partitioning threshold based rtc [1;31mspeed[m"

[33mcommit bdfb5f986e3e890d5082fab058f866482f9ae1dc[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Feb 4 10:37:57 2015 -0800

    Adjust partitioning threshold based rtc [1;31mspeed[m
    
    On rtc set:
    [1;31mspeed[m 7 quality improves about 0.5%
    [1;31mspeed[m 8 quality improves about 1.0%
    
    Encoding time for [1;31mspeed[m 7 changes from 67804ms to 65889ms
    Encoding time for [1;31mspeed[m 8 changes from 58659ms to 56808ms
    
    Change-Id: Iabcfb53012fc1b9f3326cdbc167e5758b8c7ad30

[33mcommit 0c6d3a03e196e50410d8e2f06b3a4adb553d17d7[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jan 21 09:32:23 2015 -0800

    Account for chroma component costs in RTC mode decision
    
    This commit allows the encoder to account for additional chroma
    plane costs in the mode decision process, if the current block
    potentially contains significant color change. It improves the
    visual quality at very low bit-rates.
    
    The compression performance of dark720p is improved by 12.39% in
    [1;31mspeed[m 6. For jimred at 150 kbps, the PSNR of V component (red)
    increased by 0.2 dB, at the expense of about 5% increase in
    encoding time. Note that for sequences where the chroma components
    are fairly consistent, the encoding time increase is negligible.
    
    On average the rtc set compression performance is improved by
    1.172% in PSNR and 1.920% in SSIM.
    
    Change-Id: Ia55b24ef23a25304f7ec9958fbf07fd6e658505c

[33mcommit 9f1cf2c8cf0baaf6b9ddd5ec8b2dc599d949f760[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Feb 3 06:45:56 2015 -0800

    make low bitrates a lot less blocky
    
    Remove loop filter skip at [1;31mspeed[m 7+ because of bad visual artifacts and
    up the postprocessing.
    
    Change-Id: Ibdd0bac71aaee232d2bb2e14462733c51517768d

[33mcommit 65a1a3e85de1789dfc5566af524d4f8728d943fd[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Feb 2 08:05:31 2015 -0800

    adjust rtc setting and threshold
    
    1. Adjusted the threshold for coef update computation based on counts
    of tx used, avoid coef update computation when count is low (<20)
    2. Move sf->lpf_pick = LPF_PICK_MINIMAL_LPF to [1;31mspeed[m 8.
    
    Change-Id: I02b44309e40fcdbf135c7934ae067a3f42502d30

[33mcommit be6aeadaf49de28f13355d5dd7f64b4074dcca7c[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Jan 27 12:26:28 2015 -0800

    Try again to merge branch 'frame-parallel' into master branch.
    
    In frame parallel decode, libvpx decoder decodes several frames on all
    cpus in parallel fashion. If not being flushed, it will only return frame
    when all the cpus are busy. If getting flushed, it will return all the
    frames in the decoder. Compare with current serial decode mode in which
    libvpx decoder is idle between decode calls, libvpx decoder is busy
    between decode calls.
    
    Current frame parallel decode will only [1;31mspeed[m up the decoding for frame
    parallel encoded videos. For non frame parallel encoded videos, frame
    parallel decode is slower than serial decode due to lack of loopfilter
    worker thread.
    
    There are still some known issues that need to be addressed. For example:
    decode frame parallel videos with segmentation enabled is not right sometimes.
    
    * frame-parallel:
      Add error handling for frame parallel decode and unit test for that.
      Fix a bug in frame parallel decode and add a unit test for that.
      Add two test vectors to test frame parallel decode.
      Add key frame seeking to webmdec and webm_video_source.
      Implement frame parallel decode for VP9.
      Increase the thread test range to cover 5, 6, 7, 8 threads.
      Fix a bug in adding frame parallel unit test.
      Add VP9 frame-parallel unit test.
      Manually pick "Make the api behavior conform to api spec." from master branch.
      Move vp9_dec_build_inter_predictors_* to decoder folder.
      Add segmentation map array for current and last frame segmentation.
      Include the right header for VP9 worker thread.
      Move vp9_thread.* to common.
      ctrl_get_reference does not need user_priv.
      Seperate the frame buffers from VP9 encoder/decoder structure.
      Revert "Revert "Revert "Revert 3 patches from Hangyu to get Chrome to build:"""
     Conflicts:
           test/codec_factory.h
           test/decode_test_driver.cc
           test/decode_test_driver.h
           test/invalid_file_test.cc
           test/test-data.sha1
           test/test.mk
           test/test_vectors.cc
           vp8/vp8_dx_iface.c
           vp9/common/vp9_alloccommon.c
           vp9/common/vp9_entropymode.c
           vp9/common/vp9_loopfilter_thread.c
           vp9/common/vp9_loopfilter_thread.h
           vp9/common/vp9_mvref_common.c
           vp9/common/vp9_onyxc_int.h
           vp9/common/vp9_reconinter.c
           vp9/decoder/vp9_decodeframe.c
           vp9/decoder/vp9_decodeframe.h
           vp9/decoder/vp9_decodemv.c
           vp9/decoder/vp9_decoder.c
           vp9/decoder/vp9_decoder.h
           vp9/encoder/vp9_encoder.c
           vp9/encoder/vp9_pickmode.c
           vp9/encoder/vp9_rdopt.c
           vp9/vp9_cx_iface.c
           vp9/vp9_dx_iface.c
    
    This reverts commit a18da9760a74d9ce6fb9f875706dc639c95402f5.
    
    Change-Id: I361442ffec1586d036ea2e0ee97ce4f077585f02

[33mcommit e3167f7fbf3a251c69ebfdcc36ee8eba8b285596[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Sat Jan 24 16:28:20 2015 -0800

    Add vp9_sad32x32x4d_neon Neon intrinsic function.
    
    On Nexus 7 [1;31mspeed[m -6 saw ~18% increase in perf.
    
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    BUG=https://code.google.com/p/webm/issues/detail?id=908
    
    Change-Id: I70ccdea0326750552ed946fb004507d6efe02d5c

[33mcommit 9f574d03168ae4a25dadf315099fa0296412bdd2[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Sat Jan 24 15:43:36 2015 -0800

    Add vp9_sad16x16x4d_neon Neon intrinsic function.
    
    On Nexus 7 [1;31mspeed[m -6 saw ~15% increase in perf.
    
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    BUG=https://code.google.com/p/webm/issues/detail?id=908
    
    Change-Id: I4b2006b644c488f42bf06d8a22ef0e6120a96bf9

[33mcommit 54fa956715d8603e5c8acd02e6794d681abcfdbd[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Sat Jan 24 12:11:16 2015 -0800

    Add vp9_sad64x64x4d_neon Neon intrinsic function.
    
    On Nexus 7 [1;31mspeed[m -6 saw ~30% increase in perf.
    
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    BUG=https://code.google.com/p/webm/issues/detail?id=908
    
    Change-Id: Id12af7d1883243c23e6692e898aea82299633d58

[33mcommit e7ef8ecefd4c7747be7d61ddc6c86633e5e47bc0[m
Merge: 9f6eba419 1387f4ded
Author: Tom Finegan <tomfinegan@google.com>
Date:   Mon Jan 26 15:10:18 2015 -0800

    Merge "iosbuild.sh: Increase build [1;31mspeed[m."

[33mcommit 9f6eba419a876598aa7edaee9e99610fcbf6362b[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Thu Jan 15 19:29:46 2015 -0800

    Add Neon intrinsic vp9_fdct8x8_quant_neon
    
    On Nexus 7 [1;31mspeed[m -5 got ~2%, -6 got ~15%, -7 and -8 got ~30%
    increase in perf.
    
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    Change-Id: I83246d63b96674d170098a572fa4fe28a05aaf51

[33mcommit eda179764f5b270c7298660a12fb8f9176902e2a[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jan 22 15:27:43 2015 -0800

    Replace divide with look-up
    
    This commit replaces an integer divide with a table-lookup. It is
    to improve decoding [1;31mspeed[m, and at the same time, to reduce possible
    complications with a bug in AMD Family 12h processors:
    
    "665 Integer Divide Instruction May Cause Unpredictable Behavior"
    
    Change-Id: I678b707a538798a923850bac467e66e847e6def7

[33mcommit 1387f4dedfc495fcc81f156459cb58fca03f5491[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Thu Jan 22 15:18:30 2015 -0800

    iosbuild.sh: Increase build [1;31mspeed[m.
    
    Disable more stuff to [1;31mspeed[m up the build, and log default configure
    args in verbose mode.
    
    Change-Id: I40e55fc5e8d2bff0262e1d6bd4a40ee2c10d2b6d

[33mcommit 09673deba953627af2f7ae12a8447136c77a62e4[m
Author: Jacky Chen <jackychen@google.com>
Date:   Tue Jan 13 10:50:50 2015 -0800

    SSE2 code for the filter in MFQE.
    
    The SSE2 code is from VP8 MFQE, reuse it in VP9. No change on VP8
    side. In our testing, we achieve 2X [1;31mspeed[m by adopting this change.
    
    Change-Id: Ib2b14144ae57c892005c1c4b84e3379d02e56716

[33mcommit e76eaf05b1a20b906d166b7e8db402a9883c6025[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jan 6 14:14:26 2015 -0800

    vp9_ethread: add parallel loopfilter
    
    1. Added row-based loopfilter in encoder;
    2. Moved common multi-threaded loopfilter functions from decoder
       to common;
    3. Merged multi-threaded loopfilter code, and made encoder/
       decoder call same function to reduce code duplication.
    
    Encoder tests showed that 1% - 2% [1;31mspeed[mup was seen for good-quality
    2-pass mode(at [1;31mspeed[m 3); 1% - 3% [1;31mspeed[mup using 2 threads and 4% - 6%
    [1;31mspeed[mup using 4 threads were seen for real-time mode(at [1;31mspeed[m 7).
    
    Change-Id: I8a4ac51c2ad9bab9fa7b864e90743931c53ec1c4

[33mcommit 6e7e1cf32f85f91ddfcb49a807e598e8ead131fe[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Thu Jan 15 14:36:41 2015 -0800

    Add Neon intrinsics for vp9_avg_8x8_neon
    
    On Nexus 7 [1;31mspeed[m -5, -6, -7, and -8 saw about a 1% increase
    in perf for 480p. Speeds -5, -6, -7, and -8 saw about a 1.5%
    increase in perf for 720p.
    
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    Change-Id: Ibf17ebfd952a6aec941719bd8306df8ec4574bee

[33mcommit ec1d8387e11ff95b5766a32c8e33c7f078d8bde4[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Tue Jan 13 23:01:06 2015 -0800

    Add 64x64 sub_pel_variance Neon function
    
    On Nexus 7 [1;31mspeed[m -5, -6, -7, and -8 saw about a 15% increase
    in perf for 480p. Speeds -5, -6, -7, and -8 saw about a 10%
    increase in perf for 720p.
    
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    Change-Id: I2fa5315845e3021c9a6e2ea47e52e68b398d8334

[33mcommit 74d40cd507594fe775644d52a8f03b23f3ddf8c9[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Tue Jan 13 11:15:24 2015 -0800

    Add 64x variance Neon functions
    
    Add optimized Neon functions of:
    vp9_variance32x64
    vp9_variance64x32
    vp9_variance64x64
    
    On Nexus 7 [1;31mspeed[m -5 and -6 saw about a 4% increase in perf.
    Speeds -7 and -8 saw about a 6% increase in perf.
    Tested on Nexus 7, built with ndk r10d, gcc 4.9.
    
    Change-Id: I5a81f13c9897eb927fa39662530f5524a0f768fa

[33mcommit a0be730eae34491a5569f941f04c7dd5c905486c[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jan 8 12:15:30 2015 -0800

    Refactor mc reference block fetch in denoiser
    
    This commit refactors the motion compensated reference block fetch
    process in denoiser. It skips the stage that generates motion
    compensated reference block if denoiser decides to use copy block
    mode. For high motion clips, this could [1;31mspeed[m up the denoising
    process by about 10%.
    
    Change-Id: I8ef4fa5fe766a8c4529119b9ec01faefb3d4ef53

[33mcommit ea061a885deea564e52145d3affaf33c0f7871a6[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jan 7 18:30:50 2015 -0800

    Refactor denoiser frame buffer update
    
    Use frame buffer pointer swap instead of memcpy when possible.
    These two CLs make the denoiser when running on vidyo1 720p at
    [1;31mspeed[m -6 over 10% faster.
    
    Change-Id: I64fe8a2422cafca6787a50c7f4dfb961191c0a9d

[33mcommit 29a5deb40cd1c86da04bff0cd448cd43324c7ec4[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jan 7 18:20:38 2015 -0800

    Use vp9_convolve_copy in denoiser output
    
    Replace copy_block with vp9_convolve_copy for [1;31mspeed[m performance
    improvement.
    
    Change-Id: I3a08c4d01dff2253b6ee573efd02f65ccdc1b5a5

[33mcommit 4276eac294bfab431c4cd2de34418db0149a7b05[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri Dec 19 15:53:59 2014 -0800

    Resolve several style issues in decode_perf_test
    
    This allows us to track decode [1;31mspeed[m for new encodes so that we catch
    problems like an encode change that makes decode really slow.
    
    Change-Id: I7210196415c4e53d455e9c81246d9fb324913a06

[33mcommit 7c2c2bea969b23f5cb64847afbcda90e2d480a59[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Dec 16 11:10:20 2014 -0800

    vp9_ethread: add the multi-threaded encoder unit tests
    
    The unit tests for VP9 multi-threaded encoder are added, which
    carry out tests for all three modes(i.e. kTwoPassGood, kOnePassGood
    and kRealTime), and [1;31mspeed[ms ranging from 1 to 8. A 1280x720 test
    clip is used, which is encoded into multiple tiles. The number of
    threads is num_of_tiles.
    
    Change-Id: I04419eeca145ad841c9c527603668239a82e7fbd

[33mcommit 455514a6839b5d087d5e4c06c29959b9a0fb68f0[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Dec 17 14:26:00 2014 -0800

    Rework mode search threshold update for RTC coding mode
    
    In RTC coding mode, the alternate reference frame modes and compound
    inter prediction modes are disabled. This commit reworks the
    related mode search threshold update process to skip interacting
    with these coding modes. It provides about 1.5% [1;31mspeed[m-up for [1;31mspeed[m
    -6 on average.
    
    vidyo1
    16551 b/f, 40.451 dB, 6261 ms -> 16550 b/f, 40.459 dB, 6190 ms
    
    nik720p
    33316 b/f, 38.795 dB, 6335 ms -> 33310 b/f, 38.798 dB, 6237 ms
    
    mmmoving
    33265 b/f, 41.055 dB, 7176 ms -> 33267 b/f, 41.064 dB, 7084 ms
    
    dark720
    33329 b/f, 39.729 dB, 11235 ms -> 33331 b/f, 39.733 dB, 10731 ms
    
    Change-Id: If2a4090a371cd28f579be219c013b972d7d9b97f

[33mcommit b62064f3383eb548a7a8ff43e6fe78311f31b460[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Dec 15 11:58:43 2014 -0800

    Enhance the end to end psnr tests
    
    Includes more [1;31mspeed[m settings and also real-time mode now.
    
    Change-Id: I71c77c4a2471d715c61cc30db092aa053cf012e1

[33mcommit ccdc448b70fe766430b4dd77feb664debe1cebb7[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Dec 16 09:21:22 2014 -0800

    Remove reset mode_info array per frame
    
    The mode_info array was unnecessarily reset to zero every frame
    when error resilient mode turned on, given that the mode info
    values per block will be assigned during mode search stage.
    
    This commit removes this reset operation. It reduces the runtime
    cost on memset operation to 1/3. The overall [1;31mspeed[m -6 runtime is
    reduced by 2%.
    
    Change-Id: I32ecb73338d8995cc0c5147de09357364f13d45b

[33mcommit b6c75c5a8d019bde1b4d654b705f820015fc3ad5[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Dec 11 16:22:03 2014 +0000

    Improve motion detection for low complexity regions.
    
    Where there is very subtle motion, especially when combined
    with low spatial complexity, the codec sometimes fails to quickly
    pick up the ambient motion field.
    
    Once it has been established though the field propagates well using
    Nearest and Near MV.
    
    This patch looks specifically at the case where the Nearest and Near
    have not been established as non zero vectors and in this case
    discounts the cost of searching for a new vector in the rd code.
    
    This will almost certainly have some implications in terms of encode
    [1;31mspeed[m but it should be possible to mitigate the impact in a subsequent
    using first pass stats and the local spatial complexity.
    
    Average results for test sets approximately neutral.
    
    Change-Id: I44a29e20f11f7ab10f8c93ffbdc50183d9801524

[33mcommit 7f59cff53d4053c0765d9a01781bde0e050b62c0[m
Merge: 5ccff4329 7e99cd2a9
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Dec 12 14:27:31 2014 -0800

    Merge "Allow for 4x4 prediction blocks for key frame, [1;31mspeed[m 6."

[33mcommit 7e99cd2a9b7ecc3cbb5ca83d5c8ec696f0ea7293[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Dec 11 15:21:17 2014 -0800

    Allow for 4x4 prediction blocks for key frame, [1;31mspeed[m 6.
    
    For key frame under variance source partition: 4x4 prediction blocks
    may be selected when variance of 8x8 block is very high (threshold is set fairly high for now).
    
    Testing on some RTC clips shows this helps to reduce some ringing artifacts on key frame.
    Encoded key frame size increases about ~10%. Key frame PSNR increases about ~0.1-0.2dB.
    
    Change-Id: I56e203fac32ea6ef69897fb3ea269c59cb50d174

[33mcommit 377d2f027a60fac5d83a4c9de9767ac90997d1fa[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Dec 11 09:29:36 2014 -0800

    Refactor choose_partitioning computing scheme
    
    This commit refactors the choose_partitioning function. It removes
    redundant memset calls and makes the encoder to calculate
    variance value per block only when it is needed. It reduces the
    average runtime cost of choose_partitioning by 60%. Overall it
    reduces [1;31mspeed[m -6 runtime by 2-5%.
    
    Change-Id: I951922c50d901d0fff77a3bafc45992179bacef9

[33mcommit c2638bd80a7134ae2b04d258993ccd03e5586579[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Dec 9 12:44:45 2014 -0800

    Adds a decode perf test that builds a new file.
    
    This allows us to track decode [1;31mspeed[m for new encodes so that we catch
    problems like an encode change that makes decode really slow.
    
    Change-Id: I92251a8b1f710b241f66e1042413df1b71b76038

[33mcommit 9d88b308541669131d8b7c3b3f33d1869ae15556[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Dec 5 10:38:09 2014 -0800

    Remove redundant vp9_zero in choose_partitioning
    
    It makes the overall [1;31mspeed[m -6 about 2% faster with no compression
    performance change.
    
    Change-Id: I680a967b421caa2c5a5cdb821311c4726a2df45a

[33mcommit 74ded4863e60be648791f20ca9cc1ff456ae40ad[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Dec 4 14:53:36 2014 -0800

    Enable conditional skip path in rd_pick_intra_sby_mode
    
    These [1;31mspeed[m-up features for key frame coding are only turned on
    in the settings of hybrid non-RD and RD mode decision. It provides
    about 20% [1;31mspeed[m-up to the hybrid key frame coding at the expense
    of certain compression performance loss. For vidyo1, the key frame
    coding statistics are changed
    9838F, 35.020 dB, 61677 us -> 9920F, 34.834 dB, 47556 us
    
    Overall rtc set compression performance is down by -0.257%.
    
    Change-Id: I0025447fda26bb7855e982955642b5f55d71b51f

[33mcommit eba9c762a1710e29967207a1df092ae0eca40313[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Dec 2 15:47:41 2014 -0800

    vp9_ethread: the tile-based multi-threaded encoder
    
    Currently, VP9 supports column-tile encoding, which allows a frame
    to be encoded in multiple column tiles independently. The number of
    column tiles are set by encoder option "--tile-columns". This
    provides a way to encode a frame in parallel.
    
    Based on previous set of patches, this patch implemented the tile-
    based multi-threaded encoder. Each thread processes one or more
    tiles.
    
    Usage:
    For HD clips:
    --tile-columns=2 --threads=1/2/3/4
    
    While using 4 threads, tests showed that the encoder achieved
    2.3X - 2.5X [1;31mspeed[mup at good-quality [1;31mspeed[m 3, and 2X [1;31mspeed[mup at
    realtime [1;31mspeed[m 5.
    
    Change-Id: Ied987f8f2618b1283a8643ad255e88341733c9d4

[33mcommit 8f3db5f22e2f400f50f1ea050d17fe9bbbb272fe[m
Merge: 228ec17ff a8d8c0f63
Author: Jingning Han <jingning@google.com>
Date:   Wed Dec 3 11:34:42 2014 -0800

    Merge "Remove unused ONE_LOOP entry from [1;31mspeed[m feature"

[33mcommit 8fd3f9a2fb7fd29d811f2af11433b1b8bebabbb5[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Nov 12 14:51:49 2014 -0800

    Enable non-rd mode coding on key frame, for [1;31mspeed[m 6.
    
    For key frame at [1;31mspeed[m 6: enable the non-rd mode selection in [1;31mspeed[m setting
    and use the (non-rd) variance_based partition.
    
    Adjust some logic/thresholds in variance partition selection for key frame only (no change to delta frames),
    mainly to bias to selecting smaller prediction blocks, and also set max tx size of 16x16.
    
    Loss in key frame quality (~0.6-0.7dB) compared to rd coding,
    but [1;31mspeed[ms up key frame encoding by at least 6x.
    Average PNSR/SSIM metrics over RTC clips go down by ~1-2% for [1;31mspeed[m 6.
    
    Change-Id: Ie4845e0127e876337b9c105aa37e93b286193405

[33mcommit a8d8c0f633cac1784091f85b9b098ec45bffead6[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Dec 2 18:26:03 2014 -0800

    Remove unused ONE_LOOP entry from [1;31mspeed[m feature
    
    Change-Id: I56ead0ebc2491144c4e79e5859b05e126176702c

[33mcommit 8fe50191c665a384db918461096580f31e4fc7b2[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Dec 2 18:16:06 2014 -0800

    Rework coeff probability model update for rtc coding
    
    This commit reworks the ONE_LOOP_REDUCED coefficient probability
    model update process. It allows model update for every coefficient
    across the spectrum at a coarser resolution, instead of performing
    precise update only for certain subset of probability models.
    
    The overall runtime remains nearly same (<1% change) for [1;31mspeed[m -6.
    The compression performance is improved by 7.5% in PSNR for [1;31mspeed[m
    -5 and 4.57% for [1;31mspeed[m -6, respectively.
    
    Change-Id: Ifb17136382ee7e39a9f34ff4a4f09a753125c8d1

[33mcommit a6df0cbcca923862c26abf775c3303413fc1b8b9[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Nov 25 18:34:42 2014 -0800

    Remove repeated search_type_check_frequency assign
    
    This parameter is initialized as 50. No need to re-assign the
    same value in [1;31mspeed[m -6.
    
    Change-Id: I8735a5593412df2fdcee53ae45c8ebd1c3d792e7

[33mcommit 92a7cfc8bfb050870b238e9174829d5af136c403[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Nov 24 14:40:42 2014 -0800

    Adaptively adjust mode test kick-off thresholds in RTC coding
    
    This commit allows the encoder to increase the mode test kick-off
    thresholds if the previous best mode renders all zero quantized
    coefficients, thereby saving motion search runs when possible.
    The compression performance of [1;31mspeed[m -5 and -6 is down by -0.446%
    and 0.591%, respectively. The runtime of [1;31mspeed[m -6 is improved by
    10% for many test clips.
    
    vidyo1, 1000 kbps
    16578 b/f, 40.316 dB, 7873 ms -> 16575 b/f, 40.262 dB, 7126 ms
    
    nik720p, 1000 kbps
    33311 b/f, 38.651 dB, 7263 ms -> 33304 b/f, 38.629 dB, 6865 ms
    
    dark720p, 1000 kbps
    33331 b/f, 39.718 dB, 13596 ms -> 33324 b/f, 39.651 dB, 12000 ms
    
    mmoving, 1000 kbps
    33263 b/f, 40.983 dB, 7566 ms -> 33259 b/f, 40.978 dB, 7531 ms
    
    Change-Id: I7591617ff113e91125ec32c9b853e257fbc41d90

[33mcommit 2fbdfd2c66f987cf4c0e4c870b6a04c4ad49ef5c[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Nov 20 11:28:00 2014 -0800

    Key frame non-RD mode decision process
    
    This commit makes a non-RD coding mode decision process for key
    frame coding. It can be optionally turned on in [1;31mspeed[m -6 and above.
    
    Change-Id: I0847258b392877a0210b4768bef88ebc9ad009b5

[33mcommit 7428cebe4f5d2227bb4bf094bb7e7bd420455533[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Nov 21 12:18:53 2014 -0800

    Rework forward txfm/quantization skip system in RTC coding mode
    
    This commit allows more aggressive decision to skip forward
    transform and quantization for luma component in RTC coding mode.
    The chroma components remains going through the normal coding
    routine, since they are not included in the non-RD mode search
    process.
    
    It reduces the runtime cost by 2% - 10%. In [1;31mspeed[m -6,
    vidyo1 1000 kbps
    16576 b/f, 40.281 dB, 8402 ms -> 16576 b/f, 40.323 dB, 7764 ms
    
    nik720p 1000 kbps
    33337 b/f, 38.622 dB, 7473 ms -> 33299 b/f, 38.660 dB, 7314 ms
    
    dark720p 1000 kbps
    33330 b/f, 39.785 dB, 13505 ms -> 33325 b/f, 39.714 dB, 13105 ms
    
    The compression performance of [1;31mspeed[m -6 is improved by 0.44% in
    PSNR and 1.31% in SSIM.
    
    Change-Id: Iae9e3738de6255babea734e5897f29118bebc6d7

[33mcommit ad7586a9e1e6d7b9f8d7289934b433581ae3882a[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Nov 20 09:24:50 2014 -0800

    vp9_ethread: move max/min partition size to mb struct
    
    The max_partition_size and max_partition_size are set at the
    beginning while setting [1;31mspeed[m features, and then adjusted at
    SB level. Moving them to mb struct ensures there is a local
    copy for each thread.
    
    Change-Id: I7dd08dc918d9f772fcd718bbd6533e0787720ad4

[33mcommit c42715b72142c7f4f6ddebe0394b18589133c1ed[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Nov 18 12:37:59 2014 -0800

    Enable ssse3 version of vp9_fdct8x8_quant
    
    It improves the [1;31mspeed[m performance of vp9_fdct8x8_quant_sse2 by
    about 5%.
    
    Change-Id: I74b093ba4d81df64caf71ac7693f3d917f673097

[33mcommit c6908fd5f744552db044dd034f88967e5fd980b4[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Nov 18 11:53:14 2014 -0800

    Combine fdct8x8 and quantization process
    
    This commit reworks the forward transform and quantization process
    for 8x8 block coding. It combines the two operations in a single
    function to save a store/load stage of the original transform
    coefficients. Overall the [1;31mspeed[m -6 is slightly faster (around 1%
    range). The compression performance of [1;31mspeed[m -6 is improved by
    3.4%.
    
    Change-Id: Id6628daef123f3e4649248735ec2ad7423629387

[33mcommit 2d3cc8ea2b163fd7275ed0c44102659ff0acd68b[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Nov 18 08:58:09 2014 -0800

    Add sse2 version for vp9_quantize_fp
    
    vp9_quantize_fp is the quantization process used by rtc coding
    mode. This commit adds a sse2 implementation of it. The
    implementation is modified based on vp9_quantize_b_sse2. No [1;31mspeed[m
    difference from ssse3 version.
    
    Change-Id: I24949c5b27df160b4f35117d28858d269454e64a

[33mcommit 0d085ebc0ace8edbc691e51d91e579dcb55cf881[m
Author: Adrian Grange <agrange@google.com>
Date:   Mon Nov 10 09:51:38 2014 -0800

    Prepare for dynamic frame resizing in the recode loop
    
    Prepare for the introduction of frame-size change
    logic into the recode loop.
    
    Separated the [1;31mspeed[m dependent features into
    separate static and dynamic parts, the latter being
    those features that are dependent on the frame size.
    
    Change-Id: Ia693e28c5cf069a1a7bf12e49ecf83e440e1d313

[33mcommit e717d22b633c8df8af8654f517f53187a4ae5244[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Nov 7 17:50:55 2014 -0800

    Use reconstructed pixels for intra prediction
    
    This commit makes the [1;31mspeed[m -6 and above use the reconstructed
    boundary pixels for precise intra prediction. This allows more
    intra prediction modes to be tested in the non-RD coding process.
    
    Enabling horizontal and vertical intra prediction modes can
    improve the [1;31mspeed[m -6 compression performance for rtc set
    by 0.331%.
    
    Change-Id: I3a99f9d12c6af54de2bdbf28c76eab8e0905f744

[33mcommit caaf63b2c4d5e4ae18f0ae796fb92e4509450a0d[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Nov 4 14:32:04 2014 -0800

    Rework cut-off decisions in cyclic refresh aq mode
    
    This commit removes the cyclic aq mode dependency on
    in_static_area and reworks the corresponding cut-off thresholds.
    It improves the compression performance of [1;31mspeed[m -5 by 1.47% in
    PSNR and 2.07% in SSIM, and the compression performance of [1;31mspeed[m
    -6 by 3.10% in PSNR and 5.25% in SSIM. Speed wise, about 1% faster
    in both settings at high bit-rates.
    
    Change-Id: I1ffc775afdc047964448d9dff5751491ba4ff4a9

[33mcommit 4cc7c5a17fd371ea036428afb31606d2e6e77bf4[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Nov 3 11:23:22 2014 -0800

    Totally remove prev_mi in VP9 decoder.
    
    This will save the memory and improve the decode [1;31mspeed[m due to
    removing unnecessary memset of big prev_mi array for
    all the key frames.
    
    Decoding a all key frames 1080p video shows [1;31mspeed[m improve around 2%.
    
    Change-Id: I6284a445c1291056e3c15135c3c20d502f791c10

[33mcommit 1434f7695bd6cc2517438085e6c1d06b16c8bf89[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Nov 3 11:36:34 2014 -0800

    Skip ref frame mode search conditioned on predicted mv residuals
    
    This commit makes the RTC coding mode to conditionally skip the
    reference frame mode search, when the predicted motion vector of
    the current reference frame gives more than two times sum of
    absolute difference compared to that of other reference frames.
    
    It reduces the runtim by 1% - 4% for [1;31mspeed[m -5 and -6. The average
    compression performance is improved by about 0.1% in both settings.
    
    It is of particular benefit to light change scenarios. The
    compression performance of test clip mmmovingvga.y4m is improved by
    6.39% and 15.69% at high bit rates for [1;31mspeed[m -5 and -6, respectively.
    
    Speed -5
    vidyo1 16555 b/f, 40.818 dB, 12422 ms ->
           16552 b/f, 40.804 dB, 12100 ms
    
    nik    33211 b/f, 39.138 dB, 11341 ms ->
           33228 b/f, 39.139 dB, 11023 ms
    
    mmmoving 33263 b/f, 40.935 dB, 13508 ms ->
             33256 b/f, 41.068 dB, 12861 ms
    
    Speed -6
    vidyo1 16541 b/f, 40.227 dB, 8437 ms ->
           16540 b/f, 40.220 dB, 8216 ms
    
    nik    33272 b/f, 38.399 dB, 7610 ms ->
           33267 b/f, 38.414 dB, 7490 ms
    
    mmmoving 33255 b/f, 40.555 dB, 7523 ms ->
             33257 b/f, 40.975 dB, 7493 ms
    
    Change-Id: Id2aef76ef74a3cba5e9a82a83b792144948c6a91

[33mcommit 2fe893c94fc5880f799d8749bb99b1aa7db79619[m
Merge: 55577431a 0271ff777
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Nov 3 08:02:58 2014 -0800

    Merge "Fix [1;31mspeed[m 7 and [1;31mspeed[m 12 for rt"

[33mcommit 0271ff7775c78c51a2ea68c9eb129bbad9651dca[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Oct 31 17:27:54 2014 -0700

    Fix [1;31mspeed[m 7 and [1;31mspeed[m 12 for rt
    
    A recent change has introduced big quality drops for [1;31mspeed[m 7 and 12
    for --rt mode. The change reverted the big drop and improved quality
    by 9.5% for [1;31mspeed[m 7 and 13.4% for [1;31mspeed[m 12.
    
    Change-Id: I07b82e3bb6002a73af486a083458c88877bdad01

[33mcommit 64348d9f8d82050f799058c3f2fc75a7a1599c5b[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 29 19:30:12 2014 -0700

    Fix mode index use case in vp9_pick_inter_mode
    
    This improves coding performance of [1;31mspeed[m -5 and -6 by 0.6%,
    respectively.
    
    Change-Id: Ic5a7746a88c73285f0b14333d35dc16b02152c25

[33mcommit 7bea8c59f934aa8bfab43935b2355b88adaa12f0[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 29 16:37:16 2014 -0700

    Rework pred pixel buffer system in non-RD coding mode
    
    This commit makes the inter prediction buffer system to support
    hybrid partition search. It reduces the runtime of [1;31mspeed[m -5 by
    about 3%. No compression performance change.
    
    vidyo1 720p 1000 kbps
    11831 ms -> 11497 ms
    
    nik 720p 1000 kbps
    10919 ms -> 10645 ms
    
    Change-Id: I5b2da747c6395c253cd074d3907f5402e1840c36

[33mcommit 7ceddede063d79527c424e3823186bff5b2ccbd6[m
Merge: cccfe5629 aed48c786
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Oct 29 19:00:32 2014 -0700

    Merge "Remove unused [1;31mspeed[m feature"

[33mcommit aed48c786a8205353d88d9c015914351bf0a7b2a[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Oct 29 17:05:04 2014 -0700

    Remove unused [1;31mspeed[m feature
    
    Partition_check was unused and removed.
    
    Change-Id: I15ec9162d86dc61f04c09229c498629878ed7155

[33mcommit 9349a28e80b568495d56d6364d3c7ed1abb51188[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Oct 28 14:50:10 2014 -0700

    Enable mode search threshold update in non-RD coding mode
    
    Adaptively adjust the mode thresholds after each mode search round
    to skip checking less likely selected modes. Local tests indicate
    5% - 10% [1;31mspeed[m-up in [1;31mspeed[m -5 and -6. Average coding performance
    loss is -1.055%.
    
    [1;31mspeed[m -5
    vidyo1 720p 1000 kbps
    16533 b/f, 40.851 dB, 12607 ms -> 16556 b/f, 40.796 dB, 11831 ms
    
    nik 720p 1000 kbps
    33229 b/f, 39.127 dB, 11468 ms -> 33235 b/f, 39.131 dB, 10919 ms
    
    [1;31mspeed[m -6
    vidyo1 720p 1000 kbps
    16549 b/f, 40.268 dB, 10138 ms -> 16538 b/f, 40.212 dB, 8456 ms
    
    nik 720p 1000 kbps
    33271 b/f, 38.433 dB,  7886 ms -> 33279 b/f, 38.416 dB, 7843 ms
    
    Change-Id: I2c2963f1ce4ed9c1cf233b5b2c880b682e1c1e8b

[33mcommit 4074099ed8c55e3194607e507019b06adc69e397[m
Author: Adrian Grange <agrange@google.com>
Date:   Wed Oct 29 09:09:46 2014 -0700

    Simplify vp9_set_rd_[1;31mspeed[m_thresholds_sub8x8
    
    Change-Id: I4bf0f9a38697f5aea564a47afd7f02bb8b2888b6

[33mcommit eee201c221cdff90a4e74d4cf8917875684f0e2a[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Oct 23 16:54:45 2014 -0700

    Tile based adaptive mode search in RD loop
    
    Make the spatially adaptive mode search in rate-distortion
    optimization loop inter tile independent. Experiments suggest that
    this does not significantly change the coding staticstics.
    
    Single tile, [1;31mspeed[m 3:
    pedestrian_area 1080p 1500 kbps
    59192 b/f, 40.611 dB, 101689 ms
    
    blue_sky 1080p 1500 kbps
    58505 b/f, 36.347 dB, 62458 ms
    
    mobile_cal 720p 1000 kbps
    13335 b/f, 35.646 dB, 45655 ms
    
    as compared to 4 column tiles, [1;31mspeed[m 3:
    pedestrian_area 1080p 1500 kbps
    59329 b/f, 40.597 dB, 101917 ms
    
    blue_sky 1080p 1500 kbps
    58712 b/f, 36.320 dB, 62693 ms
    
    mobile_cal 720p 1000 kbps
    13191 b/f, 35.485 dB, 45319 ms
    
    Change-Id: I35c6e1e0a859fece8f4145dec28623cbc6a12325

[33mcommit 08cdd006e1b25a9d803bfd13c4fb1400f3e4ca93[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 22 14:47:15 2014 -0700

    Allow checking zeromv mode in vp9_pick_inter_mode
    
    This improves the compression performance of [1;31mspeed[m -5 by 0.6%. The
    [1;31mspeed[m impact is less than 1%.
    
    Change-Id: Ie77daa561976dfc8b479061e1221bdf428eb0c3b

[33mcommit 9ce3a7d76c5ef702337b96b9aa2c944da1b31869[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Wed Jul 30 20:43:40 2014 -0700

    Implement frame parallel decode for VP9.
    
    Using 4 threads, frame parallel decode is ~3x faster than single thread
    decode and around 30% faster than tile parallel decode for frame parallel
    encoded video on both Android and desktop with 4 threads. Decode [1;31mspeed[m is
    scalable to threads too which means decode could be even faster with more threads.
    
    Change-Id: Ia0a549aaa3e83b5a17b31d8299aa496ea4f21e3e

[33mcommit 87665f16f472acfa041bf2326f8545bc84460a4e[m
Merge: 1ed1dde06 c30f7e6cc
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Oct 22 08:40:15 2014 -0700

    Merge "Change [1;31mspeed[m features for good quality(cpu-used=5)"

[33mcommit c30f7e6cc56f73bbfce0b3b0df7322cff2f0b246[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Oct 20 14:41:20 2014 -0700

    Change [1;31mspeed[m features for good quality(cpu-used=5)
    
    The existing [1;31mspeed[m features produce horrible encoding results, almost
    30% worse than cpu-used=4, this commit adjust the [1;31mspeed[m features to
    produce relatively resonable results to be within 3%-5% of cpu-used=4.
    
    Change-Id: I0ca6ebafb33024d4a0cbcf04c78a4a00b8dd1ecf

[33mcommit e62ce79e1a297985b86f5dde8a88ab723b1266ba[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Oct 20 15:00:24 2014 -0700

    Remove deprecated use_lastframe_partitioning feature
    
    This [1;31mspeed[m feature has been deprecated in both yt and rtc coding
    modes. This commit removes the related operations.
    
    Change-Id: I079c79c6adafe45581af2ebf8b98faebcface1ce

[33mcommit 9f128b3ed9fc2f431444f7cea238a288fb0e470c[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Oct 17 08:58:28 2014 -0700

    Hybrid partition search for rtc coding mode
    
    This commit re-designs the recursive partition search scheme in
    rtc [1;31mspeed[m -5. It first checks if the current block is under cyclic
    refresh mode. If so, apply recursive partition search. Otherwise,
    perform sub-sampled pixel based partition selection. When the
    pre-selection finds the partition size should be 32x32 or above,
    use the partition size directly. Otherwise, apply partition search
    at nearby levels around the preset partition size.
    
    It is enabled in [1;31mspeed[m -5. The compression performance of rtc
    [1;31mspeed[m -5 is improved by 9.4%. Speed wise, the run-time goes slower
    from 1% to 10%.
    
    nik_720p, 1000 kbps
    33220 b/f, 38.977 dB, 10109 ms -> 33200 b/f, 39.119 dB, 10210 ms
    
    vidyo1_720p, 1000 kbps
    16536 b/f, 40.495 dB, 10119 ms -> 16536 b/f, 40.827 dB, 11287 ms
    
    Change-Id: I65adba352e3adc03bae50854ddaea1b421653c6c

[33mcommit 5e766ccee030a207a2edd37a5f7012665bc43796[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 15 12:18:48 2014 -0700

    Use rate/distortion thresholds to control non-RD partition search
    
    Compare the estimated rate and distortion to the thresholds scaled
    according to the operating block size and determine if further
    split partition search will be run. The compression performance of
    [1;31mspeed[m -5 is changed by -0.074%. The encoding [1;31mspeed[m is 10% - 15%
    faster.
    
    vidyo1 720p
    16545 b/f, 40.492 dB, 11475 ms -> 16535 b/f, 40.486 dB, 10100 ms
    
    nik720p
    16624 b/f, 36.310 dB, 10071 ms -> 16617 b/f, 36.313 dB, 8346 ms
    
    Change-Id: Ic9197ab5761279ae55d2fb7813b2af0e0db497b8

[33mcommit 89b8c7a51390351db4fd5f7bbf1c8a3c547898e5[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 15 11:37:20 2014 -0700

    Replace copy_partitioning use case with choose_partitioning
    
    This commit replaces the use of copy_partitioning with
    choose_partitioning based on the sse of subsamped pixels, which
    provides significantly better coding performance and runs at
    similar [1;31mspeed[m, as compared to copy_partitioning. It improves rtc
    [1;31mspeed[m 5 coding performance by 3%.
    
    Change-Id: I52d3682a12dce0147f5e52383a594fc242ca3228

[33mcommit 7497d2fb23e7a37c249e643af368e05dd696a513[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Mon Oct 13 15:17:05 2014 -0700

    Add a 32-bit friendly sse2 quantizer.
    
    This is based on the 64-bit ssse3 quantizer.
    
    1.1x [1;31mspeed[mup for screen content at [1;31mspeed[m 7.
    
    Change-Id: I57d15415ef97c49165954bbe3daaaf9318e37448

[33mcommit d0369d6fd42062b442135ea173f722198bb47fec[m
Merge: fdf220555 69a09a70e
Author: Jingning Han <jingning@google.com>
Date:   Tue Oct 14 09:10:24 2014 -0700

    Merge "Use [1;31mspeed[m feature variable in vp9_rd_pick_inter/intra_mode"

[33mcommit 69a09a70e920f6934dbd00c9994ee73d81eed809[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Oct 13 16:13:59 2014 -0700

    Use [1;31mspeed[m feature variable in vp9_rd_pick_inter/intra_mode
    
    Replace repeated fetch cpi->sf with a local sf pointer.
    
    Change-Id: I5a55bba3e1c41fbdbc6ad5f078d2fa49dd95ee67

[33mcommit d78dbff09a1b3166fdd5be07b5227179e6e2dfcb[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Oct 7 02:48:08 2014 -0700

    Subpel search cleanups and enhancements
    
    - Some fixes to surface fit.
    - Returns variance function as cost rather than sad in the
      pattern search and diamond search functions. Only
      vp9_pattern_search_sad function used in bigdia search
      uses sad as integer 1-away costs.
    - Deploys SUBPEL_TREE_PRUNED_MORE for [1;31mspeed[m 4+.
    
    Results:
    derf [Speed 3]: About +0.036% in coding efficiency without any
    discernible [1;31mspeed[m loss.
    derf [Speed 4]: About 2-3% faster at -0.199% loss in coding efficiency.
    derf [Speed 5]: About 3-4% faster at -0.149% loss in coding efficiency.
    
    Change-Id: I8462f94f6adb46966ca964f2bd0400977357fd63

[33mcommit e18edd5eb651f9b7563cbd829744807402bfe0d8[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Oct 2 16:25:52 2014 -0700

    Allow mode search breakout at very low prediction errors
    
    In model_rd_for_sb function, the spatial domain SSE and variance
    are checked to see if transform coefficients are quantized to 0.
    Besides that, this patch adds another set of thresholds that are
    much more strict. These thresholds are used to conduct a partition
    block level check to measure if all its TX blocks are skippable
    for YUV planes. If it is true, x->skip is set for this partition
    block, and thus its mode search is terminated.
    
    This [1;31mspeed[ms up the encoding at very low prediction error case,
    such as screen sharing application. This patch covers what
    rd_encode_breakout_test() does, so that function is removed.
    
    Borg test at [1;31mspeed[m 3 shows:
    For stdhd set, psnr: +0.008%, ssim: +0.014%;
    For derf set, psnr: +0.018%, ssim: +0.025%.
    No noticeable [1;31mspeed[m change.
    
    Change-Id: I4e5f15cf10016a282a68e35175ff854b28195944

[33mcommit a75551585b0fb1ea8705e7e5c53433cfffabbab6[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Oct 6 15:53:27 2014 -0700

    Fix eobs buffer pointer mis-use
    
    This commit fixes a buffer pointer mis-use in store_coding_context.
    The compression performance for stdhd set of [1;31mspeed[m 3 is improved by
    0.097%. It fixes issue 869.
    
    Change-Id: Idc59e22035eaf39f7133ca04174894374d647ff7

[33mcommit 80465dae8811f8d62742d592b92e641a0ca0c9d9[m
Author: Jacky Chen <jackychen@google.com>
Date:   Thu Sep 18 16:45:53 2014 -0700

    Add SSE2 code and unit test for VP9 denoiser.
    
    This SSE2 is based on VP8 denoiser's SSE2 code. In VP8, there are
    only 16x16 blocks in denoiser, while in VP9, there are 13 different
    block sizes.
    
    By adding this SSE2 code, the improvement of encoder [1;31mspeed[m is around
    20%(using C code vs using SSE2 code), vary for different clips.
    
    The unit test for VP9 denoiser is to confirm that the SSE2 code is
    bit-exact with the C code. The unit test covers all block size.
    
    Change-Id: Ic8d8ac26db4ea40a5f146b5678a065af07eaaa3d

[33mcommit bb260d90764226c48d40f5b4fdeaa6a113cd9ba5[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Oct 2 17:49:00 2014 -0700

    Rework partition search skip scheme
    
    This commit enables the encoder to skip split partition search if
    the bigger block size has all non-zero quantized coefficients in low
    frequency area and the total rate cost is below a certain threshold.
    It logarithmatically scales the rate threshold according to the
    current block size. For [1;31mspeed[m 3, the compression performance loss:
    derf  -0.093%
    stdhd -0.066%
    
    Local experiments show 4% - 20% encoding [1;31mspeed[m-up for [1;31mspeed[m 3.
    blue_sky_1080p, 1500 kbps
    51051 b/f, 35.891 dB, 67236 ms ->
    50554 b/f, 35.857 dB, 59270 ms (12% [1;31mspeed[m-up)
    
    old_town_cross_720p, 1500 kbps
    14431 b/f, 36.249 dB, 57687 ms ->
    14108 b/f, 36.172 dB, 46586 ms (19% [1;31mspeed[m-up)
    
    pedestrian_area_1080p, 1500 kbps
    50812 b/f, 40.124 dB, 100439 ms ->
    50755 b/f, 40.118 dB,  96549 ms (4% [1;31mspeed[m-up)
    
    mobile_calendar_720p, 1000 kbps
    10352 b/f, 35.055 dB, 51837 ms ->
    10172 b/f, 35.003 dB, 44076 ms (15% [1;31mspeed[m-up)
    
    Change-Id: I412e34db49060775b3b89ba1738522317c3239c8

[33mcommit e4aac6bb61cba7ab387a959c82b292ead6eba758[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Oct 1 11:31:34 2014 -0700

    Modify block transform skipping check
    
    Block transform skipping was implemented based on DCT's energy
    conservation property. Modified the thresholds using zero bin
    parameters. AC and DC coefficients were checked separately to
    allow better identifying of skippable blocks.
    
    Borg test at [1;31mspeed[m 3 showed:
    stdhd set: psnr gain: 0.153%, ssim gain: 0.051%;
    derf set: psnr gain: 0.023%, ssim gain: 0.036%
    
    For most test clips, the encoding [1;31mspeed[mup is 1% - 2%.
    parkrun(720p): 7.5% [1;31mspeed[mup, park_joy(1080p): 3.5% [1;31mspeed[mup.
    
    Change-Id: If28eb81113a077414f5ca7b021c14f9069b373bb

[33mcommit 891793a54026315e1ef326f4caf750b94fa29e1e[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Sep 29 12:42:07 2014 -0700

    Conditionally skip reference frame check
    
    For regular inter frames, if the distance from GOLDEN_FRAME is larger
    than 2 and if the predicted motion vector of LAST_FRAME gives lower
    sse than that of GOLDEN_FRAME, skip the GOLDE_FRAME mode checking in
    the rate-distortion optimization. It provides about 5% [1;31mspeed[m-up at
    expense of -0.137% and -0.230% performance down for [1;31mspeed[m 3. Local
    experiment results:
    
    pedestrian 1080p 2000 kbps
    66712 b/f, 40.908 dB, 113688 ms ->
    66768 b/f, 40.911 dB, 108752 ms
    
    blue_sky 1080p 2000 kbps
    51054 b/f, 35.894 dB, 70406 ms ->
    51051 b/f, 35.891 dB, 67236 ms
    
    old_town_cross 720p 1500 kbps
    14412 b/f, 36.252 dB, 60690 ms ->
    14431 b/f, 36.249 dB, 57346 ms
    
    Change-Id: Idfcafe7f63da7a4896602fc60bd7093f0f0d82ca

[33mcommit 4e9c0d2ad4f97c096e69bbafb70dcb578b97e494[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Sep 24 13:25:34 2014 -0700

    Adds two new subpel search methods
    
    One is a more aggressive version of the pruned subpel tree
    search where only a single halfpel candidate is searched.
    The search candidate is based on a surface fit result.
    The other is a method to obtain the subpel position at one
    shot based on the same surface fit.
    
    The methods have not been deployed in any [1;31mspeed[m setting yet.
    
    Change-Id: I34fef3f2e34f11396c9d1ba97f4be8c4ffca62d3

[33mcommit ccdb518ff8082bc1a3f9ec3027e051e3a8317851[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 26 12:43:14 2014 -0700

    Skip certain ALTREF inter modes in ARF coding
    
    This commit enables the encoder to skip checking ALTREF inter modes
    in ARF coding, if the predicted motion vectors suggest that the
    GOLDEN_FRAME provides higher prediction accuracy than ALTREF_FRAME.
    
    It improves the [1;31mspeed[m 3 encoding [1;31mspeed[m by about 5%, at the expense
    of compression performance loss -0.041% and -0.225% for derf and
    stdhd, respectively.
    
    pedestrian_area 1080p 2000 kbps
    66705 b/f, 40.909 dB, 118738 ms ->
    66732 b/f, 40.908 dB, 113688 ms
    
    old_town_cross 720p 1500 kbps
    14427 b/f, 36.256 dB, 62746 ms ->
    14412 b/f, 36.252 dB, 60690 ms
    
    blue_sky 1080p 1500 kbps
    51026 b/f, 35.897 dB, 73310 ms ->
    50921 b/f, 35.893 dB, 70406 ms
    
    bus CIF 1000 kbps
    21301 b/f, 34.841 dB, 7326 ms ->
    21248 b/f, 34.837 dB, 7196 ms
    
    Change-Id: I76cf88b4d655e1ee3c0cb03c8a5745493040e8d2

[33mcommit 1fcbf6ed56266939403e75957a363de633f455b2[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Sep 24 12:12:25 2014 -0700

    Skip the partition search for still frames
    
    This patch re-enabled the feature in Pengchong's patch
    (commit 12861260732a4fd5f6b667ce9d5105dc9b606eda). Originally, it
    was turned on while use_lastframe_partitioning > 0(not used anymore).
    Now it was added as a feature, and turned on while [1;31mspeed[m >= 2.
    As described in the original patch, this feature helps [1;31mspeed[m up the
    slideshows in YouTube.
    
    Change-Id: I1b0f18d65da1ee1c8d1e117dabba910c5207c471

[33mcommit 6c6213d960eaa498702bff21bc8d9756b4a21540[m
Merge: 7feede986 c94b17f4b
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Sep 23 17:12:03 2014 -0700

    Merge "Pruned subpel search for [1;31mspeed[m 3."

[33mcommit c94b17f4b20253b34b4b17d8468f1704b8b0a8ee[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Sep 23 11:21:36 2014 -0700

    Pruned subpel search for [1;31mspeed[m 3.
    
    Adds code to return an integer cost list for NSTEP search. Then
    uses it for pruned subpel search in [1;31mspeed[m 3.
    
    derf: -0.06%
    Speed on mobcal 720p increaes from 10.28 fps to 10.65 fps.
    [Subject to further testing].
    
    Change-Id: Ib591382d25b2c11bcaba9d3a27a93a9d1ab27a96

[33mcommit eee904c9b91b62510169c52d5fc05580fd1f18c0[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 18 13:37:20 2014 -0700

    Adaptive mode search scheduling
    
    This commit enables an adaptive mode search order scheduling scheme
    in the rate-distortion optimization. It changes the compression
    performance by -0.433% and -0.420% for derf and stdhd respectively.
    It provides [1;31mspeed[m improvement for [1;31mspeed[m 3:
    
    bus CIF 1000 kbps
    24590 b/f, 35.513 dB, 7864 ms ->
    24696 b/f, 35.491 dB, 7408 ms (6% [1;31mspeed[m-up)
    
    stockholm 720p 1000 kbps
    8983 b/f, 35.078 dB, 65698 ms ->
    8962 b/f, 35.054 dB, 60298 ms (8%)
    
    old_town_cross 720p 1000 kbps
    11804 b/f, 35.666 dB, 62492 ms ->
    11778 b/f, 35.609 dB, 56040 ms (10%)
    
    blue_sky 1080p 1500 kbps
    57173 b/f, 36.179 dB, 77879 ms ->
    57199 b/f, 36.131 dB, 69821 ms (10%)
    
    pedestrian_area 1080p 2000 kbps
    74241 b/f, 41.105 dB, 144031 ms ->
    74271 b/f, 41.091 dB, 133614 ms (8%)
    
    Change-Id: Iaad28cbc99399030fc5f9951eb5aa7fa633f320e

[33mcommit adaec4d0fbb4b9b0cbcd06b82d3f24cc2ce4b332[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Sep 5 16:58:24 2014 -0700

    Speeding up decode_coeffs().
    
    1080p decoding [1;31mspeed[mup -- 1.25%, 4K decoding [1;31mspeed[mup -- 2.5%.
    
    Change-Id: I5f02f521cbf7758d4d1886a93bc5b074abdff03d

[33mcommit 56fa3ab886c47ccab74e7457dc57d43537dcaf75[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 16 09:49:17 2014 -0700

    Use non-zero mode threshold for NEARESTMV modes
    
    This commit makes the encoder to use non-zero mode threshold for
    NEARESTMV modes. The runtime for test clips of [1;31mspeed[m 3 is reduced
    by about 1%.
    
    pedestrian 1080p 2000 kbps, 143239 ms -> 141989 ms
    bus CIF 1000 kbps, 7835 ms -> 7749 ms
    
    The compression performance change is about -0.02% for both derf
    and stdhd.
    
    Change-Id: Ib71808922c41ae2997100cb7c561f68dcebfa08e

[33mcommit 46aed7b8d0b5f6f33d047c47a229f0f93033e39e[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Sep 15 16:50:19 2014 -0700

    Set the skip flag to 1 for skippable blocks
    
    If the partition block is skippable, which means no coefficients
    for Y, U, and V planes, its skip flag is set to 1. No quality
    change (verified by borg tests), and no noticeable [1;31mspeed[m change.
    
    Change-Id: I9231f720f8dd6364384cf05aa148ca24d75450f1

[33mcommit f02e0b6cf6c4f4cc75e71c1569c3907aa65af58f[m
Merge: 82fad6f4b 00fe92c22
Author: Jingning Han <jingning@google.com>
Date:   Sat Sep 13 10:43:03 2014 -0700

    Merge "Remove unused [1;31mspeed[m feature"

[33mcommit 83c76118eb7129f6865a2aa28251aac68785b324[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Sep 9 20:07:11 2014 -0700

    Use bigdia search with pruned subpel search
    
    Improves function to return sad of integer pels by reusing integer
    pels already visited in the smallest scale.
    Turns on BIGDIA search for [1;31mspeed[m 4. Also, turns on the
    first version of the pruned subpel search at this [1;31mspeed[m.
    
    derf: -0.32% ([1;31mspeed[m 4)
    
    Speed seems to improve by at least 5% but subject to verification.
    
    Change-Id: Iaec8eaffd61d6237ac029e6a2a1b0a88b2a35271

[33mcommit 00fe92c22f875eee2f3bed9de542368ee00b2af2[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 11 15:54:53 2014 -0700

    Remove unused [1;31mspeed[m feature
    
    The [1;31mspeed[m feature that skips compound inter prediction modes was
    subsumed by other [1;31mspeed[m features and effectively was not in use.
    This commit removes it.
    
    Change-Id: I22b0c71a8ddd15d93b25d86fa63a1dce2ba6a1a9

[33mcommit 3556ab56f6439607d3bb8c935db580f0b2fb63ea[m
Merge: 82757250d 8d42fad9c
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 11 11:14:37 2014 -0700

    Merge "Move overlay frame [1;31mspeed[m feature setting out of mode search loop"

[33mcommit 82757250d668c0289a3fed60d325fe464b3104c7[m
Merge: fb754540e f9f087975
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 11 11:14:26 2014 -0700

    Merge "Refactor to remove [1;31mspeed[m feature dependency on mode search order"

[33mcommit bdd8eb6fcc696ae6e8b84da6aa02897584e62e4e[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 11 10:34:37 2014 -0700

    Unify intra mode mask into mode_skip_mask scheme
    
    Integrate intra mode mask [1;31mspeed[m feature with the mode_skip_mask
    scheme. Move it outside the mode search loop in the
    vp9_rd_pick_inter_mode_sb function.
    
    Change-Id: I7738fea749bfdc08ad05d7f2524feb8ff67568d9

[33mcommit 8cefed156818acc47510a4f1527d0f33e3eece77[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 11 10:17:12 2014 -0700

    Remove inter_mode_mask from rate-distortion search loop
    
    This [1;31mspeed[m feature is used in real-time setting only. Remove the
    related condition check in the rate-distortion optimization search
    loop.
    
    Change-Id: Iaacc1e268214634e6f95c5048c28a60cec6c42fc

[33mcommit 238b2ace8643eff0260c98d56b057627715c218e[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 11 09:54:19 2014 -0700

    Move intra block size skip outside mode search loop
    
    Unify this [1;31mspeed[m feature in the ref_frame_skip_mask scheme.
    
    Change-Id: I7ea5646da02d3ea643680c22d50dabd448d55a27

[33mcommit 8d42fad9c1d2342cfc551b3223e706e05b01a2a3[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Sep 10 19:42:51 2014 -0700

    Move overlay frame [1;31mspeed[m feature setting out of mode search loop
    
    Refactor overlay frame [1;31mspeed[m-up related function. Make it unified
    with the ref_frame_skip_mask system and Move it out of the mode
    search loop.
    
    Change-Id: I0dde9baf44354f6ba00b4679cba02fa6a30c7316

[33mcommit f9f0879756c6c6a5af3cd43986ffde39b3b5deae[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 9 18:43:27 2014 -0700

    Refactor to remove [1;31mspeed[m feature dependency on mode search order
    
    This commit refactor the rate-distortion optimization search for
    regular block sizes to remove the [1;31mspeed[m feature dependency on mode
    search order.
    
    Change-Id: Ied033ee484c2957e17baa7b6450b720fe7dd0e7d

[33mcommit 4e94dec35278db559168cad97323ec78cb1b8d07[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Wed Sep 10 11:10:29 2014 -0700

    examples/twopass_encoder: Use good quality.
    
    This [1;31mspeed[ms up the encode significantly. Also added a comment about using
    best quality to keep new developers informed.
    
    Change-Id: I04e8154d4b2c4cae07fe7cc9a71e707f649e9ed4

[33mcommit 68d79146ea791783ac7d89dcdbef8c11a93d2b12[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 9 15:32:40 2014 -0700

    Fix a bug in vp9_rd_pick_inter_mode_sb
    
    This commit fixes a bug related to skipping intra mode checking, by
    using a separate variable to store the best prediction error from
    inter mode. It avoids unintentionally overwriting intra mode
    rate-distortion cost, and hence affecting other [1;31mspeed[m features.
    
    Change-Id: I99e12993339c84c8b4f597996b372012e5858fae

[33mcommit c792e1d50fd904cd3ca00e458ceee36efb627a90[m
Merge: 0fd7ca20c f10d7eeda
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Sep 9 14:06:02 2014 -0700

    Merge "Remove the use of use_lastframe_partitioning at [1;31mspeed[m 4"

[33mcommit 8e205a2a099ad97dfc65479dbb14bd544fe39954[m
Merge: 5078d8296 70092af5c
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Sep 9 12:50:23 2014 -0700

    Merge "Cleaning up and [1;31mspeed[ming up vp9_idct32x32_1024_add_sse2()."

[33mcommit f10d7eeda23bfccdb49a7fefc471132ae3eacca1[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Sep 9 10:18:55 2014 -0700

    Remove the use of use_lastframe_partitioning at [1;31mspeed[m 4
    
    The use of use_lastframe_partitioning is totally removed in good-
    quality encoding. Its usage in real-time encoding needs to be
    evaluated to see if it can be removed too.
    
    The Borg tests at [1;31mspeed[m 4 showed:
    stdhd set: 0.220% psnr gain, 0.166% ssim gain;
    derf set:  0.329% psnr gain, 0.476% ssim gain.
    
    Speed test on selected clips showed 1.54% [1;31mspeed[mup.(Worst case:
    pedestrian_area_1080p25.y4m, [1;31mspeed[m loss: 1.5%)
    
    Change-Id: I1c844d329b0b5678558439b887297c1be7ddab00

[33mcommit b73c9df1a407a1c1fb6b782316abb9b8765c5d56[m
Merge: f24054574 109214037
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Sep 8 18:10:20 2014 -0700

    Merge "No longer use use_lastframe_partitioning [1;31mspeed[m feature"

[33mcommit 70092af5c0195a4537c777ec0ff2bf0b07a7f9cc[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Sep 5 16:36:59 2014 -0700

    Cleaning up and [1;31mspeed[ming up vp9_idct32x32_1024_add_sse2().
    
    Change-Id: If91017b792572c9db6e257011ca307bef8428486

[33mcommit 10921403799d77756ddf378dc74a7842c0fd1260[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Sep 5 15:44:52 2014 -0700

    No longer use use_lastframe_partitioning [1;31mspeed[m feature
    
    The [1;31mspeed[mup in rd_pick_partition() function makes it possible
    to drop use_lastframe_partitioning feature. By doing that, we
    achieve good PSNR gain with small [1;31mspeed[m loss. Also, this makes
    encoding loop less complicated. The code cleanup patch will
    follow.
    
    Borg tests showed:
    1. At [1;31mspeed[m 2,
       stdhd set: 0.201% PSNR gain, 0.133% SSIM gain;
       derf set:  0.262% PSNR gain, 0.276% SSIM gain.
    2. At [1;31mspeed[m 3,
       stdhd set: 0.139% PSNR gain, 0.109% SSIM gain;
       derf set:  0.447% PSNR gain, 0.442% SSIM gain.
    
    The average [1;31mspeed[m loss over selected test clips is within 1%
    with the worst case of 4%.
    
    Change-Id: Icfd2ded7869372b585a6972855d933b3d0280d90

[33mcommit 1dd9a63929495a0f1d39848f33a970a159bf03de[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Sep 4 15:16:12 2014 -0700

    Correct the mode decisions in special cases
    
    The rate costs calculated for inter modes are not precise in some
    cases, which causes NEWMV is chosen instead of NEARESTMV, NEARMV,
    and ZEROMV. This patch added checks for these cases, and corrected
    the mode decisions.
    
    Borg tests at [1;31mspeed[m 3 showed:
    1. stdhd set: 0.102% PSNR gain and 0.088% SSIM gain.
    2. derf set:  0.147% PSNR gain and 0.132% SSIM gain.
    No [1;31mspeed[m change.
    
    Change-Id: I35d17684b89ad4734fb610942d707899146426db

[33mcommit d435148fe6b9bc2a34ddb6b3bec8bd300a072786[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 4 16:09:14 2014 -0700

    Enable adaptive motion search for ARF coding
    
    This commit turns on adaptive motion search for ARF coding, in
    addition to other normal inter frame coding. It improves the
    average compression efficiency:
    
    stdhd 0.1%
    derf  0.04%
    
    For the test sequences, the [1;31mspeed[m 3 runtime is reduced:
    
    pedestrian 1080p 2000 kbps, 149932 ms -> 144580 ms, (3.3% [1;31mspeed[m-up)
    bus CIF 1000 kbps, 8050 ms -> 7895 ms, (1.9%)
    highway CIF 100 bkps, 45033 ms -> 44078 ms, (2.2%)
    
    Change-Id: I5228565b609f99e8ae04f6140a2bf2b64a831d21

[33mcommit 46b83391e24cd3c9227c29b540ee654c3dc3491a[m
Merge: 0f0382af4 4b60d4a3e
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Sep 4 15:36:52 2014 -0700

    Merge "Removing local set_[1;31mspeed[m_features() function."

[33mcommit d62d804e647e6726abe23726e43cac622713da94[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 2 17:32:12 2014 -0700

    Speed up compound inter prediction mode check
    
    This commit allows the encoder to store outcomes of single reference
    frame modes and compares them to decide if the inter prediction
    filter, forward transform, and quantization can be skipped.
    
    The compression performance of [1;31mspeed[m 3 is down
    derf  -0.364%
    stdhd -0.198%
    
    For test sequences, the [1;31mspeed[m 3 runtime is reduced
    highway CIF 100 kbps, 51976 ms -> 45033 ms, 13% [1;31mspeed[m-up
    stockholm 720p 1000 kbps, 71826 ms -> 67838 ms, 5.5% [1;31mspeed[m-up
    pedestrian 1080p 2000 kbps, 154924 ms -> 150702 ms, 2.6% [1;31mspeed[m-up
    
    Change-Id: I5aa26f918d2b4b5197a2c0afa2779319f1c88e44

[33mcommit 7ab5de04fd243918089afa2ed56a9cc94c029477[m
Merge: 44879ceea 7a3371247
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Sep 3 14:57:02 2014 -0700

    Merge "Change last_partition_redo_frequency for [1;31mspeed[m 3"

[33mcommit dcbfacbb984cdcd5b5a5030103305fa3669dfece[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Sep 3 11:26:27 2014 -0700

    Neon version of vp8_build_intra_predictors_mby_s() and
    
    vp8_build_intra_predictors_mbuv_s().
    
    This patch replaces the assembly version with an intrinsic
    version.
    
    On a Nexus 7, vpxenc (in realtime mode, [1;31mspeed[m -12)
    reported a performance improvement of ~2.6%.
    
    Change-Id: I9ef65bad929450c0215253fdae1c16c8b4a8f26f

[33mcommit 7a33712475f670efe480728ac65b50b6b9553782[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Sep 2 18:53:10 2014 -0700

    Change last_partition_redo_frequency for [1;31mspeed[m 3
    
    From 3 to 2, which seems to be slightly positive on compression for
    all test sets, also reduces encoding time by 2%-5%, varying on the
    test clips.
    
    Change-Id: If045417bd27311700c919b4a335eff0dc1130ae0

[33mcommit c1058e5bbec4d6b5b6770f3011bca183a3948e93[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Sep 2 16:21:57 2014 -0700

    select_tx_mode(): remove special case for key frame
    
    This commit removes the special case for key frame, as transform size
    decision is controlled by the appropriate [1;31mspeed[m feature for all lossy
    coding modes: tx_size_search_method.
    
    Change-Id: I9677171e3f2432ec23705f7c5ea8170dd4562fae

[33mcommit 33176fef872c5d812d7ce8f9875d5166de460c5d[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 2 10:57:10 2014 -0700

    Skip comp inter mode tests for arf coding
    
    This commit skips the compound inter mode prediction check in the
    rate-distortion optimization loop for ARF coding. It reduces the
    runtime for certain test clips at [1;31mspeed[m 3, at no compression
    performance change:
    
    bus CIF 1000 kbps, 8260 ms -> 8090 ms, 1.8% [1;31mspeed[m-up
    stockholm 720p 1000 kbps, 74453 ms -> 71826 ms, 2.9% [1;31mspeed[m-up
    
    No visible [1;31mspeed[m-up for pedestrian area 1080p at 2000 kbps.
    
    Change-Id: Ic68aa56837159b726563b784e2e3729e846465ad

[33mcommit 4282955ee12cc884ff9fd0875c82bd4c0940f8ea[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Aug 28 22:58:30 2014 -0700

    Skip intra mode tests depending on inter residuals
    
    This commit allows encoder to skip intra coding mode test, when
    the known inter residual is less than the source variance. It
    reduces the runtime of [1;31mspeed[m 3 for test clips:
    bus cif 1000 kbps: 8587 ms -> 8260 ms, 3.8% [1;31mspeed[m-up
    pedestrian 1080p 2000 kbps: 161381 ms -> 155241 ms, 3.7% [1;31mspeed[m-up.
    
    The compression performance is down by
    derf   -0.36%
    stdhd  -0.25%
    
    Change-Id: I75ce1e035b4da2153cb1ac14111d1a07c05a735d

[33mcommit 4d2c37692345f588e00bd33faefcdb17bd27835b[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Aug 14 17:25:21 2014 -0700

    Early termination in encoding partition search
    
    In the partition search, the encoder checks all possible
    partitionings in the superblock's partition search tree.
    This patch proposed a set of criteria for partition search
    early termination, which effectively decided whether or
    not to terminate the search in current branch based on the
    "skippable" result of the quantized transform coefficients.
    The "skippable" information was gathered during the
    partition mode search, and no overhead calculations were
    introduced.
    
    This patch gives significant encoding [1;31mspeed[m gains without
    sacrificing the quality.
    
    Borg test results:
    1. At [1;31mspeed[m 1,
       stdhd set: psnr: +0.074%, ssim: +0.093%;
       derf set:  psnr: -0.024%, ssim: +0.011%;
    2. At [1;31mspeed[m 2,
       stdhd set: psnr: +0.033%, ssim: +0.100%;
       derf set:  psnr: -0.062%, ssim: +0.003%;
    3. At [1;31mspeed[m 3,
       stdhd set: psnr: +0.060%, ssim: +0.190%;
       derf set:  psnr: -0.064%, ssim: -0.002%;
    4. At [1;31mspeed[m 4,
       stdhd set: psnr: +0.070%, ssim: +0.143%;
       derf set:  psnr: -0.104%, ssim: +0.039%;
    
    The [1;31mspeed[mup ranges from several percent to 60+%.
                     [1;31mspeed[m1    [1;31mspeed[m2    [1;31mspeed[m3    [1;31mspeed[m4
    (1080p, 100f):
    old_town_cross:  48.2%     23.9%     20.8%     16.5%
    park_joy:        11.4%     17.8%     29.4%     18.2%
    pedestrian_area: 10.7%      4.0%      4.2%      2.4%
    (720p, 200f):
    mobcal:          68.1%     36.3%     34.4%     17.7%
    parkrun:         15.8%     24.2%     37.1%     16.8%
    shields:         45.1%     32.8%     30.1%      9.6%
    (cif, 300f)
    bus:              3.7%     10.4%     14.0%      7.9%
    deadline:        13.6%     14.8%     12.6%     10.9%
    mobile:           5.3%     11.5%     14.7%     10.7%
    
    Change-Id: I246c38fb952ad762ce5e365711235b605f470a66

[33mcommit 04b100b23eaa0c4ab179129be82d52fee9fb256f[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Aug 27 14:06:30 2014 -0700

    Updates vp9_pattern search to return integer sads
    
    Updates the vp9_pattern_search function to return integer one-away
    neighbors' sad values, for subsequent use in [1;31mspeed[ming up the
    sub-pel search. Also, removes code for the do_refine option
    which is not being used currently.
    Updates the integer and subpel functions to pass in a 5-element
    sad list for output or input.
    
    A new pruned sub-pel search algorithm is implemented that uses
    the sad returned from the integer pel search. But it is not
    deployed yet.
    
    Change-Id: Ifa9f5ad024b5b660570366d2bd900343e1891520

[33mcommit ec7ce316d2dff305bb068301301c498d9964ed1e[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Aug 26 12:34:54 2014 -0700

    Use max txfm size unit in rate-distortion cost modeling
    
    This commit makes the rate distortion modeling run in the unit of
    maximum transform block size. No compression/[1;31mspeed[m change observed.
    It is for the use of later fast forward transform purpose.
    
    Change-Id: Ibaaedb69c765e8d0c5d5012f0ec07f36fd9f68fd

[33mcommit 4b60d4a3e847a51e93549e2721a4bde78ebe0e7c[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Aug 22 15:59:13 2014 -0700

    Removing local set_[1;31mspeed[m_features() function.
    
    The function was called in two places. In the first case it is replaced
    with vp9_set_[1;31mspeed[m_features() call. In the second case the body of set_[1;31mspeed[m_features() is inlined.
    
    Change-Id: If3fdf1b4168eee97677c224f69c245fe46c7f606

[33mcommit 8d363882fda9d5640e794e7df7da07edfbba5fd6[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Aug 22 15:45:11 2014 -0700

    Choosing GOOD mode by default.
    
    This patch fixes slow first pass problem. Mode could only be determined
    from the deadline value during frame encode call. Unfortunately, we use
    mode value before any encode calls during the first pass encoding (see
    set_[1;31mspeed[m_features() logic). The mode for the first pass must be different
    from BEST to make first pass fast.
    
    Change-Id: I562a7d32004ff631695d91c09a44d8a9076fd6b5

[33mcommit f617889be798710aec19ee843329e988b7aa3124[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Aug 18 16:32:40 2014 -0700

    Moving frame_is_boosted() to vp9_[1;31mspeed[m_features.c.
    
    Change-Id: I9261ded5fbba7a625d8224d91be296265a932410

[33mcommit ba70f1601108c537ffb48b4f0e63ccd5c7af25ef[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Aug 12 14:36:42 2014 -0700

    Add early termination in transform size search
    
    In the full-rd transform size search, we go through all transform
    sizes to choose the one with best rd score. In this patch, an
    early termination is added to stop the search once we see that the
    smaller size won't give better rd score than the larger size. Also,
    the search starts from largest transform size, then goes down to
    smallest size.
    
    A [1;31mspeed[m feature tx_size_search_breakout is added, which is turned off
    at [1;31mspeed[m 0, and on for other [1;31mspeed[ms. The transform size search is
    turned on at [1;31mspeed[m 1.
    
    Borg test results:
    1. At [1;31mspeed[m 1,
       derf set: psnr gain: 0.618%, ssim gain: 0.377%;
       stdhd set: psnr gain: 0.594%, ssim gain: 0.162%;
       No noticeable [1;31mspeed[m change.
    3. At [1;31mspeed[m 2,
       derf set: psnr loss: 0.157%, ssim loss: 0.175%;
       stdhd set: psnr loss: 0.090%, ssim loss: 0.101%;
       [1;31mspeed[m gain: ~4%.
    
    Change-Id: I22535cd2017b5e54f2a62bb6a38231aea4268b3f

[33mcommit 6a464eca0549fb1a539c9f5968d66e66cdf4cce9[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Aug 18 10:42:23 2014 -0700

    Speed up mode search depending on relative ref frame position
    
    This commit enables the encoder to record the location of the
    center frame to generate alter reference frame. It then allows to
    skip checking prediction modes of other reference frame types when
    it comes to encode this frame.
    
    The [1;31mspeed[m 3 runtime is reduced for the test sequences:
    bus at CIF 1000 kbps, 9791 ms -> 9446 ms, i.e., 3.5% [1;31mspeed[m-up,
    pedestrian at 1080p 2000 kbps, 184043 ms -> 175730 ms, i.e., 4.5%
    [1;31mspeed[m-up.
    
    No compression performance change observed.
    
    Change-Id: Iacfde3bcc1445964e7a241f239bd6ea11cb94bd1

[33mcommit beff5b6aa4e8d33bc25d5ae84f743c9fd9656d20[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Aug 18 09:27:50 2014 -0700

    Revert "Removing duplicated code from init_config()."
    
    This reverts commit 5509b7fd8fe6ad3555831b8d49077182daf92758
    
    
    Observed a big drop in compression quality and [1;31mspeed[m for [1;31mspeed[m 1 for a 360p test clip, revert this now for investigation.
    
    Change-Id: If69dc8d77a225b34dc7907a9472e1a7a0a22762d

[33mcommit 997db6fc3f67aa499574e362b37adf4b07534ff7[m
Merge: 90d21bb28 eca93642e
Author: Pengchong Jin <pengchong@google.com>
Date:   Fri Aug 15 19:51:04 2014 -0700

    Merge "Add a [1;31mspeed[m feature to give the tighter search range"

[33mcommit eca93642e28102e5e30d6499f9661b89e8fdc27b[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Wed Aug 13 20:07:39 2014 -0700

    Add a [1;31mspeed[m feature to give the tighter search range
    
    Add a [1;31mspeed[m feature to give the tighter partition search
    range. Before partition search, calculate the histogram
    of the partition sizes of the left, above and previous
    co-located blocks of the current block. If the variance of
    observed partition sizes is small enough, adjust the search
    range around the mean partition size, which will be tigher.
    
    The feature is currently turned on at [1;31mspeed[m 2. Experiments on
    sample youtube clips show on average the runtime is reduced
    by 3-7%.
    
    For hard stdhd clips:
    park_joy_1080p @ 15000kbps:       509251 ms -> 491953 ms (3.3%)
    pedestrian_area_1080p @ 2000kbps: 223941 ms -> 214226 ms (4.3%)
    
    The PSNR performance is changed:
    derf: -0.112%
    yt:   -0.099%
    hd:   -0.090%
    stdhd:-0.102%
    
    Change-Id: Ie205ec5325bf92ec5676c243e30ba9d0adca10f2

[33mcommit dc35b40a6775bd5362299607ff6af4efbd6a568a[m
Merge: c2ac7da98 cd1fbc67f
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Aug 15 15:31:43 2014 -0700

    Merge "Simplifying vp9_set_[1;31mspeed[m_features() function."

[33mcommit c2ac7da981839ef47314ad4de3404e9e71799963[m
Merge: 45d12e0bd 28b1437d7
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Aug 15 15:22:33 2014 -0700

    Merge "Remove a unused [1;31mspeed[m feature"

[33mcommit 28b1437d779fc0e6041822efebee638b8a9e7255[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Aug 15 14:10:27 2014 -0700

    Remove a unused [1;31mspeed[m feature
    
    Removed disable_split_var_thresh, which is not used anymore.
    
    Change-Id: I50119b150442e1571157433b5effc6aae0dbe0fd

[33mcommit 4d6d061316e948603b9a1b917e97fd4ace91f0ad[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Aug 13 15:07:16 2014 -0700

    Set max_intra_bsize to 32x32
    
    At --good and [1;31mspeed[m 3 or above for resolution less than 720p. This
    disables the tests for 64x64 intra prediction modes. Encoding time
    reduction is about 1%.
    
    Change-Id: Ib396e3d1417fece416e3f0fee929b128acbb130f

[33mcommit ccef8842d2f4df4f52efe66b6b94de707244804f[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 13 10:38:21 2014 -0700

    Allow full coeff probability model and cost update
    
    This commit moves the simplified coefficient probability model
    and costing update to [1;31mspeed[m 4, and turns on chessboard pattern
    mode search for sub 720p sequences. The overall coding performance
    of [1;31mspeed[m 3 is improved:
    derf  0.889%
    stdhd 1.744%
    
    The [1;31mspeed[m 3 runtime for test sequences are improved:
    bus cif at 1000 kbps 9823 ms -> 9642 ms
    pedestrian 1080p 2000 kbps 189559 ms -> 183284 ms
    
    Change-Id: Iecbc7496a68f31fd49fb09f8dfd97c028d675a5d

[33mcommit 1e30547984e1d80f5b98214efc9f781cbcc85999[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Aug 11 18:02:18 2014 -0700

    Skip mode search based on reference frame consistency
    
    This commit enables the encoder to skip NEARMV and ZEROMV if the
    above and left blocks have identical reference frame, and the
    current reference is different from that. It reduces the runtime
    of [1;31mspeed[m 3 for test sequences:
    bus cif at 1000 kbps 10064 ms -> 9823 ms
    pedestrian 1080p at 2000 kbps 193078 ms -> 189559 ms
    
    The compression performance is changed by
    derf  -0.085%
    stdhd -0.103%
    
    Change-Id: If304f26d42e6412152a84c3dd7b02635c38444f4

[33mcommit 0daadeb60c14ebb1c1657f2091dc7abc30640970[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Aug 11 17:48:14 2014 -0700

    Enable motion field based mode seach skip
    
    This commit allows the encoder to check the above and left neighbor
    blocks' reference frames and motion vectors. If they are all
    consistent, skip checking the NEARMV and ZEROMV modes. This is
    enabled in [1;31mspeed[m 3. The coding performance is improved:
    
    pedestrian area 1080p at 2000 kbps,
    from  74773 b/f, 41.101 dB, 198064 ms
    to    74795 b/f, 41.099 dB, 193078 ms
    
    park joy 1080p at 15000 kbps,
    from 290727 b/f, 30.640 dB, 609113 ms
    to   290558 b/f, 30.630 dB, 592815 ms
    
    Overall compression performance of [1;31mspeed[m 3 is changed
    derf  -0.171%
    stdhd -0.168%
    
    Change-Id: I8d47dd543a5f90d7a1c583f74035b926b6704b95

[33mcommit 5c55202c6bbb7527b81c37f51f213bf338fedf59[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Aug 12 16:22:32 2014 -0700

    intra blocks disallowed inadvertently
    
    At [1;31mspeed[m 6 the smallest partitioning was 16x16 and biggest
    intra block was 8x8, essentially disallowing all intra blocks
    which produces ugly artifacts when revealing new video.
    
    Change-Id: I364042d4c64e09be0666ade64aac94d0a1b586cf

[33mcommit cd1fbc67f9eb50246e4df490af64b1fc25fc04c8[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Aug 8 16:29:24 2014 -0700

    Simplifying vp9_set_[1;31mspeed[m_features() function.
    
    Change-Id: I3e67230690b81ef54ef48ae26107fe7bc880ab8e

[33mcommit 7035527c9a1acac4bcd8e10acd84f8ffb9285b35[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Fri Aug 8 13:57:25 2014 -0700

    Improved vp9_quantize_fp_neon()
    
    Eliminated instructions by using better neon instructions
    and rearranging the loop.
    
    On a Nexus 7, vpxenc (in realtime mode, [1;31mspeed[m -12)
    reported a performance improvement of ~1.0%.
    
    Change-Id: I6b1700e79318f647ea67ef25e954c308932950ec

[33mcommit bac9beff7230293afc522b8a5d0dc85f04842c78[m
Merge: 6acc5c630 2a5c46d8f
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Fri Aug 8 09:30:47 2014 -0700

    Merge "Fix active_map [1;31mspeed[m 6."

[33mcommit 2a5c46d8f515239ca079694546cf30fc4e700167[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu Aug 7 15:54:26 2014 -0700

    Fix active_map [1;31mspeed[m 6.
    
    Fix the interaction between active map and reuse_inter_pred_sby. The
    reuse_inter_pred_sby feature expects inter predictors to already be
    built, but blocks with active map on skip this step.
    
    Change-Id: Ibb2bf0d228f678935d82a0ede9cb0919ab7c8878

[33mcommit 74593c1eae3a09bb296829c59826b626810ae12a[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Tue Aug 5 14:39:06 2014 -0700

    Directly split the block in partition search
    
    This patch allows the encoder to directly split the block
    in partition search, therefore skip searching NONE. It
    computes a score which measures whether 16x16 motion vectors
    from the first pass in the current block are consistent with
    each others. If they are inconsistent and we have enough Q
    to encode, split the block directly, and skip searching NONE.
    
    This feature is under flag CONFIG_FP_MB_STATS. In [1;31mspeed[m 2,
    it further gives a [1;31mspeed[mup of 3-8% on sample yt clips as
    compared to the previous version under the same flag. Overall,
    the features under the flag will give 7-15% on typical yt
    clips at up to 6000kbps data rate. The [1;31mspeed[mup at very high
    data rate is not significant.
    
    For hard stdhd clips:
    park_joy_1080p @ 15000kbps:       504541ms -> 506293ms (-0.35%)
    pedestrian_area_1080p @ 2000kbps: 326610ms -> 290090ms (+11.2%)
    
    The compression performance using the features under the flag:
    derf: -0.068%
    yt:   -0.189%
    hd:   -0.318%
    stdhd:-0.183%
    
    To use the feature, set CONFIG_FP_MB_STATS and turn on
    cpi->use_fp_mb_stats.
    
    Change-Id: Iad58a2966515c8861aa9eb211565b1864048d47f

[33mcommit 98165ec0744ebf7a786954691489face68e3ab03[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Fri Aug 1 11:35:55 2014 -0700

    Neon version of vp9_sub_pixel_variance8x8(),
    
    vp9_variance8x8(), and vp9_get8x8var().
    
    On a Nexus 7, vpxenc (in realtime mode, [1;31mspeed[m -12)
    reported a performance improvement of ~1.2%.
    
    Change-Id: I8a66ac2a0f550b407caa27816833bdc563395102

[33mcommit 6f4b8dcdc2fb0595a20f1e05469f4d42147055dd[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Jul 30 12:16:04 2014 -0700

    Neon version of vp9_subtract_block()
    
    On a Nexus 7, vpxenc (in realtime mode, [1;31mspeed[m -12)
    reported a performance improvement of ~3.2%
    
    Change-Id: I8862497264142171b7efc32df1a67714a23539f4

[33mcommit 49866baae60f863d36ca42f40ff4fddd987461cc[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Tue Jul 29 19:49:47 2014 -0700

    Early termination after partition NONE is done in RD.
    
    This patch allows the encoder to skip the search for partition
    SPLIT, HORZ, VERT after the search for partition NONE is done
    in RD optimization. It uses the first pass block-wise statistics
    to make the decision. If all 16x16 blocks in the current partition
    have zero motions and small residues from the frist pass statistics,
    and it has small difference variance, further partition search is
    skipped.
    
    For [1;31mspeed[m 2 setting, experiments on general youtube clips show that
    the [1;31mspeed[mup varies from 1% - 10%, 5% on average. On the performance
    side in PSNR, derf 0.004%, yt -0.059%, hd -0.106%, stdhd 0.032%.
    
    For hard stdhd clips:
    park_joy_1080p, 502952 ms -> 503307 ms (-0.07%)
    pedestrian_area_1080p, 227049 ms -> 220531 ms (+3%)
    
    This feature is under the compilation flag CONFIG_FP_MB_STATS and
    it is off in current setting.
    
    Change-Id: I554537e9242178263b65ebe14a04f9c221b58bae

[33mcommit ca2dcb7feddc37f18060285fd9e381142e23df5d[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 29 09:50:03 2014 -0700

    Chessboard pattern partition search
    
    This commit enables a chessboard pattern constrained partition
    search for 720p and above resolutions. The scheme applies stricter
    partition search to alternative blocks based on its above/left
    neighboring blocks' partition range, as well as that of the
    collocated blocks in the previous frame. It is currently turned
    on at 16x16 block size level. The chessboard pattern is flipped
    per coding frame.
    
    The [1;31mspeed[m 3 runtime is reduced:
    park_joy_1080p, 652832 ms -> 607738 ms (7% [1;31mspeed[m-up)
    pedestrian_area_1080p, 215998 ms -> 200589 ms (8% [1;31mspeed[m-up)
    
    The compression performance is changed:
    hd     -0.223%
    stdhd  -0.295%
    
    Change-Id: I2d4d123ae89f7171562f618febb4d81789575b19

[33mcommit d4a37db5b8389b8913056969b9cd1b5aa5a79abb[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Mon Jul 28 05:47:55 2014 -0700

    Neon version of vp9_quantize_fp()
    
    On a Nexus 7, vpxenc (in realtime mode, [1;31mspeed[m -12)
    reported a performance improvement of ~12.4%
    
    Change-Id: Id29d215acf58bb108489e218a259adf74b4768d7

[33mcommit 521cf7e8795d38da8aa7b7356d97a6e561d02449[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Tue Jul 29 16:47:34 2014 -0700

    Neon version of vp9_sub_pixel_variance16x16(),
    
    vp9_variance16x16(), and vp9_get16x16var().
    
    On a Nexus 7, vpxenc (in realtime mode, [1;31mspeed[m -12)
    reported a performance improvement of ~16.7%.
    
    Change-Id: Ib163aa99f56e680194aabe00dacdd7f0899a4ecb

[33mcommit 6646ea73e29abd0349153708c2bd6fece006632c[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 29 11:03:00 2014 -0700

    Clean up max/min allowed block size in rd_pick_partition
    
    This commit replace the repetitive retrieve of max and min allowed
    partition from [1;31mspeed[m_feature with local variables max_size and
    min_size.
    
    Change-Id: Ib06f11f16615e4876e4dd5fb6a968c6bf5f7b216

[33mcommit d19d222db62503c91addbb20f97ddafc7cd636c8[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Mon Jul 28 15:21:10 2014 -0700

    Added vp9_fdct8x8_neon(), vp9_fdct8x8_1_neon()
    
    On a Nexus 7, vpxenc (in realtime mode, [1;31mspeed[m -12)
    reported a performance improvement of ~3.7%.
    
    Change-Id: I428c72c40df82c6d537955e320a8debf99343004

[33mcommit 84af0486f91faa897202a39d2f77687dd420ced6[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jul 25 07:08:23 2014 -0700

    Fix rd_pick_partition search loop for 4x4 blocks
    
    The partition search for 4x4 blocks takes unnecessary steps to
    reconstruct pixels and an extra partition type update. This commit
    removes such operations. No visible compression/[1;31mspeed[m difference.
    Thanks to Yue (yuec@) for finding this issue.
    
    Change-Id: I3f83824aa3fd3717d63be0b280fa57258939a70a

[33mcommit 4f2f86725b3e56b28762318f3f810edcd6d619ef[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 23 11:47:56 2014 -0700

    Use the chessboard pattern pred search in newmv mode
    
    This commit extends the chessboard pattern prediction filter search.
    If the above and left blocks have the same prediction filter type,
    the encoder will skip the prediction filter type search and use the
    reference one.
    
    The overall chessboard pattern prediction filter type search reduces
    [1;31mspeed[m 3 runtime for hard clips. Experiments on park joy at 1080p
    and 15000 kbps show that the runtime goes from 723265 ms to 65832 ms,
    i.e., about 10% [1;31mspeed[m-up. Compression performance wise, it affects
    the coding quality by
    
    Change-Id: I880975497c7ad166532e9eea9bf46684d77ff327
    derf:    -0.326%
    yt:      -0.257%
    hd:      -0.241%
    stdhd:   -0.417%

[33mcommit 54ad09586c0deb26e7d305623dff78e200fdadef[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 22 16:32:20 2014 -0700

    Enable chessboard inter prediction filter type search
    
    This commit enables a chessboard pattern prediction filter type
    search scheme for rate-distortion optimization [1;31mspeed[m-up. For the
    inferred motion vector modes, the encoder can re-use its above/left
    neighbor blocks' prediction filter type and skip a full test on
    all possible filter types. Such operation is turned on/off
    alternatively in a chessboard manner.
    
    It is turned on in [1;31mspeed[m 3. For test clip pedestrian 1080p, the
    runtime is reduced from 231500 ms -> 221700 ms. The compression
    performance is changed:
    derf:  -0.147%
    yt:    -0.134%
    hd:    -0.079%
    stdhd: -0.220%
    
    Change-Id: I1912f278e7576c2dc632688e3ad7a257410c605a

[33mcommit ffd948bbd527e7491d0e9f240251eb3f86fd7aa4[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 21 16:22:56 2014 -0700

    Turn on adaptive pred filter scheme for sub8x8 below 720p
    
    For sequences of resolution below 720p, the encoder will check
    intra prediction modes and inter prediction modes from LAST_FRAME.
    This commit turns on adaptive prediction filter scheme for sub8x8
    blocks, where inter prediction modes are enabled. For the test
    sequence bus at CIF, the [1;31mspeed[m 2 runtime goes down from 17879 ms
    to 16783 ms, i.e., 6% [1;31mspeed[m up. The compression performance of
    derf set is down by -0.128%.
    
    Change-Id: I01d5321a5ceab4e0666ac5be56c52d896c7a8d45

[33mcommit 765485cab21021ac4ba9d1cbddce2432f421de99[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jul 15 16:18:34 2014 -0700

    Add -DNDEBUG when config option debug is disabled
    
    For gcc, when libvpx config option debug is disabled, added the
    flag -DNDEBUG to disable the assertions in libvpx for some [1;31mspeed[mup.
    
    Change-Id: Ifcb7b9e8ef5cbe5d07a24407b53b9a2923f596ee

[33mcommit 42a68e6701f277abdbdb8cd02364d8130cf4e4f8[m
Merge: 422acd0a0 51c60a891
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Jul 16 19:12:22 2014 -0700

    Merge "make default_interp_filter choice a [1;31mspeed[m feature"

[33mcommit 51c60a891e18a26e0c4a1052f61109507b20b705[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Jul 16 14:28:51 2014 -0700

    make default_interp_filter choice a [1;31mspeed[m feature
    
    This commit changed the hard-coded DEFAULT_INTERP_FILTER to a [1;31mspeed[m
    feature with the same default value: SWITCHABLE.
    
    Change-Id: I7f54f40f1bd3f5277841d04b85db7a84e47313f1

[33mcommit 696fa52eaa35d1aaed497f3403fac6ef432e4822[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Jul 16 12:54:46 2014 -0700

    Added vp9_sad64x64_neon(), vp9_sad32x32_neon()
    
    and vp9_sad16x16_neon()
    
    On a Nexus 7, vpxenc (in realtime mode, [1;31mspeed[m -6)
    reported a performance improvement of ~17%.
    
    Change-Id: I91e070cde2973451083d3f3d63b49b7886de9a85

[33mcommit 998cff61652a114ed61dd392a72432fd9c5fe317[m
Merge: 7d7779738 faa686bb1
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Jul 15 18:02:17 2014 -0700

    Merge "Added a rt [1;31mspeed[m 12"

[33mcommit faa686bb1bacb85a28d8baeef71f66138ea387ac[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Jul 15 15:29:52 2014 -0700

    Added a rt [1;31mspeed[m 12
    
    We target this [1;31mspeed[m to achieve similar encoding [1;31mspeed[m and better
    compression than vp8 rt mode with cpu-used at -12.
    
    Change-Id: Ic1bb4371c81a17ea80e83459c1cbf4c09a3498e8

[33mcommit 9bd3be69a447766780e6164ad69eda8b7d0a266f[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jul 8 14:52:47 2014 -0700

    Adjust full-pixel search method in real-time mode
    
    Use FAST_HEX in [1;31mspeed[m 5 and 6, which covers more points than
    FAST_DIAMOND and improves motion search quality.
    
    At [1;31mspeed[m 6, RTC set borg tests showed slight quality gain (psnr
    gain: 0.143%, ssim gain: 0.226%). No noticeable encoding [1;31mspeed[m
    change.
    
    Change-Id: Ifa62875d9a52ee382ec494f271382bb77d8c67bf

[33mcommit 84daeb5ea8c0f3959a675f2b046b6ab968eb42fc[m
Merge: 8abbd37d2 113dbf8d1
Author: Guillaume Martres <gmartres@google.com>
Date:   Wed Jul 9 04:21:19 2014 -0700

    Merge "vp9_cx_iface.c: allow [1;31mspeed[m greater than 7"

[33mcommit 8abbd37d21b0e15b3a3120685e3819dc2ac70f09[m
Merge: bdfb9e580 99df92d12
Author: James Zern <jzern@google.com>
Date:   Tue Jul 8 19:01:39 2014 -0700

    Merge changes I2abd6716,I4a65f7f8
    
    * changes:
      cpu_[1;31mspeed[m_test: cosmetics
      aq_segment_test: cosmetics

[33mcommit 9ad1b9fc67921cfaf58ed85732ed139530edab4a[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 7 12:08:40 2014 -0700

    Re-design quantization process for 32x32 transform block
    
    This commit enables a new quantization process for 32x32 2D-DCT
    transform coefficient blocks. It improves the compression
    performance of [1;31mspeed[m 5 by 1.4%. The overall compression gains of
    [1;31mspeed[m 5 due to the new quantization scheme is 4.7%. It also includes
    the SSSE3 implementation of the 32x32 quantization process.
    
    Change-Id: I0855b124fd6462418683f783f5bcb44255c9993b

[33mcommit 113dbf8d1e4fc7c2ce39f7b902c31d5c0b47a5ce[m
Author: Guillaume Martres <gmartres@google.com>
Date:   Tue Jul 8 15:52:33 2014 +0200

    vp9_cx_iface.c: allow [1;31mspeed[m greater than 7
    
    This makes it possible to use --rt --cpu-used=8.
    
    Change-Id: I8b5bc4449b6e05d24d25145e35b4793501268c59

[33mcommit f60a1178c6329c15c675ea52606c311be7c53601[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Tue Jul 1 13:02:05 2014 -0700

    Cleanup motion search [1;31mspeed[m features.
    
    * Replace max_step_search_steps with constant MAX_MVSEARCH_STEPS
    * Fold (reduce_first_step_size + [1;31mspeed[m > 5) into reduce_first_step_size
      replacing uses of reduce_first_step_size that don't add the [1;31mspeed[m
      check with zero.
    
    Change-Id: Iae46395dbf3eaca138bf4d18b838a9e364b5a198

[33mcommit 6c417077bee8c0abd0c516ddfb6f0ea112961f9f[m
Merge: 579c7bcca 92a6db792
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Jul 2 10:31:51 2014 -0700

    Merge "Added a [1;31mspeed[m feature controlling a motion search parameter"

[33mcommit 92a6db79288d1163ad1b429d63ba72db5c2b9434[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Jul 1 10:52:17 2014 -0700

    Added a [1;31mspeed[m feature controlling a motion search parameter
    
    This commit added a [1;31mspeed[m feature to control the step_param used in
    full pixel motion search. The intention is to reduced the search
    steps for high [1;31mspeed[m real time coding.
    
    Change-Id: I21d2f0105c2b647783a6688615da7fcf2b6d670b

[33mcommit 99df92d126419dd662a77495334e653f66970297[m
Author: James Zern <jzern@google.com>
Date:   Tue Jul 1 18:22:30 2014 -0700

    cpu_[1;31mspeed[m_test: cosmetics
    
    - add a virtual destructor
    - fix formatting
    - remove some unnecessary includes
    - remove unused functions/defines/typedefs
    
    Change-Id: I2abd671670cc89fa80edb466ff4bc1fee35b5e31

[33mcommit 9ac2f6632044ad2ec268ed4921c31391f30ecd0c[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 1 16:10:44 2014 -0700

    Re-design quantization process
    
    This commit re-designs the quantization process for transform
    coefficient blocks of size 4x4 to 16x16. It improves compression
    performance for [1;31mspeed[m 7 by 3.85%. The SSSE3 version for the
    new quantization process is included.
    
    The average runtime of the 8x8 block quantization is reduced
    from 285 cycles -> 255 cycles, i.e., over 10% faster.
    
    Change-Id: I61278aa02efc70599b962d3314671db5b0446a50

[33mcommit f31ff029df13a415ab2eb8c2abbc212b41d5d6af[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jul 1 12:18:27 2014 -0700

    Elevate NEWMV mode checking threshold in real time
    
    The current threshold is knid of low, and in many cases NEWMV
    mode is checked but not picked as the best mode. This patch
    added a [1;31mspeed[m feature to increase NEWMV threshold, so that
    less partition mode checking goes to check NEWMV. This feature
    is enabled for [1;31mspeed[m 6 and 7.
    
    Rtc set borg tests showed:
    1. Speed 6, overall psnr: -0.088%, ssim: -1.339%;
       Average [1;31mspeed[mup on rtc set is 11.1%.
    2. Speed 7, overall psnr: -0.505%, ssim: -2.320%
       Average [1;31mspeed[mup on rtc set is 12.9%.
    
    Change-Id: I953b849eeb6e0d5a1f13eacba30c14204472c5be

[33mcommit dee5782f93cf9dcbe5e7fdad1873039fc0ab8cbf[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Jun 27 17:44:32 2014 -0700

    Enable encode breakout in real time
    
    For real time [1;31mspeed[m 7, once encode breakout is on(i.e. encoding
    setting --static-thresh=1), a proper encode breakout threshold
    is set to [1;31mspeed[m up the encoder.
    
    Set --static-thresh=1, RTC set borg test showed a slight overall
    psnr loss of 0.162%, but ssim gain of 0.287%. The average [1;31mspeed[mup
    on RTC set is 6%, and for some clips, the [1;31mspeed[mup can be 10+%.
    
    Change-Id: Id522d9ce779ff7c699936d13d0c47083de4afb85

[33mcommit 9d41313e4bd28d3c504c26079cbe4a499e7eceb7[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu May 1 15:14:39 2014 -0700

    Decide the partitioning threshold from the variance histogram
    
    Before encoding a frame, calculate and store each 16x16 block's
    variance of source difference between last and current frame.
    Find partitioning threshold T for the frame from its variance
    histogram, and then use T to make partition decisions.
    
    Comparing with fixed 16x16 partitioning, rtc set test showed an
    overall psnr gain of 3.242%, and ssim gain of 3.751%. The best
    psnr gain is 8.653%.
    
    The overall encoding [1;31mspeed[m didn't change much. It got faster for
    some clips(for example, 12% [1;31mspeed[mup for vidyo1), and a little
    slower for others.
    
    Also, a minor modification was made in datarate unit test.
    
    Change-Id: Ie290743aa3814e83607b93831b667a2a49d0932c

[33mcommit 303aa7e42ac6c8923abef702d25a6d07e993165c[m
Merge: ae77d0fe8 3f92b7b99
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Jun 27 16:47:06 2014 -0700

    Merge "Added a new [1;31mspeed[m 7 in rt mode"

[33mcommit ae77d0fe858b2f09aeff88e09a93ac4bacd3c895[m
Merge: 9cd90d465 5d0881237
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Fri Jun 27 16:32:52 2014 -0700

    Merge "Add a CPU [1;31mspeed[m test with screen content."

[33mcommit d0cb273e04a865b0ea1e020e1c8caffbb505e43b[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Jun 27 15:23:02 2014 -0700

    Allow encoder to set lpf level to 0
    
    As a way to [1;31mspeed[m-up rtc encoding at [1;31mspeed[m 7.
    
    Change-Id: Ie36a010392cf7b741dc130df21a4e733622a75b7

[33mcommit 3f92b7b994aceae610ef40bcf92437ca844f73d2[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Jun 27 10:05:24 2014 -0700

    Added a new [1;31mspeed[m 7 in rt mode
    
    To experiment with different [1;31mspeed[m/quality compromises.
    
    Change-Id: Ia9d4b85243554d620498a327da37c356e752b07f

[33mcommit 63de0f16289d4a348e6d258f56cb3c83d3367674[m
Merge: 52b63c238 a869e62a8
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Fri Jun 27 11:09:14 2014 -0700

    Merge "Verify that the ouput of q0 is lossless in cpu [1;31mspeed[m test."

[33mcommit 5d0881237e1f8394b80cd1045168393745bf2f11[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu Jun 26 16:21:14 2014 -0700

    Add a CPU [1;31mspeed[m test with screen content.
    
    Encoding screen content exercises various fast skip paths that are
    missed by natural video content.
    
    Change-Id: Ie359884ef9be89cbe5dda6d82f1f79360604a090

[33mcommit a869e62a8fb4ab847e8826c0508d3bbe1fd13047[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu Jun 26 16:19:40 2014 -0700

    Verify that the ouput of q0 is lossless in cpu [1;31mspeed[m test.
    
    Change-Id: Ib94ee638eb486f1368f2e3098d25c1d3d28fc265

[33mcommit a9a13ce9443c468eb223fc775d020f4baf86f35c[m
Merge: 3cac9f0a0 340e7433b
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Fri Jun 27 10:07:03 2014 -0700

    Merge "Add realtime coverage to cpu [1;31mspeed[m test"

[33mcommit 340e7433b7153311a3dd293f4bf1cc4709e54be2[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu Jun 26 16:16:38 2014 -0700

    Add realtime coverage to cpu [1;31mspeed[m test
    
    Change-Id: I33e8d1788ce29ffc695f7e9b84167ef446b1b56c

[33mcommit 5a3e3c6d3fa308066e2cef1f8cbc407cd540c176[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jun 25 16:53:07 2014 -0700

    Adaptive txfm size selection depending on residual sse/variance
    
    This commit enables an adaptive transform size selection method
    for [1;31mspeed[m -6. It uses largest transform size when the sse is more
    than 4 times of variance, i.e., most energy is compacted in the
    DC coefficient. Otherwise, use the default TX_8X8. It improves
    the compression efficiency for rtc set of [1;31mspeed[m -6 by 0.8%, no
    [1;31mspeed[m change observed.
    
    Change-Id: Ie6ed1e728ff7bf88ebe940a60811361cdd19969c

[33mcommit 12861260732a4fd5f6b667ce9d5105dc9b606eda[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Mon Jun 23 13:00:16 2014 -0700

    Skip the partition search for the frame with no motion
    
    This patch allows the encoder to skip the partition search for the
    frame if it is an inter frame and only zero motion vectors have
    been detected in the first pass. The partition size is directly
    assigned according to the difference variance.
    
    Borg tests show overall little performance changes in term of PSNR
    (derf -0.027%, yt 0.152%, hd 0.078%, stdhd 0%). The worst case of
    PSNR loss is -0.514% from yt. The best PSNR gain is 4.293% from yt.
    The second pass encoding [1;31mspeed[mup for slideshow clips is 15%-40%.
    
    Change-Id: I881f347d286553ee5594a9ea09ba1a61ac684045

[33mcommit 46ea9ec7193ae3ee8401f8a1214dcf1b5a3fc899[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jun 24 10:45:31 2014 -0700

    Enable real-time version reference motion vector search
    
    This commit enables a fast reference motion vector search scheme.
    It checks the nearest top and left neighboring blocks to decide the
    most probable predicted motion vector. If it finds the two have
    the same motion vectors, it then skip finding exterior range for
    the second most probable motion vector, and correspondingly skips
    the check for NEARMV.
    
    The runtime of [1;31mspeed[m -5 goes down
    pedestrian at 1080p 29377 ms -> 27783 ms
    vidyo at 720p       11830 ms -> 10990 ms
    i.e., 6%-8% [1;31mspeed[m-up.
    
    For rtc set, the compression performance
    goes down by about -1.3% for both [1;31mspeed[m -5 and -6.
    
    Change-Id: I2a7794fa99734f739f8b30519ad4dfd511ab91a5

[33mcommit bccc785f63458136a8a72a51ed7b34a5811ffc4f[m
Merge: b8c382f8e 0aae10007
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Jun 25 08:18:33 2014 -0700

    Merge "Reuse inter prediction result in real-time [1;31mspeed[m 6"

[33mcommit 0aae10007684fc3aa84ebf38a1a1d20e12ca8930[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Jun 20 10:11:34 2014 -0700

    Reuse inter prediction result in real-time [1;31mspeed[m 6
    
    In real-time [1;31mspeed[m 6, no partition search is done. The inter
    prediction results got from picking mode can be reused in the
    following encoding process. A [1;31mspeed[m feature reuse_inter_pred_sby
    is added to only enable the resue in [1;31mspeed[m 6.
    
    This patch doesn't change encoding result. RTC set tests showed
    that the encoding [1;31mspeed[m gain is 2% - 5%.
    
    Change-Id: I3884780f64ef95dd8be10562926542528713b92c

[33mcommit c99a8fd7c896fad03d43514bb6a7708cecbbede6[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jun 19 09:24:09 2014 -0700

    Allow key frame more flexibility in mode search
    
    This commit allows the key frame to search through more prediction
    modes and more flexible block sizes. No [1;31mspeed[m change observed. The
    coding performance for rtc set is improved by 1.7% for [1;31mspeed[m -5 and
    3.0% for [1;31mspeed[m -6.
    
    Change-Id: Ifd1bc28558017851b210b4004f2d80838938bcc5

[33mcommit 55834d42cc7d2a5cdcfec8472fd4b88a1f720102[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jun 17 16:59:28 2014 -0700

    Modify non-rd intra mode checking
    
    Speed 6 uses small tx size, namely 8x8. max_intra_bsize needs to
    be modified accordingly to ensure valid intra mode checking.
    Borg test on RTC set showed an overall PSNR gain of 0.335% in [1;31mspeed[m
    -6.
    
    This also changes [1;31mspeed[m -5 encoding by allowing DC_PRED checking
    for block32x32. Borg test on RTC set showed a slight PSNR gain of
    0.145%, and no noticeable [1;31mspeed[m change.
    
    Change-Id: I1502978d8fbe265b3bb235db0f9c35ba0703cd45

[33mcommit 7c45dc98a8c80030c7f2994ab749d779b55b3047[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jun 18 10:50:38 2014 -0700

    Separate rate-distortion modeling for DC and AC coefficients
    
    This is the first step to rework the rate-distortion modeling used
    in rtc coding mode. The overall goal is to make the modeling
    customized for the statistics encountered in the rtc coding.
    
    This commit makes encoder to perform rate-distortion modeling for
    DC and AC coefficients separately. No [1;31mspeed[m changes observed.
    The coding performance for pedestrian_area_1080p is largely
    improved:
    
    [1;31mspeed[m -5, from 79558 b/f, 37.871 dB -> 79598 b/f, 38.600 dB
    [1;31mspeed[m -6, from 79515 b/f, 37.822 dB -> 79544 b/f, 38.130 dB
    
    Overall performance for rtc set at [1;31mspeed[m -6 is improved by 0.67%.
    
    Change-Id: I9153444567e5f75ccdcaac043c2365992c005c0c

[33mcommit cdc954fdc842c8bba298d8ca523511bd242cbc8c[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Mon Jun 16 09:17:45 2014 -0700

    skip the un-necessary motion search in the first pass
    
    This patch allows the VP9 encoder to skip the un-necessary
    motion search in the first pass. It computes the motion error
    of 0,0 motion using the last source frame as the reference,
    and skips the further motion search if this error is small.
    
    Borg test shows overall the patch gives PSNR gain (derf -0.001%,
    yt 0.341%, hd 0.282%). Individual clips may have PSNR gain or
    loss. The best PSNR performance is 7.347% and the worst is -0.662%.
    The first pass encoding [1;31mspeed[mup for slideshow clips is over 30%.
    
    Change-Id: I4cac4dbd911f277ee858e161f3ca652c771344fe

[33mcommit 4ff1a614f1aa0dcb2741ede101a7e7896b93889e[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Jun 12 12:35:57 2014 -0700

    Adding MV_SPEED_FEATURES struct.
    
    Moving all motion vector related [1;31mspeed[m parameters from SPEED_FEATURES to
    MV_SPEED_FEATURES.
    
    Change-Id: I3e9af0039c7162f8671878c5920bce3cb256a84e

[33mcommit ccba289f8d1760a45b972685a64eb829529b70ab[m
Author: Jingning Han <jingning@google.com>
Date:   Thu May 29 18:14:17 2014 -0700

    Fast computation path for forward transform and quantization
    
    This commit enables a fast path computational flow for forward
    transformation. It checks the sse and variance of prediction
    residuals and decides if the quantized coefficients are all
    zero, dc only, or more. It then selects the corresponding coding
    path in the forward transformation and quantization stage.
    
    It is currently enabled in rtc coding mode. Will do it for rd
    coding mode next.
    
    In [1;31mspeed[m -6, the runtime for pedestrian_area 1080p at 1000 kbps
    goes down from 14234 ms to 13704 ms, i.e., about 4% [1;31mspeed[m-up.
    Overall coding performance for rtc set is changed by -0.18%.
    
    Change-Id: I0452da1786d59bc8bcbe0a35fdae9f623d1d44e1

[33mcommit 5daef90efc4613efd7e7ee80ba4e1ecf9a57a966[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Tue Jun 3 17:16:00 2014 -0700

    skip un-neccessary motion search in the first pass
    
    This patch allows the encoder to skip the
    un-neccessary motion search in the first pass. It
    calculates the error of the zero motion vector using
    the last source frame as reference and skips the
    further motion search in the first pass if the error
    is small.
    
    The encoding [1;31mspeed[mup of the first pass for slideshow
    videos is over 30%. Borg test shows the overall PSNR
    performance remain approximately the same (derf -0.009,
    hd 0.387, yt 0.021, stdhd 0.065). Individual clips may
    have either PSNR gain or loss. The worst PSNR perfomance
    is from yt set, with a PSNR loss of -1.1.
    
    Change-Id: I08b2ab110b695e4689573b2567fa531b6457616e

[33mcommit b04d766800f39ed97361d2ec13b740cbf5bca534[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu May 29 16:53:23 2014 -0700

    Use small transform size in non-rd real-time mode
    
    In non-rd real-time mode, choosing smaller transform size in
    encoding gives better video quality and good [1;31mspeed[m gain than
    choosing larger transform size. This patch set tx size search
    method to ALLOW_8X8, which is better than using 4x4 or other
    larger sizes.
    
    Borg tests on rtc set at [1;31mspeed[m 6 showed significant gain on quality.
    PSNR gain: 11.034% and SSIM gain: 15.466%.
    
    The [1;31mspeed[m gain is 5% - 12% for <720p clips, and 2% - 7% for
    720p clips.
    
    Change-Id: If4dc74ed2df359346b059f47fb73b4a0193ec548

[33mcommit b9a569da41adeaa160b29a14438d71a89caac2d5[m
Merge: b447b9d97 78d0968e0
Author: James Zern <jzern@google.com>
Date:   Sat Jun 7 12:51:30 2014 -0700

    Merge "gen_msvs_*proj.sh: [1;31mspeed[m up file generation"

[33mcommit 78d0968e0943f08093269506158dd118ba750aaa[m
Author: James Zern <jzern@google.com>
Date:   Tue Jun 3 16:22:43 2014 -0700

    gen_msvs_*proj.sh: [1;31mspeed[m up file generation
    
    execute fix_path once on the source file list rather than once per entry
    
    Change-Id: Ibc8226e391b3028c1b0bcfeab83c790387c9fe23

[33mcommit 923c30a174637af6bc0c3732082b74ed35c71160[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Jun 5 18:17:54 2014 -0700

    Removing chessboard_index from SPEED_FEATURES.
    
    This is not a [1;31mspeed[m feature, adding inline function instead.
    
    Change-Id: Ia48c41802eec9e92cf990339d724097279695c9a

[33mcommit 538af7db5ffe2ab560511a3bc0ae74dae9316c14[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri May 30 10:15:30 2014 -0700

    Fix a problem of using an uninitialized parameter
    
    This commit added a call to set [1;31mspeed[m feature before initializing
    motion search, fixed the problem where unintialized search method
    is used before its value being set.
    
    Change-Id: I537e4612bf0d00fd6f51396fd222d4b3bd6fde58

[33mcommit 60866b030a576e7a5608303ead5fe0c941dea22d[m
Merge: e14f900ae d262cda52
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu May 29 11:58:42 2014 -0700

    Merge "Making [1;31mspeed[m checks consistent in set_rt_[1;31mspeed[m_feature()."

[33mcommit d262cda5245bfe9c2e9a474426253ac472e38bfe[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu May 29 11:11:50 2014 -0700

    Making [1;31mspeed[m checks consistent in set_rt_[1;31mspeed[m_feature().
    
    Change-Id: Id3d0a49836fe996b806707d29a8130acf9d7ea0e

[33mcommit 6d21cbd20b07dd66f60add80cadd330470f5f529[m
Author: Jingning Han <jingning@google.com>
Date:   Wed May 28 10:51:09 2014 -0700

    Enable SSSE3 inverse 2D-DCT with 10 non-zero coeffs
    
    This commit enables SSSE3 implementation of the inverse 2D-DCT
    with only first 10 coefficients non-zero. It reduces the runtime
    of SSE2 version from 745 cycles to 538 cycles, i.e., 27% [1;31mspeed[m-up.
    
    Change-Id: I18ba4128859b09c704a6ee361d69a86c09fe8dfe

[33mcommit 48b089137023cb7df2e750658e1c532f02db2ee5[m
Author: Jingning Han <jingning@google.com>
Date:   Thu May 22 09:44:40 2014 -0700

    Inverse 16x16 2D-DCT SSSE3 implementation
    
    This commit enables the SSSE3 implementation of full inverse 16x16
    2D-DCT. The unit runtime goes down from 1642 cycles to 1519 cycles,
    about 7% [1;31mspeed[m-up.
    
    Change-Id: I14d2fdf9da1fb4ed1e5db7ce24f77a1bfc8ea90d

[33mcommit 7c8479acead5d74642693cf5f9e084c35e7fa0cb[m
Merge: 941033089 b9c24dfa2
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Fri May 23 10:19:03 2014 -0700

    Merge "Always partition check after keyframe (rt [1;31mspeed[m 5)"

[33mcommit b9c24dfa23f945a6e1dbf9c0d31abe31e2991627[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu May 22 15:27:35 2014 -0700

    Always partition check after keyframe (rt [1;31mspeed[m 5)
    
    Prevents too small partitions from being copied to the next frame.
    
    Change-Id: I4b97c30b27d06051574d54aaaca5434407a0c9ff

[33mcommit 80e5326cf2a63b017e65400121c9128f0e232693[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu May 22 16:17:59 2014 -0700

    Use offset mode info when filling pc tree.
    
    Use the appropriate subblock offset mode info rather than the parent
    block base, when filling mbmi in the pc tree in nonrd_use_partition.
    This mimics what is done in the vertical case and what is done for
    both cases in nonrd_pick_partition.
    
    This change has little practical effect at the moment since in [1;31mspeed[m 5
    rt horizontal and vertical partitions are currently only used unpaired
    at edges of the picture.
    
    Change-Id: I4632f66ca84086dac56c7d36b45ddbe38a06f42a

[33mcommit 3bda7ec1bab9b7336cf3218d1e7596f79930208c[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue May 20 11:36:44 2014 -0700

    Enable various thresholds of motion detection
    
    This commit changed to enable the encoder to adjust motion dection
    [1;31mspeed[m threshold based on picture size. In addition, cpu-used 1 now
    does a partition search every other frame instead of every third
    frame for low resolution inputs.
    
    The change has no quality/[1;31mspeed[m impact for 720p and above. Test
    showed the change increase encoding time by between 3% to 6% for
    cpu-used 2 encodiong of 360p sequences. It also has a compression
    gain about .3%.
    
    For cpu-used 2, the change resolved some very disturbing visual
    artifacts in certain sequences when large block partitionings and
    transforms are used as a result of copying the partition from a
    previous frame.
    
    Change-Id: Ic7fd22508cdb811d4ca935655adbf20109286cfa

[33mcommit b91b146d1df46a3f3bbd544548839643cae662c1[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed May 7 10:39:00 2014 -0700

    Add static-threshold skipping in non-rd mode
    
    Added a skipping test in non-rd inter-mode. After interpolation
    prediction step, the residuals are tested to see if they will be
    quantized to 0 based on modeling between spatial domain and
    frequency domain.
    
    Set static-thresh to 800 for >=720p and 300 for <720p, rtc set
    tests showed
    1. Speed 5, psnr: -0.514%; ssim: -1.748%;
       [1;31mspeed[mup on related clips: 5% -11%
    2. Speed 6, psbr: -0.628%; ssim: -1.637%;
       [1;31mspeed[mup on related clips: 4% - 9%
    
    Change-Id: I62fbf26bc043ecd2b584f255f1a4ee5ab52bfcf3

[33mcommit e5b8bd020a1f1fc85150e84f4cbefa23e9519e8c[m
Author: James Zern <jzern@google.com>
Date:   Mon May 19 11:36:12 2014 -0700

    configure.sh: only execute toupper when necessary
    
    [1;31mspeed[ms up windows configure by ~40%
    
    Change-Id: Ie3138b8fe39ff4c901c35c5d689c1ed12da34866

[33mcommit 3f96081a15093604f9eca116c9e7a9493db37253[m
Author: Jingning Han <jingning@google.com>
Date:   Mon May 12 10:55:14 2014 -0700

    Tune minq index table for P frames in one_pass_cbr coding mode
    
    Allow slightly larger minq-maxq range for P frames. This improves
    the compression performance of [1;31mspeed[m -5 for rtc set by 2.7% in psnr.
    
    Change-Id: I438653d52d0fe51111509c6092e2334bac2de0cf

[33mcommit 734c5ffa2c003e8668ae8b58413064c98591f3fd[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Apr 23 14:54:16 2014 -0700

    Apply constrained partition search range to non-RD mode decision
    
    This commit enables a chessboard pattern for partition search. All
    the black blocks run regular partition search ranging from 8x8 to
    32x32. The rest white blocks take the nearby blocks' information
    to adaptively decide the effective search range.
    
    The compression performance for rtc set at [1;31mspeed[m -5 is down by 1.5%.
    For pedestrian 1080p at [1;31mspeed[m -5, the runtime goes from 41594 ms to
    39697 ms, i.e., about 5% faster.
    
    Change-Id: Ia4b96e237abfaada487c743bca08fe1afd298685

[33mcommit eb8a348672b7e9d4b1bbaeca1d8364238ea6ad0d[m
Merge: 9412785b0 09d947ecb
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Fri May 9 13:48:42 2014 -0700

    Merge "Allow [1;31mspeed[m 5 lossless"

[33mcommit 09d947ecb9c1170e53baa892e15744b3079f9502[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu May 8 18:28:16 2014 -0700

    Allow [1;31mspeed[m 5 lossless
    
    tx_mode supercedes whatever mechanism is used to push for 16x16
    allowing for the use of the 4x4 transform.
    
    Change-Id: I6c3f05ab9fe52050e40cc6303de9334653763289

[33mcommit 89fbf3de501b5d7fd90047192521eae3198705cd[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Mon May 5 14:10:41 2014 -0700

    Add an MMX fwht4x4
    
    7% faster encoding a desktop lossless at RT [1;31mspeed[m 4.
    
    Change-Id: I41627f5b737752616b6512bb91a36ec45995bf64

[33mcommit 1eaa3a76dc50fc8451cedbf4797d7e3b7a2d77d7[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Apr 23 09:13:45 2014 -0700

    Enable SSSE3 implementation of 8x8 forward 2D-DCT
    
    Assembly implementation of ssse3 8x8 forward 2D-DCT. The current
    version is turned on only for x86_64. The average unit runtime
    goes from 157 cycles down to 136 cycles, i.e., about 12.8% faster.
    This translates into about 1.5% [1;31mspeed[m-up for pedestrian_area 1080p
    at [1;31mspeed[m 2.
    
    Change-Id: I0f12435857e9425ed7ce12541344dfa16837f4f4

[33mcommit 8969f7c8922c4e35d8d1267e82f82bf5f2f970b5[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Apr 23 10:33:41 2014 -0700

    Chessboard pattern prediction filter type search in non-RD coding
    
    This commit introduces a chessboard pattern search for the prediction
    filter type search. It runs extensive search in alternate blocks and
    allows the rest blocks to refer coding decisions of their nearby
    neighbors.
    
    For pedestrian 1080p at 4000 kbps, the runtime of [1;31mspeed[m -5 goes down
    from 43990 ms to 42200 ms. The overall compression performance for
    RTC set is changed by -1.37%.
    
    Change-Id: Icfe220c49451cda796f0ca91d935c9ed01e56c9d

[33mcommit 0bba4f1efae6a9c2be02fb718eb08e3a8a688c64[m
Merge: de43d2c67 d928b34ef
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Apr 21 18:32:36 2014 -0700

    Merge "Allow full RD TX size search for GF/ALT at [1;31mspeed[m 2"

[33mcommit d928b34efec30d216515ed5e300023efd3900ff3[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Apr 21 12:04:59 2014 -0700

    Allow full RD TX size search for GF/ALT at [1;31mspeed[m 2
    
    For [1;31mspeed[m 3 and above, such search is only allowed at [1;31mspeed[m 3.
    The change helped cif and stdhd set by 1.2% and .7% in compression,
    but increased the encoding time by around 5%.
    
    Change-Id: Ifa4832327f1c1bef3decb032ceb769cbf50e059f

[33mcommit 80a4f559891cf7553c087a6120cc5ed9fff30390[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Apr 17 09:58:17 2014 -0700

    Enable background detection for adaptive quantizer control
    
    This commit enables a background detection approach for adaptive
    quantizer control. It combines the cyclic refresh pattern and the
    background information to determine the segment id for adaptive
    quantizer selection, prior to the non-RD mode decision process.
    It hence allows proper quantization information update for a more
    precise rate-distortion modeling in the non-RD mode decision.
    
    The compression performance of [1;31mspeed[m -5 for rtc set is improved
    by 2.5%, at no [1;31mspeed[m change.
    
    Change-Id: Ic3713e8ed9185b403b5b1679d19dabd57506d452

[33mcommit 6962ea665dc968ce32dd1c03b6c162a35cf43c73[m
Merge: 2b22185c1 76d58ba41
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Apr 18 18:18:08 2014 -0700

    Merge "Moving set_rd_[1;31mspeed[m_thresholds{,_sub8x8} to vp9_rdopt.{h, c}."

[33mcommit 76d58ba414f39227c5b83d15c7a1b36e93b380b2[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Apr 15 16:52:28 2014 -0700

    Moving set_rd_[1;31mspeed[m_thresholds{,_sub8x8} to vp9_rdopt.{h, c}.
    
    Change-Id: I983364b33e8f103b43a0448821e890989176f1cc

[33mcommit 69009e738eed9853803be8b90a7a7f40434d5337[m
Merge: 8f3943d8c 2c8c1f537
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Apr 17 14:34:26 2014 -0700

    Merge "Replacing cpu_used with [1;31mspeed[m in VP9_CONFIG."

[33mcommit 2c8c1f53703e503f146aee61539b1a42d7913c69[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Apr 16 18:31:42 2014 -0700

    Replacing cpu_used with [1;31mspeed[m in VP9_CONFIG.
    
    Change-Id: I86b85b5c11388e84a48f8936330c0d920df5d1f0

[33mcommit e88a28057311c24d61f1b122cdf7aa4d2685434e[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Apr 15 11:41:39 2014 -0700

    Enable more precise background detection for partition decision
    
    This commit compares the current original frame to the previous
    original frame at 64x64 block level and decides if the entire
    block belongs to background area. If it is in the background area,
    skip non-RD partition search and copy the partition types of the
    collocated block in the previous frame.
    
    For vidyo1 in the rtc set, this makes the [1;31mspeed[m -5 coding [1;31mspeed[m
    about 8% faster. The overall compression performance is down by
    1.37% for rtc set.
    
    Change-Id: Iccf920562fcc88f21d377fb6a44c547c8689b7ea

[33mcommit 658daf36fa25ff89a4041d398b7a572898b23ead[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Apr 15 19:15:43 2014 -0700

    Fix rate control bug.
    
    Fix rate control bug whereby the rate factor heuristics
    were being updated on arf overlays causing a rate surge
    for a few frames followed by a corrective drop.
    
    This fix eliminates many of the overshoot problems that
    we were seeing on hard clips (even without applying
    stricter vbr rate control) and also helps quality on
    almost all clips with some hard clips improving by >5%.
    
    Overall quality results measured at [1;31mspeed[m 2.
    Derf  +1.78% opsnr , +2.44% SSIM
    Stdhd +2.41% opsnr, +2.85% SSIM
    
    Change-Id: I2369df6295c2705963fa6307877f6acb304bcc39

[33mcommit 0639b5cff5ac3e476f0ee76c3c3f51fdc9fd2758[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Mar 28 15:21:26 2014 +0000

    Speed 2 alternative balance.
    
    A previous path improved [1;31mspeed[m 2 quality a little but
    more extensive testing showed that it slowed encode
    by a few %.
    
    The change will have a similar effect for [1;31mspeed[m 3 but
    should not impact [1;31mspeed[ms 4+;
    
    This experiment should reverse that and give a [1;31mspeed[m
    up at the cost of a small quality loss.
    
    Borg results pending.
    
    Change-Id: I4493fc1541aaf44587f1a41ff219f7088da9252c

[33mcommit 4e66293fcb5b4779490faf8f40300e7e0096640e[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Apr 1 17:32:20 2014 -0700

    Use source frame difference to make partition decision
    
    Calculate the difference variance between last source frame and
    current source frame. The variance is calculated at 16x16 block
    level. The variances are compared to several thresholds to decide
    final partition sizes.
    
    An adaptive strategy is implemented to decide using
    SOURCE_VAR_BASED_PARTITION or FIXED_PARTITION based on motions
    in the video. The switching test is done once every
    search_type_check_frequency frames.
    
    The selection of source_var_thresh needs to be investigated
    further later.
    
    RTC set Borg test showed 0.424% overall psnr gain, and 0.357%
    ssim gain. For clips with large enough static area, the
    encoding [1;31mspeed[mup is around 2% to 15%.
    
    Change-Id: Id7d268f1d8cbca7fb8026aa4a53b3c77459dc156

[33mcommit 06ec873f2c97d8b60b28a346d2e868badbd98d2d[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Apr 4 15:59:10 2014 -0700

    Select prediction filter type in non-RD mode decision
    
    This commit allows the non-RD mode decision flow to  select
    prediction filter type in NEWMV mode. It provides 8.14% compression
    performance gains in both settings of AQ=0 and 3. The current [1;31mspeed[m
    impact is about 5% to 10% slower.
    
    Change-Id: Id66ecebf77abd8f90fb3f6a066c0e8dfb4bf1c42

[33mcommit b03e7757d1bc2c060b98bf7001c229ca8d2fb91f[m
Merge: 8eec5cad5 181949948
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Apr 7 18:31:56 2014 -0700

    Merge "Add constrained-copy partition to [1;31mspeed[m features."

[33mcommit 181949948e6572a199a3de8046b553c903eb373b[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Apr 4 15:10:14 2014 -0700

    Add constrained-copy partition to [1;31mspeed[m features.
    
    Copy up to a certain bsize, otherwise set to a fixed bsize.
    This helsp to reduce artifact near moving boundary caused by full partition
    copy without checking motion of super-block.
    This artifact can occur at [1;31mspeed[ms 3,4 in real-time mode.
    Issue: https://code.google.com/p/webm/issues/detail?id=738.
    
    Change-Id: I05812521fd38816a467f72eb6a951cae4c227931

[33mcommit 3f48418472a464f931aceefddb2b05e388a4b62d[m
Merge: 0cb65fe5c 233b581ce
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Apr 7 14:18:02 2014 -0700

    Merge "Cleaning up vp9_[1;31mspeed[m_features.c."

[33mcommit 233b581cef1e8eacdcc51ab077da6f82e336b8f8[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Apr 4 10:52:20 2014 -0700

    Cleaning up vp9_[1;31mspeed[m_features.c.
    
    Change-Id: I7b2b690d2d51d55daa642be4131e5febd78cbe0a

[33mcommit 516d0b1180dc7712373e571c0cd74e621dc2e185[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Apr 3 18:04:04 2014 -0700

    Set up early RD cost check for NEWMV in non-RD mode decision flow
    
    This commit estimates the motion vector rate cost right after full
    pixel motion search. It combines this and the mode cost and compares
    the corresponding rate-distortion cost. If it is already above the
    current best one, skip the rest sub-pixel motion search and modeling
    process. For pedestrian_area 1080p at 4000 kpbs, the [1;31mspeed[m -5 runtime
    goes down from 39425 ms -> 38399 ms.
    
    Change-Id: If4cd7119fd6c266798d5cf1d19d19ab425e52a26

[33mcommit 19d5fb99bc31c54f733ea1454d75312504d11928[m
Merge: 9848d67bb a8b73616b
Author: James Zern <jzern@google.com>
Date:   Fri Apr 4 15:04:48 2014 -0700

    Merge "Re-enable datarate tests for [1;31mspeed[ms 5 and 6."

[33mcommit a8b73616b37570fb203e81f978a1d54261c625fb[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Apr 4 10:32:13 2014 -0700

    Re-enable datarate tests for [1;31mspeed[ms 5 and 6.
    
    Changed a parameter to make [1;31mspeed[m 5 pass, and
    valgring issue for [1;31mspeed[m 6 fixed: https://code.google.com/p/webm/issues/detail?id=740
    
    Change-Id: I5b804b08069e29df3f08b9ec37f5b80151b4c910

[33mcommit 2536a89a4f6398b9b48e5443f8259b9968ae9da6[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Apr 2 22:44:06 2014 -0700

    Adjust key frame quantization index for rtc coding
    
    This commit slightly increases the bit allocation for key frame. This
    improves [1;31mspeed[m -5 coding performance by 2.77% with aq-mode=0 and by
    2.78% with aq-mode=3.
    
    Change-Id: Iaa3e777f80b9706306606af06e89852bac146659

[33mcommit 36f61aa836665f257f8a2eb0d1af9b9fb9648451[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Apr 2 11:03:27 2014 -0700

    Set min_block_size for aq_mode=3 to 8x8.
    
    For real-time mode under cbr, this increases the gain (5-10%)
    for [1;31mspeed[m 5 (none/little change for 6), on vc-clips.
    
    Change-Id: I9b38beeb3c820de22c43a0ba53a9456168dd24ba

[33mcommit 32eb8c795546015bdd77688d9a63e5e07d5f5f76[m
Merge: 8b8606a73 769cd78ff
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Apr 2 12:22:33 2014 -0700

    Merge "Add [1;31mspeed[m feature for recode tolerance."

[33mcommit 751d002f2fd45d2354d8d6419c940c12a6bf9a44[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Apr 1 12:55:20 2014 -0700

    Adjust rate allocation in non-RD coding mode
    
    This commit reduces the frequency of frames using finer quantizer
    in non-RD coding flow, and slightly tune up the quantizer resolution
    when used. It provides 1.7% compression gains in [1;31mspeed[m -5 at no [1;31mspeed[m
    difference.
    
    Change-Id: I430249a51260a841a0402666e5ec1566e4f7d5a6

[33mcommit 769cd78ff25c8461d37ef9b3e8901395114d9d8e[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Mar 31 16:58:39 2014 +0100

    Add [1;31mspeed[m feature for recode tolerance.
    
    The new tolerance is a little higher than before (especially
    for kf/gf/arf) so this change gives an encode [1;31mspeed[m up
    for some clips up for [1;31mspeed[ms 0-2.
    
    Change-Id: I63f7d6c9cc11c7f58742f41e250dcd3eab1741eb

[33mcommit 939f0e7444374fbd4aca2f11b47ae48fde930562[m
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Apr 1 17:50:14 2014 -0700

    Remove the q division by 3 for first frame.
    
    This code/setting was actually not used (since [1;31mspeed[m features were not set on first frame,
    until a recent change) and should be removed.
    
    In CBR mode, the q value for the first frame can be controlled by setting
    the target size via the parameters rc_buf_initial_sz (and max_intra_size_pct).
    
    Change-Id: I65afc64972b36c449bd5a8c25800e65da5389066

[33mcommit 992c41d2fd7e078855fa7353d1262ef85167d41c[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Mar 28 16:56:14 2014 +0000

    Speed setting correction to max q estimate.
    
    Use a crude correction factor to correct for
    lower compression efficiency at higher encode
    [1;31mspeed[ms when estimating the max Q for the
    clip.
    
    Change-Id: I5ae377647f4adf5e91d700a8791fb3b8f70efc73

[33mcommit 12dd53d06a895a188ac491751e5c21acc12f42e8[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Mon Mar 31 16:54:33 2014 -0700

    Propagate active map state.
    
    This fixes active map for non-rd realtime [1;31mspeed[ms.
    
    Change-Id: I1bf416de3f7ef2e5dd2eabde052cce3c0683a52c

[33mcommit 99893f2410f618b712037db4d3ec60e81aa9de1f[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Mar 28 17:42:45 2014 -0700

    Apply finer quantizer to partition search frames in non-RD flow
    
    This commit optimizes the bit allocation for the non-RD coding flow.
    It applies slightly better quantizer to the frames, where all blocks
    run a non-RD partition search. Such frames typically have better
    rate-distortion trade off, thus improving the reconstruction quality
    for next few frames reference at reasonably low increment in rate
    cost.
    
    The coding performance for rtc set at [1;31mspeed[m -5 with error-resilient
    tuned on and rate control set as cbr is improved by 19.58%. It improved
    the coding [1;31mspeed[m by about 10% for a portion of local test clips.
    
    Change-Id: I9d56696cd4359dc8136ca10aff10fff05aaa2686

[33mcommit 8a099deb60d17d7dd7729398e2194e40c6b4ec45[m
Merge: 1bc32afd3 6fc20a843
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Mar 31 07:08:31 2014 -0700

    Merge "Adjust rt [1;31mspeed[m steps."

[33mcommit 6fc20a8434352793f4ecb09e6369112c92952456[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Mar 26 16:15:00 2014 -0700

    Adjust rt [1;31mspeed[m steps.
    
    This commit adjusted the [1;31mspeed[m steps in rt mode to make the steps
    more evenly spaced on [1;31mspeed[m and quality, specifically:
    1. Merged 3 and 4 into one single step 3 and removed confilicting
    features.
    2. Move 8, 7, 6, 5 to be 7, 6, 5, 4 repsectively.
    
    Change-Id: I38d56d61531f3561d772aef953c411c8fb38c063

[33mcommit 0a6d5547e28ec0e9f92dfdb231704f169b942b2f[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Mar 28 10:30:28 2014 -0700

    Adding vp9_[1;31mspeed[m_features.{h, c}.
    
    Change-Id: I7d9874da8ff78a2d7e0cf11073af9c30538bc9a6

[33mcommit 77e4f85cf1260b43d10735aa35f2ae94387c8091[m
Merge: 800b5718e 01148d454
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Mar 28 06:10:21 2014 -0700

    Merge "Further [1;31mspeed[m trade off adjustments."

[33mcommit 800b5718e84d5f4920c0d755f223cb520d4ccd9c[m
Merge: 41928eedd 32c4fdec7
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Mar 28 06:10:06 2014 -0700

    Merge "Experimental change to [1;31mspeed[m 1 settings."

[33mcommit 4df4b526622b49cee332455752dd76eff773f2fc[m
Merge: 7efe8876b ccdbbe0a2
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Mar 27 20:54:28 2014 -0700

    Merge "vpx_temporal_pattern_encoder: add [1;31mspeed[m setting to command line."

[33mcommit ccdbbe0a2f9af8b74ca98e58f966f0425a02232c[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Mar 27 14:15:37 2014 -0700

    vpx_temporal_pattern_encoder: add [1;31mspeed[m setting to command line.
    
    Change-Id: I0abf4401b37e2f786a958c8eb0fb40640f7fc140

[33mcommit 01148d4548de6b0b8f6f277736580127cf7afe8b[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Mar 24 18:11:47 2014 +0000

    Further [1;31mspeed[m trade off adjustments.
    
    Small [1;31mspeed[m gain for [1;31mspeed[m 1.
    
    Quality is generally a little up for [1;31mspeed[m 2.
    
    Speed 3 was similar to [1;31mspeed[m 4 but now positioned more
    evenly between 2 and 4 [1;31mspeed[m and quality wise.
       (opsnr +5.6% ssim +8.25% across all sets)
    
    Speed 4 is a little slower than before but sizable quality gains.
       (opsnr +3.7% ssim +6.8% across all sets)
    
    The code has been cleaned up a bit so that for each incremental
    [1;31mspeed[m step changes over the previous [1;31mspeed[m step are applied.
    This makes it easier to see what is changing from one setting to
    the next.
    
    Change-Id: I2d98d0d6230af23486adaec01908f58942a7cdeb

[33mcommit 32c4fdec7862657bc3865ca0f2dd151ee0e45646[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Mar 21 16:14:46 2014 +0000

    Experimental change to [1;31mspeed[m 1 settings.
    
    Allow tx search for ARF and GF helps quality but a little slower.
    Setting subpel_iters_per_step to 1 improves encode [1;31mspeed[m.
    Setting sf->mode_skip_start = 10 improves [1;31mspeed[m.
    
    Initial local results suggest overall impact on quality is neutral
    but encode is up to 15% faster.
    
    Change-Id: Ibde02cae6626a44c10a1da0cefe888afbb51f037

[33mcommit abdb0650b41eb635e9c8a26f0712dcf57a013a9a[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Mar 26 13:00:06 2014 -0700

    Motion referenced partition search for non-RD coding flow
    
    This commit enables the non-RD mode decision coding flow to
    adaptively apply partition search in non-refresh frame, when the
    collocated block in previous frame suggests there might be a motion
    activity. It refactors the update_state_rt() function to support
    buffer swap of mode_info struct, thereby unifying the encoding
    stage across various non-RD coding modes.
    
    It provides 5% compression performance gains in [1;31mspeed[m -6 for rtc
    test set, at about 12% [1;31mspeed[m slow down.
    
    Change-Id: Iefa374aed5a11c4b7ff9a3ed36a98ea8bd184edb

[33mcommit 2ec04d1f84aba18359eb28e0f781994aecba3527[m
Merge: 85bf6914c 6eb2cacf0
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Mar 26 09:53:42 2014 -0700

    Merge "Added a [1;31mspeed[m feature "allow_skip_recode""

[33mcommit 6eb2cacf0d24a216c183fd0c5e34cdf98df5d9bd[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Mar 25 14:27:45 2014 -0700

    Added a [1;31mspeed[m feature "allow_skip_recode"
    
    This commit added a [1;31mspeed[m feature to make the logic of calculating
    skip_recode on a block level more explicit. This also enable the
    feature to be enabled at [1;31mspeed[m 5 where the previous logic is too
    conservative, help gain back the lost [1;31mspeed[m for --rt(-5).
    
    Change-Id: Ieb37ca3e85c2e7bda343486edf13d5f5395f2233

[33mcommit 6b6d3886fcd34ceeae44bc326e178643dee6fe70[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Mar 21 11:05:39 2014 -0700

    Enable recursive partition selection for non-RD coding mode
    
    This commit enables a recursive partition type search for non-RD
    mode decisions. It allows the encoder to choose variable block
    sizes in a 64x64 block based on rate-distortion modeling.
    
    It improves [1;31mspeed[m -6 coding efficiency for rtc set by 2.4%. Most
    of the gains come from 32-40dB range, where many sequences gain
    about 5% to 20%. Local tests suggest there is no [1;31mspeed[m change.
    
    Change-Id: I06300016e500a21652812b7b3b081db39a783d66

[33mcommit bcd102c523a79d8a612779ada4a8969343c52d9a[m
Merge: a57de9da0 2e05341ab
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Mar 21 12:13:44 2014 -0700

    Merge "Fix bad [1;31mspeed[m settings interaction."

[33mcommit 49b2330d8b3e8efa39af9195c984ca46d0b761e2[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Mar 19 11:52:13 2014 -0700

    Add prediction mode skipping in non-rd situation
    
    In non-rd pick_mode code, added mode skipping according to
    thresholds. Used rd thresholds now, but we can modified them
    later for real-time case.
    
    RTC set borg test showed a 0.095% PSNR gain. For different rtc
    clips, the real-time([1;31mspeed[m 7) encoder [1;31mspeed[mup is 2% - 10%.
    
    Change-Id: Ic72535c96b891092c662453be32d3168f7e34dcc

[33mcommit 2e05341ab4990f11763fc97361395134822667ee[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Mar 20 15:16:35 2014 +0000

    Fix bad [1;31mspeed[m settings interaction.
    
    The flag x->skip_recode interacts badly with
    the cpi->sf.use_nonrd_pick_mode and
    cpi->sf.skip_encode_sb [1;31mspeed[m settings.
    
    Restricting the use of the skip_decode flag when
    these other [1;31mspeed[m choices are in use helps quality
    for [1;31mspeed[ms 3 and 4 by a large amount with only a
    small impact on [1;31mspeed[m.
    
    Average improvmentes for 2 pass [1;31mspeed[m 4:
    Derf +8.8%
    Yt + 10.53%
    Std-Hd +6.95%
    yt-hd + 22.95%
    
    Change-Id: I8010876d8012042a11077c92e69d813c3dfa58eb

[33mcommit fcdabb105f10c069bf4c671650cff454a9739e61[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Mar 20 17:58:35 2014 -0700

    Disable [1;31mspeed[m 6 for datarate test.
    
    One of the tests for real-time mode is failing at [1;31mspeed[m 6.
    Introduced recently, will enable again when fixed.
    
    Change-Id: I8f42de6a3eca226c9aa5c5e1fab98d629993c087

[33mcommit 60f9ebc3f1119ce2d0a56f8b17b98304a1b5780f[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Mar 19 11:25:40 2014 -0700

    Enable variable block size test in non-RD mode decision
    
    This is an initial attempt to allow variable block size partition
    in non-RD coding flow. It tests 8x8, 16x16 and 32x32 block size per
    64x64 block, all using non-RD mode decision and the associated rate
    distortion costs from modeling, then selects the best block size to
    encode the entire 64x64 block. Such operations are triggered every
    other 3 frames. The blocks of intermediate frames will reuse the
    collocated block's partition type.
    
    It improves the compression performance by 13.2%. Note that the gains
    are not evenly distributed. For many hard clips, the compression
    performance is improved by 20% to 28%. Local [1;31mspeed[m test shows that
    it will also increase runtime by 50%, as compared to [1;31mspeed[m -7. It is
    now enabled in [1;31mspeed[m -6 setting.
    
    Change-Id: Ib4fb8659d21621c9075b3c369ddaa9ecb0a4b204

[33mcommit 0d394299143f8e4606ce689c508a539c53219458[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Mar 13 15:51:36 2014 -0700

    Refactor the non-RD partition decision process
    
    Combine the common variables and functions used by different
    [1;31mspeed[m features.
    
    Change-Id: Ifd1fa86200edbcc9e50b3fc3b1ba8a275bc3c17f

[33mcommit e39ecfaa9843735df3a415cfb9ea6685ea4e1187[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Mar 4 11:15:35 2014 -0800

    Preliminary code for variance based paritioning
    
    Brings back most of Jim's previous patch for choosing
    partitioning based on variance while making it compatible
    with the current state of the code. Also adds a
    nonrd_use_partition() function to recursively encode  for any
    arbitrary sb_type decisions within a 64x64 block; and
    includes some refactoring.
    
    Currently, when the VAR_BASED_PARTITIONING mode is turned on
    for [1;31mspeed[m 7, there is a 10+% [1;31mspeed[m-up observed.
    
    Experiments/improvements with this new partitioning method
    will be conducted subsequently.
    
    Change-Id: Ie6f43bfbde30583e941f450bf07c3b48828c9571

[33mcommit 6f5a1e033fd0f1465fbe874c71d662140eb6610b[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Mar 11 11:13:38 2014 -0700

    Increase redo_frequency to 4 and cleanups
    
    Clean-ups include
    a. redundant code in rt -5 [1;31mspeed[m feature settings
    b. code that guarantees square block availability in
    rd_auto_partition_range()
    
    Change-Id: Ic7b04d45b6dc15c461e0edbbb4e78aec20348291

[33mcommit bead2e8fb455ae770379f9ac1a21553db7765889[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Mar 7 17:15:09 2014 -0800

    Support for a fast diamond search
    
    Adds a fast diamond search which is about 5% faster than FAST_HEX
    with only a 0.1% drop in psnr when turned on for both [1;31mspeed[ms 5 and 7.
    This search is turned on for [1;31mspeed[m 7.
    
    Change-Id: I497630aa88a5148926086bb3038e7975e5f4eb98

[33mcommit d2059b0d2de0d43f1a1938c546e72847215b008c[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Mar 7 14:06:20 2014 -0800

    Skip mode check when mv has been tested
    
    This commit allows the non-RD mode decision to skip mode RD modelling
    check, if the motion vector associated with the current mode is
    same as that of NEARESTMV mode. This makes [1;31mspeed[m -7 about 2% faster.
    Previous change that converts cost metric from SAD to model based RD
    value makes the codec 6% slower at [1;31mspeed[m -7.
    
    Change-Id: I30cfec5452f606a671b8432a2f7f0c94fbb49fc8

[33mcommit 539c961ed4825bace64647e122893a77eeb9a0c4[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Mar 6 18:56:50 2014 -0800

    Use modeled rate distortion costs for non-RD mode
    
    This commit replaces SAD cost with modeled rate-distortion cost
    for non-RD mode decision. It translates the prediction residual
    SSE into estimate rate and reconstruction distorion costs, hence
    capturing the quantization setting effect. The compression
    performance of [1;31mspeed[m -7 for rtc set is improved by 14.79%.
    
    Change-Id: Ifda014eb0501d13109fe7f92680bf1410b463632

[33mcommit 21ba1c9f9531842e4ffcab15f6c0078f3177e096[m
Merge: a7407efbb 9e889d5da
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Mar 6 17:48:38 2014 -0800

    Merge "cpu_[1;31mspeed[m_test - now test one pass and more [1;31mspeed[ms"

[33mcommit 9e889d5da5b1f39ee79dbd4ce748141f9e9ce933[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu Mar 6 14:52:52 2014 -0800

    cpu_[1;31mspeed[m_test - now test one pass and more [1;31mspeed[ms
    
    Change-Id: I736f5753ff42782bbb2a401d2c28cd755fa2f8da

[33mcommit 4fd6ba9da0152a4163fff4ba2ab92d1e25ab1fd2[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Mar 5 13:52:29 2014 -0800

    Adjust some [1;31mspeed[m features for --rt (-5)
    
    Change-Id: Ibabd8440ff5c9dd7f300f317e2c9d50e8e84aab9

[33mcommit 3dfa93b058d5893da9b854be3f4e8a2845d5e1a9[m
Merge: bdb1e7e05 a57cff213
Author: Jingning Han <jingning@google.com>
Date:   Wed Mar 5 16:00:50 2014 -0800

    Merge "Move set_[1;31mspeed[m_feature out of frame encoding"

[33mcommit e337322e632cdbc5a5444e60740ee7b1e560e49c[m
Merge: 9b57e1edd a46f5459c
Author: Andrew Russell <anrussell@google.com>
Date:   Wed Mar 5 14:35:44 2014 -0800

    Merge "improved [1;31mspeed[m of 4x4 sse2 fdct."

[33mcommit a57cff2132e9cff8767c6df9ff05409d399f43ec[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Mar 4 10:24:25 2014 -0800

    Move set_[1;31mspeed[m_feature out of frame encoding
    
    Set [1;31mspeed[m features before running frame encoding. This avoids
    redundant RD threshold calculation in key frame coding.
    
    Change-Id: If8e3cf2c02976baa59b310c1c23af9eea0c46e36

[33mcommit b80020d4db1761cfb312de7236cb27363e7c32cd[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Feb 28 14:29:22 2014 -0800

    Refactoring motion search libs
    
    The core motion estimation fucntions all return sad now consistently.
    The only exception is vp9_full_pixel_diamond(), however the core diamond
    and refining search routines called from vp9_full_pixel_diamond() also
    return SAD. If variance of pred error + mv cost is desired it must be
    calculated explicitly outside these functions. For very fast encoding,
    hopefully this will eliminate some redundant computations.
    
    Also suggests reimplementing FAST_HEX with the vp9_pattern_search
    framework. It is not exactly the same as the existing FAST_HEX, but
    performance is slightly better and [1;31mspeed[m is very similar. Enables
    removing a lot of duplicate code.
    
    Change-Id: I152736393438c25bdf7e96b37cbb8ce330f4f94a

[33mcommit 805078a1bf7c7194da47d5f5e7f9fed5bf734ca3[m
Author: James Zern <jzern@google.com>
Date:   Sun Feb 23 16:33:14 2014 -0800

    build: convert rtcd.sh to perl
    
    significantly [1;31mspeed[ms up file generation.
    
    the goal of this change is to convert rtcd.sh to perl as directly as
    possible to allow for simple comparison. future changes can make it more
    perl-like.
    
    ---
    Linux
        [CREATE] vpx_scale_rtcd.h
    real    0m0.485s ->    0m0.022s
        [CREATE] vp8_rtcd.h
    real    0m4.619s ->    0m0.060s
        [CREATE] vp9_rtcd.h
    real    0m10.102s ->    0m0.087s
    
    Windows
        [CREATE] vpx_scale_rtcd.h
    real    0m8.360s ->    0m0.080s
        [CREATE] vp8_rtcd.h
    real    1m8.083s ->    0m0.160s
        [CREATE] vp9_rtcd.h
    real    2m6.489s ->    0m0.233s
    
    Change-Id: Idfb71188206c91237d6a3c3a81dfe00d103f11ee

[33mcommit a46f5459c3f5da8700e1ed34d4ed0fd4480e6ff3[m
Author: Andrew Russell <anrussell@google.com>
Date:   Mon Mar 3 07:38:02 2014 -0800

    improved [1;31mspeed[m of 4x4 sse2 fdct.
    
    * [1;31mspeed[m improvment of 30 percent achieved
    * multiplies and adds remain the same
    * non-arithmetic instructions minimized by hand, by:
       -expanding 2 pass loop
       -removing irrelivant "shuffles"
       -combining last two rounding steps
    * further improvments may be possible
    
    Change-Id: Idec2c3f52910c48e6a0e0f9aefed5cae31b0b8c0

[33mcommit b247c14c074f4156a3734ca4a1628ef7f3f01b69[m
Merge: 8f850d6e2 9c63e887e
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Mon Mar 3 14:08:24 2014 -0800

    Merge "cost_coefs approximation [1;31mspeed[m up"

[33mcommit 9c63e887e675d2bf5934c82a92f289ed33f0c8a4[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Mon Mar 3 11:49:13 2014 -0800

    cost_coefs approximation [1;31mspeed[m up
    
    This patch adds a new [1;31mspeed[m feature which doesn't do the rather
    expensive entropy context lookup or save to the table,  while
    doing costing.
    
    The [1;31mspeed[m up on desktop36p.y4m is around 10% other clips much less.
    
    On the RTC test set this was + 1% in overall datarate.
    
    Change-Id: Ia5144bbf45270671e7be9c8e4055369909e2f738

[33mcommit dc8a2c07b3701913fc57033c66d9e092649f0bbc[m
Merge: dac630bb2 f872a98b1
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Feb 28 14:17:24 2014 -0800

    Merge "Adds [1;31mspeed[m 8 to vp9 as reference"

[33mcommit f872a98b1bfdd255a55f118fcd57009bcb2b166a[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Feb 27 15:25:46 2014 -0800

    Adds [1;31mspeed[m 8 to vp9 as reference
    
    Adds a [1;31mspeed[m 8 to VP9 where only the nearestmv (0 mv) is searched.
    This seems to be about the same [1;31mspeed[m as vp8 [1;31mspeed[m 5.
    
    Adds a new [1;31mspeed[m feature to disable inter modes based on a mask for
    each blocksize.
    
    Adds code for having lower complexity motion search methods
    in nonrd pick mode function, even though [1;31mspeed[m 7 still uses DIAMOND
    search for now.
    
    Also uses HEX search for [1;31mspeed[m 6 rather than FAST_HEX which improves
    psnr by 0.56% without any noticeable [1;31mspeed[m drop (tested on gipsmotion).
    
    Change-Id: Ic13176572dbd3aed5884a26786940a4b1bbd8a75

[33mcommit bf5e9221d69eddbd77ca336c82a14a05c08e9ab8[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 28 09:15:36 2014 -0800

    Fix potential invalid partition size use
    
    For blocks at frame boundary, the selected block size sometimes needs
    to be smaller than that was first given. This commit forces such block
    size change only between square blocks, so as to avoid the potential
    use case containing 32x16 + 16x8 + 16x8, for 1080p sequences.
    
    Local test suggested no visible coding [1;31mspeed[m difference. Borg test
    reveals no difference in terms of compression performance.
    
    Change-Id: Ie8de87f3c6febc3acf11b4cbfdf2077f9f6def52

[33mcommit 24c7ee78c59eb2237d12658f8ca01ad0862bc444[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 28 09:35:08 2014 -0800

    Skip some mode SAD calculation in non-RD mode
    
    This commit checks if the motion vector associated with the current
    mode has been computed in previous mode tests. If possible, skip the
    redundant reference block generation and SAD calculation in the
    non-RD mode decision process.
    
    For test sequence pedestrian_area 1080p, the runtime goes from
    24261 ms to 23770 ms. This does not change compression performance.
    The [1;31mspeed[m-up is mostly around places with consistent motion.
    
    Change-Id: I97be63c6a2d07c57be26b3c600fbda3803adddda

[33mcommit ed5755445c7624c67236d08b7435e0c72f27f0a4[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Feb 27 12:09:12 2014 -0800

    Turns variance based partitioning on in Speed 7
    
    Improves coding efficiency by about 1%, increases [1;31mspeed[m by
    about 15-20% over exsiting [1;31mspeed[m 7.
    
    Change-Id: Ibf5b9b5a5c8548e863ce19047c42b579aac21d19

[33mcommit e6fd071243f83dab27b9028ee75b3424664eb72a[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Feb 27 09:16:25 2014 -0800

    Enable using fast HEX search in non-rd pick mode
    
    Added fast HEX search while doing non-rd partition picking to
    [1;31mspeed[m up the encoder.
    
    Borg test([1;31mspeed[m 7) on rtc set showed 1.8% overall PSNR loss.
    Encoder [1;31mspeed[mup was 5% - 15% for different rtc clips.
    
    Change-Id: I9c83026eabc70b69fcc747c90369ec60bfa3ca24

[33mcommit 90d13337daa6ab282ef4f2492ab069d440f600f2[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Feb 25 17:22:34 2014 -0800

    Refines variance based partitioning search
    
    Instead of using source variance, this patch uses variance of the
    frame difference between the source and the current frame to make
    fixed size partition decisions. Also disables adjusting partitioning
    if variance based or fixed size partitioning is used.
    
    The latter change improves the [1;31mspeed[m substantially for [1;31mspeed[m 6, so
    that [1;31mspeed[m 7 is now less than 3x the [1;31mspeed[m of [1;31mspeed[m 6. But [1;31mspeed[m
    6 is 48% better in psnr on the rtc set compared to [1;31mspeed[m 7.
    
    As compared to [1;31mspeed[m 5,
    [1;31mspeed[m 6 is -37% in psnr at about 2.5x the [1;31mspeed[m,
    [1;31mspeed[m 7 is -55% in psnr at about 7x the [1;31mspeed[m.
    
    Change-Id: If61d80431d3e04ed304ac05832e773cdb2c0a578

[33mcommit c0e99f84f9c2ff909020a7ce76f60d1f78b56fc7[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Feb 25 16:12:35 2014 -0800

    Use sub-pixel accuracy prediction non-RD mode
    
    This commit builds the actual prediction block in sub-pixel accuracy
    and uses which to calculate SAD for non-RD mode decision. In the trail
    run on pedestrian_area at 1080p, rtc [1;31mspeed[m -7 runtime goes from
    23495 ms -> 25107 ms (7% slower). The compression performance is
    improved by 20.57% for rtc test set.
    
    Change-Id: I438589cd103fe99f1b50c2d1939ac6ca43fa0157

[33mcommit 10bae8251071421618a381f6ca21c835ac893423[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Feb 24 15:21:13 2014 -0800

    Adds variance based fixed size partitioning
    
    Adds a method for determining a fixed size partition based on
    variance of a 64x64 SB. This method is added to rtc [1;31mspeed[m 6.
    Also fixes a bug in rtc_use_partition() and includes some
    refactoring related to partitioning search, and some cosmetics.
    
    Currently compared to [1;31mspeed[m 5, the coding efficiency of [1;31mspeed[m 6
    is -19% and that of [1;31mspeed[m 7 is -55%, in cbr mode.
    
    Change-Id: I057e04125a8b765906bb7d4bf7a36d1e575de7c6

[33mcommit 8cc54d576f64bb78a8d20b9147e09036bfebb2dc[m
Merge: 05e850cb9 5f542408b
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Feb 24 13:35:56 2014 -0800

    Merge "Adds an intermediate [1;31mspeed[m level for rtc"

[33mcommit 5f542408b4a4db8722dab4694512ff5ceab74f68[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Feb 24 12:08:56 2014 -0800

    Adds an intermediate [1;31mspeed[m level for rtc
    
    Moves the existing [1;31mspeed[m 6 to [1;31mspeed[m 7 and adds an
    intermediate level 6 which is roughly in between
    [1;31mspeed[ms 6 and 7 in both [1;31mspeed[m and coding efficiency.
    Also includes some minor fixes/adjustments.
    
    Change-Id: I98befc4d82d750e79fe426c457c4a2571f6b6cc7

[33mcommit 1fc0bde675e74740981b38861b80636c194b0fc9[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Feb 21 14:33:27 2014 -0800

    Refactor selected partition size coding for rtc
    
    This commit makes a refactoring of the rtc_use_partition. It allows
    the encoder to take a preferred block size for non-RD mode decision.
    The boundary blocks are handled such that smaller block sizes that
    fit in the boundary size will be used instread.
    
    In rtc mode, the coding performance of [1;31mspeed[m -6 for pedestrian_1080p
    goes from
    158980 b/f, 38.934 dB, 22721 ms to
    159008 b/f, 40.064 dB, 23721 ms.
    
    For rtc set, the [1;31mspeed[m -6 compression performance is improved by
    26%. Still about 2dB behind [1;31mspeed[m -5 at this point.
    
    Change-Id: If0944f0880eaf1ad340bc325d97cea8d0f9dd53f

[33mcommit d66a63f02b4fe6c4ba310b8dff384c00f3dcd5ce[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Feb 19 15:30:09 2014 -0800

    Enable reduced set of intra modes in rtc coding
    
    This commit enables the use of DC, vertical, and horizontal intra
    prediction mode in rtc non-RD mode decision. When the best cost value
    of inter modes is above a given threshold, the encoder runs the
    above three intra modes and selects the one that has minimum
    prediction residual in terms of SAD.
    
    This together with recent changes on non-RD mode decision and coding
    control improves compression performance of [1;31mspeed[m -6 by
    derf  91%
    yt    61%
    hd    46%
    stdhd 52%
    
    In terms of encoding [1;31mspeed[m, it is about 3 times faster than [1;31mspeed[m -5.
    
    Change-Id: I6b483bfd0307e6482bb22a6676ae4e25a52b1310

[33mcommit abf5b8d5eb5b1214b0d6145f1ac71b4d1231d8ff[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Feb 19 15:11:12 2014 -0800

    Force alt reference frame off in rtc mode
    
    When non-RD coding decision is used in rtc mode, the alt reference
    is not used for inter frame prediction. This commit disabled alt ref
    option whenever [1;31mspeed[m -6 is used.
    
    Change-Id: I0b33ca03661de1db2d9bef1bcbff848cd4c9396f

[33mcommit 360c80cfb95559b3a49fc4624a24dee01e1abb6a[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Feb 14 15:55:49 2014 -0800

    Use fast HEX search in real time mode
    
    In good quality mode motion search, the best matches are normally
    found after searching in a large area. In real time mode, to make
    encoding fast, a center-biased fast HEX search is used, which
    converges quickly most of the time. A 4-point diamond search is
    also carried out as the following refining search, which gives more
    precise results, and maintains good motion search quality.
    
    At [1;31mspeed[m 5, the borg test on rtc set showed an overall PSNR loss of
    0.936%. The encoding [1;31mspeed[m gain is 4% - 5%.
    
    Change-Id: I42cd68bb56a09ca1b86293c99d5f7312225ca7ae

[33mcommit 0876302e4e2b1d83bacdf0395c50ee118cfafef3[m
Merge: 5306eda9d 56835f1bd
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Feb 14 15:53:30 2014 -0800

    Merge "Make cpi->[1;31mspeed[m always positive"

[33mcommit 56835f1bdd0737be67b7b86d472af51aa969d758[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Feb 14 11:15:29 2014 -0800

    Make cpi->[1;31mspeed[m always positive
    
    Minor fix to ensure that positive and negative cpu_used
    values produce the same output.
    
    Change-Id: I9157d05cb9a7c0bd57a4d8a9f268205a825b9b0b

[33mcommit 640885ddb3286276d0b55a975a74fa4d73aad228[m
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Feb 11 08:48:34 2014 -0800

    Datarate test for temporal layers and frame dropper.
    
    Also, removed a TODO and removed [1;31mspeed[m 1 from the tests.
    
    Change-Id: I4e6b114204b6d42d93fd1902a56eb0c459bad135

[33mcommit c30a9cd97dbeee9cdd18527e9571304cb01d0073[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Feb 13 14:50:55 2014 +0000

    Remove some cases for turning off arf.
    
    Flipping arf on and off too often is hurting some clips.
    This change makes no difference for 50-75% of our test
    clips but helps some by a big margin. (eg. std-hd crew
    by 6% and one of the YT and YT-hd clips by 14%)
    
    Average improvements for 2 pass, [1;31mspeed[m 2 (psnr,ssim)
    are as follows:-
    
    derf  0.165%, 0.210%
    yt  1.210%, 1.464%
    yt-hd 1.189%, 1.471%
    std-hd 1.031%, 0.886%
    
    Change-Id: I121fe66cfb4a62d384b23b484a7d648789641969

[33mcommit 507fd5220b50be735c462308778efed9709404a6[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Feb 4 11:09:34 2014 -0800

    Enable encode_breakout in real time encoding
    
    In real time encoding, we enable encode_breakout to make encoding
    fast. A [1;31mspeed[m feature "use_encode_breakout" is defined to set
    encode_breakout thresholds for different [1;31mspeed[ms.
    
    However, currently, static_thresh is an encoder option. The encode_
    breakout can be turned off if user sets static_thresh=0 specifically.
    
    The rtc set borg test result: (need to set --static_thresh=1)
    [1;31mspeed[m -5, psnr loss -3.543%;
    [1;31mspeed[m -4, psnr loss -2.358%;
    [1;31mspeed[m -3, psnr loss -0.771%.
    
    Encoding [1;31mspeed[m test:
    [1;31mspeed[m -5, 11% - 60% [1;31mspeed[mup;
    [1;31mspeed[m -4, 5.5% - 28% [1;31mspeed[mup;
    [1;31mspeed[m -3, 0.8% - 7% [1;31mspeed[mup.
    
    Change-Id: Icde592ffbe77eac7446f872a2e9eb2051733677b

[33mcommit 220e9a932ecab35ecbbdcf29d17d152d5a6a466e[m
Merge: d51ca0db0 734938dc6
Author: Jingning Han <jingning@google.com>
Date:   Tue Feb 11 08:49:35 2014 -0800

    Merge "Use more meaningful names for [1;31mspeed[m features"

[33mcommit 734938dc6b3866136d1ef282b28da6e01bec2dad[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Feb 10 12:03:02 2014 -0800

    Use more meaningful names for [1;31mspeed[m features
    
    Use frame_parameter_update to precisely describe the functionality.
    
    Change-Id: Ia9a55ba8efef7b987e30d949dd00ac716189bdb9

[33mcommit 15fb5510a853a578221e22723a305a928bd5b226[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Feb 7 15:52:41 2014 -0800

    Further one-pass vbr rate control changes
    
    Some parameter changes and fixes on one-pass rate control.
    derfraw300 is now only 10% below 2-pass [1;31mspeed[m 0 rate control.
    
    Change-Id: I1940eef8a5a035dc18e71b880d5e00cabd1f01b9

[33mcommit 855070e2540f84d0260c7910c2464fec833893a4[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Feb 10 11:25:23 2014 -0800

    Merged two similar functions to reduce duplication
    
    Function encode_rtc_frame_internal() and encode_frame_internal() only
    differed by a couple of [1;31mspeed[m features, this commit relocation those
    difference into the setup of [1;31mspeed[m features and merged two functions
    into one to remove duplication.
    
    It also fixed a subtle bug super_fast_rtc was used before it was
    initialized.
    
    Change-Id: I234a5a1d11a4450930e5b4943dbab434208d5030

[33mcommit b2209c334666992bd87a89581ef0b2ed90c0243b[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Feb 5 16:19:11 2014 -0800

    Parameter fixes for one-pass non-cbr mode
    
    Fixes some of the parameters for 1-pass non-cbr mode.
    Also includes some cleanups, inlcuding refactoring of the
    recode_loop options.
    
    Results on derfraw300 improve by about 5-6%, so that the one-pass
    mode is now 13% below the 2-pass mode in [1;31mspeed[m 0.
    
    Change-Id: I844cc2638694c7574f3be00d41d60b23dc1016f0

[33mcommit 0dc535ecbb836a8ebe338a0c67fc0b323d51aca7[m
Merge: 0c7e1a950 084c49ac7
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Feb 4 18:20:57 2014 -0800

    Merge "Adjust [1;31mspeed[m feature for --rt"

[33mcommit 35ee7f5f4bf488f8cb5e931eeb0618f3cb2c7477[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Jan 22 18:00:08 2014 -0800

    One-pass rate control fixes and cleanups
    
    Fixes rate control partially in one-pass non-cbr case to achieve a
    bitrate close to the one desired. Previous version was way off at
    the high bitrate end.
    
    Also includes several one-pass rate control cleanups and refactoring.
    
    On derfraw300, one-pass encoding is now 19% off from two-pass [1;31mspeed[m
    0 encoding, down from 35%.
    
    Change-Id: I6f0dcdb7f8aa85a7e7cd3a3155d4f9d2a4d2f4f4

[33mcommit d1961e6fbfd5642cf2250e17e65d6499d8819e8e[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Feb 3 12:40:18 2014 -0800

    Optimize bilinear sub-pixel filters in ssse3
    
    This patch added ssse3 optimization of bilinear sub-pixel filters.
    The real time encoder was [1;31mspeed[med up by ~1%.
    
    Change-Id: Ie82e98976f411183cb8c61ab8d2ba0276e55a338

[33mcommit 084c49ac7968379e63494e94a53345ac991ee6f9[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Feb 3 17:47:29 2014 -0800

    Adjust [1;31mspeed[m feature for --rt
    
    Moved a few features with low impact on compression form -5 to -4 and
    increased adaptive_rd_thresh for -5.
    
    Change-Id: Ib1b748168cc6ed7684ae4818499f3a536ae76253

[33mcommit 2488cb34bc894cb5f5e0d5afaa85605c60e2f5ab[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Jan 29 15:49:03 2014 -0800

    Optimize bilinear sub-pixel filters in sse2
    
    Using bilinear filters could [1;31mspeed[m up the codec in real-time mode.
    This patch added sse2 optimizations of bilinear filters that
    operate on different-sized blocks.
    
    Tests showed that the real-time encoder was [1;31mspeed[med up by 3%.
    
    Change-Id: If99a7ee4385fcc225c3ee7445d962d5752e57c3f

[33mcommit 903801f1ef7ac8d13d4f57571d048b604e8aaafd[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Dec 27 15:25:54 2013 -0800

    vp9 decoder: row-based multi-threaded loopfilter
    
    Implemented parallel loopfiltering, which uses existing tile-
    decoding threads. Each thread works on one row, and when that row
    is loopfiltered, it moves to next unattended row. To ensure the
    correct filtering order, threads are synchronized and one
    superblock is filtered only if the superblocks it depends on are
    filtered already.
    
    To reduce synchronization overhead and [1;31mspeed[m up the decoder, we use
    nsync > 1 for high resolution.
    
    Performance tests:
    1. on desktop:
    8-tile 4k video using 8 threads, [1;31mspeed[mup: 70% - 80%
    4-tile HD video using 4 threads, [1;31mspeed[mup: ~35%
    2. on mobile device(Nexus 7):
    4-tile 1080p video using 4 threads, [1;31mspeed[mup: 18% - 25%
    4-tile 1080p video using 2 threads, [1;31mspeed[mup: 10% - 15%
    
    Change-Id: If54b4a11960dd706c22d5ad145ad94156031f36a

[33mcommit da6b18622fb56fd923e15fb4d6b84c7056b096d0[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri Jan 31 07:55:19 2014 -0800

    remove confusing compressor_[1;31mspeed[m
    
    use mode instead
    
    Change-Id: I419d7a2dc4b0714ca6ff723c5e824521c150c460

[33mcommit ea8aaf15b55a19f569c328f26cc8d8ad82a9235c[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Jan 29 08:39:39 2014 -0800

    create super fast rtc mode
    
    This patch only works if the video is a width and height that are both
    a multiple of 32..   It sets every partition to 16x16, and does INTRADC
    only on the first frame and ZEROMV on every other frame.   It always does
    does the largest possible transform, and loop filter level is set to 4.
    
    Was ~20% faster than [1;31mspeed[m -5 of vp8
    
    Now 20% slower but adds motion search ( every block ), nearest, near
    and zeromv
    
    The SVC test was changed because - while this realtime mode produces
    bad quality albeit quickly, it isn't obeying all the rules it should
    about which frames are available.
    
    Change-Id: I235c0b22573957986d41497dfb84568ec1dec8c7

[33mcommit d9201cb10915574e7e93e943318818ec6d86b65e[m
Merge: 4aaf4841f 79af18589
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Jan 28 15:12:03 2014 -0800

    Merge "Reintroduce modelling for some [1;31mspeed[ms"

[33mcommit 79af1858911bff4b151e177fc3f59c986d4e1572[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Jan 28 13:51:06 2014 -0800

    Reintroduce modelling for some [1;31mspeed[ms
    
    Change-Id: Ia8fa3961eec34545465018281dc022bc6f73869a

[33mcommit 1fecc5bd2e12d4fd6e82872c43ae2fc3484205dd[m
Merge: af87148a2 a0b9b050b
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Jan 28 10:28:54 2014 -0800

    Merge "Added a [1;31mspeed[m feature"

[33mcommit a0b9b050b845c2ed03f8c6405517ece0ad0e6ed1[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Jan 22 14:57:03 2014 -0800

    Added a [1;31mspeed[m feature
    
    That force the stop of subpel search possibly at full/half/quater pel
    stages
    
    Change-Id: Ie50c500417bd78e1a53e6620bd4c2b85f63d9c67

[33mcommit 4ce8929b9ea29d698840823349d7adfb5cc46689[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu Jan 23 13:24:20 2014 -0800

    Add a method to estimate loop filter level from quantizer and frame type.
    
    Use this method with rt at [1;31mspeed[m -5.
    
    Change-Id: If3bd6fad4c05ddde72131442dad191e4145047e7

[33mcommit 3fa1356994e2309b632d8863957c91f7f0813847[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Jan 21 09:56:43 2014 -0800

    remove complex rd modeling.
    
    The affect on quality was minimal.  Less than .1%, various sets
    yt ( +.15%), derf (-.1%), hd ( -.1% ), std hd(-.15%)...
    
    The affect on [1;31mspeed[m of encode at [1;31mspeed[m -5 was substantial ( ~3% ).
    
    Change-Id: I8903346fbae0c35f5b9ea20f81fdd239ae81247d

[33mcommit 3977e64fc78e4d30bbbceaa0432a86c49a343e2b[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Jan 15 15:30:13 2014 -0800

    don't dummy pack if we won't recode
    
    Avoid packing the bitstream 2 times unless we need to.  For me this
    at [1;31mspeed[m -5 was a 2% [1;31mspeed[m up.
    
    Change-Id: I32205c98f55eedd4ff031ed5fb498c84bdaa855d

[33mcommit da94b9be81bb8bb01d3c78ca41e6bc58f9681585[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Jan 14 15:05:13 2014 -0800

    Save ~30% off tokenize_b
    
    Refactoring for [1;31mspeed[m in the same vein as detokenize_b...
    
    Change-Id: I90779aa46e3b13c22ddce9a42b60e1920ad97142

[33mcommit 5e5d4c0ea72aae6a18af6609ace02d13c12e7253[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Jan 13 10:03:28 2014 -0800

    Enable reference frame masking for rt mode
    
    Reference frame masking helped good quality mode to gain about 5% in
    encoding [1;31mspeed[m, this commit enable it for rt mode to gain the [1;31mspeed[m
    improvement.
    
    In addition, this commit move the [1;31mspeed[m feature setup to a separate
    function.
    
    Change-Id: I015e8f78bbb21dd43ae183b9b9355bea2ccda9c5

[33mcommit 6439aa5a0e5b8cd165280041b08d18da22761f8a[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri Jan 10 11:28:23 2014 -0800

    explain [1;31mspeed[m features
    
    Added comments to explain what the various [1;31mspeed[m features do, and removed
    1 that was clearly unused.
    
    Change-Id: Icd37a536072ddafedbfaefcecbe48979f6d10faf

[33mcommit d66c7486351530662c2c906b55c1c0e89ec6299d[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jan 9 18:01:30 2014 -0800

    Enable skipping reference frame check in rd loop
    
    This commit allows encoder to compare the SAD cost associated with
    the best motion vector predictor, per frame. If one reference frame
    has this cost more than 4 times of the best SAD cost given by other
    reference frames, skip NEARESTMV, NEARMV, ZEROMV mode check of this
    reference frame.
    
    This setting is turned on in [1;31mspeed[m 2 and above. Compression quality
    change in [1;31mspeed[m 2:
    derf  -0.014%
    yt    -0.097%
    hd    -0.023%
    stdhd  0.046%
    
    It reduces the [1;31mspeed[m 2 runtime of test sequences:
    pedestrian_area_1080p 4000 kbps 310763 ms -> 303595 ms
    bluesky_1080p 6000 kbps         259852 ms -> 251920 ms
    
    Change-Id: I7f59cf79503d51836d61d56d50dc5bdf0e502e22

[33mcommit b1d81e19d8c3ea02399280099d634062382186ba[m
Merge: c8e8d3a46 2d381d76d
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jan 9 15:02:24 2014 -0800

    Merge "Simplify set_rt_[1;31mspeed[m_feature()"

[33mcommit 2d381d76d867d70e946b62a82f5f3fcedd25d330[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jan 9 11:50:24 2014 -0800

    Simplify set_rt_[1;31mspeed[m_feature()
    
    1. Made [1;31mspeed[m choices to be progressive
    2. Adjusted rt [1;31mspeed[m settings to achieve better [1;31mspeed[m/quality
    
    Overall, rt-5 gained 2.5% in compression/quality, encoding time of 720p
    niklas clip goes from 137,052ms to 121,874ms
    
    Change-Id: Ia6e7e1e15225395a868a2f1059c3db8e266e1600

[33mcommit ba6ab46cdcb1b3ae977984c9e18b122c72370eb6[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jan 7 14:35:02 2014 -0800

    Optimze inv 16x16 DCT with 10 non-zero coeffs - P1
    
    This commit is the first patch optimizing SSE2 implementation of inverse
    16x16 DCT with <10 non-zero coefficients. It focused on the first 1-D (row)
    transformation. It exploits the fact that only top-left 4x4 block contains
    non-zero coefficients, in a 2-D inverse 16x16 DCT with <10 coeffients.
    
    The average runtime of idct16x16_10 unit is reduced from
    883 cycles -> 779 cycles (12% faster).
    
    For pedestrian_area_1080p 300 frames at 4000 kbps, the [1;31mspeed[m 2 runtime goes
    down from 310651 ms  -> 305910 ms. The decoding [1;31mspeed[m goes up from
    80.37 fps -> 80.87 fps.
    
    Change-Id: Ic6f3ac5a637a76c07ba73ddaafe318a699fea645

[33mcommit 06e4f825af0a2dfe799364a50c19dfa2654437ad[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jan 7 09:53:38 2014 -0800

    Fix an issue in motion vector prediction stage
    
    The previous implementation stops motion vector prediction test when
    the zero motion vector appears for the second time. This commit fixes
    it by simply skipping the second time check on zero mv and continuing
    on to next mv candidate.
    
    It slightly improves stdhd in [1;31mspeed[m 2 by 0.06% on average. Most static
    sequences are not affected. A few hard ones, like jet, ped, and riverbed
    were improved by 0.1 - 0.2%.
    
    Change-Id: Ia8d4e2ffb7136669e8ad1fb24ea6e8fdd6b9a3c1

[33mcommit fdad4fd226f6aeb9107478501537e1c4b6e2f748[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jan 7 10:15:51 2014 -0800

    Remove deprecated variable from rt_[1;31mspeed[m_feature
    
    This resolves a merge error.
    
    Change-Id: Ifb83acc0a08e80c82f7624f9c86f79d3a86cc871

[33mcommit 393a8ccef9384e84490b1c7f940b5f87408e94b4[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jan 6 13:29:16 2014 -0800

    Remove avoid_frame_with_high_error from RD loop
    
    The feature undergoes prior assumption that the recursive partition
    size search from 4x4 to 64x64, hence utilizing information from small
    blocks to determine early termination in large block rate-distortion
    optimization search. The current codebase is now going from top down.
    The previous function might go with not properly initialized values,
    hence removed.
    
    Tested on pedestrian_area_1080p at 4000 kbps running under [1;31mspeed[m 2.
    No visible difference in runtime observed.
    
    Change-Id: I553df415c6191413762db7ae34e8790c71d8118e

[33mcommit 1bb11781e2be1a047e5f38a5cd3d6f5c8d0a107b[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jan 2 15:33:38 2014 -0800

    Rework idct8x8_10 SSE2 implementation
    
    This commit optimizes the SSE2 implmentation of idct8x8_10. It exploits
    the fact that only top-left 4x4 block contains non-zero coefficients,
    and hence reduces the instructions needed.
    
    The runtime of idct8x8_10_sse2 goes down from 216 to 198 CPU cycles,
    estimated by averaging over 100000 runs. For pedestrian_area_1080p 300
    frames coded at 4000kbps, the average decoding [1;31mspeed[m goes up from
    79.3 fps to 79.7 fps.
    
    Change-Id: I6d277bbaa3ec9e1562667906975bae06904cb180

[33mcommit a4ce53f14d25ffea989fc83ee7f039762a142c83[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Dec 20 15:24:22 2013 -0800

    Adaptive motion control on ref and search range
    
    This commit takes a preliminary attempt to refine the motion search
    control. It detects the SAD associated with mv predictor per reference
    frame, and based on which to determine whether the encoder wants to
    reduce the motion search range (if the predicted mv provides fairly
    small SAD), or to skip the current reference frame (if there exists
    another ref frame that gives much smaller SAD cost).
    
    This feature is turned on in the settings of [1;31mspeed[m 1 and above.
    
    In [1;31mspeed[m 1, compression performance changed
    derf  -0.018%
    yt    -0.043%
    hd    -0.045%
    stdhd -0.281%
    
    [1;31mspeed[m-up
    pedestrian_area_1080p at 4000 kbps 100 frames
    199651ms -> 188846ms (5.5% [1;31mspeed[m-up)
    blue_sky_1080p at 6000 kbps
    443531ms -> 415239ms (6.3% [1;31mspeed[m-up)
    
    In [1;31mspeed[m 2, compression performance changed
    derf  -0.026%
    yt    -0.090%
    hd    -0.055%
    stdhd -0.210%
    
    [1;31mspeed[m-up
    pedstrian 113949ms -> 108855ms (4.5% [1;31mspeed[m-up)
    blue_sky  271057ms -> 257322ms (5% [1;31mspeed[m-up)
    
    Change-Id: I1b74ea28278c94fea329d971d706d573983d810d

[33mcommit da9f55c3fbfe10551a91371bd58e479cdeb65aea[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Dec 13 09:59:02 2013 -0800

    Increase disable_filter_search_var_thresh threshold
    
    Increased threshold(t) for interp filter search. This sped up the
    encoder with some PSNR loss.
    
    Borg tests were ran at [1;31mspeed[m 2.
    t = 100, PSNR loss:
    -0.710%(derf); -0.561%(stdhd); -0.647%(youtube)
    [1;31mspeed[mup:
    9%(derf); 3%(stdhd); 5.7%(youtube)
    
    t = 500, PSNR loss:
    -1.687%(derf); -1.665%(stdhd); -1.664%(youtube)
    [1;31mspeed[mup:
    18%(derf); 10%(stdhd); 8%(youtube)
    
    Change-Id: I180e3657c1e156aaa88dc7c437f8bcbd19f5caba

[33mcommit 3b5a90bd868a3469659e4cb78ec37032863cb92d[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Dec 12 17:31:04 2013 -0800

    Enable adaptive pred filter type for sub8x8
    
    This commit enables an adaptive prediction filter type selection
    for sub8x8 block sizes. In [1;31mspeed[m 1, it re-uses the filter type of
    collocated 8x8 block if it is tested in the rate-distortion optimization
    loop, for the sub8x8 blocks. Otherwise, it runs the normal test
    over all the three filter types. In [1;31mspeed[m 2, it re-uses the 8x8
    block's prediction filter type, if available. Otherwise, force it
    to be EIGHTTAP.
    
    Compression and [1;31mspeed[m performance wise:
    [1;31mspeed[m 1
    derf -0.266%
    yt   -0.138%
    
    bus at 2000 kbps: 33766ms -> 30451ms (10% [1;31mspeed[m-up)
    football at 600 kbps: 48173ms -> 43786ms (9% [1;31mspeed[m-up)
    
    [1;31mspeed[m 2
    derf -0.026%
    yt   +0.134%
    
    bus at 2000 kbps: 18973ms -> 17698ms (6% [1;31mspeed[m-up)
    football at 600 kbps: 26748ms -> 25096ms (6% [1;31mspeed[m-up)
    
    Change-Id: I77e097533b969fd3472147225fa79fc98095d342

[33mcommit b295092b8fcac34fd657df45b15fed54ed89b814[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Dec 6 09:16:36 2013 -0800

    Full range motion search for regular block sizes
    
    Add a full range motion search for regular block sizes. This runs
    exhaustive search within the given reference area. This commit further
    optimizes the search process by combining 4 points test into one
    pipeline, which gives 30% [1;31mspeed[m-up as compared to run each individual
    point at a time.
    
    This full range search serves as a best possible motion search reference.
    When replacing the diamond search with full range search, the [1;31mspeed[m 0
    runtime of bus CIF at 2000 kbps goes from 153872ms to 623051ms. The
    compression performance compared to [1;31mspeed[m 0 setting gains 0.585% for
    derf set.
    
    Change-Id: Ieef1225216b0b86b4ac4872fa7fb9e18bf2eabb3

[33mcommit f97d91ab673f57e2fa5a44cbee2e1cdec188c43c[m
Author: Abo Talib Mahfoodh <ab.mahfoodh@gmail.com>
Date:   Tue Nov 26 12:26:43 2013 -0500

    improve vp9_idct32x32_34(x1.472)&1024(x1.032)_add_sse2
    
    vp9_idct32x32_34_add_sse2:
    [1;31mspeed[mup: 1.472
    IDCT32_1D_34 and MULTIPLICATION_AND_ADD_2 are optimized
    based on the fact that Only upper-left 8x8 has
    non-zero values.
    
    vp9_idct32x32_1024_add_sse2:
    [1;31mspeed[mup: 1.032
    
    Tested with: park_joy_420_720p50.y4m
    
    Change-Id: I8670ce547552b48695049de298e2fc46ce28dfbc

[33mcommit ed36720b66ca71438a8e14a41f05e837d030da61[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Nov 21 16:43:37 2013 -0800

    Do vertical loopfiltering in parallel
    
    This patch followed "Add filter_selectively_vert_row2 to enable
    parallel loopfiltering" commit, and added x86 SSE2 optimization
    to do 16-pixel filtering in parallel. For other optimizations
    (neon and dspr2), current 16-pixel functions were done by calling
    8-pixel functions twice, and real 16-pixel functions could be added
    later.
    
    Decoder [1;31mspeed[mup:
    tulip clip:     2% [1;31mspeed[m gain;
    old_town_cross: 1.2% [1;31mspeed[m gain;
    bus:            2% [1;31mspeed[m gain.
    
    Change-Id: I4818a0c72f84b34f5fe678e496cf4a10238574b7

[33mcommit a64a192c90e45aafe77f02c84930a9495ac04c3b[m
Merge: 5576a4e1c 70ffd5d05
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri Nov 22 08:16:17 2013 -0800

    Merge changes Id1698a35,Idcabd0b9
    
    * changes:
      detokenization [1;31mspeed[mups
      Don't write 0's to token_cache

[33mcommit 70ffd5d0558d69f89d92168fcab337ed252df028[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu Nov 21 16:55:22 2013 -0800

    detokenization [1;31mspeed[mups
    
    removed unnecessary ifs and branches ..
    
    Change-Id: Id1698a35292659388f48926791024d1400f2cea9

[33mcommit b5e6d6cccfa2b3b819300f8e35a3e0d51188586f[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Nov 15 11:04:09 2013 -0800

    Add filter_selectively_vert_row2 to enable parallel loopfiltering
    
    Added filter_selectively_vert_row2 to be ready for parallel
    loopfiltering in vertical direction. This change did 2-row
    filtering at a time. If 2 vertically adjacent 8x8 blocks do same
    type of filtering, we can do 16-pixel filtering in parallel.
    
    Next, we need to provide 16-pixel loopfiltering functions in c
    and optimized versions for codec [1;31mspeed[mup.
    
    Change-Id: Idf97bbdd70566e55bd30e1fd25cb8544e33291be

[33mcommit 98de15137e00c31f7e9dbd21f29a9da511967eed[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Tue Nov 19 10:33:32 2013 -0800

    Add 16 wide neon horz loopfilter.
    
    Add support to do 16 pixel horizontal filtering in Neon.
    Nexus devices saw about 0.5% decode [1;31mspeed[m increase.
    
    Change-Id: I2993f6c2d49f31fa74976879eeaa289fd3f4e15d

[33mcommit 60aba6558f48efd1ebe02b400976b8416fa034c5[m
Merge: 69541e1de 8cf352aba
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Nov 19 14:58:44 2013 -0800

    Merge "entropy code [1;31mspeed[mup"

[33mcommit 8cf352abac23e655d5c40df273ab47e2c8395944[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Nov 19 14:31:38 2013 -0800

    entropy code [1;31mspeed[mup
    
    Change-Id: Ic316d3374ff9a2b43897272260947d56765a0fdd

[33mcommit 83eb1975dfa404054bcdeb398f8e2fa02d65dff8[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Sun Nov 17 06:58:08 2013 -0800

    partition context update [1;31mspeed[mup
    
    This removes a lot of operations in setting partition context...
    
    Change-Id: I365e6f5607ece85190cb21443988816dfa510ce3

[33mcommit 64f728caef5d9f019222c6989a9c6df17464dd69[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Nov 12 16:51:15 2013 -0800

    Do horizontal loopfiltering in parallel
    
    This patch followed "Rewrite filter_selectively_horiz for parallel
    loopfiltering" commit, and added x86 SSE2 optimization to do
    16-pixel filtering in parallel. Also, corrected the declaration
    of aligned arrays. For 8-pixel-in-parallel case, improved the
    calculation of the masks and filters. Updated the threshold loading
    since the thresholds were already duplicated. Updated neon C functions
    to call neon loopfilters twice.
    
    Using tulip clip, tests showed it gave a ~1.5% decoder [1;31mspeed[m gain.
    
    Change-Id: Id02638626ac27a4b0e0b09d71792a24c0499bd35
For keyword pass:
[33mcommit b29c48b03c4bff441b0d43ab8c5eab214fd0ab1b[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Mar 6 16:32:20 2015 +0000

    Shorten GF/arf interval in hard scenes.
    
    This patch accounts in the first [1;31mpass[m stats for blocks that
    while not coded as intra, are complex and have an intra error /
    best error ratio below a threshold.
    
    The modification shortens the GF arf interval for a particular
    class of content that contains a lot of blocks matching the
    above criteria. (In one short problem test sequence the average
    interval dropped from about 14-15 to 10-11)
    
    The change results in small net gains in metrics results for the
    Yt(~0.2%) and yt-hd (~0.5%) sets and is approximately neutral
    for the other test sets.
    
    The change is currently shielded by a flag and off by default
    pending verification that it does not cause other regressions
    in tests on a wider YT test set.
    
    Change-Id: I6b803daa6a4ac09a6f428fb3a18be1ecedd974b7

[33mcommit fb31aa09e245bdc24ebee252b5acf4093bc9213b[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Mar 5 17:26:52 2015 -0800

    Modify update golden reference update under aq-mode=3 mode.
    
    For non-SVC 1 [1;31mpass[m CBR: make the GF update interval a multiple of the
    cyclic refresh period, and use encoding stats to prevent GF update at certain times.
    
    Change-Id: I4c44cacc2f70f1d27391a47644837e1eaa065017

[33mcommit 4b546583c4123c82bbcc84fc78efb8dbd2495b9c[m
Merge: 2f06f5087 fed9e1fee
Author: Adrian Grange <agrange@google.com>
Date:   Wed Mar 4 12:49:58 2015 -0800

    Merge "Small rationalization of code in vp9_first_[1;31mpass[m"

[33mcommit fed9e1fee9a7ccf807774b853347d1406afa7e3e[m
Author: Adrian Grange <agrange@google.com>
Date:   Fri Feb 27 15:52:58 2015 -0800

    Small rationalization of code in vp9_first_[1;31mpass[m
    
    Change-Id: I87cc0e038171c60a957298827e312fead500f7fb

[33mcommit f03627347edfc63fc4127af4cc2aa0f41a32fa91[m
Merge: 5e5772960 2ae314fe3
Author: Adrian Grange <agrange@google.com>
Date:   Thu Feb 19 16:36:43 2015 -0800

    Merge "Fix control string in first[1;31mpass[m stats fprintf"

[33mcommit 2ae314fe3a65a1730dddc46bc8b9ab76fe0fdb57[m
Author: Adrian Grange <agrange@google.com>
Date:   Thu Feb 19 15:18:30 2015 -0800

    Fix control string in first[1;31mpass[m stats fprintf
    
    20 items in the control string but only 19 arguments.
    
    Change-Id: I51dab9aa1c58c653b52395005a9cb41f09feb484

[33mcommit f5b3631621273ea687c8564a982e6a2c12b11962[m
Merge: 9a664917b 85a9bc04d
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Feb 3 10:52:02 2015 -0800

    Merge "vp9_dthread: [1;31mpass[m frame counts to decoder functions"

[33mcommit 85a9bc04d4ebe871076cf36c8aac8ab10a967d9c[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Jan 30 10:14:44 2015 -0800

    vp9_dthread: [1;31mpass[m frame counts to decoder functions
    
    The current multi-threaded tile decoder requires that the videoes
    are encoded with frame_parallel_decoding_mode = 1. This requirement
    is not necessary, and is better to be removed. This patch includes
    the first part of the work.
    
    Change-Id: Ic7695fb3cfe13f9022582c9f0edd2aa6e2e36d28

[33mcommit fd354b2e1e4cc662af49d4f535c231c1d8760ef6[m
Merge: 80e729f60 f92c0b168
Author: Adrian Grange <agrange@google.com>
Date:   Mon Feb 2 08:11:14 2015 -0800

    Merge "Abort if first[1;31mpass[m file does not exist"

[33mcommit f92c0b16888dfcc07829dc18c779ec84f69ab5d8[m
Author: Adrian Grange <agrange@google.com>
Date:   Fri Jan 30 10:42:29 2015 -0800

    Abort if first[1;31mpass[m file does not exist
    
    This fixes a crash if the first[1;31mpass[m file does not
    exist when doing a two-[1;31mpass[m encode.
    
    Change-Id: I3a1a95d68d57125c63123d6208af7537f5a689a0

[33mcommit 10d5e09c87aedad11d8bf909223191a3330721b8[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Jan 26 21:35:07 2015 -0800

    Fix issues in 32bit PIC enabled build
    
    This patch was to fix issue 924:
    https://code.google.com/p/webm/issues/detail?id=924
    
    The SECTION_RODATA macro was modified to support macho32 format.
    The sub-pixel functions were modified to [1;31mpass[m in 2 more parameters
    to handle the global offsets for PIC build.
    
    Change-Id: I3bfcd336bcae945edf300bca4ab40376a2628cd4

[33mcommit fd070220ff9bb531acd0ba7c67b84684aad0ef50[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Jan 20 15:23:57 2015 -0800

    Adjust active maxq for GF groups.
    
    Currently disabled by default: enabled using
    #define GROUP_ADAPTIVE_MAXQ
    
    In this patch the active max Q is adjusted for each GF
    group based on the vbr bit allocation and raw first [1;31mpass[m
    group error.
    
    This will tend to give a lower q for easy sections
    and a higher value for very hard sections. As such it is
    expected to improve quality in some of the easier
    sections where quality issues have been reported.
    
    This change tends to hurt overall psnr but help
    average psnr. SSIM also shows a small gain.
    
    Average results for derf, yt, std-hd and yt-hd test sets were
    as follows (%change for average psnr, overal psnr and ssim):-
    
    derf +0.291, - 0.252, -0.021
    yt +6.466, -1.436, +0.552
    std-hd +0.490, +0.014, +0.380
    yt-hd +5.565, - 1.573, +0.099
    
    Change-Id: Icc015499cebbf2a45054a05e8e31f3dfb43f944a

[33mcommit e76eaf05b1a20b906d166b7e8db402a9883c6025[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jan 6 14:14:26 2015 -0800

    vp9_ethread: add parallel loopfilter
    
    1. Added row-based loopfilter in encoder;
    2. Moved common multi-threaded loopfilter functions from decoder
       to common;
    3. Merged multi-threaded loopfilter code, and made encoder/
       decoder call same function to reduce code duplication.
    
    Encoder tests showed that 1% - 2% speedup was seen for good-quality
    2-[1;31mpass[m mode(at speed 3); 1% - 3% speedup using 2 threads and 4% - 6%
    speedup using 4 threads were seen for real-time mode(at speed 7).
    
    Change-Id: I8a4ac51c2ad9bab9fa7b864e90743931c53ec1c4

[33mcommit 31614c7fdb3cc5f303160da20a5ab86b95b43e3b[m
Merge: 1be4267ec 220bc3a01
Author: Minghai Shang <minghai@google.com>
Date:   Fri Jan 16 15:00:20 2015 -0800

    Merge "[two [1;31mpass[m temporal svc]Fix crash issue in transcoder app caused by last fix."

[33mcommit 220bc3a0133fe1964df7e49f718877ca7b887552[m
Author: Minghai Shang <minghai@google.com>
Date:   Thu Jan 15 15:44:11 2015 -0800

    [two [1;31mpass[m temporal svc]Fix crash issue in transcoder app caused by last fix.
    
    Change-Id: I78ecc8ec3fa3ba5f69bb23813e68a5255d0534e1

[33mcommit e94b415c3479129944a69fafbeacf550fb9237b7[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Jan 13 10:07:20 2015 -0800

    Add encoder control for setting color space
    
    This commit adds encoder side control for vp9 to set color space info
    in the output compressed bitstream.
    
    It also amends the "vp9_encoder_params_get_to_decoder" test to verify
    the correct color space information is [1;31mpass[med from the encoder end to
    decoder end.
    
    Change-Id: Ibf5fba2edcb2a8dc37557f6fae5c7816efa52650

[33mcommit afae733eed353056b94188800bc9f4e986324128[m
Merge: bd3dbc588 6b223fcb5
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Jan 14 10:04:15 2015 -0800

    Merge "Enable decoder to [1;31mpass[m through color space info"

[33mcommit a14415d171d83e8427b9fd457e64d8d27c05c462[m
Author: Minghai Shang <minghai@google.com>
Date:   Tue Jan 13 15:39:04 2015 -0800

    [two[1;31mpass[m temporal svc] Fix decoding error on seek.
    
    Don't put small empty frame in front of a key frame. We will
    put key frame flag in webm container if there's a visible key
    frame. But there will be decoding error when we seek to here
    if we put the small empty frame, which will be inter frame,
    in front of it.
    
    Change-Id: Id50c2c1fd31da0405ff6faa7375cc2f49c55402d

[33mcommit 6b223fcb588c865ae6f5abfd3d9de3ba2ae0540f[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Jan 9 13:04:48 2015 -0800

    Enable decoder to [1;31mpass[m through color space info
    
    This commit added a field to vpx_image_t for indicating color space,
    the field is also added to YUV_BUFFER_CONFIG. This allows the color
    space information [1;31mpass[m through the decoder from input stream to the
    output buffer.
    
    The commit also updated compare_img() function with added verification
    of matching color space to ensure the color space information to be
    correctly [1;31mpass[med from encode to decoder in compressed vp9 streams.
    
    Change-Id: I412776ec83defd8a09d76759aeb057b8fa690371

[33mcommit e9b586e21bb899e247346e82bccf5afb42604910[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Dec 17 16:26:30 2014 +0000

    Removal of legacy zbin_extra / zbin_oq_value.
    
    zbin extra / zbin_oq_value was widely [1;31mpass[med around,
    hence removal touches a lot of code.
    
    Change-Id: Idc94359735b60c38a160e4385ae09d5ca8b6b8e5

[33mcommit b6c75c5a8d019bde1b4d654b705f820015fc3ad5[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Dec 11 16:22:03 2014 +0000

    Improve motion detection for low complexity regions.
    
    Where there is very subtle motion, especially when combined
    with low spatial complexity, the codec sometimes fails to quickly
    pick up the ambient motion field.
    
    Once it has been established though the field propagates well using
    Nearest and Near MV.
    
    This patch looks specifically at the case where the Nearest and Near
    have not been established as non zero vectors and in this case
    discounts the cost of searching for a new vector in the rd code.
    
    This will almost certainly have some implications in terms of encode
    speed but it should be possible to mitigate the impact in a subsequent
    using first [1;31mpass[m stats and the local spatial complexity.
    
    Average results for test sets approximately neutral.
    
    Change-Id: I44a29e20f11f7ab10f8c93ffbdc50183d9801524

[33mcommit 3cfed4bf7638101847d7a54b3cc149eafafc7a56[m
Author: James Yu <james.yu@linaro.org>
Date:   Sat Feb 8 01:52:15 2014 +0800

    VP9 common for ARMv8 by using NEON intrinsics 14
    
    Add vp9_idct16x16_add_neon.c
    - vp9_idct16x16_256_add_neon_[1;31mpass[m1
    - vp9_idct16x16_256_add_neon_[1;31mpass[m2
    - vp9_idct16x16_10_add_neon_[1;31mpass[m1
    - vp9_idct16x16_10_add_neon_[1;31mpass[m2
    
    Change-Id: I54d25b54a36f4371760f54e4036693aaea40a5de
    Signed-off-by: James Yu <james.yu@linaro.org>

[33mcommit 4eee74d6ed74a29bfd03c5d79bae2ab157944137[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Dec 9 14:32:48 2014 -0800

    Fix clang ioc warning due to NULL src_mi pointer.
    
    The warning only happens in VP9 encoder's first [1;31mpass[m due to src_mi
    is not set up yet. But it will not fail the encoder as left_mi and
    above_mi are not used in the first_[1;31mpass[m and they will be set up again
    in the second [1;31mpass[m.
    
    Change-Id: I12dffcd5fb1002b2b2dabb083c8726650e4b5f08

[33mcommit 127f65531bc93bfc1267153f557a40d080245466[m
Merge: 0f8e8330e 00e3626e1
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Dec 8 09:01:39 2014 -0800

    Merge "Use average mb energy from first [1;31mpass[m in AQ2 test."

[33mcommit 1fe643cf03f45198e5a033743d7c4dc027b8dfd9[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Dec 4 16:46:06 2014 -0800

    Re-enable 8x8 fdct/fht tests by changing tolerance
    
    Increases tolerance for tests to ensure the fdct tests [1;31mpass[m after
    random number range change.
    
    Change-Id: I5b622099e850f91a14b903d10cf14685f4dd3c2b

[33mcommit 00e3626e13f27112d23b58fedce4bda7395ff793[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Nov 25 14:54:55 2014 +0000

    Use average mb energy from first [1;31mpass[m in AQ2 test.
    
    AQ2 modified to use mb_av_energy in defining variance
    thresholds used alongside complexity when defining the
    segment to be used for an SB64.
    
    Slight improvements in metrics (ssim and PSNR).
    
    Change-Id: Idb9cb73f7d9c4f7118cd7e84ac77b0f25cacbf81

[33mcommit 661802b61d37419da82693bce11b9b0d038967de[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Dec 1 11:06:49 2014 -0800

    Remove default cortex-a8 tuning.
    
    Probably not even the dominant platform the library is being built for.
    Add --cpu= option description to help. The option already exists.
    
    Don't allow [1;31mpass[ming just --cpu as a no-op.
    
    BUG=826
    
    Change-Id: Iaa3f4f693ec78b18927b159b480daafeba0549c0

[33mcommit edbd61e1362978150b5681125d93cb2bffbb5c53[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Nov 21 11:11:06 2014 -0800

    vp9_ethread: modify VP9_COMP structure
    
    This patch modified struct VP9_COMP. Created a struct ThreadData
    to include data that need to be copied for each thread. In
    multiple thread case, one thread processes one tile. all threads
    share one copy of VP9_COMP,
    (refer to VP9_COMP *cpi in the code)
    but each thread has its own copy of ThreadData,
    (refer to ThreadData *td in the code).
    Therefore, within the scope of encode_tiles(), both cpi and td
    need to be [1;31mpass[med as function parameters.
    
    In single thread case, the FRAME_COUNTS pointer in ThreadData
    points to "counts" in VP9_COMMON.
    
    Change-Id: Ib37908b2d8e2c0f4f9c18f38017df5ce60e8b13e

[33mcommit fc47c5d653342084718a70f9e7fdd5e5e267507e[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Nov 20 15:03:01 2014 -0800

    Add adaptive midpoint for AQ1.
    
    Make the midpoint variance used in AQ mode 1 segmentation
    depend on the overall complexity of the frame in two [1;31mpass[m.
    
    Change-Id: I452814ec57f7a32352e41bb250e78066abe952dd

[33mcommit d0312379991b81f2aec5a1fa4a50406ca764cdee[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Nov 7 16:32:50 2014 +0000

    Add variance restriction to AQ2.
    
    Add an additional restriction to bit/complexity based
    segmentation based on spatial variance.
    
    Only lower Q when both the number of bits spent
    in the initial encoding [1;31mpass[m and the spatial complexity are
    below a threshold. This will prevent the low Q segments
    being used just because there is a surfeit of bits.
    
    Small metrics gains especially opsnr.
    derf ~0.2% std-hd ~0.3%
    
    Change-Id: I6a8496d466d673f9b0e2b2ca6304ea7b6d8e1cce

[33mcommit 5e5da2e963c08f8b0e4a5af42b7401ebbc135ae0[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Nov 20 12:22:53 2014 -0800

    Fix bug in calculating number of mbs with scaling.
    
    Correct calculation of number of mbs in two [1;31mpass[m code when
    frame resizing is enabled. Always use initial number of mbs if
    scaling is enabled, as this is what was used in the first [1;31mpass[m.
    
    Change-Id: I49a4280ab5a8b1000efcc157a449a081cbb6d410

[33mcommit 3c715863da0afdc42fb44c9f6d04e983d25a8de7[m
Merge: 550707b9e b660f723b
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Nov 18 11:22:18 2014 -0800

    Merge "Modify active_worst_quality setting for one [1;31mpass[m CBR."

[33mcommit b660f723b4ffe597338e5a6b747f9ce25ebaae8a[m
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Nov 11 11:01:55 2014 -0800

    Modify active_worst_quality setting for one [1;31mpass[m CBR.
    
    Current setting had active_worst_quality set too high (close to worst_quality)
    for first frame(s) following first key frame. This changes that to be somewhat
    more aggressive in allowing active_worst_quality to be lower following key frame.
    
    Also remove the 4/5 reduction in active_worst for key frame as
    this should be set by the user qp_max setting.
    
    Change-Id: I0530b3ddcc85c00e3eb7568de1b14a31206c4a4c

[33mcommit b9c4f9a7db02835a4fe84e9e9e140b33e3563b91[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Nov 12 09:36:49 2014 -0800

    Fix 32 bit build emms problem.
    
    Add extra vp9_clear_system_state() calls to fix
    double / mmx issue introduced into first [1;31mpass[m
    code for 32 bit builds.
    
    Change-Id: I84cd2986b80d83650a091ab25c43755efeb82e03

[33mcommit c7a905ca3d04dceb3dca5e59fefa3e4231acbc8c[m
Merge: 499950547 0ba1542f1
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Nov 11 16:03:11 2014 -0800

    Merge "Vidyo: Support for one-[1;31mpass[m rc-enabled SVC encoder"

[33mcommit 499950547294fd9d5b6fb3b44b35485b91686404[m
Merge: 130c6d745 31b6d7c1e
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Nov 11 09:17:33 2014 -0800

    Merge "AQ1 - remove first [1;31mpass[m weights."

[33mcommit 0ba1542f1242f2b076180aa0a8ebf279941eb520[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Nov 7 11:01:53 2014 -0800

    Vidyo: Support for one-[1;31mpass[m rc-enabled SVC encoder
    
    Adds support for one-[1;31mpass[m rc-enabled SVC encoder with callbacks for
    getting per-layer packets.
    - the callback function registration is implemented as an encoder
    control function.
    - if the callback function is not registered, the old way of
    aggregating packets with superframe will take effect.
    - one more control function “VP9E_GET_SVC_LAYER_ID” has been
    implemented to get the temporal/spatial id from the encoder
    within the callback. This can be used to get the ids to put on RTP
    packet.
    
    Change-Id: I1a90e00135dde65da128b758e6c00b57299a111a

[33mcommit 08d86bc9043f55d86f20f4bab74bc4ca949b3a4c[m
Merge: 98492c109 5e935126a
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Nov 7 09:22:12 2014 -0800

    Merge "Add intra complexity and brightness weight to first [1;31mpass[m."

[33mcommit 31b6d7c1eb6a1527c06bf7d4691460e195c799f2[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Nov 7 14:11:29 2014 +0000

    AQ1 - remove first [1;31mpass[m weights.
    
    Removed redundant weighting function tied for AQ1 from first
    [1;31mpass[m code.
    
    Improvment in baseline AQ1 results:-
    Derf  opsnr +0.142% SSIm +0.258%
    YT  opsnr +0.173% SSIm +0.3%
    
    Change-Id: I16ef91caf2d7f302cd5940cc5e2626d48ebcb212

[33mcommit af3519a3850d971fda76954afd2084a6e830d25c[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Nov 6 19:09:30 2014 -0800

    Change the use of a reserved color space entry
    
    This commit rename a reserved color space entry to BT_2020, it intends
    to provide support for VP9 bitstream to [1;31mpass[m along the color space
    type defined in BT.2020(Rec.2020)
    
    please note this entry does not have any effect on encoding/decoding
    behavior, but allow applications to the [1;31mpass[m the information along
    from encoding end to decoding end.
    
    Change-Id: I4678520e89141ea5e8900f7bd1c0e95b710b7091

[33mcommit 5e935126a66aa9cbb0008310ca05500f3eec8269[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Nov 4 13:13:39 2014 +0000

    Add intra complexity and brightness weight to first [1;31mpass[m.
    
    The aim of this patch is to apply a positive weighting to
    frames that have a significant number of blocks that are
    of low spatial complexity and are dark. The rationale behind
    this is that artifacts tend to be more visible in such frames.
    
    In this patch the weight is only applied in regard to the distribution
    of bits between frames. Hence if all the frames share similar
    characteristics (as is the case for most of our short test clips) there
    will be little or no net effect.
    
    However, the effect can be seen on some longer form test content.
    
    For example Tears of steel baseline test:
    2323.09 Kbit/s opsnr 39.915 ssim 74.729
    With this patch:-
    2213.34 Kbit/s opsnr 39.963 ssim 74.808
    (Sligtly better metrics and about 5% smaller)
    
    The weighting may well need some further tuning along side changes
    to the aq modes.
    
    Change-Id: Ieced379bca03938166ab87b2b97f55d94948904c

[33mcommit 9f9e30d7bf00ca5a2419b9b7e1d1b4443839953f[m
Merge: 825e270d0 86c36a504
Author: Minghai Shang <minghai@google.com>
Date:   Tue Nov 4 15:57:16 2014 -0800

    Merge "[spatial svc] Make spatial svc working for one [1;31mpass[m rate control"

[33mcommit 86c36a504dd7834e934707b86aa81ceb6384154c[m
Author: Minghai Shang <minghai@google.com>
Date:   Tue Nov 4 11:46:48 2014 -0800

    [spatial svc] Make spatial svc working for one [1;31mpass[m rate control
    
    Change-Id: Ibd9114485c3d747f9d148f64f706bf873ea473ac

[33mcommit 9c6ce43df61da5e5c76591bb76224606c871a928[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Tue Nov 4 08:20:25 2014 -0800

    Add some indirection to the quantize test
    
    Visual Studio and XCode require the address of the functions be [1;31mpass[med.
    
    Change-Id: Id39cab8e50061fdc6ac6018371a3a158c713e14b

[33mcommit d6b688375fe10d8fa1b0f6d565013e78f223aad8[m
Author: Marco Paniconi <marpan@google.com>
Date:   Sun Nov 2 22:10:56 2014 -0800

    Allow disable of refresh golden for more than 1 layer encoding.
    
    The current logic was allowing for disabling golden refresh only
    for two [1;31mpass[m svc encoding. This change disables it as long as
    more than 1 layer encoding is used (for example temporal layers under 1[1;31mpass[m CBR).
    
    Change-Id: I4dc5204a7ad365c821ec7963e93b59da82e1826b

[33mcommit 99a8dac4de30c34a8c77646e3bdc5fe1d331a5b4[m
Author: Jacky Chen <jackychen@google.com>
Date:   Sat Oct 25 10:51:51 2014 -0700

    vp9_denoiser_sse2: refactor the code.
    
    Combined vp9_denoiser_8xM_sse2 and vp9_denoiser_4xM_sse2 into one
    function vp9_denoiser_NxM_sse2_small and [1;31mpass[med the bitexact testing.
    Changed the name of the function vp9_denoiser_64_32_16xM_sse2 to
    vp9_denoiser_NxM_sse2_big.
    
    Change-Id: Ib22478df585994dd347ebae04202c0b701e7f451

[33mcommit 01900edc40e30891fd00b4066209a686894dd1c5[m
Merge: fe2fd37bb 01483677e
Author: James Zern <jzern@google.com>
Date:   Fri Oct 24 11:43:51 2014 -0700

    Merge changes I8a9c9019,Ic7b2faa3,I44d42a50,I3f3a3924,I10747b32,I31b49c9e
    
    * changes:
      add vp9_loop_filter_data_reset
      move LFWorkerData allocation to VP9LfSync
      vp9_loop_filter_frame_mt: remove pbi dependency
      vp9_loop_filter_frame_mt: [1;31mpass[m planes directly
      vp9_loop_filter_frame_mt: [1;31mpass[m VP9LfSync directly
      vp9: store TileWorkerData allocations separately

[33mcommit 9c98fb2bab6125a0614576bf7635981163b1cc79[m
Merge: 6202c75f8 f0c3da930
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Oct 20 03:12:06 2014 -0700

    Merge "Alter adjustment of two [1;31mpass[m GF/ARF boost with Q."

[33mcommit f0c3da930aff940592191f70da57267ea536983d[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Oct 16 16:24:25 2014 +0100

    Alter adjustment of two [1;31mpass[m GF/ARF boost with Q.
    
    Delete gfboost_qadjust() and move Q based adjustment
    into calc_frame_boost(). Also remove clamping. Making
    the adjustment here means that it influences not just the
    boost level but also the selection of the GF/ARF interval.
    
    This change gives a small average gain in PSNR but
    larger gains in SSIM, especially for harder std-hd set (1.5%)
    
    Change-Id: I3aa81b8feccaeff93d915e19fb9cf5cd64c86327

[33mcommit e9b8810b4d5c1db78ef07b6061b05d2d62d55eb6[m
Author: James Zern <jzern@google.com>
Date:   Sun Aug 31 13:16:37 2014 -0700

    move LFWorkerData allocation to VP9LfSync
    
    this removes an assumption that worker->data1 would be pointing to a
    TileWorkerData allocation.
    additionally, within the multi-threaded loopfilter [1;31mpass[m VP9LfSync as a
    parameter to the worker hook, removing the need for a shadow pointer in
    LFWorkerData.
    
    Change-Id: Ic7b2faa34e3eb59dbcb8a7c67f333448fa047c88

[33mcommit 69f11d2b9d2d3870378f34a47e0e85bda3435060[m
Author: James Zern <jzern@google.com>
Date:   Sun Aug 31 12:36:34 2014 -0700

    vp9_loop_filter_frame_mt: [1;31mpass[m planes directly
    
    one less dependency on pbi
    
    Change-Id: I3f3a392416d3523f4aea6682c3965885baf85197

[33mcommit eb3fdfba0932bc4f563c71106f7645c1b43d7d39[m
Author: James Zern <jzern@google.com>
Date:   Sun Aug 31 12:21:42 2014 -0700

    vp9_loop_filter_frame_mt: [1;31mpass[m VP9LfSync directly
    
    a step towards removing the pbi dependency
    
    Change-Id: I10747b325e81c172f5e67031ea5159159fc26e91

[33mcommit 2faff64866111fa7257a1188b863f56bb206d09e[m
Merge: 679a1c2f5 0e1068a4b
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Oct 8 04:23:30 2014 -0700

    Merge "Improve two [1;31mpass[m VBR accuracy."

[33mcommit 679a1c2f5a2396413079d3976d8a6e8f8170c72d[m
Merge: 23e8be901 d3bbd87d5
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Oct 8 04:23:20 2014 -0700

    Merge "Two [1;31mpass[m rc changes."

[33mcommit 0e1068a4bdc55c28c7b4f5918056a1f807167f2c[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Sep 26 17:20:01 2014 +0100

    Improve two [1;31mpass[m VBR accuracy.
    
    Adjustments to the GF interval choice and minimum boost.
    Adjustment to the calculation of 2 [1;31mpass[m worst q.
    Compared to 09/29 head there is metrics hit on derf of
    (-0.123%,-0.191%)
    
    Compared to the September 29 head and a baseline on
    September 18 baseline the accuracy of the VBR rate control
    measured on the derf set is as follows:-
    
    Mean error %  / Mean abs(error %)
    Sept 18 baseline (-7.0% / 14.76%)
    Sept 29 head (-15.7%, 19.8%)
    This check in (-1.5% / 14.4%)
    
    The mean undershoot is reduced slightly but the
    worst case overshoot on e.g. harbour/highway is
    increased. This will be addressed in a later patch.
    
    Change-Id: Iffd9b0ab7432a131c98fbaaa82d1e5b40be72b58

[33mcommit bd2a9bdd66a054b49a29972e22a93f4dbe609188[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Tue Sep 30 20:12:56 2014 -0700

    iOS build configuration updates.
    
    Commit message longer than commit edition.
    
    Simulator and devices:
      Add a common minimum iOS version that can be shared by iOS and iOS
      simulator targets.
    
    Fix --enable-debug (for device targets; sim was fine):
      Allow for successful configuration and build with --enable-debug when
      CXX is available by:
    
      - Using CXX as LD (when CXX is available).
      - Passing the correct form of the iOS minimum version parameter based on
        whether LD is CXX or really is ld.
    
      Note: ld -g still won't work on macosx with this patch, so if CXX is not
      available, configuration will still fail reporting that the toolchain
      cannot link executables when attempting to [1;31mpass[m --enable-debug (because
      ld returns an error code since the one included with xcode doesn't
      support the -g argument).
    
    Change-Id: Ia488aed167cc2ca82ee9e980589fb76dddce634f

[33mcommit d3bbd87d5e96ac0b055f74db8662362ae9b98075[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Sep 26 11:11:48 2014 +0100

    Two [1;31mpass[m rc changes.
    
    Adjustments to the GF interval choice and minimum boost.
    
    Change-Id: I29951621484e1ee339adfb73ab430aa65f310ad8

[33mcommit c389b37bb4c6e488a2b562248fd4d5dfddbe783a[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Aug 15 14:49:34 2014 +0100

    Substantial reworking of code for arf and kf groups.
    
    Substantial restructuring of the way we estimate
    the rate of decay in prediction quality and determine
    the arf interval and amount of boost used.
    
    Also other changes to support moving to a lower first [1;31mpass[m
    Q which exposes some new features and allows us to better
    distinguish genuinely static blocks from low motion or noisy
    blocks.
    
    Net gains now visible on all the test sets with std-hd PSNR up
    1.87%. There are still some bad outlier cases but most of these
    are low motion or slide show type content where the metrics
    are already high at any given rate. The best + case is up by
    more than 10%.
    
    Change-Id: I18e25170053bdf3188f493ff8062f48a74515815

[33mcommit 99df7ded952f105153fe3962a1f223bec864a561[m
Merge: aebb361bb cd95543ee
Author: Adrian Grange <agrange@google.com>
Date:   Tue Sep 16 11:37:33 2014 -0700

    Merge "Move call to vp9_rc_get_second_[1;31mpass[m_params()."

[33mcommit cd95543ee4a0d86a72dc1c7b9cbc280c5a60d0b0[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Sep 15 12:45:42 2014 +0100

    Move call to vp9_rc_get_second_[1;31mpass[m_params().
    
    Call to vp9_rc_get_second_[1;31mpass[m_params() moved from
    Pass2Encode() to earlier in vp9_get_compressed_data(),
    to ensure that two [1;31mpass[m stats and parameters are
    available before decisions such as frame scaling.
    
    Change-Id: If21537f0073919b04696a7d5e9aac78e23d76f39

[33mcommit fb754540e9ee885b3156d7963b0febfeec71e3bb[m
Merge: d9050af68 0a0ccf669
Author: Minghai Shang <minghai@google.com>
Date:   Thu Sep 11 10:24:28 2014 -0700

    Merge "[spatial svc]Add golden frame to first [1;31mpass[m rate control"

[33mcommit 0a0ccf669bfc68383f0459e8d2d11392d3440bff[m
Author: Minghai Shang <minghai@google.com>
Date:   Fri Sep 5 16:36:51 2014 -0700

    [spatial svc]Add golden frame to first [1;31mpass[m rate control
    
    Change-Id: If3035f0e7dfcfe88c4bbf4eec66761e070476df0

[33mcommit 4e94dec35278db559168cad97323ec78cb1b8d07[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Wed Sep 10 11:10:29 2014 -0700

    examples/two[1;31mpass[m_encoder: Use good quality.
    
    This speeds up the encode significantly. Also added a comment about using
    best quality to keep new developers informed.
    
    Change-Id: I04e8154d4b2c4cae07fe7cc9a71e707f649e9ed4

[33mcommit 759afe525c1aa79f8d50bc24fff3fa431f30bf0e[m
Merge: 14bcbdac7 be3b08da3
Author: Minghai Shang <minghai@google.com>
Date:   Wed Sep 3 10:51:19 2014 -0700

    Merge "[svc] Temporal svc with two [1;31mpass[m rate control"

[33mcommit be3b08da3e0ee44d7c52fa3aa883b351d969c1cc[m
Author: Minghai Shang <minghai@google.com>
Date:   Tue Sep 2 12:05:14 2014 -0700

    [svc] Temporal svc with two [1;31mpass[m rate control
    
    It's built based on current spatial svc code.
    We only support one spatial two temporal layers at this time.
    Change-Id: I1fdc8584354b910331e626bfae60473b3b701ba1

[33mcommit 04b100b23eaa0c4ab179129be82d52fee9fb256f[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Aug 27 14:06:30 2014 -0700

    Updates vp9_pattern search to return integer sads
    
    Updates the vp9_pattern_search function to return integer one-away
    neighbors' sad values, for subsequent use in speeding up the
    sub-pel search. Also, removes code for the do_refine option
    which is not being used currently.
    Updates the integer and subpel functions to [1;31mpass[m in a 5-element
    sad list for output or input.
    
    A new pruned sub-pel search algorithm is implemented that uses
    the sad returned from the integer pel search. But it is not
    deployed yet.
    
    Change-Id: Ifa9f5ad024b5b660570366d2bd900343e1891520

[33mcommit 95ac8fa74edfaeb74ba400c3a4044c834fd48535[m
Merge: 28eaa5f4d 1e82bdec9
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Aug 26 10:35:54 2014 -0700

    Merge "two[1;31mpass[m_encoder: Flush encoder."

[33mcommit 1e82bdec92ee1020e83b46b2ea64e12d55d1b7a1[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Aug 25 15:29:20 2014 -0700

    two[1;31mpass[m_encoder: Flush encoder.
    
    Change-Id: Ib04a545b43f3a36c6df7eaf3ed2d802cf41119bb

[33mcommit 4269a656fd6c9bf9d72f6cf70d89056c0e236359[m
Merge: 8b2abdeed 393e5d9cf
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Aug 25 14:29:14 2014 -0700

    Merge "two[1;31mpass[m_encoder: Separate functions for first and second [1;31mpass[m."

[33mcommit eba83a0fdb40df3b81193ce44c87a0e0a5e9f44e[m
Merge: aa3334621 a459e582c
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Aug 25 13:56:14 2014 -0700

    Merge "Replacing int_mv with MV inside the first [1;31mpass[m code."

[33mcommit 393e5d9cfcffdf0c036c49c7ecd726dca603b5b9[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Aug 25 12:56:32 2014 -0700

    two[1;31mpass[m_encoder: Separate functions for first and second [1;31mpass[m.
    
    Change-Id: Ic5e3ff5f572ed55d7dd3df8c606e57daacf885dc

[33mcommit a459e582cbecd89310809494c0374486e9d890f9[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Aug 22 16:19:24 2014 -0700

    Replacing int_mv with MV inside the first [1;31mpass[m code.
    
    Change-Id: Ia3be6b5a18e1ff6cc5c5f4d37e4a5d0972388308

[33mcommit 8d363882fda9d5640e794e7df7da07edfbba5fd6[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Aug 22 15:45:11 2014 -0700

    Choosing GOOD mode by default.
    
    This patch fixes slow first [1;31mpass[m problem. Mode could only be determined
    from the deadline value during frame encode call. Unfortunately, we use
    mode value before any encode calls during the first [1;31mpass[m encoding (see
    set_speed_features() logic). The mode for the first [1;31mpass[m must be different
    from BEST to make first [1;31mpass[m fast.
    
    Change-Id: I562a7d32004ff631695d91c09a44d8a9076fd6b5

[33mcommit 215151b78d689d695410bb37ad54ccf6ecb9eb01[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Aug 18 15:06:14 2014 -0700

    Converting MODE to be just BEST, GOOD, and REALTIME.
    
    After that change oxcf->[1;31mpass[m and oxcf->mode become two orthogonal variables.
    
    Change-Id: I1501f83cd2805480e8118135e6d4045fb41e26d5

[33mcommit 0cb31c727084ed32922f92f6d14717ae002d492e[m
Merge: c92cb1ceb b29d51734
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Aug 19 09:58:57 2014 -0700

    Merge "vp9_first[1;31mpass[m.c : remove unused parm in get_zero_motion"

[33mcommit b29d517344d2bee03fd061e54ce7376a2a7cf9d3[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Aug 19 06:39:12 2014 -0700

    vp9_first[1;31mpass[m.c : remove unused parm in get_zero_motion
    
    Change-Id: I803bfc0b26804912ccd088d8a90a0f02fc55eed9

[33mcommit d735cd5e8fb79f1647b739eeb7c339a083a6c866[m
Merge: 4d98b50be b78f8f670
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Aug 19 06:16:13 2014 -0700

    Merge "vp9_first[1;31mpass[m.c : clear warning re: use of null lc"

[33mcommit b78f8f67001353bf0755041194a16d46656a8aa4[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Mon Aug 18 16:44:48 2014 -0700

    vp9_first[1;31mpass[m.c : clear warning re: use of null lc
    
    Change-Id: I80f81f6f4f15766f504c15f8c20258a84bbaa9ac

[33mcommit 17a26eb4437d5d02a2e44c271fe6416eb253c98d[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Aug 18 14:11:59 2014 -0700

    Replacing SVC oxcf->mode check with oxcf->[1;31mpass[m check.
    
    oxcf->[1;31mpass[m is used in all other places in similar contexts.
    
    Change-Id: I9de3a5f24311838d5a6dc3dd470d258cb189ff59

[33mcommit 40e1239521d670ea8916abdd812b4961e9397a60[m
Merge: cfd53a247 a04db185d
Author: Tom Finegan <tomfinegan@google.com>
Date:   Mon Aug 18 10:47:41 2014 -0700

    Merge "vpxenc.sh: Add 2-[1;31mpass[m and lagged encode tests for VP8 and VP9."

[33mcommit a04db185db5cf8c9e692a87e194dda4811c6b1d9[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Fri Aug 15 15:56:58 2014 -0700

    vpxenc.sh: Add 2-[1;31mpass[m and lagged encode tests for VP8 and VP9.
    
    - Fix nit: make test function definitions match test order.
    - Fix nit: use elog instead of echo for env verification error.
    
    Change-Id: I0eec078fc056a5bb2bd88d5833e43de48d77ec08

[33mcommit a3ef7d5a5086b2aa2832ff92b23fa6b6b0664c98[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Fri Aug 8 14:49:55 2014 -0700

    Add VP9 frame-parallel unit test.
    
    Make sure VP9 frame-parallel decode [1;31mpass[mes all the standard
    test vectors. Only test running with 2,3,4 threads now.
    
    Also refactor the video decode test driver to support [1;31mpass[ming
    in decode flags which is used to enable frame-parallel decode.
    
    Change-Id: I6a712464232c2e13681634951c7e176312522e1e

[33mcommit a3dbc8b304d7936eb9b0866be5ac86e507c02520[m
Merge: 9ce4d5378 ea55e4d26
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Aug 13 02:56:19 2014 -0700

    Merge "Minor Two [1;31mpass[m rate control adjustments."

[33mcommit 94fbfb9f1b2ff105b8e8bf053c1493bb1f24629f[m
Merge: f55f68c13 a46351384
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Aug 12 18:06:21 2014 -0700

    Merge "Rework y4mwrite test to [1;31mpass[m google3 tests"

[33mcommit a4635138438c9618071dffa3baa71f363dff12bf[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Aug 11 13:44:27 2014 -0700

    Rework y4mwrite test to [1;31mpass[m google3 tests
    
    Reverts to using tmpfile() for non-Windows platforms. On google3
    the test directory does not have write permissions, and hence the
    Y4mWriteTest fails. This patch fixes the issue.
    On Windows, a temporary file is created in the temp directory
    that has write permissions.
    
    The tests [1;31mpass[m on linux, mingw, and MS visual studio.
    
    Change-Id: Ibada1d80e25d8b8e5b6a9d3d597533674bd9024c

[33mcommit ea55e4d26a68ee00da3c798ab85073ac4144b399[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Jul 25 10:19:19 2014 +0100

    Minor Two [1;31mpass[m rate control adjustments.
    
    Alter way in which we identify static scenes.
    Remove some redundant code.
    
    Change-Id: I883c2ea2e341770648a8663d8881f720ed099b61

[33mcommit 6e5149b68d97ea0bd1f149645da83169bc447e39[m
Merge: a334cb0b7 91c2f1e45
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Aug 8 16:07:47 2014 -0700

    Merge "Moving [1;31mpass[m from VP9_COMP to VP9EncoderConfig."

[33mcommit 8b83d15da345e32925ff1d527db706ac4f32900a[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Thu Aug 7 20:08:28 2014 -0700

    test/vpxenc.sh: Convert vpxenc() to a simple wrapper.
    
    - Split vpxenc() into vpxenc() and vpxenc_pipe().
    - Drop all but one positional param (the input file) in favor
      of [1;31mpass[ming args directly to vpxenc.
    - Add an extra lossless test that explicitly sets min-q and
      max-q to 0.
    
    Change-Id: I7d5f7b495f8b9447388c5f459bc9f6de2214caf2

[33mcommit 91c2f1e45a91cbed855c0708d7fde666601772a9[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Aug 8 14:27:34 2014 -0700

    Moving [1;31mpass[m from VP9_COMP to VP9EncoderConfig.
    
    We had a very complicated way to initialize cpi->[1;31mpass[m from
    cfg->g_[1;31mpass[m:
    switch (cfg->g_[1;31mpass[m) {
      case VPX_RC_ONE_PASS:
        oxcf->mode = ONE_PASS_GOOD;
        break;
      case VPX_RC_FIRST_PASS:
        oxcf->mode = TWO_PASS_FIRST;
        break;
      case VPX_RC_LAST_PASS:
        oxcf->mode = TWO_PASS_SECOND_BEST;
        break;
    }
    
    cpi->[1;31mpass[m = get_[1;31mpass[m(oxcf->mode).
    
    Now [1;31mpass[m is moved to VP9EncoderConfig and initialization is simple:
    switch (cfg->g_[1;31mpass[m) {
      case VPX_RC_ONE_PASS:
        oxcf->[1;31mpass[m = 0;
        break;
      case VPX_RC_FIRST_PASS:
        oxcf->[1;31mpass[m = 1;
        break;
      case VPX_RC_LAST_PASS:
        oxcf->[1;31mpass[m = 2;
        break;
    }
    
    Change-Id: I8f582203a4575f5e39b071598484a8ad2b72e0d9

[33mcommit 74593c1eae3a09bb296829c59826b626810ae12a[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Tue Aug 5 14:39:06 2014 -0700

    Directly split the block in partition search
    
    This patch allows the encoder to directly split the block
    in partition search, therefore skip searching NONE. It
    computes a score which measures whether 16x16 motion vectors
    from the first [1;31mpass[m in the current block are consistent with
    each others. If they are inconsistent and we have enough Q
    to encode, split the block directly, and skip searching NONE.
    
    This feature is under flag CONFIG_FP_MB_STATS. In speed 2,
    it further gives a speedup of 3-8% on sample yt clips as
    compared to the previous version under the same flag. Overall,
    the features under the flag will give 7-15% on typical yt
    clips at up to 6000kbps data rate. The speedup at very high
    data rate is not significant.
    
    For hard stdhd clips:
    park_joy_1080p @ 15000kbps:       504541ms -> 506293ms (-0.35%)
    pedestrian_area_1080p @ 2000kbps: 326610ms -> 290090ms (+11.2%)
    
    The compression performance using the features under the flag:
    derf: -0.068%
    yt:   -0.189%
    hd:   -0.318%
    stdhd:-0.183%
    
    To use the feature, set CONFIG_FP_MB_STATS and turn on
    cpi->use_fp_mb_stats.
    
    Change-Id: Iad58a2966515c8861aa9eb211565b1864048d47f

[33mcommit 5971e8985ba36bcc47969a4934e6df84260e1352[m
Merge: ef1023b78 233e0ccc7
Author: Pengchong Jin <pengchong@google.com>
Date:   Mon Aug 4 17:35:42 2014 -0700

    Merge "Store first [1;31mpass[m motion vector directions"

[33mcommit 233e0ccc73eba5f52ddde366f7adae4cff55c3fd[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Thu Jul 31 09:01:06 2014 -0700

    Store first [1;31mpass[m motion vector directions
    
    Re-organize the one-byte structure for 16x16 first [1;31mpass[m
    block. Add bits to indicate motion vector directions.
    
    Change-Id: Id10754ba343dfc712c7fed5bcc85c67fa0bbcb89

[33mcommit 967c7c0828b476937ae7ddd767095b89dfed01ed[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Mon Aug 4 11:57:33 2014 -0700

    vp9_first[1;31mpass[m.c: fix unused static function
    
    Change-Id: Ia989a01d79f1f02defbeccb1b8eee23fdf5e764e

[33mcommit 06b64c5bc51dfc2f9404ff6c16e335b8fd00fe87[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Wed Jul 30 20:47:55 2014 -0700

    vpxdec.sh: Refactor vpxdec().
    
    - Split vpxdec wrapper function into vpxdec() and vpxdec_pipe().
    - Remove hard coded --noblit and --summary arguments from
      the wrappers in favor of shifting off the first argument (the
      input file) and [1;31mpass[ming all remaining parameters to vpxdec.
    - Add --noblit and --summary args to existing tests, and update the
      pipe input test to use vpxdec_pipe().
    
    Change-Id: Ia390a9990eace793058b3603ada733fb878eb78c

[33mcommit 49866baae60f863d36ca42f40ff4fddd987461cc[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Tue Jul 29 19:49:47 2014 -0700

    Early termination after partition NONE is done in RD.
    
    This patch allows the encoder to skip the search for partition
    SPLIT, HORZ, VERT after the search for partition NONE is done
    in RD optimization. It uses the first [1;31mpass[m block-wise statistics
    to make the decision. If all 16x16 blocks in the current partition
    have zero motions and small residues from the frist [1;31mpass[m statistics,
    and it has small difference variance, further partition search is
    skipped.
    
    For speed 2 setting, experiments on general youtube clips show that
    the speedup varies from 1% - 10%, 5% on average. On the performance
    side in PSNR, derf 0.004%, yt -0.059%, hd -0.106%, stdhd 0.032%.
    
    For hard stdhd clips:
    park_joy_1080p, 502952 ms -> 503307 ms (-0.07%)
    pedestrian_area_1080p, 227049 ms -> 220531 ms (+3%)
    
    This feature is under the compilation flag CONFIG_FP_MB_STATS and
    it is off in current setting.
    
    Change-Id: I554537e9242178263b65ebe14a04f9c221b58bae

[33mcommit 838b53b9fb639917e1566dc1b5d3714d70556e7e[m
Merge: 1aa7a9dd2 649106577
Author: Pengchong Jin <pengchong@google.com>
Date:   Tue Jul 29 14:27:24 2014 -0700

    Merge "Remove the redundant index computation in the first [1;31mpass[m"

[33mcommit 64910657759e305bef9f03599ebc0472ae2d2ff0[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Mon Jul 28 16:04:36 2014 -0700

    Remove the redundant index computation in the first [1;31mpass[m
    
    Remove the redundant index computation when store the first
    [1;31mpass[m block-wise statistics. Currently, a single byte is
    allocated for a 16x16 blocks, and all the frame statistics
    saved during the first [1;31mpass[m will be kept in memory for use
    in the second [1;31mpass[m. For a 1920x1080 300-frame clip, it will
    take about 2.3 MB memory. This feature is off in current
    setting.
    
    Change-Id: I135a95b348ec093d54c6a07e1e8237626909e3bd

[33mcommit c580428928260781d80ada0a39bb7e4b00a5f443[m
Merge: 6865af637 bae652245
Author: Pengchong Jin <pengchong@google.com>
Date:   Mon Jul 28 14:49:05 2014 -0700

    Merge "Store block-wise statistics obtained in the first [1;31mpass[m"

[33mcommit bae652245d46e1b500e5c2ca5c2fd451dab291da[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Fri Jul 25 11:07:44 2014 -0700

    Store block-wise statistics obtained in the first [1;31mpass[m
    
    Change-Id: I9956db2ba2f7d28f484daaf5022d8d1ef5db473c

[33mcommit 929001bf22049cb3ec4679d8919237483128ea0a[m
Author: Minghai Shang <minghai@google.com>
Date:   Wed Jul 23 13:52:34 2014 -0700

    [spatial svc]Fix reference issues
    
    1. Remove last reference flag for first frame upper layers in one [1;31mpass[m mode.
    2. Disable refresh golden frame flag for key frames.
    
    Change-Id: I44ac1bd2c795169e4fbfdd078ea79a1d33a204d6

[33mcommit ac638125eaba75847ea29fbba96d8b43cb1b9fef[m
Merge: 8cb8aef7c e358ab5fc
Author: Pengchong Jin <pengchong@google.com>
Date:   Thu Jul 17 14:24:52 2014 -0700

    Merge "Fixed a bug of setting wrong first [1;31mpass[m mb stats pointer"

[33mcommit e358ab5fc9cda71ea2c74eec0ed130940b9f5b17[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Thu Jul 17 11:54:43 2014 -0700

    Fixed a bug of setting wrong first [1;31mpass[m mb stats pointer
    
    The bug sets the wrong pointer to the first [1;31mpass[m mb stats
    if the encoder does the re-coding in the second [1;31mpass[m.
    
    Change-Id: I8a11f45dd7dceb38de814adec24cecccae370d00

[33mcommit b691230deaa7a771c35a6de2fd75e093ea31ba75[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Jul 16 11:21:27 2014 +0100

    Changes to rd balance and multi-arf bug fix.
    
    2 [1;31mpass[m only change to calculation of rd mult based on Q.
    Make a small adjustment based on frame type and also
    replace adjustment based on iifactor with an one based
    on the ambient GF/ARF boost level.
    
    Also fix multi arf bug / issue.
    
    Overall these change give an slight improvement in ssim
    but hurt psnr a little.
    
    Change-Id: I5e1751e3ff5390a26f543d7855059e6fbcce105e

[33mcommit f349b071c6d5e806552c261ba13bd99bb5f7c6ce[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Mon Jul 14 09:13:38 2014 -0700

    Rewrite functions related to first [1;31mpass[m block stats
    
    Change-Id: I28679f88e2911b06eef5cbc83ecb62b8c69e4c53

[33mcommit 2c04e85d06ea03d49e6b3c8823f33b08ff6396da[m
Merge: 82dc1332a aaabbd67b
Author: Pengchong Jin <pengchong@google.com>
Date:   Wed Jul 2 08:36:22 2014 -0700

    Merge "Store/read 16x16 block statistics obtained from the first [1;31mpass[m"

[33mcommit aaabbd67b240e0dd581902b857fc040c94275190[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Mon Jun 30 09:52:27 2014 -0700

    Store/read 16x16 block statistics obtained from the first [1;31mpass[m
    
    Add a conditional compile flag for this feature. Also add a
    switch to enable the encoder to use these statistics in the
    second [1;31mpass[m. Currently, the switch is turned off.
    
    Change-Id: Ia1c858c35ec90e36f19f5cffe156b97ddaa04922

[33mcommit 12861260732a4fd5f6b667ce9d5105dc9b606eda[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Mon Jun 23 13:00:16 2014 -0700

    Skip the partition search for the frame with no motion
    
    This patch allows the encoder to skip the partition search for the
    frame if it is an inter frame and only zero motion vectors have
    been detected in the first [1;31mpass[m. The partition size is directly
    assigned according to the difference variance.
    
    Borg tests show overall little performance changes in term of PSNR
    (derf -0.027%, yt 0.152%, hd 0.078%, stdhd 0%). The worst case of
    PSNR loss is -0.514% from yt. The best PSNR gain is 4.293% from yt.
    The second [1;31mpass[m encoding speedup for slideshow clips is 15%-40%.
    
    Change-Id: I881f347d286553ee5594a9ea09ba1a61ac684045

[33mcommit b336356198b8ada50fbb59f04f11cefceaf5ff95[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Jun 24 14:22:09 2014 -0700

    Revert "Revert 3 patches from Hangyu to get Chrome to build:"
    
    This patch reverts the previous revert from Jim and also add a
    variable user_priv in the FrameWorker to save the user_priv
    [1;31mpass[med from the application. In the decoder_get_frame function,
    the user_priv will be binded with the img. This change is needed
    or it will fail the unit test added here:
    https://gerrit.chromium.org/gerrit/#/c/70610/
    
    This reverts commit 9be46e4565f553460a1bbbf58d9f99067d3242ce.
    
    Change-Id: I376d9a12ee196faffdf3c792b59e6137c56132c1

[33mcommit e319e4bfa6b54fb66b6fbc90923d0a96fd8900d9[m
Merge: 0a103ae99 6bebe6511
Author: Minghai Shang <minghai@google.com>
Date:   Wed Jun 25 10:31:21 2014 -0700

    Merge "[spatial svc]Don't skip motion search in first [1;31mpass[m encoding"

[33mcommit 6bebe65118b43dde3a170c95e35e047450351368[m
Author: Minghai Shang <minghai@google.com>
Date:   Tue Jun 17 14:58:25 2014 -0700

    [spatial svc]Don't skip motion search in first [1;31mpass[m encoding
    
    Change-Id: Ia6bcdaf5a5b80e68176f60d8d00e9b5cf3f9bfe3

[33mcommit 1eb6e683f26b0ef060d3f78b32cbf5665531c76d[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Fri Jun 13 14:14:02 2014 -0700

    Add superframe support for frame parallel decoding.
    
    A superframe is a bunch of frames that bundled as one frame. It is mostly
    used to combine one or more non-displayable frames and one displayable frame.
    
    For frame parallel decoding, libvpx decoder will only support decoding one
    normal frame or a super frame with superframe index.
    
    If an application [1;31mpass[m a superframe without superframe index or a chunk
    of displayable frames without superframe index to libvpx decoder, libvpx
    will not decode it in frame parallel mode. But libvpx decoder still could
    decode it in serial mode.
    
    Change-Id: I04c9f2c828373d64e880a8c7bcade5307015ce35

[33mcommit bed7cf2eeb26d854412bb24ff30e97ee9375e67e[m
Merge: c19046a79 cdc954fdc
Author: Pengchong Jin <pengchong@google.com>
Date:   Tue Jun 17 12:08:42 2014 -0700

    Merge "skip the un-necessary motion search in the first [1;31mpass[m"

[33mcommit cdc954fdc842c8bba298d8ca523511bd242cbc8c[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Mon Jun 16 09:17:45 2014 -0700

    skip the un-necessary motion search in the first [1;31mpass[m
    
    This patch allows the VP9 encoder to skip the un-necessary
    motion search in the first [1;31mpass[m. It computes the motion error
    of 0,0 motion using the last source frame as the reference,
    and skips the further motion search if this error is small.
    
    Borg test shows overall the patch gives PSNR gain (derf -0.001%,
    yt 0.341%, hd 0.282%). Individual clips may have PSNR gain or
    loss. The best PSNR performance is 7.347% and the worst is -0.662%.
    The first [1;31mpass[m encoding speedup for slideshow clips is over 30%.
    
    Change-Id: I4cac4dbd911f277ee858e161f3ca652c771344fe

[33mcommit feaae409c8c4d76ccbeb06f1eeda331fd1117887[m
Merge: c15390366 af8d4054d
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Jun 13 15:21:26 2014 -0700

    Merge "Revert "skip un-neccessary motion search in the first [1;31mpass[m""

[33mcommit af8d4054d62871fc34e4d23cb78ce27969705ad0[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Jun 13 18:52:19 2014 +0100

    Revert "skip un-neccessary motion search in the first [1;31mpass[m"
    
    This patch appears to have introduced non-determinism and/or
    mismatch from debug vs release.
    
    This reverts commit 5daef90efc4613efd7e7ee80ba4e1ecf9a57a966.
    
    Change-Id: I80081e55cfeaaa821b510b58a4e6e6328003c7da

[33mcommit f9d1e66f6a33aafc0c428f2a8ed7dfe1a632fbff[m
Merge: 686b54adc 5daef90ef
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Jun 12 09:43:47 2014 -0700

    Merge "skip un-neccessary motion search in the first [1;31mpass[m"

[33mcommit 5daef90efc4613efd7e7ee80ba4e1ecf9a57a966[m
Author: Pengchong Jin <pengchong@google.com>
Date:   Tue Jun 3 17:16:00 2014 -0700

    skip un-neccessary motion search in the first [1;31mpass[m
    
    This patch allows the encoder to skip the
    un-neccessary motion search in the first [1;31mpass[m. It
    calculates the error of the zero motion vector using
    the last source frame as reference and skips the
    further motion search in the first [1;31mpass[m if the error
    is small.
    
    The encoding speedup of the first [1;31mpass[m for slideshow
    videos is over 30%. Borg test shows the overall PSNR
    performance remain approximately the same (derf -0.009,
    hd 0.387, yt 0.021, stdhd 0.065). Individual clips may
    have either PSNR gain or loss. The worst PSNR perfomance
    is from yt set, with a PSNR loss of -1.1.
    
    Change-Id: I08b2ab110b695e4689573b2567fa531b6457616e

[33mcommit 686b54adcbdf7691438d368b84fdff6972d84c89[m
Merge: 5d35bc686 6b7477663
Author: Minghai Shang <minghai@google.com>
Date:   Wed Jun 11 18:12:38 2014 -0700

    Merge "[spatial svc]Combine first and second [1;31mpass[m test to keep stats data in memory."

[33mcommit 6b747766358bfbf45d1387858434c45cf602b188[m
Author: Minghai Shang <minghai@google.com>
Date:   Mon Jun 9 13:32:27 2014 -0700

    [spatial svc]Combine first and second [1;31mpass[m test to keep stats data in memory.
    
    Change-Id: Idccbfe35bebe6f05655bd54da7d8b616b1bffe03

[33mcommit 944e3e71b77f3ee3769dccc0e07709a47babd2be[m
Merge: c308b8261 e219622b8
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Jun 6 04:43:15 2014 -0700

    Merge "Fixes qindex for first frame in 1-[1;31mpass[m cq/q modes"

[33mcommit 5f16b7b632f447b3297a262716ce0c007a4437cd[m
Merge: 357495c2d e0f416ce2
Author: James Zern <jzern@google.com>
Date:   Thu Jun 5 20:52:26 2014 -0700

    Merge changes I0e4d807f,Ia5ff575c,Ie4a1f313
    
    * changes:
      gen_msvs_*proj.sh: strip SRC_PATH_BARE from obj names
      *.mk: [1;31mpass[m SRC_PATH_BARE to all GEN_VCPROJ invocations
      build/msvs: fix builds in source dirs with spaces

[33mcommit e219622b80ea29a7f657bcc0e52ca77b2e4dd166[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Jun 5 12:29:44 2014 -0700

    Fixes qindex for first frame in 1-[1;31mpass[m cq/q modes
    
    Produces sane qindex for the first frame in 1-[1;31mpass[m constant and
    constrained qualirty modes.
    
    Change-Id: Ib2a5091df15a23489e9bb5534a2019cf2689755e

[33mcommit bd0bb363bd19113bdfe9d39d1209b7c77b251599[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Jun 3 12:52:49 2014 -0700

    Removing lossless field from VP9EncoderConfig.
    
    Right now there is just one place to check: xd->lossless and for the first
    [1;31mpass[m there is a function is_lossless_requested().
    
    Change-Id: I949a6834e64ce51e422e2892f097f2b871b5429a

[33mcommit ebd4e47aa6e892556ada39ee7dce27b955493f83[m
Merge: 19c492a74 7b3136c8d
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Jun 3 10:05:38 2014 -0700

    Merge "Moving first [1;31mpass[m related functions to vp9_first[1;31mpass[ms.c."

[33mcommit f66590cd7cf07da4346bb51b37316f6cda110920[m
Author: James Zern <jzern@google.com>
Date:   Mon Jun 2 16:42:14 2014 -0700

    *.mk: [1;31mpass[m SRC_PATH_BARE to all GEN_VCPROJ invocations
    
    this will enable stripping of the path from the object file name
    
    Change-Id: Ia5ff575cfa4fe946200878b0aded05832609f316

[33mcommit 8df1b869a28496f4e6d278f14732d4d9d0a42fbc[m
Merge: 5c93c580f f085d128f
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed May 28 02:04:29 2014 -0700

    Merge "Remove brightness weighting in two [1;31mpass[m."

[33mcommit f085d128f7e9d77cf112b49979e5097110e01f76[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri May 23 19:01:43 2014 +0100

    Remove brightness weighting in two [1;31mpass[m.
    
    This code dates from the ancient past and
    applied an error score weighting based on pixel
    brightness. This not seem to be providing any
    benefit metrics wise and could be making some
    visual issues in dark frames worse.
    
    The field is left in place in the FIRSTPASS_STATS data
    structure in this patch, pending changes to unit tests that
    use a pre-defined first [1;31mpass[m file.
    
    Change-Id: Id50f04205230234858e7548ce523f11acaf3567d

[33mcommit debd0485311e455e9aa4394fb0586769704c06b3[m
Merge: 620ce5615 1edbaeb09
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Sun May 25 14:48:36 2014 -0700

    Merge "Further first [1;31mpass[m allocation changes."

[33mcommit 620ce561548eb64178150be94e9c01c0a67b8d4d[m
Merge: 26a76dc3f 03eb06212
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Sun May 25 14:47:35 2014 -0700

    Merge "Re-factor bit allocation in first [1;31mpass[m."

[33mcommit 1edbaeb09da311ad4ef489b5aa104bf8c01a9942[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed May 21 13:17:00 2014 +0100

    Further first [1;31mpass[m allocation changes.
    
    Further changes to first [1;31mpass[m allocation for gf/arf groups.
    Three variables removed from TWO_PASS structure as only
    now used locally. Dont adjust gf_group_bits in the post
    encode update as this will no longer have any effect.
    
    Change-Id: Iff89b225db923fc856f5d2aedbc899f1d7d68b55

[33mcommit 03eb06212ab59c8d02f171740832822d3262e02f[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri May 16 15:12:31 2014 +0100

    Re-factor bit allocation in first [1;31mpass[m.
    
    Restructuring to allocate the bits for each frame in
    a GF group at the time the group is defined.
    
    At the moment the allocation closely mirrors what
    we had before.
    
    Also changes the default rate adjustment method to
    LONG_TERM_VBR_CORRECTION.
    
    Change-Id: Ie5793c46c6b9c888cead5d8790792efd7d60b7c1

[33mcommit 639e16ee00e37dab9f73830a349603c17f97ac8b[m
Merge: 59948cc34 b2be55435
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu May 22 14:49:33 2014 -0700

    Merge "Cleaning up vp9_init_second_[1;31mpass[m()."

[33mcommit b2be554351244e6e37ee81d1042aba4d550460aa[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu May 22 13:04:43 2014 -0700

    Cleaning up vp9_init_second_[1;31mpass[m().
    
    modified_error_total from TWO_PASS struct is not required anymore.
    
    Change-Id: I0e07cac1e6d1b6a78418116be725bcd72bfbd847

[33mcommit 7b3136c8d760b8b086c54d65a16fc0b302ceac3d[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed May 21 12:45:32 2014 -0700

    Moving first [1;31mpass[m related functions to vp9_first[1;31mpass[ms.c.
    
    Change-Id: I7ce717badf098d1dad14cb6677c0f811057f4bb1

[33mcommit 55c52f662672656c919a244de40465a900e75323[m
Merge: 68ec479eb 3b62aa482
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue May 20 18:41:14 2014 -0700

    Merge "Cleaning up vp9_two[1;31mpass[m_postencode_update()."

[33mcommit 3b62aa482535048360162240c1d06e4294ac4f5e[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue May 20 14:44:02 2014 -0700

    Cleaning up vp9_two[1;31mpass[m_postencode_update().
    
    Change-Id: Id79138f2dd472ee95c784b0eb2781d4037c51dd8

[33mcommit a822a2a5663425611b46176eddf2d8e4bb4d7adc[m
Merge: c23c613fd 3181290ee
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon May 19 10:27:47 2014 -0700

    Merge "Removing unused fields from two[1;31mpass[m_rc struct."

[33mcommit f07a96fdc136fbbce4d4ac877e50a758fd03401a[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri May 16 11:31:30 2014 +0100

    Cosmetic clean up.
    
    Use type TWO_PASS instead of "struct two[1;31mpass[m".
    
    Change-Id: I9d92920893bd436537b2ca19e9c9d355cca56c7c

[33mcommit 2fd79c7a372f05cee5538419ae15a3812350fa2a[m
Merge: 4466e83a2 21bb6ddb5
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu May 15 15:20:50 2014 -0700

    Merge "vp9_first[1;31mpass[m.c: clean -wextra warnings"

[33mcommit 21bb6ddb57ed0d9a38a67ed5d68d66ddb29da1d5[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue May 13 09:52:05 2014 -0700

    vp9_first[1;31mpass[m.c: clean -wextra warnings
    
    Change-Id: Ic488fe6edbc119f475763d72a85809499df60106

[33mcommit 3181290ee83613b3a7bf57e8caf48517d4f25346[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu May 15 11:12:45 2014 -0700

    Removing unused fields from two[1;31mpass[m_rc struct.
    
    Change-Id: Iaece070e9d1305ac3d8df9d3431fefa6e20ac0ec

[33mcommit a16794dd31442d08215ac9732c547aec033e58df[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu May 15 08:31:20 2014 -0700

    Revert "Remove Wextra warnings from vp9_sad.c"
    
    This reverts commit 7ab9a9587b96db4edce6be916c1f02297a9555ff
    
    Nightly test http://build.webmproject.org/jenkins/view/libvpx-nightly-tests/job/libvpx%20unit%20tests%20(valgrind-2)/arch=x86_64-linux-gcc,filter=-*VP8*:*Large.*/276/console
    
    Failed
    
    This patch did not address all the assembly issues
    some of the vp8 assembly counts on 5 arguments being [1;31mpass[med in to this function:
    
    one example : vp8_sad8x16_wmt
    
    Please address or split this into vp9 and vp8 patches.
    
    Change-Id: I78afcc171649894f887bb8ee3c66de24aaddc7ca

[33mcommit 0604c0854c4d77b2367da952bd3f3ac15be01213[m
Merge: e6cd696ba 3f96081a1
Author: Jingning Han <jingning@google.com>
Date:   Wed May 14 10:50:11 2014 -0700

    Merge "Tune minq index table for P frames in one_[1;31mpass[m_cbr coding mode"

[33mcommit 8628d3a7ae25331d898d84d208b7d30c6b4a3119[m
Merge: 81bb41faf 6122ca87a
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed May 14 10:08:11 2014 -0700

    Merge "Simplify 2 [1;31mpass[m KF bitrate allocation"

[33mcommit 81bb41fafe86fd33c932cc60c4a0c7bcd6cf1452[m
Merge: 9687c057f d677ea1f8
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed May 14 10:07:51 2014 -0700

    Merge "Further two [1;31mpass[m clean up."

[33mcommit 7f8684437f9b26f2ec38306f2e04bb070d06356b[m
Merge: 576609382 f04e9c4b7
Author: Tom Finegan <tomfinegan@google.com>
Date:   Wed May 14 08:57:29 2014 -0700

    Merge "Add test for the two[1;31mpass[m_encoder example."

[33mcommit 6122ca87a33c0e00d09df4311644226ef72b1d7f[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed May 14 12:06:50 2014 +0100

    Simplify 2 [1;31mpass[m KF bitrate allocation
    
    Simplify the calculation of KF bitrate in similar way
    to previous patch for GF/arf.
    
    This has no impact on derf or std hd sets but gives a
    small net gain of ~0.1% for yt and yt-hd sets.
    
    Change-Id: Ida64ac1428d9c2a62adb67056fadbf0180eff030

[33mcommit d677ea1f81058408b3f40ed59e94fa0ddae313c5[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon May 12 18:07:02 2014 +0100

    Further two [1;31mpass[m clean up.
    
    The variation in boost calculation for gf and arf groups
    is not significant enough to justify the extra complexity.
    Also removed some other spurious code that no longer
    has much material impact.
    
    The handling of the rare case, where the boost bits
    number is less than the number of bits a that would
    be allocated if a frame was not boosted, will be dealt
    with in a subsequent patch.
    
    This change actually helps on all sets a little by
    ~0.1% - 0.2% with slightly bigger gains on SSIM.
    
    Change-Id: Id42c1ac22a80a8c4993cfa0e51bc733eb9ed4f75

[33mcommit 7ab9a9587b96db4edce6be916c1f02297a9555ff[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue May 13 10:11:42 2014 -0700

    Remove Wextra warnings from vp9_sad.c
    
    As a side-effect, the max_sad check is removed from the
    C-implementation of VP8, for consistency with VP9, and to
    ensure that the SAD tests common to VP8/VP9 [1;31mpass[m.
    That will make the VP8 C implementation of sad a little slower
    but given that is rarely used in practice, the impact will be
    minimal.
    
    Change-Id: I7f43089fdea047fbf1862e40c21e4715c30f07ca

[33mcommit 3f96081a15093604f9eca116c9e7a9493db37253[m
Author: Jingning Han <jingning@google.com>
Date:   Mon May 12 10:55:14 2014 -0700

    Tune minq index table for P frames in one_[1;31mpass[m_cbr coding mode
    
    Allow slightly larger minq-maxq range for P frames. This improves
    the compression performance of speed -5 for rtc set by 2.7% in psnr.
    
    Change-Id: I438653d52d0fe51111509c6092e2334bac2de0cf

[33mcommit f04e9c4b711336285757410c86c7315bb17c7112[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Thu May 8 12:05:30 2014 -0700

    Add test for the two[1;31mpass[m_encoder example.
    
    Change-Id: I7b577f2a492e981156f969f8f9e61f9d2156fe60

[33mcommit 702e25839e98c8776e33574288413b8eff41e502[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri May 9 17:32:05 2014 +0100

    Clean up of first[1;31mpass[m.c
    
    Re-factor duplicate code.
    Add two [1;31mpass[m check for use of section_intra_rating as
    it is un-initialised in the 1 [1;31mpass[m and rt case.
    
    Change-Id: I93120796f07961b8a21fb26e1a9f0d3d13949994

[33mcommit 00d54aa331fc060e553c7b4bcf45947f2b96edb0[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri May 9 14:38:38 2014 +0100

    First [1;31mpass[m clean up.
    
    One of a series of changes to clean up two [1;31mpass[m
    allocation as precursor to support for multiple arf
    or boosted frames per GF/ARF group.
    
    This change pulls out the calculation of the total bits
    allocated to a GF/ARF group into a function, to aid
    readability and reduce the line count for define_gf_group().
    
    This change should have no material impact on output.
    
    Change-Id: I716fba08e26f9ddde3257e7d9b188453791883a3

[33mcommit aa3d59fcf9867b00ae7f93219aebd29c9631ce8c[m
Merge: b391b62a7 7811039d4
Author: Frank Galligan <fgalligan@google.com>
Date:   Thu May 8 08:49:04 2014 -0700

    Merge "vp9_first[1;31mpass[m: Fix MSVC data loss warning."

[33mcommit 7811039d476f22276201523b1c8ce8b38824f264[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Wed May 7 18:27:29 2014 -0700

    vp9_first[1;31mpass[m: Fix MSVC data loss warning.
    
    Change-Id: I5307fe85ee081fbcfdf55a974f7eba1e0070c723

[33mcommit 6497f2718fcbda087b6a64d2339356d3dc684f56[m
Merge: 53888035f 307b6c22a
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri May 2 04:03:29 2014 -0700

    Merge "Switch the default 2 [1;31mpass[m vbr variant."

[33mcommit 307b6c22a30b31aa0c8f48f1863e8e0e8bfcb254[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu May 1 12:10:25 2014 +0100

    Switch the default 2 [1;31mpass[m vbr variant.
    
    On balance Deb's  modified rate control for VBR seems
    to be outperforming especially on some low motion YT
    clips so I have switched this to be the default mode for
    now.
    
    Change-Id: I0713d430cad6425ac5c48fccdf332e12814ee44a

[33mcommit 68ff368d19e8de7c7250d4d6d76c1fb6889655ca[m
Author: Vignesh Venkatasubramanian <vigneshv@google.com>
Date:   Fri Apr 18 11:24:02 2014 -0700

    Enable tests using WebM files only if webm_io is enabled
    
    There are a few tests which read/write directly to/from WebM files. They should
    be disabled when --disable-webm-io is [1;31mpass[med.
    
    Change-Id: Ibac4732e27c66da33082151ba6e6993eaa9a1efd

[33mcommit 086ae992356b091f555479d41fe23ec34307620f[m
Author: Adrian Grange <agrange@google.com>
Date:   Wed Apr 23 10:08:31 2014 -0700

    Fixed handling of regularly placed keyframes
    
    The encoder was not handling requests to place keyframes at
    fixed intervals, i.e. kf_min_dist == kf_max_dist, correctly.
    
    In this case when looking to place the next keyframe it was
    accumulating stats all the way up to the end of the first[1;31mpass[m
    file. This patch corrects this behavior.
    
    Change-Id: I948ad9f1d7faa0c05861df588136cce3bb61d7e7

[33mcommit afc5636699cfef287a4693271e210359ea9a4101[m
Merge: 4fa3e9887 1ec44505c
Author: Minghai Shang <minghai@google.com>
Date:   Tue Apr 22 10:59:55 2014 -0700

    Merge "Bug fix for svc first [1;31mpass[m rate control."

[33mcommit 1ec44505c9f37b35f3f4e630b7bc564eca7980d6[m
Author: Minghai Shang <minghai@google.com>
Date:   Fri Apr 18 10:59:15 2014 -0700

    Bug fix for svc first [1;31mpass[m rate control.
    
    1. We didn't scale source image in lower layers so that
    the stats are incorrect.
    2. We didn't extend borders for re-constructed image.
    
    Change-Id: Ia8d7bafbdb695ffa7f504e171f9449812e7bb0a3

[33mcommit 400973c3610e9cd423a475b3a8ad5b4fd110a942[m
Merge: 6b47f8457 219a006b9
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Apr 18 10:38:20 2014 -0700

    Merge "Adding get_[1;31mpass[m() function."

[33mcommit 219a006b9c0d7cc994167d339ac96825cc4eff74[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Apr 17 15:25:20 2014 -0700

    Adding get_[1;31mpass[m() function.
    
    Change-Id: I43de248615b79828d5164b670e7358b8a520d075

[33mcommit e890c2579b740c656b043a09448b2139df1f13f7[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu Apr 17 07:30:55 2014 -0700

    add a context tree structure to encoder
    
    This patch sets up a quad_tree structure (pc_tree) for holding all of
    pick_mode_context data we use at any square block size during encoding
    or picking modes.  That includes contexts for 2 horizontal and 2 vertical
    splits, one none, and pointers to 4 sub pc_tree nodes corresponding
    to split.  It also includes a pointer to the current chosen partitioning.
    
    This replaces code that held an index for every level in the pick
    modes array including:  sb_index, mb_index,
    b_index, ab_index.
    
    These were used as stateful indexes that pointed to the current pick mode
    contexts you had at each level stored in the following arrays
    
    array ab4x4_context[][][],
    sb8x4_context[][][], sb4x8_context[][][], sb8x8_context[][][],
    sb8x16_context[][][], sb16x8_context[][][], mb_context[][], sb32x16[][],
    sb16x32[],  sb32_context[], sb32x64_context[], sb64x32_context[],
    sb64_context
    
    and the partitioning that had been stored in the following:
    b_partitioning, mb_partitioning, sb_partitioning, and sb64_partitioning.
    
    Prior to this patch before doing an encode you had to set the appropriate
    index for your block size ( switch statement),  update it ( up to 3
    lookups for the index array value) and then make your call into a recursive
    function at which point you'd have to call get_context which then
    had to do a switch statement based on the blocksize,  and then up to 3
    lookups based upon the block size to find the context to use.
    
    With the new code the context for the block size is [1;31mpass[med around directly
    avoiding the extraneous switch statements and multi dimensional array
    look ups that were listed above.   At any level in the search all of the
    contexts are local to the pc_tree you are working on (in?).
    
    In addition in most places code that used to call sub functions and
    then check if the block size was 4x4 and index was > 0 and return
    now don't preferring instead to call the right none function on the inside.
    
    
    
    Change-Id: I06e39318269d9af2ce37961b3f95e181b57f5ed9

[33mcommit 68dcddee7f725c4d85a7426c90abee24261feb1b[m
Merge: ef2f6dae6 961594c9c
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Apr 16 19:27:49 2014 -0700

    Merge "Cleaning up vp9_init_second_[1;31mpass[m()."

[33mcommit 961594c9c5a32ef6241abef8f4d784cce120ea7c[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Apr 16 15:17:53 2014 -0700

    Cleaning up vp9_init_second_[1;31mpass[m().
    
    Change-Id: Ibf360fe0728e07de448e77e3841c49eb25d3ba2d

[33mcommit 6fe75c6397cac4530bbbb64a27d5c6b8f7430a1e[m
Merge: 99983859f c3de569bb
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Apr 15 14:57:33 2014 -0700

    Merge "Cleaning up vp9_two[1;31mpass[m_worst_quality()."

[33mcommit c3de569bb9f3a8cc22d104ce784223b7835d76e7[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Apr 9 21:06:11 2014 -0700

    Cleaning up vp9_two[1;31mpass[m_worst_quality().
    
    Change-Id: Ie144e9ece57f2d59c230704a2f166bda1042adeb

[33mcommit 4f95a7fe3ef8e786dbb6c9c1dc3240da24538f92[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Apr 9 11:37:27 2014 -0700

    Fix the setting of mode_skip_mask
    
    In mode selection loop, once mode_index [1;31mpass[m mode_skip_start, all
    modes with a different reference frame from current best mode are
    masked out using mode_skip_mask.
    
    However, the setting of mode_skip_mask may use an invalid mode if
    there is no mode tested yet. This commit fixes the issue by making
    sure a mode has been tested and selected. Otherwise, no mode will be
    masked out because of their reference frame.
    
    Change-Id: Ib0009e8a96836a65cf5347440fff8a2e1a67f29f

[33mcommit 755433927c0140db27568868d2d2fe9e95d0791f[m
Merge: c800e3c81 231ef057c
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Apr 8 18:22:34 2014 -0700

    Merge "Cleaning up vp9_first[1;31mpass[m.c"

[33mcommit 231ef057c47caad6490204b140d724f5b937393e[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Apr 8 15:21:30 2014 -0700

    Cleaning up vp9_first[1;31mpass[m.c
    
    Change-Id: Ie5723690f7c0bfa29a7ccef5da0c6c6326600ee6

[33mcommit 2914bcfd9b95f04f51ac124316ccfdac2714b699[m
Merge: 6769143ce ded9e1914
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Apr 8 07:13:49 2014 -0700

    Merge "vp9_first[1;31mpass[m: Get rid of magic number in bits per MB calculation"

[33mcommit ded9e191445c599f4fcc5d75ccf26a8b4c33532e[m
Author: Guillaume Martres <gmartres@google.com>
Date:   Sat Apr 5 21:57:14 2014 +0200

    vp9_first[1;31mpass[m: Get rid of magic number in bits per MB calculation
    
    Change-Id: Ib3886cb7cafc211581f4f9e7f76782d9d1984434

[33mcommit a8b73616b37570fb203e81f978a1d54261c625fb[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Apr 4 10:32:13 2014 -0700

    Re-enable datarate tests for speeds 5 and 6.
    
    Changed a parameter to make speed 5 [1;31mpass[m, and
    valgring issue for speed 6 fixed: https://code.google.com/p/webm/issues/detail?id=740
    
    Change-Id: I5b804b08069e29df3f08b9ec37f5b80151b4c910

[33mcommit 97f4fb7b5f1eb76d879601f469057f52a87b9f9c[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Apr 1 17:31:59 2014 -0700

    Rate ctrl changes to track target bitrates closer
    
    Turns off the DISABLE_RC_LONG_TERM_MEM macro and makes other changes
    in the way the bits are updated, to make 2-[1;31mpass[m rate control track
    target bitrates closer.
    
    Change-Id: I5f3be4b11c2908e6a9a9a1dd4fcf4e65531c44d8

[33mcommit ab961ad01b4652fcca6ada68edf80d3dc5f0fbd4[m
Merge: 074bbfa55 9ee6087f3
Author: Minghai Shang <minghai@google.com>
Date:   Fri Mar 28 15:58:23 2014 -0700

    Merge "[svc] Finalize first version of 2nd [1;31mpass[m rc"

[33mcommit 074bbfa555f1c8fe700fb6a5858eb04fcb2de20a[m
Merge: 9e46dcd2f 5cf036336
Author: Minghai Shang <minghai@google.com>
Date:   Fri Mar 28 14:34:38 2014 -0700

    Merge "[svc] Initialization of 2nd [1;31mpass[m rc for svc two [1;31mpass[m rc"

[33mcommit 9ee6087f34db386ae40cdf4bc5e41120cb8075a6[m
Author: Minghai Shang <minghai@google.com>
Date:   Thu Mar 27 16:59:44 2014 -0700

    [svc] Finalize first version of 2nd [1;31mpass[m rc
    
    Change-Id: I366850015004644c4fc7feabe27a782fdd8d8718

[33mcommit 5cf036336830b564abf129d6f69a46d56cf8ae03[m
Author: Minghai Shang <minghai@google.com>
Date:   Thu Mar 27 15:46:32 2014 -0700

    [svc] Initialization of 2nd [1;31mpass[m rc for svc two [1;31mpass[m rc
    
    Change-Id: If67ed8721f258883e41bab18f5c456505de68785

[33mcommit e27bcc2451855d08bf2b86028de9e090ee513929[m
Merge: 4a42047b4 6b2e40612
Author: Minghai Shang <minghai@google.com>
Date:   Thu Mar 27 15:06:42 2014 -0700

    Merge "[svc] Verify and store input two [1;31mpass[m stats data in 2nd [1;31mpass[m rc"

[33mcommit 6b2e4061235f39978ec186afad0534330e049858[m
Author: Minghai Shang <minghai@google.com>
Date:   Thu Mar 27 13:43:20 2014 -0700

    [svc] Verify and store input two [1;31mpass[m stats data in 2nd [1;31mpass[m rc
    
    Change-Id: Ib09eedc17ea0ea2eec75d78112e4786d98f382aa

[33mcommit de8fd6f48addd94034cdfd9170bdfe52d9481e30[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Mar 25 12:33:22 2014 -0700

    Removed redundant settings
    
    The recode_loop feature is disabled for one-[1;31mpass[m always.
    
    Change-Id: I6de8820add4a6f97196874af83a970f9898f842d

[33mcommit 2e05341ab4990f11763fc97361395134822667ee[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Mar 20 15:16:35 2014 +0000

    Fix bad speed settings interaction.
    
    The flag x->skip_recode interacts badly with
    the cpi->sf.use_nonrd_pick_mode and
    cpi->sf.skip_encode_sb speed settings.
    
    Restricting the use of the skip_decode flag when
    these other speed choices are in use helps quality
    for speeds 3 and 4 by a large amount with only a
    small impact on speed.
    
    Average improvmentes for 2 [1;31mpass[m speed 4:
    Derf +8.8%
    Yt + 10.53%
    Std-Hd +6.95%
    yt-hd + 22.95%
    
    Change-Id: I8010876d8012042a11077c92e69d813c3dfa58eb

[33mcommit 03d75182f7d345b54ceec3ac32df887af8a02d82[m
Merge: 03781ff22 d20533506
Author: Minghai Shang <minghai@google.com>
Date:   Thu Mar 20 15:12:14 2014 -0700

    Merge "[svc] Finalize spatial svc first [1;31mpass[m rate control"

[33mcommit d205335060940b527639a69a2ea15eaaf263a821[m
Author: Minghai Shang <minghai@google.com>
Date:   Wed Mar 19 11:06:20 2014 -0700

    [svc] Finalize spatial svc first [1;31mpass[m rate control
    
          1. Save stats for each spatial layer
          2. Add frame buffer management for svc first [1;31mpass[m rc
          3. Set default spatial layer to 1
          4. Flush encoder at the end of stream in test app
    This only supports spatial svc.
    Change-Id: Ia89cfa87bb6394e6c0405b921d86c426d0a0c9ae

[33mcommit d3df2086c90dfad39d610cf01fda08e1e293dab6[m
Merge: 2e84633d0 645cb98e9
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Mar 18 13:10:10 2014 -0700

    Merge "Cleaning up calc_active_worst_quality_one_[1;31mpass[m_vbr()."

[33mcommit 645cb98e9045733f87ea59b411377bc8a9c68ab8[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Mar 18 10:41:22 2014 -0700

    Cleaning up calc_active_worst_quality_one_[1;31mpass[m_vbr().
    
    Change-Id: Ibfccee5e35c235c02843e1c1fbd3c39034619cf5

[33mcommit 4435c1e240b902cb50ae2ab109ef6a54c6462ea9[m
Merge: 1a935e69e c2d7f5e3c
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Mar 12 00:21:06 2014 -0700

    Merge "Cleaning up vp9_first[1;31mpass[m.c."

[33mcommit c2d7f5e3c54b6bc33e0532227bfc426ca2f3975d[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Mar 10 18:03:05 2014 -0700

    Cleaning up vp9_first[1;31mpass[m.c.
    
    Change-Id: Ie68eefddf9b0120021668cf21dc2c6fc837c50ac

[33mcommit 274050714265729578bc48130dfdbd568299d061[m
Merge: 6849cde89 b0c146eea
Author: Minghai Shang <minghai@google.com>
Date:   Fri Mar 7 14:02:35 2014 -0800

    Merge "[svc] 1. Add two [1;31mpass[m RC options in vp9_spatial_scalable_encoder.       2. Add read/write for RC stats file The two [1;31mpass[m RC for svc does not work yet. This is just the first step. We need further development to make it working. Change-Id: I8ef0e177dff0b5ed3c97a916beea5123717cc6f2"

[33mcommit 21ba1c9f9531842e4ffcab15f6c0078f3177e096[m
Merge: a7407efbb 9e889d5da
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Mar 6 17:48:38 2014 -0800

    Merge "cpu_speed_test - now test one [1;31mpass[m and more speeds"

[33mcommit 9e889d5da5b1f39ee79dbd4ce748141f9e9ce933[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu Mar 6 14:52:52 2014 -0800

    cpu_speed_test - now test one [1;31mpass[m and more speeds
    
    Change-Id: I736f5753ff42782bbb2a401d2c28cd755fa2f8da

[33mcommit 8ed6277f53787f167985a691ed6800eda86b13c8[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Wed Mar 5 15:18:23 2014 -0800

    configure: Use "cat -n" instead of "pr -n -t"
    
    Configuration logging is [1;31mpass[med through pr, but nothing configure
    does actually requires pr. Use cat instead.
    
    Change-Id: I451217882a329c2bfb8942ac86ac624a7feef670

[33mcommit a46f5459c3f5da8700e1ed34d4ed0fd4480e6ff3[m
Author: Andrew Russell <anrussell@google.com>
Date:   Mon Mar 3 07:38:02 2014 -0800

    improved speed of 4x4 sse2 fdct.
    
    * speed improvment of 30 percent achieved
    * multiplies and adds remain the same
    * non-arithmetic instructions minimized by hand, by:
       -expanding 2 [1;31mpass[m loop
       -removing irrelivant "shuffles"
       -combining last two rounding steps
    * further improvments may be possible
    
    Change-Id: Idec2c3f52910c48e6a0e0f9aefed5cae31b0b8c0

[33mcommit 5ee16cc075dea7ed8b36e013adbeca7a84125ee3[m
Merge: 9f17ff452 673621c8b
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Mar 3 06:53:35 2014 -0800

    Merge "vp9_first[1;31mpass[m.c: remove unused functions & params"

[33mcommit 9f17ff452bd4d27d7a080ffae25291383381cc2c[m
Merge: b12f5fc74 1cd34d3f3
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Mar 3 01:03:21 2014 -0800

    Merge "Sorting includes in vp9_first[1;31mpass[m.c."

[33mcommit 673621c8ba5550e0cb7926af6f98fe1acef2aa21[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Feb 28 16:35:19 2014 -0800

    vp9_first[1;31mpass[m.c: remove unused functions & params
    
    Change-Id: I111c5bd0dd47db7b1f6952c18056bee548bb42e9

[33mcommit b0c146eea9cdd3f43dbf82574ab037e08f1da55c[m
Author: Minghai Shang <minghai@google.com>
Date:   Fri Feb 28 14:22:57 2014 -0800

    [svc] 1. Add two [1;31mpass[m RC options in vp9_spatial_scalable_encoder.
          2. Add read/write for RC stats file
    The two [1;31mpass[m RC for svc does not work yet. This is just the first
    step. We need further development to make it working.
    Change-Id: I8ef0e177dff0b5ed3c97a916beea5123717cc6f2

[33mcommit 1cd34d3f3b4410eac867d83ab38dd55c631bbc75[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Feb 28 11:15:32 2014 -0800

    Sorting includes in vp9_first[1;31mpass[m.c.
    
    Change-Id: Iee4f8443971fe2b21762d87f0be5751329768b5a

[33mcommit f651bcb296f6ea15217056487c904689d57a0d0f[m
Author: James Zern <jzern@google.com>
Date:   Wed Feb 26 23:27:17 2014 -0800

    y4m_video_source: fix memory leak
    
    Begin() will be called twice with 2-[1;31mpass[m encodes, invoking
    y4m_input_open which allocates memory; close the old instance first.
    
    Change-Id: Id252a21d286ca9ae998bd87599d43aeb8d7d77aa

[33mcommit 9774962a24516f268555de4f8b14c6dae3fe784c[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Feb 26 13:51:12 2014 -0800

    Cleaning up vp9_encodemb.c file.
    
    Usage of encode_b_args is unnecessary because encode_block_[1;31mpass[m1() doesn't
    use them. That's why optimize_init_b() call is also not required.
    
    Change-Id: Ib6cfe4916c2ca85749c90bb0adcba6fea592f9ac

[33mcommit 1d3ca088f669aeee5ed638ba1964d02aaf779974[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Thu Feb 20 22:20:58 2014 -0800

    obj_int_extract.bat: Pass obj_int_extract.exe path to obj_int_extract.bat.
    
    - Update the vcxproj generator to [1;31mpass[m the path to the batch file.
    - Update the batch file the take the path to obj_int_extract.exe as arg
      2.
    
    Fixes this warning:
    warning MSB8012: TargetPath does not match Linker's OutputFile property
    value.
    
    Change-Id: I5825f1d1d79f370aeb295bbd2aeb08b22c0e73ab

[33mcommit 18e3415a5583d606630b849fd91942a6853c8472[m
Merge: cd510ea82 3118aba32
Author: Tom Finegan <tomfinegan@google.com>
Date:   Thu Feb 20 14:03:37 2014 -0800

    Merge "two[1;31mpass[m_encoder.c: Silence MSVC data loss warnings."

[33mcommit 3118aba32cdd32bcc3df109b11d31d6c409ff988[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Wed Feb 19 14:44:35 2014 -0800

    two[1;31mpass[m_encoder.c: Silence MSVC data loss warnings.
    
    Use unsigned int instead of uint64_t for duration and deadline
    arguments to functions get_frame_stats() and encode_frame().
    
    Change-Id: I1f26a7afc38ae89916b2c67415ced26fdc9d53e7

[33mcommit 5306eda9daf6ef3e26e63f3843780b1ed3626215[m
Merge: ecf392a15 12ae6eaf2
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Feb 14 15:53:19 2014 -0800

    Merge "Enforce max-intra-pct in one-[1;31mpass[m cbr mode"

[33mcommit 12ae6eaf21274876ef1c02124620c186c4c3cff2[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Feb 14 10:12:38 2014 -0800

    Enforce max-intra-pct in one-[1;31mpass[m cbr mode
    
    This was inadvertently left out in a previous refactoring step.
    
    Change-Id: Idf3350e95152f876a1a1a4591dd30c8981856c96

[33mcommit 0000e3a8c7a100bd60cc41f28d553f4b6a2a9c88[m
Merge: cd6b9936a 25f22d2e0
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Feb 14 09:27:01 2014 -0800

    Merge "In realtime mode enforce one [1;31mpass[m with 0 lag"

[33mcommit 0c7fbe00570082175d0b7b0147586a2223b67803[m
Merge: edfb5ba29 bf5f2e7f9
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri Feb 14 09:08:27 2014 -0800

    Merge "vp9_first[1;31mpass[m.c visual studio warnings addressed"

[33mcommit bf5f2e7f902dddf07e68ecc6701f871942707e4c[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu Feb 13 13:03:44 2014 -0800

    vp9_first[1;31mpass[m.c visual studio warnings addressed
    
    Change-Id: I6fe9ec50f937b12fd9c9321465270e289dbbc59d

[33mcommit 25f22d2e0b82271f59dc67b0dc7ac6ff2f55e0dd[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Feb 13 15:34:42 2014 -0800

    In realtime mode enforce one [1;31mpass[m with 0 lag
    
    vpxenc level changes to enforce one [1;31mpass[m encoding with 0
    lag_in_frames when --rt mode is on.
    
    Change-Id: I3e71719e87c9f66566cb4d944cf5705904f9a5b8

[33mcommit e590e087d5ba59131c2004690f8df11ee68a46b6[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Feb 13 14:02:15 2014 -0800

    Fix target frame size setting, for 1[1;31mpass[m cbr.
    
    Only use layered average size if number_temporal_layers > 1.
    
    Also removed unneeded commented-out line, and change some parameter
    setting in vpx_temporal_scalable_patterns.c
    
    Change-Id: Ic86e43e7daf0313e8c5a4aba1497299158111955

[33mcommit c30a9cd97dbeee9cdd18527e9571304cb01d0073[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Feb 13 14:50:55 2014 +0000

    Remove some cases for turning off arf.
    
    Flipping arf on and off too often is hurting some clips.
    This change makes no difference for 50-75% of our test
    clips but helps some by a big margin. (eg. std-hd crew
    by 6% and one of the YT and YT-hd clips by 14%)
    
    Average improvements for 2 [1;31mpass[m, speed 2 (psnr,ssim)
    are as follows:-
    
    derf  0.165%, 0.210%
    yt  1.210%, 1.464%
    yt-hd 1.189%, 1.471%
    std-hd 1.031%, 0.886%
    
    Change-Id: I121fe66cfb4a62d384b23b484a7d648789641969

[33mcommit 992500b8cb5144a6e0505a33eb9a312d4b78ab00[m
Merge: 66bfc69bf 15fb5510a
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Feb 10 16:38:19 2014 -0800

    Merge "Further one-[1;31mpass[m vbr rate control changes"

[33mcommit c761bd78fa34d8f038f69b1daf8fd5f03b8c3eaa[m
Merge: 52c1550e5 592936b49
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Feb 10 14:27:48 2014 -0800

    Merge "Cleaning up {simple, two[1;31mpass[m}_encoder examples."

[33mcommit 15fb5510a853a578221e22723a305a928bd5b226[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Feb 7 15:52:41 2014 -0800

    Further one-[1;31mpass[m vbr rate control changes
    
    Some parameter changes and fixes on one-[1;31mpass[m rate control.
    derfraw300 is now only 10% below 2-[1;31mpass[m speed 0 rate control.
    
    Change-Id: I1940eef8a5a035dc18e71b880d5e00cabd1f01b9

[33mcommit 592936b4970582ee59cf3764188813b9ee5d7c46[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Feb 7 11:37:39 2014 -0800

    Cleaning up {simple, two[1;31mpass[m}_encoder examples.
    
    Change-Id: Ide9c408f4cee7408741ef8c0ffac01645a5a67ca

[33mcommit 9e41de4d615907809cba089a5206a9155301285d[m
Merge: 9ff89d944 1976dd616
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Feb 7 11:05:25 2014 -0800

    Merge "Moving two[1;31mpass[m_rc and FIRSTPASS_STATS to vp9_first[1;31mpass[m.h."

[33mcommit 9ff89d9446fbe87396464e149c893394cf702b9e[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Thu Feb 6 16:32:09 2014 -0800

    vp8/encoder: Silence MSVC warnings in first[1;31mpass[m.c.
    
    Added some casts to int to silence MSVC warnings.
    
    Change-Id: I72481ec2abd12110cf87a3d0da7a1cbe9ef2f47c

[33mcommit aadebc6d1750414966086c9046f7f100af6086b7[m
Merge: f0e896c12 b2209c334
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Feb 6 14:31:54 2014 -0800

    Merge "Parameter fixes for one-[1;31mpass[m non-cbr mode"

[33mcommit b2209c334666992bd87a89581ef0b2ed90c0243b[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Feb 5 16:19:11 2014 -0800

    Parameter fixes for one-[1;31mpass[m non-cbr mode
    
    Fixes some of the parameters for 1-[1;31mpass[m non-cbr mode.
    Also includes some cleanups, inlcuding refactoring of the
    recode_loop options.
    
    Results on derfraw300 improve by about 5-6%, so that the one-[1;31mpass[m
    mode is now 13% below the 2-[1;31mpass[m mode in speed 0.
    
    Change-Id: I844cc2638694c7574f3be00d41d60b23dc1016f0

[33mcommit 1976dd616d57078a8ca899b5100d0df366b2a7fd[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Feb 5 18:28:28 2014 -0800

    Moving two[1;31mpass[m_rc and FIRSTPASS_STATS to vp9_first[1;31mpass[m.h.
    
    Change-Id: I5c942ee1a04eb0d7f2ae7ba8ea8ce47e666550c5

[33mcommit 1811bc1aa0805672bcaab5074444e3d378bb0812[m
Merge: 7ad56bf3c dce41c013
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Feb 5 17:35:56 2014 -0800

    Merge "Cleaning up vp9_first[1;31mpass[m.c."

[33mcommit dce41c013bb29deda705a5c4d566471ba684f713[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Feb 5 15:11:12 2014 -0800

    Cleaning up vp9_first[1;31mpass[m.c.
    
    Change-Id: I111d6d1ea5ee641780abc096341369a37627aaae

[33mcommit 340f0c9650b5d41564d63d350aa8429312c1c9af[m
Merge: 37114919e 2554d5731
Author: Adrian Grange <agrange@google.com>
Date:   Wed Feb 5 13:01:03 2014 -0800

    Merge "Remove delete_first_[1;31mpass[m_file."

[33mcommit 2fb81fba97d5b1b9376ac74b6a7b67b437f86dcf[m
Merge: a53623722 40e63d4b5
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Feb 5 11:50:18 2014 -0800

    Merge "One-[1;31mpass[m rate control cleanups/fixes/refactoring"

[33mcommit 2554d5731a355e11323e73e39e3fefa72089c341[m
Author: Adrian Grange <agrange@google.com>
Date:   Wed Feb 5 11:31:44 2014 -0800

    Remove delete_first_[1;31mpass[m_file.
    
    Change-Id: If46d93fb1c26e4629af1f492bfad7a82b4c4f778

[33mcommit 40e63d4b5107246e198b255d0ea46f4a15030bbf[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Feb 4 11:42:50 2014 -0800

    One-[1;31mpass[m rate control cleanups/fixes/refactoring
    
    Inlcudes a number cleanups:
    1. Moves the one-[1;31mpass[m pre-encode parameter setting functions
    to vp9_ratectrl.c
    2. Deprecates per_frame_bandwidth in RATE_CONTROL structure
    3. Removes target_bandwidth in cpi structure since it is not used.
    4. Various renaming of functions
    
    There is no bit-stream change in 2-[1;31mpass[m, one-[1;31mpass[m cbr and one-[1;31mpass[m
    vbr modes.
    
    Change-Id: Ifd9916bf4d485b7d04c5f52044ffe6703254ccbd

[33mcommit f3bd5d82e501834e01e5d0d9b1a634f8c80012ce[m
Author: Ralph Giles <giles@xiph.org>
Date:   Mon Feb 3 10:56:27 2014 -0800

    libmkv: constify codec_id.
    
    This lets the caller [1;31mpass[m a string literal for the codec id.
    
    From https://bugzilla.mozilla.org/show_bug.cgi?id=966044
    
    Change-Id: I345bd7a5943f0c33b3fb368d4280100ac5038a3d

[33mcommit 71faaa5b587a3d8356a24585750d18ba5a18501f[m
Merge: b0246882b 35ee7f5f4
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Feb 4 11:12:10 2014 -0800

    Merge "One-[1;31mpass[m rate control fixes and cleanups"

[33mcommit 35ee7f5f4bf488f8cb5e931eeb0618f3cb2c7477[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Jan 22 18:00:08 2014 -0800

    One-[1;31mpass[m rate control fixes and cleanups
    
    Fixes rate control partially in one-[1;31mpass[m non-cbr case to achieve a
    bitrate close to the one desired. Previous version was way off at
    the high bitrate end.
    
    Also includes several one-[1;31mpass[m rate control cleanups and refactoring.
    
    On derfraw300, one-[1;31mpass[m encoding is now 19% off from two-[1;31mpass[m speed
    0 encoding, down from 35%.
    
    Change-Id: I6f0dcdb7f8aa85a7e7cd3a3155d4f9d2a4d2f4f4

[33mcommit f1761a74cd7eac4deed88d672e23e8079a9c1f54[m
Merge: c2ca97caa 1ee491679
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Jan 31 18:15:33 2014 -0800

    Merge "Cleaning up vp9_get_second_[1;31mpass[m_params() function."

[33mcommit 1ee491679490f2483455bd018ff3436c753bb4d4[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Jan 31 16:49:33 2014 -0800

    Cleaning up vp9_get_second_[1;31mpass[m_params() function.
    
    Change-Id: Ie7b295190d8def447408e575ea0f3fa3c7eb7dd2

[33mcommit 56200336d1e1bf3fd6dba1fb73af7ea565a26281[m
Merge: 5670f1e2a 50bf8fd4f
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Jan 29 13:37:30 2014 -0800

    Merge "Enables alt-ref frames in one [1;31mpass[m mode"

[33mcommit 126b096b3c176ef4fece8950de9658951bd0ac63[m
Merge: a8b547ea4 b496d141a
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Jan 29 12:50:26 2014 -0800

    Merge "Cleaning up vp9_first[1;31mpass[m.c."

[33mcommit b496d141af16233aeb8382d392f2fd784b0ea0bf[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Jan 29 11:26:09 2014 -0800

    Cleaning up vp9_first[1;31mpass[m.c.
    
    Change-Id: Ic2ff6405f01fd43d07c5ee3b5e374909401115cc

[33mcommit 50bf8fd4f5f0991f8788cf5ac9e6e89f49fd6937[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Jan 22 18:00:08 2014 -0800

    Enables alt-ref frames in one [1;31mpass[m mode
    
    Includes a few fixes and clean-ups that adds the ability
    to use alt-ref frames in one-[1;31mpass[m mode.
    Whether alt-refs are actually used or not is controlled by a
    macro USE_ALTREF_FOR_ONE_PASS in vp9_first[1;31mpass[m.c.
    
    This first cut seems to improve derf by 15+% in 1-[1;31mpass[m mode.
    But further experiments with parameters are underway.
    
    Change-Id: I78254421435478003367c788c7930d2dc4ee2816

[33mcommit 1c96e3985e0fab5b288830deb44054bd3e5f0590[m
Merge: b2f0ae65c b93fcec3b
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Jan 27 11:46:41 2014 -0800

    Merge "Adding get_bsize() function to vp9_first[1;31mpass[m.c."

[33mcommit b93fcec3b74cc52e9709fe88feff23c43789c2d5[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Jan 24 14:26:26 2014 -0800

    Adding get_bsize() function to vp9_first[1;31mpass[m.c.
    
    Change-Id: I31373ad860eb554eb3b03e877e8fba580dc3de07

[33mcommit 9c0fbd573fcb051bfa2bdcc81b00b7d475cfe131[m
Merge: 92ab96a7a 745027575
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Jan 24 11:15:01 2014 -0800

    Merge "Setup pre[0] buffer before calls to {first_[1;31mpass[m, zz}_motion_search."

[33mcommit b1c72b633ef633a1ee6e83c3556393b6fe9068c4[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Thu Jan 23 14:59:00 2014 -0800

    Revert external frame buffer code.
    
    A future CL will add external frame buffers
    differently.
    
    Squash commit of four revert commits:
    Revert "Increase required number of external frame buffers"
    
    This reverts commit 9e41d569d7c84dd9ca8f0047c15377a883945685.
    
    Revert "Add external constants."
    
    This reverts commit bbf53047b03106e3c2e24b28cb836cc838db5ee8.
    
    Revert "Add frame buffer lru cache."
    
    This reverts commit fbada948fa345e67acf9aa41a8f9a78f5dfe8648.
    
    Conflicts:
            vpxdec.c
    
    Change-Id: I76fe42419923a6ea6c75d9997cbbf941d73d3005
    
    Revert "Add support to [1;31mpass[m in external frame buffers."
    
    This reverts commit 10f891696bc4c972c13cc9fde2c53470501a03e2.
    
    Conflicts:
            test/external_frame_buffer_test.cc
            vp9/common/vp9_alloccommon.c
            vp9/common/vp9_reconinter.c
            vp9/decoder/vp9_decodeframe.c
            vp9/encoder/vp9_onyx_if.c
            vp9/vp9_dx_iface.c
            vpx/vpx_decoder.h
            vpx/vpx_external_frame_buffer.h
            vpx_scale/generic/yv12config.c
            vpxdec.c
    
    Change-Id: I7434cf590f1c852b38569980e4247fad0d939c2e

[33mcommit b7944ff1b8b59ed8a8a46bdc6545ce4118213862[m
Merge: 31bb283d6 520496ba9
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Jan 23 23:09:21 2014 -0800

    Merge "Cleaning up vp9_first[1;31mpass[m.c file."

[33mcommit 520496ba95fdf46c0d6f217705f9b8b0bbc95eeb[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Jan 23 12:36:19 2014 -0800

    Cleaning up vp9_first[1;31mpass[m.c file.
    
    Change-Id: Ic352b0429d5784f9d78872a478fe6275ee7a56a0

[33mcommit 7450275755642d89cb5b83df811e98a0a7f7eb8f[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Jan 23 12:14:57 2014 -0800

    Setup pre[0] buffer before calls to {first_[1;31mpass[m, zz}_motion_search.
    
    Change-Id: I9b94e741201eacb1982014724a532bdaae31f130

[33mcommit 2b6e0fe01032b39476674f2cbacb4c30837ab24f[m
Merge: 6e706ed78 0f008fbd2
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Jan 22 01:51:08 2014 -0800

    Merge "Cleaning up first_[1;31mpass[m_motion_search() function."

[33mcommit 209a3ae4f4ae680b4dd45e0a3d1e448c4ae09b3f[m
Merge: 4e2ae3028 a86a5b17e
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Jan 21 23:01:27 2014 -0800

    Merge "Replacing cpi->two[1;31mpass[m with two[1;31mpass[m."

[33mcommit 2bfafefb344b0358fd9ef4db40644963b4f92f50[m
Merge: d2bb0c51d 2b3891d9d
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Fri Jan 17 10:22:59 2014 -0800

    Merge "Fix key frames for one [1;31mpass[m."

[33mcommit 2b3891d9daf9194bbf62dc246882e3ea9c5c4768[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu Jan 16 11:38:45 2014 -0800

    Fix key frames for one [1;31mpass[m.
    
    Set this_key_frame_forced flag and don't use kf_boost when not set.
    
    Change-Id: Ibe66a82fa9219e60db358ddeb43d6471816c8b50

[33mcommit a86a5b17e5b9b6ef8489b344310babcf7518acbd[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Jan 15 16:21:38 2014 -0800

    Replacing cpi->two[1;31mpass[m with two[1;31mpass[m.
    
    Change-Id: I733a84ec178439ead66e031395d9a8e49e8f4d1a

[33mcommit f1cf4058159fde599b14bcfa1f71b6bf6b686d9a[m
Merge: 9adcc4d68 096ab1101
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Jan 15 12:15:48 2014 -0800

    Merge "Removing [1;31mpass[m number check from ivf_write_file_header()."

[33mcommit 0f008fbd2ed87f166c81f605838df46b5dab5111[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Jan 14 18:05:00 2014 -0800

    Cleaning up first_[1;31mpass[m_motion_search() function.
    
    Change-Id: I4826a71c7f99db09e5362b16703d024939587f25

[33mcommit 73cd22f8d4bdaeb005b05348f3e39e784eff7074[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Jan 14 17:58:25 2014 -0800

    As you go mbmi->skip_coeff
    
    Calculate the skip_coeff as part of the encode process, rather than
    checking the eobs after the fact with another [1;31mpass[m.
    
    Change-Id: Ib41b139e96a97dee30e4b993b4cc53d86337128d

[33mcommit 096ab11012cd958c9cc3c149f877c37d80b36b2f[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Jan 13 15:21:48 2014 -0800

    Removing [1;31mpass[m number check from ivf_write_file_header().
    
    Putting appropriate check to open_output_file() and close_output_file().
    Before that the output file has been opened twice during two-[1;31mpass[m encoding.
    
    Change-Id: I290cecf00513d6a31ca3f45bc20fef7efcb10190

[33mcommit 21a0c1f38fbc622afae6fe36f86f784e6a0cdee9[m
Merge: b5af9d290 c46538d45
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Jan 10 11:43:20 2014 -0800

    Merge "Don't use gf_update by default for 1-[1;31mpass[m CBR."

[33mcommit c46538d45e12b52791bfee92a63ee9b93d02711c[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jan 8 12:34:18 2014 -0800

    Don't use gf_update by default for 1-[1;31mpass[m CBR.
    
    Change-Id: I5df6abceb0a2a69706feadeb820b593cae88f573

[33mcommit feab7e1146f6b5f55fefc8d17a674c4c48dd3ac5[m
Merge: a84029ad9 b57b82b5d
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Jan 8 14:14:05 2014 -0800

    Merge "Using struct two[1;31mpass[m_rc* instead of VP9_COMP*."

[33mcommit b57b82b5d6cfc9e52405bb331afe90283f1ff844[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Jan 6 12:46:23 2014 -0800

    Using struct two[1;31mpass[m_rc* instead of VP9_COMP*.
    
    Change-Id: Id9ff7772aa3a3fb5d6cf94aff7dc9489bd964340

[33mcommit f73b21439d05e71451d51222f557a59fad0256db[m
Merge: a9deec438 cf3d2c8d5
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Jan 6 12:01:30 2014 -0800

    Merge "Corerctly sets frame type in the 2 [1;31mpass[m case"

[33mcommit cf3d2c8d5a8438fd63ed739f11f1116e0f21d3a0[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Jan 3 15:41:57 2014 -0800

    Corerctly sets frame type in the 2 [1;31mpass[m case
    
    This patch sets frame types correctly in the new
    vp9_get_second_[1;31mpass[m_params() function called prior
    to encode_frame_to_data_rate() function, so that the
    latter function can just work with what is [1;31mpass[med to
    it. This will allow multiple vp9_get_second_[1;31mpass[m_params()
    to be created for various encode strategies without
    messing with the core encode function.
    
    There is no difference in derf and yt. stdhd/hd are pending.
    
    Change-Id: I70dfb97e9f497e9cee04052e0e8e0c2892eab0c3

[33mcommit 65ede3da45fe9aa10e9eee0433466bf36f30520c[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Jan 2 15:45:06 2014 +0000

    Modified Handling of min and max vbr rates.
    
    In two [1;31mpass[m encodes bits are allocated to each frame
    according to a modified error score for the frame as a
    fraction of the modified error score for the clip or section.
    
    Previously a minimum rate per frame was reserved and
    subtracted from the bits allocatable by the two [1;31mpass[m code.
    The vbr max section rate was enforced by clipping the
    actual number of bits allocated.
    
    In this patch the min and max vbr rates are enforced
    instead by clipping the modified error scores for each frame
    rather than the number of bits allocated.
    
    Small gains for all test sets (psnr and SSIM) ranging from
    ~ +0.05 for YT psnr up to ~ +0.25 for Std-hd SSIM.
    
    Change-Id: Iae27d70bdd3944e3f0cceaf225bad2e8802833de

[33mcommit 68cdbfe50ef7035c84ab98be1c4c01d7202e5106[m
Merge: 6afd37aa1 5ba4b16c2
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Dec 20 10:28:09 2013 -0800

    Merge "Initialize avg_frame_qindex to worst_allowed for 1 [1;31mpass[m."

[33mcommit 5ba4b16c2df952a7e3a88e8dfb213f697f2bf121[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Dec 19 14:26:46 2013 -0800

    Initialize avg_frame_qindex to worst_allowed for 1 [1;31mpass[m.
    
    Change-Id: I535bde16c8fc4c2cd263bbbbaed46ead4c776090

[33mcommit 4dbad63a71135c11e11206656b750ff78361dff2[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Dec 18 10:26:27 2013 -0800

    Begin refactor of frame schedule in rate control
    
    Various cleanups and streamlining of interfaces as precursor
    to further advancements in rate control.
    Pre-encode parameter setting for different use cases:
    One-[1;31mpass[m, first of 2-[1;31mpass[m, second of 2-[1;31mpass[m, and Svc
    are separated out.
    
    There is no change in output with this change.
    
    Change-Id: Ied8ca7d84d610993776aa30ef263fe20452e0e3e

[33mcommit 02d5ebcfdc400db32b4c4d874e3073e7604f034e[m
Merge: bb12bbaef 1b8b8b0d0
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Dec 18 10:28:33 2013 -0800

    Merge "Updates for 1-[1;31mpass[m CBR rate control."

[33mcommit 1b8b8b0d0df9ac6f0a50db73d20231ecb7529666[m
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Dec 17 15:45:30 2013 -0800

    Updates for 1-[1;31mpass[m CBR rate control.
    
    Adjustments based on buffer level, frame dropper.
    
    Change-Id: Iaa85b570493526a60c4b9fb7ded4c0226b1b3a33

[33mcommit 9e41d569d7c84dd9ca8f0047c15377a883945685[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Tue Dec 17 17:34:36 2013 -0800

    Increase required number of external frame buffers
    
    Make applications [1;31mpass[m in VPX_MAXIMUM_WORK_BUFFERS as well as
    VP9_MAXIMUM_REF_BUFFERS.
    
    Change-Id: I9c07ce83fa19c90ed43227b801b2013690e81edd

[33mcommit d0ee1fd797598fd692cbfe410bc37308a9e8924e[m
Merge: c5aaf923d 10f891696
Author: Frank Galligan <fgalligan@google.com>
Date:   Sun Dec 15 19:18:25 2013 -0800

    Merge "Add support to [1;31mpass[m in external frame buffers."

[33mcommit 10f891696bc4c972c13cc9fde2c53470501a03e2[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Wed Dec 11 09:06:35 2013 -0800

    Add support to [1;31mpass[m in external frame buffers.
    
    VP9 decoder can now use frame buffers [1;31mpass[med in by the application.
    
    Change-Id: I599527ec85c577f3f5552831d79a693884fafb73

[33mcommit 2ec473bb0ad231ae6e2e24241ee7978cbb5d27bd[m
Merge: 8b73296d7 15cf59605
Author: Adrian Grange <agrange@google.com>
Date:   Fri Dec 13 10:30:46 2013 -0800

    Merge "Set rc_2[1;31mpass[m_vbr_maxsection_pct to correct value"

[33mcommit 15cf59605fc463801fb921f14954c1e6b4a56503[m
Author: Adrian Grange <agrange@google.com>
Date:   Fri Dec 13 08:48:12 2013 -0800

    Set rc_2[1;31mpass[m_vbr_maxsection_pct to correct value
    
    Corrected a typo that set rc_2[1;31mpass[m_vbr_minsection_pct to
    two different values on consecutive lines. Second line
    should have set rc_2[1;31mpass[m_vbr_maxsection_pct.
    
    Change-Id: Ie07ac67cd5455afe556bef34da8127304db9c97c

[33mcommit 2341747805d1a829cb9140a4f391bdf2534cdf70[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Dec 5 13:52:47 2013 -0800

    Disable warning for intentional lossless coding
    
    For VP9, lossless coding is enabled by [1;31mpass[ming 0 for both min_q and
    max_q. This is a valid configuration, and should not be warned.
    
    Change-Id: Idd117579cd89cd14c0723b1d7e482067ac12b401

[33mcommit f00d157c125a5362b48037a2c65d2f0eee4f5f84[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Dec 3 17:59:32 2013 -0800

    Moving eob array to the encoder.
    
    In the decoder we don't need to save eobs, we can [1;31mpass[m eob as an argument.
    That's why removing eob arrays from VP9Decompressor and TileWorkerData,
    and moving eob pointer from macroblockd_plane to macroblock_plane.
    
    Change-Id: I8eb919acc837acfb3abdd8319af63d1bbca8217a

[33mcommit 2360a5f0938a4cbd93cc04ecab65f89fdab4f0a4[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Mon Dec 2 18:33:50 2013 -0800

    Remove plane_block_idx.
    
    Its last remaining caller can be [1;31mpass[med its results directly without any
    additional work. Also, it's not non-4:2:0 safe.
    
    Change-Id: Ia5089ba5f7f66c7617270483c619c9271aefd868

[33mcommit 953b1e968384bea066b4ec3878de8b504b815781[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Nov 18 19:00:49 2013 -0800

    Removing raster_block_offset_uint8() function.
    
    There is no need to use that function, it is much clear to [1;31mpass[m offset
    directly to the buffer.
    
    Change-Id: I9026cb0c5094c46f97df5d7f7daeb952f2843b24
For keyword thread:
[33mcommit 83cbe226231b1affa2826cd6b88aef51578d47b8[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Mar 17 18:40:40 2015 -0700

    Speed up non-rd mode decision search
    
    This commit makes the encoder to explicitly calculate the SAD
    associated with the LAST_FRAME motion vector and compare it to
    that of the GOLDEN_FRAME given by integral projection motion
    estimation. It skips the expensive sub-pixel motion search over
    GOLDEN_FRAME when the LAST_FRAME can provide fairly good motion
    compensated prediction quality.
    
    For dark720p speed -6 single [1;31mthread[m goes from
    33304 b/f, 40.070 dB, 18156 ms ->
    33319 b/f, 40.061 dB, 17611 ms
    
    Change-Id: I01bc94b9b598075567a392111046b97a9bc30efe

[33mcommit 1f00a9b9d570b410e4b5b6e292528400ff0c027f[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Mar 13 16:51:29 2015 -0700

    Fix choose_partitioning threshold setup for speed -5
    
    The compression performance of speed -5 is on average 12.6% better
    than speed -6. At lower bit-rates, the gains are typically 20% or
    more. For 2-[1;31mthread[m encoding, the speed -5 takes about 1.6x time of
    speed -6.
    
    Change-Id: If7a73464a24d33e8f49b9533b51ec51c8da7fc80

[33mcommit 8e2799e215ebbcb2db990d74ff8111a75a415b2b[m
Merge: 87999b1c2 89df6d1ab
Author: Frank Galligan <fgalligan@google.com>
Date:   Fri Mar 13 15:07:16 2015 -0700

    Merge "Set default encode test driver to 1 column and 1 [1;31mthread[m."

[33mcommit 89df6d1ab04e32ec7869e4ed07ca503b7efbf027[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Mon Mar 9 15:52:29 2015 -0700

    Set default encode test driver to 1 column and 1 [1;31mthread[m.
    
    Change-Id: I70ee538609cefad76b8ce9b225bbf8d8447aff23

[33mcommit 427cdf0a41988320c721462d02884a6a4f19aee4[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Mar 12 16:18:12 2015 -0700

    Reduce the number of full block SAD calls
    
    This commit uses a 6-point 1-step refine motion search in the
    integral projection based full pixel motion estimation, to replace
    the current 9-point search.
    
    It reduces runtime cost of speed -6 on some noisy clips, e.g.,
    dark720p single [1;31mthread[m
    33314 b/f, 40.076 dB, 18231 ms ->
    33307 b/f, 40.067 dB, 17768 ms
    
    The compression performance for rtc set remains unchanged.
    
    Change-Id: I194ea5a9ce52e5a10baeee36338633adc22f764c

[33mcommit 3e637a70dab1ddead4ba14caeb8f840a47a256ca[m
Merge: 12943e722 f0cf9719d
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Mar 10 10:52:55 2015 -0700

    Merge "Accumulate tx_totals counters in multi-[1;31mthread[med encoder"

[33mcommit f0cf9719d0c3eee99431ef313a5aaf817f22b5af[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Mar 10 09:53:45 2015 -0700

    Accumulate tx_totals counters in multi-[1;31mthread[med encoder
    
    Tx_totals counters weren't handled correctly in multi-[1;31mthread[m
    case, which caused the mismatch while encoding using [1;31mthread[ms > 1.
    This patch fixed that.
    
    Change-Id: Ice9b0386f57175fb92a0bdcd5042686a3106246a

[33mcommit 5d676d560fc79c408032ac7f156dcb7c6da04975[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Mar 6 10:47:09 2015 -0800

    Add aq-mode=3 to e[1;31mthread[m test.
    
    Change-Id: I619a2be502f1d2eb0ae746f7fcb465d19ddae048

[33mcommit 969dd8f128878c1ca29cd9870b39f228fe5713ba[m
Merge: d2b6a4cc8 6e0ec0b2d
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Mar 9 09:42:12 2015 -0700

    Merge "vp9_e[1;31mthread[m: fix me consts initialization to support aq_mode=3 encoding"

[33mcommit 6e0ec0b2d9da1a45725d5e0ae164410fdeb3a3c8[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Mar 6 15:17:59 2015 -0800

    vp9_e[1;31mthread[m: fix me consts initialization to support aq_mode=3 encoding
    
    While turning on "--aq_mode=3", the quantizers are updated by each
    [1;31mthread[m. Fixed the me consts initialization function to make sure
    that the correct [1;31mthread[m data are updated.
    
    Change-Id: Ied27bb7bae76fc3fa2cda4f8c35ac0b46271bef4

[33mcommit 9d44fd6bc5f6f6ebfceca6489b7a4d5c9f47ade3[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Mar 2 17:15:00 2015 -0800

    Remove some unnecessary code in [1;31mthread[m context copy.
    
    Change-Id: Iddf098e1bae9c10fc2f325f84156f50a0bd0055a

[33mcommit 274af39eae458ee25dcc679754e99e017ac9f7eb[m
Merge: 0f37601fd c76ebffdc
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Mar 6 10:00:18 2015 -0800

    Merge "Set the [1;31mthread[ms/tile_columns in vpx_temporal_svc_encoder."

[33mcommit c76ebffdcc6ecd870d90a4455cf86aaa40ff04e2[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Mar 6 09:51:21 2015 -0800

    Set the [1;31mthread[ms/tile_columns in vpx_temporal_svc_encoder.
    
    Change-Id: I794e8b64f26ebe68d7f18c3a11cb7c80e1cd3110

[33mcommit feda5d244cd5baf93575f7027b5a5c8b2ac09c2f[m
Merge: b21e361f8 587a0b3ef
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu Mar 5 14:43:42 2015 -0800

    Merge changes I219c287b,I6adee670
    
    * changes:
      Call encoder control before running e[1;31mthread[m test.
      Don't copy [1;31mthread[m data for the main [1;31mthread[m.

[33mcommit 587a0b3ef9b191d294d2447a7a918d43bd082db4[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu Mar 5 11:47:21 2015 -0800

    Call encoder control before running e[1;31mthread[m test.
    
    The first value of video->frame() is 15 because of the source range used.
    
    Change-Id: I219c287b500fa376160d6dcfb937092e577ec959

[33mcommit 627f8fb6767ede8e2a80b50e44ee6016de070e13[m
Merge: 26f4e7dc0 93a018993
Author: Frank Galligan <fgalligan@google.com>
Date:   Thu Mar 5 13:58:26 2015 -0800

    Merge "Use 8 [1;31mthread[ms by default for VP9 encodes"

[33mcommit 71d5a59c6db964cee203349b8bfad3a15aa719b2[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Thu Mar 5 12:09:48 2015 -0800

    Don't copy [1;31mthread[m data for the main [1;31mthread[m.
    
    Change-Id: I6adee6704cacfeae0ed0b217a91095457d1be74a

[33mcommit 93a0189936c0998d8b19192c5f0b1fd158454ed4[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Tue Mar 3 17:05:17 2015 -0800

    Use 8 [1;31mthread[ms by default for VP9 encodes
    
    BUG=https://code.google.com/p/webm/issues/detail?id=964
    
    Change-Id: I70679d0f139b8e0962f7e19eb56b34060953e9b0

[33mcommit a723f5ecd174264f0c494161cb3c18711d5887d3[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Mar 3 12:57:26 2015 -0800

    Fix a tsan error bug in frame parallel decode.
    
    A frame may be waiting for an out of border pixel from another
    frame. A frame's row progress variable is set to -1 when start being decoded
    and another frame may be waiting for -2 row pixel from this frame.
    In this case, vp9_frameworker_wait will return directly and skip the waiting
    which leads to tsan error between [1;31mthread[ms.
    
    Change-Id: Id16604915fb598b823e34393f696e3aa46fb6422

[33mcommit f5c36a5ced92b6fb88db433721bcae36f842eb88[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Tue Mar 3 11:20:11 2015 -0800

    VP9: turn on tile-columns and frame-parallel-mode by default
    
    Most of the current decoders use tile-based multi[1;31mthread[ming. Also
    most of the current decoders need frame_parallel_decoding_mode
    turned on to enable multi[1;31mthread[med decoding. tile-columns is
    limited by resolution, so setting to max (6) is fine.
    
    BUG=https://code.google.com/p/webm/issues/detail?id=963
    
    Change-Id: I6e7ac3485d96bf0c69e06706cbb326dd38be0020

[33mcommit 2fa9e9e2276b080c5357bcdbf6a129eb1fec864a[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Feb 9 12:14:00 2015 -0800

    Fix the frame parallel invalid file test failure on ARM.
    
    There is a corner case that when a frame is corrupted, the following
    inter frame decode worker will miss the previous failure. To solve
    this problem, a need_resync flag needs to be added to master [1;31mthread[m
    to keep control of that.
    
    Change-Id: Iea9309b2562e7b59a83dd6b720607410286c90a6

[33mcommit d8ed558c99cc8d33bcb9efde911b262019bded27[m
Merge: a139f3f6f d167a1aee
Author: James Zern <jzern@google.com>
Date:   Wed Feb 11 16:50:07 2015 -0800

    Merge "vp9_[1;31mthread[m: prefer p[1;31mthread[m.h if available"

[33mcommit d167a1aeee79a484f3ace9160089cf7009283ea3[m
Author: James Zern <jzern@google.com>
Date:   Tue Feb 10 12:47:14 2015 -0800

    vp9_[1;31mthread[m: prefer p[1;31mthread[m.h if available
    
    this avoids conflicts with recent versions of mingw-w64 (tested g++
    4.8.2) and the unit tests
    
    Change-Id: Ic41ea31eebe0e3e712ed5e657f37d8cad6712088

[33mcommit 84b813aa42c99bce15cec774153bdb1cd09e9578[m
Merge: d3a37731c 4ae092c66
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Feb 10 09:06:41 2015 -0800

    Merge "Make encoder and decoder share common [1;31mthread[m function"

[33mcommit d3a37731c2bd97b604f56ecb6b8fd47f1e078c44[m
Merge: 4409a4bcf 41063137c
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Feb 10 09:06:23 2015 -0800

    Merge "Rename loopfilter_[1;31mthread[m files to [1;31mthread[m_common files"

[33mcommit 1cdb5439e74061234e518519e7768f543d8d5a37[m
Merge: 07eb8c8da dd88f4829
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Feb 9 16:25:20 2015 -0800

    Merge "Set the maximum decode [1;31mthread[ms to be 8."

[33mcommit dd88f482964a0fb4c8044ff7ff82adbc014daa5b[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Thu Feb 5 13:59:15 2015 -0800

    Set the maximum decode [1;31mthread[ms to be 8.
    
    This will fix the frame parallel decode hang on windows
    due to not enough semaphores.
    
    This will also make the frame parallel decode safer as
    the number of frame buffers could only support maximum
    8 [1;31mthread[ms.
    
    Change-Id: Id9ef50692819dcbebbd74a0aabffbfb3f39a4309

[33mcommit 4ae092c660ec649a91057d99d79241feb96a840f[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Feb 6 11:37:45 2015 -0800

    Make encoder and decoder share common [1;31mthread[m function
    
    Moved vp9_accumulate_frame_counts to vp9_[1;31mthread[m_common.c to
    eliminate the duplicate code.
    
    Change-Id: I9cf506d729603c8bf1494b4c86a3b7d47af1917a

[33mcommit 41063137c3aafc024cb9b958c78d33007aad8be5[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Feb 6 10:03:31 2015 -0800

    Rename loopfilter_[1;31mthread[m files to [1;31mthread[m_common files
    
    Renames the files to allow more common [1;31mthread[m code to
    be moved to vp9/common.
    
    Change-Id: I7386e64e221086e3cdc087e79812f993c423413b

[33mcommit 1c396f3f8edac3a102dc22f4b336c221118f6a5b[m
Merge: dc4cdf951 b104b8405
Author: Hangyu Kuang <hkuang@google.com>
Date:   Thu Feb 5 14:07:35 2015 -0800

    Merge "Fix a [1;31mthread[m lost bug in frame parallel decode."

[33mcommit b104b840581356f6a3aa72fc9f8f34142ff5c050[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Feb 3 15:19:11 2015 -0800

    Fix a [1;31mthread[m lost bug in frame parallel decode.
    
    After syncing the frame worker [1;31mthread[m, avaiable [1;31mthread[m count should
    increase by 1 even the worker [1;31mthread[m does not have displayable frame
    to output.
    
    Change-Id: I9eeb87720fed82dfe38555286833ff88e8a8e746

[33mcommit b3b7645a2f8571d3c4ca4ef8168ff1704c5cd5b0[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Jan 30 17:00:54 2015 -0800

    vp9_d[1;31mthread[m: remove frame_parallel_decoding_mode requirement
    
    This patch continues the work to remove frame_parallel_decoding_mode
    requirement in VP9 multi-[1;31mthread[med tile decoder. In order to do that,
    the frame counts associated to each [1;31mthread[m need to be accumulated
    together after the frame is decoded.
    
    Change-Id: Idba1a756cedfed3c154aef52ed82c8da3bbf9e0c

[33mcommit f5b3631621273ea687c8564a982e6a2c12b11962[m
Merge: 9a664917b 85a9bc04d
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Feb 3 10:52:02 2015 -0800

    Merge "vp9_d[1;31mthread[m: pass frame counts to decoder functions"

[33mcommit 85a9bc04d4ebe871076cf36c8aac8ab10a967d9c[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Jan 30 10:14:44 2015 -0800

    vp9_d[1;31mthread[m: pass frame counts to decoder functions
    
    The current multi-[1;31mthread[med tile decoder requires that the videoes
    are encoded with frame_parallel_decoding_mode = 1. This requirement
    is not necessary, and is better to be removed. This patch includes
    the first part of the work.
    
    Change-Id: Ic7695fb3cfe13f9022582c9f0edd2aa6e2e36d28

[33mcommit be6aeadaf49de28f13355d5dd7f64b4074dcca7c[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Jan 27 12:26:28 2015 -0800

    Try again to merge branch 'frame-parallel' into master branch.
    
    In frame parallel decode, libvpx decoder decodes several frames on all
    cpus in parallel fashion. If not being flushed, it will only return frame
    when all the cpus are busy. If getting flushed, it will return all the
    frames in the decoder. Compare with current serial decode mode in which
    libvpx decoder is idle between decode calls, libvpx decoder is busy
    between decode calls.
    
    Current frame parallel decode will only speed up the decoding for frame
    parallel encoded videos. For non frame parallel encoded videos, frame
    parallel decode is slower than serial decode due to lack of loopfilter
    worker [1;31mthread[m.
    
    There are still some known issues that need to be addressed. For example:
    decode frame parallel videos with segmentation enabled is not right sometimes.
    
    * frame-parallel:
      Add error handling for frame parallel decode and unit test for that.
      Fix a bug in frame parallel decode and add a unit test for that.
      Add two test vectors to test frame parallel decode.
      Add key frame seeking to webmdec and webm_video_source.
      Implement frame parallel decode for VP9.
      Increase the [1;31mthread[m test range to cover 5, 6, 7, 8 [1;31mthread[ms.
      Fix a bug in adding frame parallel unit test.
      Add VP9 frame-parallel unit test.
      Manually pick "Make the api behavior conform to api spec." from master branch.
      Move vp9_dec_build_inter_predictors_* to decoder folder.
      Add segmentation map array for current and last frame segmentation.
      Include the right header for VP9 worker [1;31mthread[m.
      Move vp9_[1;31mthread[m.* to common.
      ctrl_get_reference does not need user_priv.
      Seperate the frame buffers from VP9 encoder/decoder structure.
      Revert "Revert "Revert "Revert 3 patches from Hangyu to get Chrome to build:"""
     Conflicts:
           test/codec_factory.h
           test/decode_test_driver.cc
           test/decode_test_driver.h
           test/invalid_file_test.cc
           test/test-data.sha1
           test/test.mk
           test/test_vectors.cc
           vp8/vp8_dx_iface.c
           vp9/common/vp9_alloccommon.c
           vp9/common/vp9_entropymode.c
           vp9/common/vp9_loopfilter_[1;31mthread[m.c
           vp9/common/vp9_loopfilter_[1;31mthread[m.h
           vp9/common/vp9_mvref_common.c
           vp9/common/vp9_onyxc_int.h
           vp9/common/vp9_reconinter.c
           vp9/decoder/vp9_decodeframe.c
           vp9/decoder/vp9_decodeframe.h
           vp9/decoder/vp9_decodemv.c
           vp9/decoder/vp9_decoder.c
           vp9/decoder/vp9_decoder.h
           vp9/encoder/vp9_encoder.c
           vp9/encoder/vp9_pickmode.c
           vp9/encoder/vp9_rdopt.c
           vp9/vp9_cx_iface.c
           vp9/vp9_dx_iface.c
    
    This reverts commit a18da9760a74d9ce6fb9f875706dc639c95402f5.
    
    Change-Id: I361442ffec1586d036ea2e0ee97ce4f077585f02

[33mcommit bde04ce5039cbcf86c8b34bdb4127e18d7e1d0c7[m
Merge: 0dccb6277 d05cf10fe
Author: Hangyu Kuang <hkuang@google.com>
Date:   Wed Jan 21 14:51:08 2015 -0800

    Merge branch 'frame-parallel' to enable frame parallel decode in master branch.
    
    In frame parallel decode, libvpx decoder decodes several frames on all
    cpus in parallel fashion. If not being flushed, it will only return frame
    when all the cpus are busy. If getting flushed, it will return all the
    frames in the decoder. Compare with current serial decode mode in which
    libvpx decoder is idle between decode calls, libvpx decoder is busy
    between decode calls. VP9 frame parallel decode is >30% faster than serial
    decode with tile parallel [1;31mthread[ming which will makes devices play 1080P
    VP9 videos more easily.
    
    * frame-parallel:
      Add error handling for frame parallel decode and unit test for that.
      Fix a bug in frame parallel decode and add a unit test for that.
      Add two test vectors to test frame parallel decode.
      Add key frame seeking to webmdec and webm_video_source.
      Implement frame parallel decode for VP9.
      Increase the [1;31mthread[m test range to cover 5, 6, 7, 8 [1;31mthread[ms.
      Fix a bug in adding frame parallel unit test.
      Add VP9 frame-parallel unit test.
      Manually pick "Make the api behavior conform to api spec." from master branch.
      Move vp9_dec_build_inter_predictors_* to decoder folder.
      Add segmentation map array for current and last frame segmentation.
      Include the right header for VP9 worker [1;31mthread[m.
      Move vp9_[1;31mthread[m.* to common.
      ctrl_get_reference does not need user_priv.
      Seperate the frame buffers from VP9 encoder/decoder structure.
      Revert "Revert "Revert "Revert 3 patches from Hangyu to get Chrome to build:"""
    
     Conflicts:
           test/codec_factory.h
           test/decode_test_driver.cc
           test/decode_test_driver.h
           test/invalid_file_test.cc
           test/test-data.sha1
           test/test.mk
           test/test_vectors.cc
           vp8/vp8_dx_iface.c
           vp9/common/vp9_alloccommon.c
           vp9/common/vp9_entropymode.c
           vp9/common/vp9_loopfilter_[1;31mthread[m.c
           vp9/common/vp9_loopfilter_[1;31mthread[m.h
           vp9/common/vp9_mvref_common.c
           vp9/common/vp9_onyxc_int.h
           vp9/common/vp9_reconinter.c
           vp9/decoder/vp9_decodeframe.c
           vp9/decoder/vp9_decodeframe.h
           vp9/decoder/vp9_decodemv.c
           vp9/decoder/vp9_decoder.c
           vp9/decoder/vp9_decoder.h
           vp9/encoder/vp9_encoder.c
           vp9/encoder/vp9_pickmode.c
           vp9/encoder/vp9_rdopt.c
           vp9/vp9_cx_iface.c
           vp9/vp9_dx_iface.c
    
    Change-Id: Ib92eb35851c172d0624970e312ed515054e5ca64

[33mcommit 79b88cc2a57a9c27bf12e053204dbc5d0c141ec6[m
Merge: eceedbff2 6d7b7abf5
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jan 20 11:45:03 2015 -0800

    Merge "Add non420 code in multi-[1;31mthread[med loopfilter"

[33mcommit 6d7b7abf5215ab94c835180d1c90a2365fdbcaf9[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Jan 16 15:47:25 2015 -0800

    Add non420 code in multi-[1;31mthread[med loopfilter
    
    Added non420 part back to make it consistent with single
    [1;31mthread[m code in vp9_loopfilter.c.
    
    Change-Id: I8ca255d73bffebae294d2627d6655eafe535cb90

[33mcommit 7b232717af43e5271073119ce452d31860cd6a36[m
Merge: cb749125e e76eaf05b
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jan 20 09:27:08 2015 -0800

    Merge "vp9_e[1;31mthread[m: add parallel loopfilter"

[33mcommit e76eaf05b1a20b906d166b7e8db402a9883c6025[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jan 6 14:14:26 2015 -0800

    vp9_e[1;31mthread[m: add parallel loopfilter
    
    1. Added row-based loopfilter in encoder;
    2. Moved common multi-[1;31mthread[med loopfilter functions from decoder
       to common;
    3. Merged multi-[1;31mthread[med loopfilter code, and made encoder/
       decoder call same function to reduce code duplication.
    
    Encoder tests showed that 1% - 2% speedup was seen for good-quality
    2-pass mode(at speed 3); 1% - 3% speedup using 2 [1;31mthread[ms and 4% - 6%
    speedup using 4 [1;31mthread[ms were seen for real-time mode(at speed 7).
    
    Change-Id: I8a4ac51c2ad9bab9fa7b864e90743931c53ec1c4

[33mcommit d3ccb3fe2eb1af8ceea0ed267c4a118e0253ebff[m
Merge: 5ca96f9d6 99b99831e
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Jan 15 09:21:31 2015 -0800

    Merge "Align [1;31mthread[m data in vp9_e[1;31mthread[m"

[33mcommit 99b99831e467ad97336103e48f22e9c7956a51ef[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Jan 14 15:51:56 2015 -0800

    Align [1;31mthread[m data in vp9_e[1;31mthread[m
    
    On some platforms, such as 32bit Windows and 32bit Mac, the allocated
    memory isn't aligned automatically. The [1;31mthread[m data is aligned to
    ensure the correct access in SIMD code.
    
    Change-Id: I1108c145fe982ddbd3d9324952758297120e4806

[33mcommit 1f0c4991d6b719248899068a3ef7f3ae33aaff3a[m
Merge: f4eab151c d80d94498
Author: Frank Galligan <fgalligan@google.com>
Date:   Mon Dec 22 11:37:24 2014 -0800

    Merge "Add multi[1;31mthread[m encodes to the encode perf test"

[33mcommit d80d94498c77c247279ddf43eea342eefd9765e8[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Fri Dec 19 11:21:52 2014 -0800

    Add multi[1;31mthread[m encodes to the encode perf test
    
    Encode the files with 1, 2, and 4 [1;31mthread[ms.
    
    Explicitly turn on error resilient and frame parallel
    decoding and turn off altref frames.
    
    Change-Id: I02b66f72b7d35c666c3ba685b33015508e440209

[33mcommit 3a3c71aaa5366e24502bb04d49adb1f866515fd4[m
Merge: 129a2bda2 7c2c2bea9
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Dec 19 12:33:27 2014 -0800

    Merge "vp9_e[1;31mthread[m: add the multi-[1;31mthread[med encoder unit tests"

[33mcommit 953dd1894d8c87451f9b8798a3962eccaeb6c5d0[m
Author: James Zern <jzern@google.com>
Date:   Wed Dec 17 12:00:05 2014 -0800

    vp9: add per-tile longjmp error handling
    
    this avoids longjmp'ing from another [1;31mthread[m on error which will cause
    undesired behavior
    
    Change-Id: Ic9074ed8cc4243944bf2539d6e482f213f4e8c86

[33mcommit b32ba09d3568492229da222740c0e18afc3f0094[m
Merge: 1c69be6e7 cd6093081
Author: James Zern <jzern@google.com>
Date:   Thu Dec 18 18:48:30 2014 -0800

    Merge "make vp9 encoder static initializers [1;31mthread[m safe"

[33mcommit 7c2c2bea969b23f5cb64847afbcda90e2d480a59[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Dec 16 11:10:20 2014 -0800

    vp9_e[1;31mthread[m: add the multi-[1;31mthread[med encoder unit tests
    
    The unit tests for VP9 multi-[1;31mthread[med encoder are added, which
    carry out tests for all three modes(i.e. kTwoPassGood, kOnePassGood
    and kRealTime), and speeds ranging from 1 to 8. A 1280x720 test
    clip is used, which is encoded into multiple tiles. The number of
    [1;31mthread[ms is num_of_tiles.
    
    Change-Id: I04419eeca145ad841c9c527603668239a82e7fbd

[33mcommit cd6093081495b89d6c55b84ff3ef02fee19f85fc[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu Dec 18 15:50:46 2014 -0800

    make vp9 encoder static initializers [1;31mthread[m safe
    
    Change-Id: If2d0888d13ebe52bc7c3b16f16319408a86ab6de

[33mcommit a3a4a34c60b4ed8e1bccb39495d6f9524028c3a0[m
Merge: bb6e47c1c eba9c762a
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Dec 5 08:23:49 2014 -0800

    Merge "vp9_e[1;31mthread[m: the tile-based multi-[1;31mthread[med encoder"

[33mcommit eba9c762a1710e29967207a1df092ae0eca40313[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Dec 2 15:47:41 2014 -0800

    vp9_e[1;31mthread[m: the tile-based multi-[1;31mthread[med encoder
    
    Currently, VP9 supports column-tile encoding, which allows a frame
    to be encoded in multiple column tiles independently. The number of
    column tiles are set by encoder option "--tile-columns". This
    provides a way to encode a frame in parallel.
    
    Based on previous set of patches, this patch implemented the tile-
    based multi-[1;31mthread[med encoder. Each [1;31mthread[m processes one or more
    tiles.
    
    Usage:
    For HD clips:
    --tile-columns=2 --[1;31mthread[ms=1/2/3/4
    
    While using 4 [1;31mthread[ms, tests showed that the encoder achieved
    2.3X - 2.5X speedup at good-quality speed 3, and 2X speedup at
    realtime speed 5.
    
    Change-Id: Ied987f8f2618b1283a8643ad255e88341733c9d4

[33mcommit d5937cd268330da4e80683444bc463d2016c07ee[m
Merge: 8f3db5f22 6f7ab0145
Author: James Zern <jzern@google.com>
Date:   Wed Dec 3 14:30:55 2014 -0800

    Merge "vp9: sync [1;31mthread[ms after a longjmp"

[33mcommit 6f7ab01451c3b1401a7a4823947d73f86aebe893[m
Author: James Zern <jzern@google.com>
Date:   Tue Dec 2 16:51:27 2014 -0800

    vp9: sync [1;31mthread[ms after a longjmp
    
    Synchronize all [1;31mthread[ms immediately as a subsequent decode call may
    cause a resize invalidating some allocations.
    
    fixes one aspect of crbug.com/437655
    
    Change-Id: Ie993b62c2756478543206ddbe43ec6268d90a470

[33mcommit 7af927e324d254b8dab06982fe68a849e9824c8c[m
Merge: 661802b61 0993bef7e
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Dec 1 12:49:03 2014 -0800

    Merge "vp9_e[1;31mthread[m: calculate and save the tok starting address for tiles"

[33mcommit 0993bef7e99ed1935dfdc245cb2db34f73f3bc32[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Nov 25 16:53:47 2014 -0800

    vp9_e[1;31mthread[m: calculate and save the tok starting address for tiles
    
    Each tile's tok starting address is calculated before the encoding
    process. These addresses are stored so that the same calculation
    won't be done again in packing bit stream.
    
    Change-Id: I0a3be0301f002260c19a850303f2f73ebc47aa50

[33mcommit edbd61e1362978150b5681125d93cb2bffbb5c53[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Nov 21 11:11:06 2014 -0800

    vp9_e[1;31mthread[m: modify VP9_COMP structure
    
    This patch modified struct VP9_COMP. Created a struct ThreadData
    to include data that need to be copied for each [1;31mthread[m. In
    multiple [1;31mthread[m case, one [1;31mthread[m processes one tile. all [1;31mthread[ms
    share one copy of VP9_COMP,
    (refer to VP9_COMP *cpi in the code)
    but each [1;31mthread[m has its own copy of ThreadData,
    (refer to ThreadData *td in the code).
    Therefore, within the scope of encode_tiles(), both cpi and td
    need to be passed as function parameters.
    
    In single [1;31mthread[m case, the FRAME_COUNTS pointer in ThreadData
    points to "counts" in VP9_COMMON.
    
    Change-Id: Ib37908b2d8e2c0f4f9c18f38017df5ce60e8b13e

[33mcommit 508b345b44efeb0a48d76a7d8d9472e8b9ec6916[m
Merge: 590ba7f75 a0d1582d6
Author: James Zern <jzern@google.com>
Date:   Fri Nov 21 11:35:59 2014 -0800

    Merge "vp9_[1;31mthread[m_test: fix 'had_error' assignment"

[33mcommit 72522dbc86673569c03127f37f0f42d244ed7b73[m
Merge: b74eeb867 379334c2d
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Nov 20 16:51:31 2014 -0800

    Merge "vp9_e[1;31mthread[m: move filter_cache out of RD_OPT struct"

[33mcommit a0d1582d65b156578ea49bef1d84742e118bc239[m
Author: James Zern <jzern@google.com>
Date:   Thu Nov 20 14:16:28 2014 -0800

    vp9_[1;31mthread[m_test: fix 'had_error' assignment
    
    worker hooks return false on error, fix the assignment in Execute() used
    in the TestSerialInterface test
    
    Change-Id: I93c2e45f270330ae6d35a3a303411c4ee0f31337

[33mcommit 54ba65a63edb79d46156058acb79ed1eaf5b8aa5[m
Merge: 0b71fdbf8 ad7586a9e
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Nov 20 14:00:37 2014 -0800

    Merge "vp9_e[1;31mthread[m: move max/min partition size to mb struct"

[33mcommit 379334c2d818c5f8bbd757a591ac7f42b8023e34[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Nov 20 12:42:36 2014 -0800

    vp9_e[1;31mthread[m: move filter_cache out of RD_OPT struct
    
    Similar to mask_filter, the filter_cache in RD_OPT struct can be
    moved out, and declared as a local variable since it is only
    used in pick_inter_mode functions.
    
    Change-Id: I412b99cca82bade07ac912064ec03dd1de6b2c17

[33mcommit 0b71fdbf80092d826ad802d6d588b077bdbd6bec[m
Merge: bdaa3eaf4 b0efddd8e
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Nov 20 13:02:55 2014 -0800

    Merge "vp9_e[1;31mthread[m: change mask_filter to a local variable"

[33mcommit bdaa3eaf43dae175d104b444c56e3d2411912c64[m
Merge: 5db4b7778 70c9d2983
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Nov 20 12:27:34 2014 -0800

    Merge "Revert "vp9_e[1;31mthread[m: include a pointer to mb in VP9_COMP""

[33mcommit b0efddd8e62bc41ecc26f43754bae9b26ab4b0b2[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Nov 20 09:41:49 2014 -0800

    vp9_e[1;31mthread[m: change mask_filter to a local variable
    
    The mask_filter in RD_OPT struct is used to record rd result in
    filter decision. It is only used in pick_inter_mode functions,
    and is removed from the struct and declared as a local variable.
    
    Change-Id: I3c95c8632ba7241591ce00ef2ef5677b5e297d7b

[33mcommit ad7586a9e1e6d7b9f8d7289934b433581ae3882a[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Nov 20 09:24:50 2014 -0800

    vp9_e[1;31mthread[m: move max/min partition size to mb struct
    
    The max_partition_size and max_partition_size are set at the
    beginning while setting speed features, and then adjusted at
    SB level. Moving them to mb struct ensures there is a local
    copy for each [1;31mthread[m.
    
    Change-Id: I7dd08dc918d9f772fcd718bbd6533e0787720ad4

[33mcommit 70c9d2983b107e0c84cb8c2786c801b26cc881a7[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Nov 19 19:04:07 2014 -0800

    Revert "vp9_e[1;31mthread[m: include a pointer to mb in VP9_COMP"
    
    This reverts commit 6906d218ddd1af97228a797f4558e402231d94f1.
    
    Another way will be used to handle mb struct.
    
    Change-Id: Ic1111a46b2b1ee00f8f9e3fcd4cf3eb6030b2dc4

[33mcommit 3f4a93baf20500c3b75c71da5b6c728f7caf5207[m
Merge: c3a9056df d0b547c67
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Nov 17 08:57:38 2014 -0800

    Merge "vp9_e[1;31mthread[m: combine encoder counts in separate struct"

[33mcommit d0b547c6760270e07571f5a592549fbdabcd08c4[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Nov 14 16:04:15 2014 -0800

    vp9_e[1;31mthread[m: combine encoder counts in separate struct
    
    Several frame counters in encoder are updated at SB level. Combine
    those counters and put them in a separate struct, which allows us
    to allocate one copy for each [1;31mthread[m.
    
    Change-Id: I00366296a13c0ada4d8fa12f5e07728388b6cab7

[33mcommit 035acac0081b245bbb9671d4ab1d0fbd97583914[m
Merge: f7168490b 6906d218d
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Nov 14 15:11:47 2014 -0800

    Merge "vp9_e[1;31mthread[m: include a pointer to mb in VP9_COMP"

[33mcommit 6906d218ddd1af97228a797f4558e402231d94f1[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Nov 14 12:31:06 2014 -0800

    vp9_e[1;31mthread[m: include a pointer to mb in VP9_COMP
    
    Modified VP9_COMP struct to include MACROBLOCK *mb. This change
    makes it feasible in multi-[1;31mthread[m case to allocate a mb for each
    [1;31mthread[m.
    
    Change-Id: I624d6d1aa9c132362200753e5d90b581b1738d6e

[33mcommit 807885b5e01f0f00edba27b611b9a0cfd49b5796[m
Merge: e4e85ad4a 8ee605f18
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Nov 13 18:35:01 2014 -0800

    Merge "vp9_e[1;31mthread[m: modify the cyclic refresh struct"

[33mcommit 8ee605f188e97835b28c549f2423c74079d7c466[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Nov 13 13:38:23 2014 -0800

    vp9_e[1;31mthread[m: modify the cyclic refresh struct
    
    Two members in struct CYCLIC_REFRESH
      int64_t projected_rate_sb;
      int64_t projected_dist_sb;
    are updated at the superblock level, which makes them shared data
    in the multi-[1;31mthread[m situation, and requires extra work to handle
    them. However, those values are updated and used immediately, and
    therefore can be removed. This patch cleaned up the code and
    removed the two members.
    
    Change-Id: I2c6ee4552bf49fb63ce590cdb47f9723974fffb1

[33mcommit 122843343021b75fced01ebbca46e1f95b7151ab[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Oct 29 18:38:18 2014 -0700

    Modify the frame context memory deallocation
    
    This patch was to fix the vpxdec fuzzing3 test failure. When an
    error occurs, setjmp() is invoked, which calls the decoder
    removing routine. In multiple [1;31mthread[m situation, other [1;31mthread[ms
    could try to access the frame context memory that is already
    deallocated, thus causing a segfault.
    
    An invalid unit test was added for this issue.
    
    Change-Id: Ida7442154f3d89759483f0f4fe0324041fffb952

[33mcommit 330a6b27567c4d0e4c8e3548a339f21a6168ba69[m
Merge: f271bed67 7c7e4d4eb
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Oct 22 17:10:39 2014 -0700

    Merge "vp9_e[1;31mthread[m: allocate frame contexts outside VP9_COMMON struct"

[33mcommit 7c7e4d4eb8ddc1f7884dcab380a5850fef8b2add[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Oct 22 14:37:38 2014 -0700

    vp9_e[1;31mthread[m: allocate frame contexts outside VP9_COMMON struct
    
    This patch allocated frame contexts outside VP9_COMMON. This allows
    multiple [1;31mthread[ms to share the same copy of frame contexts, and
    reduces the overhead. It also guarantees the correct update of
    these contexts during bitstream packing. This patch doesn't change
    encoding result.
    
    Change-Id: Ic181a2460b891d1d587278a6d02d8057b9dbd353

[33mcommit 9ce3a7d76c5ef702337b96b9aa2c944da1b31869[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Wed Jul 30 20:43:40 2014 -0700

    Implement frame parallel decode for VP9.
    
    Using 4 [1;31mthread[ms, frame parallel decode is ~3x faster than single [1;31mthread[m
    decode and around 30% faster than tile parallel decode for frame parallel
    encoded video on both Android and desktop with 4 [1;31mthread[ms. Decode speed is
    scalable to [1;31mthread[ms too which means decode could be even faster with more [1;31mthread[ms.
    
    Change-Id: Ia0a549aaa3e83b5a17b31d8299aa496ea4f21e3e

[33mcommit e9b8810b4d5c1db78ef07b6061b05d2d62d55eb6[m
Author: James Zern <jzern@google.com>
Date:   Sun Aug 31 13:16:37 2014 -0700

    move LFWorkerData allocation to VP9LfSync
    
    this removes an assumption that worker->data1 would be pointing to a
    TileWorkerData allocation.
    additionally, within the multi-[1;31mthread[med loopfilter pass VP9LfSync as a
    parameter to the worker hook, removing the need for a shadow pointer in
    LFWorkerData.
    
    Change-Id: Ic7b2faa34e3eb59dbcb8a7c67f333448fa047c88

[33mcommit ff3ae42d8ce434dd23cb6544b53a3afce9408565[m
Author: James Zern <jzern@google.com>
Date:   Sat Aug 30 20:15:37 2014 -0700

    vp9: store TileWorkerData allocations separately
    
    move them from VP9Worker::data[12] to allow the structure to be reused a
    bit more naturally by the multi-[1;31mthread[med loopfilter.
    
    Change-Id: I31b49c9e93ca744fd7f6d6ed8696671188fb2c1d

[33mcommit 2215d2f135d9e0dbdd7389e336dfa8b72aa99bc7[m
Merge: 6d65cb155 a5da7dea3
Author: James Zern <jzern@google.com>
Date:   Tue Sep 9 16:50:28 2014 -0700

    Merge changes If8887e1d,I36bfc9c8,I3d1e6c42
    
    * changes:
      vp9_d[1;31mthread[m: simplify loop_filter_row_worker signature
      simplify vp9_loop_filter_worker signature
      vp9_decodeframe: simplify tile_work_hook signature

[33mcommit a5da7dea39d78c9d849406058df4231d50d474d6[m
Author: James Zern <jzern@google.com>
Date:   Sat Aug 30 18:05:56 2014 -0700

    vp9_d[1;31mthread[m: simplify loop_filter_row_worker signature
    
    use the type names directly in the function declaration rather than
    (void *arg1, void *arg2)
    
    Change-Id: If8887e1dbcdf84842783a92f91668bef6223c9e5

[33mcommit 4d0d78424b6aff08a8c11046a9001184425d8485[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Fri Sep 5 14:26:16 2014 -0700

    Increase the [1;31mthread[m test range to cover 5, 6, 7, 8 [1;31mthread[ms.
    
    Change-Id: Id25c294720551bb5153987d8758668befaa57929

[33mcommit a3ef7d5a5086b2aa2832ff92b23fa6b6b0664c98[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Fri Aug 8 14:49:55 2014 -0700

    Add VP9 frame-parallel unit test.
    
    Make sure VP9 frame-parallel decode passes all the standard
    test vectors. Only test running with 2,3,4 [1;31mthread[ms now.
    
    Also refactor the video decode test driver to support passing
    in decode flags which is used to enable frame-parallel decode.
    
    Change-Id: I6a712464232c2e13681634951c7e176312522e1e

[33mcommit 7eca086707f3e0f631a5be8952f594f4c387ca74[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Thu Jul 17 14:25:41 2014 -0700

    Add segmentation map array for current and last frame segmentation.
    
    The original implementation only allocates one segmentation map and this
    works fine for serial decode. But for frame parallel decode,  each [1;31mthread[m
    need to have its own segmentation map and the last frame segmentation map
    should be provided from last frame decoding [1;31mthread[m.
    
    After finishing decoding a frame, [1;31mthread[m need to serve the old segmentation
    map that associate with the previous decoded frame. The [1;31mthread[m also need to
    use another segmentation map for decoding the current frame.
    
    Change-Id: I442ddff36b5de9cb8a7eb59e225744c78f4492d8

[33mcommit c1259aa343aa9483b43d59d365c68677428bf511[m
Author: James Zern <jzern@google.com>
Date:   Mon Jul 14 18:45:50 2014 -0700

    invalid_file_test: add an operator<< for DecodeParam
    
    Improves the --gtest_list_tests output and avoids a valgrind warning in
    gtest's testing::internal2::PrintBytesInObjectTo() due to padding in the
    structure.
    
    old:
    VP9/InvalidFileTest.
      ReturnCode/0  # GetParam() = (0x9d5308, 16-byte object <01-00 00-00 00-00 00-00 37-02 73-00 00-00 00-00>)
    
    new:
    VP9/InvalidFileTest.
      ReturnCode/0  # GetParam() = (0x9d5308, [1;31mthread[ms: 1 file: invalid-vp90-01-v2.webm)
    
    Change-Id: Ifb9c66fba2e72272bd591a3f6273aeb6bda6af4a

[33mcommit 4c08120ca016242701fee62f83f826d48a9bb315[m
Merge: 3cffa0c74 294b84979
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Jul 14 16:09:16 2014 -0700

    Merge "Include the right header for VP9 worker [1;31mthread[m." into frame_parallel

[33mcommit 294b849796d7c359c61aacc0390cf7da16565f64[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Fri Jul 11 15:28:20 2014 -0700

    Include the right header for VP9 worker [1;31mthread[m.
    
    p[1;31mthread[m.h is not supported in windows. vp9_[1;31mthread[m.h includes
    the emulation layer for p[1;31mthread[m in windows.
    
    Change-Id: I2b1c8ec299928472faca7ebeea998170c9f4d744

[33mcommit 3cffa0c74ee6689e22a4a416b219b50676ed669e[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Jul 7 14:52:19 2014 -0700

    Move vp9_[1;31mthread[m.* to common.
    
    Prepare for frame parallel decoding, the reference count buffers
    need to be protected by mutex. Move vp9_[1;31mthread[m.* to common
    folder so that those buffers could use cross-platform mutex
    from vp9_[1;31mthread[m.*.
    
    (cherry picked from commit 337e8015c9deaf8ab7e8d0c3c132160a77dd1590)
    
    Change-Id: I0587a08447925f4554d7788686a31483c2ae3f37

[33mcommit 8a7cc1f47bde271c5200550f1f7e7f6a55872b65[m
Merge: c00e9c470 8701ed027
Author: James Zern <jzern@google.com>
Date:   Thu Jul 10 23:19:55 2014 -0700

    Merge "update vp9_[1;31mthread[m.c"

[33mcommit 8701ed0270dd8da44efff5e19f3b0b6d3cac5b8b[m
Author: James Zern <jzern@google.com>
Date:   Wed Jul 9 12:45:21 2014 -0700

    update vp9_[1;31mthread[m.c
    
    pull the latest from libwebp.
    
    Original source:
     http://git.chromium.org/webm/libwebp.git
     100644 blob 264210ba2807e4da47eb5d18c04cf869d89b9784 src/utils/[1;31mthread[m.c
    
    commit 46fd44c1042c9903b2f1ab87e9f200a13c7e702d
    Author: James Zern <jzern@google.com>
    Date:   Tue Jul 8 19:53:28 2014 -0700
    
        [1;31mthread[m: remove harmless race on status_ in End()
    
        if a [1;31mthread[m was still doing work when End() was called there'd be a race
        on worker->status_. in these cases, however, the specific value is
        meaningless as it would be >= OK and the [1;31mthread[m would have been shut
        down properly, but we'll check 'impl_' instead to avoid any potential
        TSan/DRD reports.
    
        Change-Id: Ib93cbc226a099f07761f7bad765549dffb8054b1
    
    Change-Id: Ib0ef25737b3c6d017fa74822e21ed58508230b91

[33mcommit 2d8339eeabf9806a6f487a331761894eede253d6[m
Merge: a581da218 2e0588bc4
Author: James Zern <jzern@google.com>
Date:   Wed Jul 9 17:46:42 2014 -0700

    Merge "vp9_decoder_remove: destroy common after [1;31mthread[m shutdown"

[33mcommit 2e0588bc46b073d8bf65600facdcb31d6876d531[m
Author: James Zern <jzern@google.com>
Date:   Wed Jul 9 11:08:06 2014 -0700

    vp9_decoder_remove: destroy common after [1;31mthread[m shutdown
    
    in a failure case the [1;31mthread[ms may still be running and share a reference
    to VP9_COMMON
    
    Change-Id: I867034b4b55f133663b8cbf6ca06e72acf952849

[33mcommit b84ee5a3d07a569968dc4fdf9c9d8d3bea155bd7[m
Merge: 3008da9de 337e8015c
Author: Hangyu Kuang <hkuang@google.com>
Date:   Wed Jul 9 10:16:13 2014 -0700

    Merge "Move vp9_[1;31mthread[m.* to common."

[33mcommit 337e8015c9deaf8ab7e8d0c3c132160a77dd1590[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Jul 7 14:52:19 2014 -0700

    Move vp9_[1;31mthread[m.* to common.
    
    Prepare for frame parallel decoding, the reference count buffers
    need to be protected by mutex. Move vp9_[1;31mthread[m.* to common
    folder so that those buffers could use cross-platform mutex
    from vp9_[1;31mthread[m.*.
    
    Change-Id: I541277cf15eefed6641555944f67f4a0bcdc8154

[33mcommit 8aafd3405081ca178196b5a6250bcbf438c025f5[m
Merge: 82fd084b3 e656f44c2
Author: James Zern <jzern@google.com>
Date:   Tue Jul 1 20:46:53 2014 -0700

    Merge changes I875ac5a7,I2b13369d,I9ceb47a9
    
    * changes:
      update vp9_[1;31mthread[m.[hc]
      vp9_[1;31mthread[m_test: remove unnecessary c_str()'s
      vp9_[1;31mthread[m_test: factorize decode loop

[33mcommit 2f16e79e620dff35df98e1cd939b081ca0c96b6c[m
Merge: 79ceb79b3 415b84bee
Author: James Zern <jzern@google.com>
Date:   Tue Jul 1 15:25:45 2014 -0700

    Merge "vp9_[1;31mthread[m_test: add 'Thread' to test names"

[33mcommit e656f44c241293134445496c3c005a0e543eb022[m
Author: James Zern <jzern@google.com>
Date:   Thu Jun 19 21:14:51 2014 -0700

    update vp9_[1;31mthread[m.[hc]
    
    pull the latest from WebP, which adds a worker interface abstraction
    allowing an application to override init/reset/sync/launch/execute/end
    
    this has the side effect of removing a harmless, but annoying, TSan
    warning.
    
    Original source:
     http://git.chromium.org/webm/libwebp.git
      100644 blob 08ad4e1fecba302bf1247645e84a7d2779956bc3 src/utils/[1;31mthread[m.c
      100644 blob 7bd451b124ae3b81596abfbcc823e3cb129d3a38 src/utils/[1;31mthread[m.h
    
    Local modifications:
     - s/WebP/VP9/g
     - camelcase functions -> lower with _'s
     - associate '*' with the variable, not the type
    
    Change-Id: I875ac5a74ed873cbcb19a3a100b5e0ca6fcd9aed

[33mcommit 8c6263e8dc9e1656057e51d7cd916b4db26b1aea[m
Author: James Zern <jzern@google.com>
Date:   Sat Jun 21 19:38:52 2014 -0700

    vp9_[1;31mthread[m_test: remove unnecessary c_str()'s
    
    EXPECT_EQ() works with strings
    
    Change-Id: I2b13369d2aa7ff305ee516e6cb73bd099f8dead9

[33mcommit 0b27ed434c50db2529077b285bcc24b80e97a983[m
Author: James Zern <jzern@google.com>
Date:   Sat Jun 21 19:28:36 2014 -0700

    vp9_[1;31mthread[m_test: factorize decode loop
    
    + add a SCOPED_TRACE with the current filename
    
    Change-Id: I9ceb47a9154bc0d9f9878a83b707e8ed935790f9

[33mcommit 415b84bee03b15947940a3375cfc66535794a9ed[m
Author: James Zern <jzern@google.com>
Date:   Sat Jun 21 19:16:14 2014 -0700

    vp9_[1;31mthread[m_test: add 'Thread' to test names
    
    s/VP9DecodeMTTest/VP9DecodeMultiThreadedTest/
    
    this enables simpler test filtering
    
    Change-Id: I010a451cf32fa5a95db6734cc22f331f0a0d515a

[33mcommit 783107fd45466d23afa0c9f0019121393b26b414[m
Merge: acc0fec3d 9aa4fad73
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Mon Jun 30 08:08:53 2014 -0700

    Merge "silence unused parm warning for worker [1;31mthread[m in loop filter"

[33mcommit 9aa4fad73c880cfebdb0eb6456472f4e8e421bbf[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Sun Jun 29 09:30:59 2014 -0700

    silence unused parm warning for worker [1;31mthread[m in loop filter
    
    Change-Id: Id51468f99f8970b8795ce2d254344f4b8d7817d0

[33mcommit e4c5f7e2b6b51417cce2e5acb3fc286a6fc32d24[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Jun 10 14:48:16 2014 -0700

    Delay decreasing reference count in frame-parallel decoding.
    
    The current decoding scheme will decrease the reference count
    of the output frame when finish decoding. Then the application
    could copy the frame from the decoder buffer to application buffer.
    In frame-parallel decoding, a decoded frame will not be outputted
    until several frames later which depends on [1;31mthread[m numbers. So
    the decoded frame's reference count should be decreased only
    after application finish copying the frame out. But due to the
    limitation of vpx_codec_get_frame, decoder could not know when
    application finish decoding. So use a index last_show_frame to
    release the last output frame's reference count.
    
    Change-Id: I403ee0d01148ac1182e5a2d87cf7dcc302b51e63

[33mcommit cdffeaaae05f9261ab9be5aebe0fbb2454b295fb[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Jun 9 16:01:53 2014 -0700

    Add mode info arrays and mode info index.
    
    In non frame-parallel decoding, this works the same way as
    current decoding scheme. Every time after decoder finish
    decoding a frame, it will swap the current mode info pointer
    and  previous mode info pointer if the decoded frame needs
    to be shown. Both mode info pointer and previous mode info
    pointer are from mode info arrays.
    
    In frame-parallel decoding, this will become more complicated
    as current frame's mode info pointer will be shared with next
    frame as previous mode info pointer. But when one decoder
    [1;31mthread[m finishes decoding one frame and starts to work on next
    available frame, it needs to retain the decoded frame's mode
    info pointers until next frame finishes decoding. The mode info
    index will serve this purpose. The decoder will use different
    buffer in the mode info arrays and use the other buffer to save
    previous decoded frame’s mode info.
    
    Change-Id: If11d57d8eb0ee38c8876158e5482177fcb229428

[33mcommit 20c1edf6124fde58b9f755e39129289918a5fd1a[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Thu May 15 10:51:55 2014 -0700

    Refactor decode_tiles and loopfilter code.
    
    The current decode_tiles decodes the frame one tile by one tile
    and then loopfilter the whole frame or use another worker [1;31mthread[m to
    do loopfiltering.
    
    |------|------|------|------|
    |Tile1-|Tile2-|Tile3-|Tile4-|
    |------|------|------|------|
    
    For example, if a tile video has one row and four cols, decode_tiles
    will decode the Tile1, then Tile2, then Tile3, then Tile4.
    And during decode each tile, decode_tile will decode row by row in
    each tile.
    
    For frame parallel decoding, decode_tiles will decode video in row order
    across the tiles. So the order will be:
    "Decode 1st row of Tile1" -> "Decode 1st row of Tile2"
    -> "Decode 1st row of Tile3" -> "Decode 1st row of Tile4"
    -> "Decode 2nd row of Tile1" -> "Decode 2nd row of Tile2"
    -> "Decode 2nd row of Tile3" -> "Decode 2nd row of Tile4"-> "loopfilter 1st row"
    
    Change-Id: I2211f9adc6d142fbf411d491031203cb8a6dbf6b

[33mcommit 04c40d3d936fb504f8e7ddb6cd497945d1a89d1a[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue May 13 10:28:47 2014 -0700

    cleanup -wextra warnings:
    
      vp9_decoder.c
      vp9_d[1;31mthread[m.c
    
    Change-Id: Iaafe941545db98e9e3559096a955894646084ac2

[33mcommit 0dacecaf20bfc76f32f2daab4b524587349e863c[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu May 8 16:24:36 2014 -0700

    Removing VP9DecoderConfig.
    
    We only used two members from that struct: max_[1;31mthread[ms and inv_tile_order.
    Moving them directly to VP9Decoder struct.
    
    Change-Id: If696a4e5b5b41868a55f3cc971e1d7c1dd9d5f69

[33mcommit b5bf64668e57b5575c906ca340100e9cfebe33aa[m
Merge: c01e86cc9 69c6671ea
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Apr 10 21:44:33 2014 -0700

    Merge "Cleaning up vp9_d[1;31mthread[m.{c, h}."

[33mcommit 69c6671eadd1789efb400758f9e0ee44dd43d271[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Apr 10 16:17:49 2014 -0700

    Cleaning up vp9_d[1;31mthread[m.{c, h}.
    
    Change-Id: If33087462293605f79d9281af133091fff33a876

[33mcommit 6ae58931d6902ca5ac7865e6abf155adf878662d[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Sun Apr 6 20:07:14 2014 -0700

    Fix decoder resolution change with tiles
    
    There was a bug with the decoder that if you started the decoder
    with more [1;31mthread[ms than the first frame had tile columns. Afterwards
    tried to decode a frame with more tile columns than the first frame,
    the decoder would hang. E.g. run vpxdec --[1;31mthread[ms=4. The first frame
    had two tile columns, then the next key frame had 4 tile columns, the
    decoder would hang. If you started with 4 tiles and switched to 2
    tiles the decoder would be fine. The issue is that the worker the [1;31mthread[m
    loop is using is stale.
    
    I added a test vector "vp90-2-14-resize-848x480-1280x720.webm" that
    exhibited the bug.
    
    Change-Id: I7bdd47241a52ac0fe1c693a609bc779257e94229

[33mcommit ebb4a26202dec4b673ecbfe517b7132ba336be29[m
Merge: 0e84fb08e bc2761d3c
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Mar 24 17:19:48 2014 -0700

    Merge "Align [1;31mthread[ming LFWorkerData to 32 bytes."

[33mcommit bc2761d3cb0ae78504dcd2ad7ceead3fd55018c5[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Mar 24 12:48:27 2014 -0700

    Align [1;31mthread[ming LFWorkerData to 32 bytes.
    
    This is to silent a number misalignment warning reported by valgrind.
    
    Change-Id: Ia47a06010b28d7a88dde21f3e4ccb9308fc6f8cf

[33mcommit 7c8a66664cd199b57a96992d51d7e8e312d0c12b[m
Merge: e876cf386 4e44457b4
Author: James Zern <jzern@google.com>
Date:   Sat Feb 8 11:43:20 2014 -0800

    Merge "vp9_d[1;31mthread[m: interleave mutex/cond alloc+init"

[33mcommit 4e44457b4d10229928c03476f6b1b28da8ee3fa1[m
Author: James Zern <jzern@google.com>
Date:   Wed Feb 5 23:19:26 2014 -0800

    vp9_d[1;31mthread[m: interleave mutex/cond alloc+init
    
    this ensures both are properly initialized when calling _dealloc().
    + check the arrays before access
    
    Change-Id: I789af39b41c271b5cb3c029526581b4d9903b895

[33mcommit 903801f1ef7ac8d13d4f57571d048b604e8aaafd[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Dec 27 15:25:54 2013 -0800

    vp9 decoder: row-based multi-[1;31mthread[med loopfilter
    
    Implemented parallel loopfiltering, which uses existing tile-
    decoding [1;31mthread[ms. Each [1;31mthread[m works on one row, and when that row
    is loopfiltered, it moves to next unattended row. To ensure the
    correct filtering order, [1;31mthread[ms are synchronized and one
    superblock is filtered only if the superblocks it depends on are
    filtered already.
    
    To reduce synchronization overhead and speed up the decoder, we use
    nsync > 1 for high resolution.
    
    Performance tests:
    1. on desktop:
    8-tile 4k video using 8 [1;31mthread[ms, speedup: 70% - 80%
    4-tile HD video using 4 [1;31mthread[ms, speedup: ~35%
    2. on mobile device(Nexus 7):
    4-tile 1080p video using 4 [1;31mthread[ms, speedup: 18% - 25%
    4-tile 1080p video using 2 [1;31mthread[ms, speedup: 10% - 15%
    
    Change-Id: If54b4a11960dd706c22d5ad145ad94156031f36a

[33mcommit 345fbfef06cede8f56a4c6cd02242f6ffd53a1c6[m
Author: James Zern <jzern@google.com>
Date:   Thu Dec 5 15:42:47 2013 -0800

    vp9 mt decode: reorder tile decode
    
    reorder the tiles based on size and their presumed complexity. this
    minimizes the cases where the main [1;31mthread[m is waiting on a worker to
    complete.
    
    Change-Id: Ie80642c6a1d64ece884f41683d23a3708ab38e0c

[33mcommit ebb583d2914e787003d08d26c03ab4f87ec10d81[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Dec 4 13:02:33 2013 -0800

    Add a test vector for loopfilter
    
    The test vector exercises the loopfilter behavior at frame boundary.
    
    blue_sky_1080p25.y4m --good --cpu-used=2 --[1;31mthread[ms=0 --profile=0
    --lag-in-frames=25 --limit=300 --min-q=0 --max-q=63 --cq-level=20
    --end-usage=0 --auto-alt-ref=1 -p 2 --kf-max-dist=9999 --kf-min-dist=0
    --drop-frame=0 --static-thresh=0 --bias-pct=50 --minsection-pct=0
    --maxsection-pct=2000 --arnr-maxframes=7 --arnr-strength=5
    --arnr-type=3 --sharpness=0 --undershoot-pct=100 --target-bitrate=6000
    
    Change-Id: Ibd0807395d2fe87f24f81f990369678df3de7c23
For keyword quality:
[33mcommit 83cbe226231b1affa2826cd6b88aef51578d47b8[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Mar 17 18:40:40 2015 -0700

    Speed up non-rd mode decision search
    
    This commit makes the encoder to explicitly calculate the SAD
    associated with the LAST_FRAME motion vector and compare it to
    that of the GOLDEN_FRAME given by integral projection motion
    estimation. It skips the expensive sub-pixel motion search over
    GOLDEN_FRAME when the LAST_FRAME can provide fairly good motion
    compensated prediction [1;31mquality[m.
    
    For dark720p speed -6 single thread goes from
    33304 b/f, 40.070 dB, 18156 ms ->
    33319 b/f, 40.061 dB, 17611 ms
    
    Change-Id: I01bc94b9b598075567a392111046b97a9bc30efe

[33mcommit 2b368097c8b7837caaeddb189f46dcf068989792[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Mar 11 10:16:39 2015 -0700

    vp9_pick_inter_mode(): Use single loop to evaluate inter modes
    
    This commit changes to use single loop to evaluate all inter modes.
    There is no impact on compression [1;31mquality[m and speed, but allow future
    experiment with the order of modes evaluated.
    
    Change-Id: I71696ce1014cbe127e25e98710d835987f5ecc09

[33mcommit 0308e2ee6dbefa7558374b0470d2c3ea17786a04[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Mar 10 17:25:10 2015 -0700

    Some rate control adjustments to control overshoot
    
    Some rate control adjustments to control overshoot
    in the constrained [1;31mquality[m mode.
    
    Change-Id: I8907b9a883642d779009d0a138adfa6ba67e7f41

[33mcommit 78df71221656b0a0d37bff6c16efd743347fa30d[m
Author: Adrian Grange <agrange@google.com>
Date:   Tue Mar 10 09:14:54 2015 -0700

    Fix vp9_compute_qdelta_by_rate loop behavior
    
    The return value from vp9_compute_qdelta_by_rate, which is
    a delta value for the quantizer, could never be 0 if
    (qindex == rc->worst_[1;31mquality[m).
    
    This occurs because target_index was setup unconditionally
    in the loop and yet the loop counter stopped at
    (rc->worst_[1;31mquality[m - 1).
    
    Change-Id: I6b59cd9b5811ff33357e71cd7d814c5e53d291f2

[33mcommit ee5d79995e5e5adc2b4f38f374f3f63624b73c57[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Feb 9 10:21:17 2015 -0800

    Move computation up to frame level
    
    This is to avoid redo the same calculation repeatly, and also allow
    easier adjustments for further experiments.
    
    This commit shall have no effect on [1;31mquality[m/compression.
    
    Change-Id: I4460acf5c808ff5518da18d21e002c5da58af857

[33mcommit bdfb5f986e3e890d5082fab058f866482f9ae1dc[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Feb 4 10:37:57 2015 -0800

    Adjust partitioning threshold based rtc speed
    
    On rtc set:
    speed 7 [1;31mquality[m improves about 0.5%
    speed 8 [1;31mquality[m improves about 1.0%
    
    Encoding time for speed 7 changes from 67804ms to 65889ms
    Encoding time for speed 8 changes from 58659ms to 56808ms
    
    Change-Id: Iabcfb53012fc1b9f3326cdbc167e5758b8c7ad30

[33mcommit 0c6d3a03e196e50410d8e2f06b3a4adb553d17d7[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jan 21 09:32:23 2015 -0800

    Account for chroma component costs in RTC mode decision
    
    This commit allows the encoder to account for additional chroma
    plane costs in the mode decision process, if the current block
    potentially contains significant color change. It improves the
    visual [1;31mquality[m at very low bit-rates.
    
    The compression performance of dark720p is improved by 12.39% in
    speed 6. For jimred at 150 kbps, the PSNR of V component (red)
    increased by 0.2 dB, at the expense of about 5% increase in
    encoding time. Note that for sequences where the chroma components
    are fairly consistent, the encoding time increase is negligible.
    
    On average the rtc set compression performance is improved by
    1.172% in PSNR and 1.920% in SSIM.
    
    Change-Id: Ia55b24ef23a25304f7ec9958fbf07fd6e658505c

[33mcommit fd070220ff9bb531acd0ba7c67b84684aad0ef50[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Jan 20 15:23:57 2015 -0800

    Adjust active maxq for GF groups.
    
    Currently disabled by default: enabled using
    #define GROUP_ADAPTIVE_MAXQ
    
    In this patch the active max Q is adjusted for each GF
    group based on the vbr bit allocation and raw first pass
    group error.
    
    This will tend to give a lower q for easy sections
    and a higher value for very hard sections. As such it is
    expected to improve [1;31mquality[m in some of the easier
    sections where [1;31mquality[m issues have been reported.
    
    This change tends to hurt overall psnr but help
    average psnr. SSIM also shows a small gain.
    
    Average results for derf, yt, std-hd and yt-hd test sets were
    as follows (%change for average psnr, overal psnr and ssim):-
    
    derf +0.291, - 0.252, -0.021
    yt +6.466, -1.436, +0.552
    std-hd +0.490, +0.014, +0.380
    yt-hd +5.565, - 1.573, +0.099
    
    Change-Id: Icc015499cebbf2a45054a05e8e31f3dfb43f944a

[33mcommit e76eaf05b1a20b906d166b7e8db402a9883c6025[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jan 6 14:14:26 2015 -0800

    vp9_ethread: add parallel loopfilter
    
    1. Added row-based loopfilter in encoder;
    2. Moved common multi-threaded loopfilter functions from decoder
       to common;
    3. Merged multi-threaded loopfilter code, and made encoder/
       decoder call same function to reduce code duplication.
    
    Encoder tests showed that 1% - 2% speedup was seen for good-[1;31mquality[m
    2-pass mode(at speed 3); 1% - 3% speedup using 2 threads and 4% - 6%
    speedup using 4 threads were seen for real-time mode(at speed 7).
    
    Change-Id: I8a4ac51c2ad9bab9fa7b864e90743931c53ec1c4

[33mcommit 7ac3e3c1d68a8e39b9195f5b188ccdaa9340b5b7[m
Author: Jacky Chen <jackychen@google.com>
Date:   Tue Dec 2 12:14:47 2014 -0800

    Multiframe Quality Enhancement(MFQE) in VP9.
    
    It is the first version of MFQE in VP9. There are a few TODOs included
    in this version.
    Usage: Add flag --enable-vp9-postproc to config the project.
    In decoder, use flag --mfqe in the command line to enable
    MFQE in postproc.
    Note: Need to have key frame with low [1;31mquality[m to see the effect of this
    new patch. In my experiment, I fixed the qindex to 200 in key frame.
    
    Change-Id: I021f9ce4616ed3574c81e48d968662994b56a396

[33mcommit eba9c762a1710e29967207a1df092ae0eca40313[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Dec 2 15:47:41 2014 -0800

    vp9_ethread: the tile-based multi-threaded encoder
    
    Currently, VP9 supports column-tile encoding, which allows a frame
    to be encoded in multiple column tiles independently. The number of
    column tiles are set by encoder option "--tile-columns". This
    provides a way to encode a frame in parallel.
    
    Based on previous set of patches, this patch implemented the tile-
    based multi-threaded encoder. Each thread processes one or more
    tiles.
    
    Usage:
    For HD clips:
    --tile-columns=2 --threads=1/2/3/4
    
    While using 4 threads, tests showed that the encoder achieved
    2.3X - 2.5X speedup at good-[1;31mquality[m speed 3, and 2X speedup at
    realtime speed 5.
    
    Change-Id: Ied987f8f2618b1283a8643ad255e88341733c9d4

[33mcommit a047e7cdf8a00701df141e8d72937541f4a88e0d[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Dec 3 10:19:54 2014 -0800

    Increase delta-qp for aq=3 mode, after key frame.
    
    For a few refresh periods after key frame, use large qp-delta
    to increase [1;31mquality[m ramp-up.
    
    Change-Id: Ib5a150fb2dfa6bafd0d4e6b5d28dfd0724b61319

[33mcommit 8fd3f9a2fb7fd29d811f2af11433b1b8bebabbb5[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Nov 12 14:51:49 2014 -0800

    Enable non-rd mode coding on key frame, for speed 6.
    
    For key frame at speed 6: enable the non-rd mode selection in speed setting
    and use the (non-rd) variance_based partition.
    
    Adjust some logic/thresholds in variance partition selection for key frame only (no change to delta frames),
    mainly to bias to selecting smaller prediction blocks, and also set max tx size of 16x16.
    
    Loss in key frame [1;31mquality[m (~0.6-0.7dB) compared to rd coding,
    but speeds up key frame encoding by at least 6x.
    Average PNSR/SSIM metrics over RTC clips go down by ~1-2% for speed 6.
    
    Change-Id: Ie4845e0127e876337b9c105aa37e93b286193405

[33mcommit 3c715863da0afdc42fb44c9f6d04e983d25a8de7[m
Merge: 550707b9e b660f723b
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Nov 18 11:22:18 2014 -0800

    Merge "Modify active_worst_[1;31mquality[m setting for one pass CBR."

[33mcommit b660f723b4ffe597338e5a6b747f9ce25ebaae8a[m
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Nov 11 11:01:55 2014 -0800

    Modify active_worst_[1;31mquality[m setting for one pass CBR.
    
    Current setting had active_worst_[1;31mquality[m set too high (close to worst_[1;31mquality[m)
    for first frame(s) following first key frame. This changes that to be somewhat
    more aggressive in allowing active_worst_[1;31mquality[m to be lower following key frame.
    
    Also remove the 4/5 reduction in active_worst for key frame as
    this should be set by the user qp_max setting.
    
    Change-Id: I0530b3ddcc85c00e3eb7568de1b14a31206c4a4c

[33mcommit 0271ff7775c78c51a2ea68c9eb129bbad9651dca[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Oct 31 17:27:54 2014 -0700

    Fix speed 7 and speed 12 for rt
    
    A recent change has introduced big [1;31mquality[m drops for speed 7 and 12
    for --rt mode. The change reverted the big drop and improved [1;31mquality[m
    by 9.5% for speed 7 and 13.4% for speed 12.
    
    Change-Id: I07b82e3bb6002a73af486a083458c88877bdad01

[33mcommit e5cd51880e75e0c61c12327773287057615257ec[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Oct 17 12:13:16 2014 -0700

    Allow update of golden refernce buffer in CBR mode
    
    This commit changes to allow the usage of golden reference frame in
    VP9 CBR mode to improve [1;31mquality[m. VP9 supports potentially up to 8
    reference buffers, it has reference buffers available for this
    purpose. This was not possible in VP8 as golden and alt-ref buffers
    were used for temporal scalability purpose in CBR mode in WebRTC.
    
    For frames that update golden frame, there can be a [1;31mquality[m boost.
    The amount of allowed bitrate boost can be controlled via parameter
    rc_max_inter_bitrate_pct. The inital value of the boost ratior is
    currently based on over_shoot_pct. Further experiments will work
    out the adaption of this boost value.
    
    Change-Id: I0c5f010c8fd8b7b598f69779c1b30e5b2ac30a4d

[33mcommit 87665f16f472acfa041bf2326f8545bc84460a4e[m
Merge: 1ed1dde06 c30f7e6cc
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Oct 22 08:40:15 2014 -0700

    Merge "Change speed features for good [1;31mquality[m(cpu-used=5)"

[33mcommit c30f7e6cc56f73bbfce0b3b0df7322cff2f0b246[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Oct 20 14:41:20 2014 -0700

    Change speed features for good [1;31mquality[m(cpu-used=5)
    
    The existing speed features produce horrible encoding results, almost
    30% worse than cpu-used=4, this commit adjust the speed features to
    produce relatively resonable results to be within 3%-5% of cpu-used=4.
    
    Change-Id: I0ca6ebafb33024d4a0cbcf04c78a4a00b8dd1ecf

[33mcommit d5130af5687a2401a45190b5bd68638995e74dde[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Oct 16 15:53:21 2014 +0100

    Revert "Move input frame scaling into the recode loop"
    
    This reverts commit 452dc21500a2339ee685cb28efbd2af1b856ea12.
    
    This change has introduced a significant [1;31mquality[m regression on content
    with forced key frames. (e.g. the YT and yt-hd set). It is most
    noticeable in static content where the kf bits dominate. Here, despite
    key frames being apparently coded at the same Q, there is a drop in all
    metrics of ~20% (e.g clXR and BFa0).
    
    Change-Id: Iba14cc61778c0846fa0a59c33c55a9fc49512cb4

[33mcommit f7f0eaa58119ba70bdd52806e44ba79e7374c7ff[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Oct 13 10:12:12 2014 +0100

    Add adaptation option for VBR.
    
    Allow min and maxQ to creep when the undershoot
    or overshoot exceeds thresholds controlled by the
    command line under_shoot_pct and over_shoot_pct
    values.
    
    Default is 100%,100% which ~disables adaptation.
    
    Derf results for example undershoot% / overshoot%:-
    
    Head:- Mean abs (%rate error) = 14.4%
    
    This check in:-
    25%/25% - Mean abs (%rate error) = 6.7%
                      PSNR hit -1% SSIM -0.1%
    
    5% / 5%  - Mean abs (%rate error) = 2.2%
                     PSNR hit -3.3% SSIM - 1.1%
    
    Most of the remaining error and most of the [1;31mquality[m hit is
    at extreme data rates. The adaptation code still has an
    exception for material that is in effect static so that we
    don't over adjust and over spend on YT slide show type
    content.
    
    (Rebase of If25a2449a415449c150acff23df713e9598d64c9
    to resolve a auto-merge error)
    
    Change-Id: Iec4e1613ef0d067454751d8220edb7058dfbd816

[33mcommit 869d4ca51957614dcf5093ebb9e322cc8a8405ca[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Oct 9 14:49:41 2014 +0100

    Add adaptation option for VBR.
    
    Allow min and maxQ to creep when the undershoot
    or overshoot exceeds thresholds controlled by the
    command line under_shoot_pct and over_shoot_pct
    values.
    
    Default is 100%,100% which ~disables adaptation.
    
    Derf results for example undershoot% / overshoot%:-
    
    Head:- Mean abs (%rate error) = 14.4%
    
    This check in:-
    25%/25% - Mean abs (%rate error) = 6.7%
                      PSNR hit -1% SSIM -0.1%
    
    5% / 5%  - Mean abs (%rate error) = 2.2%
                     PSNR hit -3.3% SSIM - 1.1%
    
    Most of the remaining error and most of the [1;31mquality[m hit is
    at extreme data rates. The adaptation code still has an
    exception for material that is in effect static so that we
    don't over adjust and over spend on YT slide show type
    content.
    
    Change-Id: If25a2449a415449c150acff23df713e9598d64c9

[33mcommit c389b37bb4c6e488a2b562248fd4d5dfddbe783a[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Aug 15 14:49:34 2014 +0100

    Substantial reworking of code for arf and kf groups.
    
    Substantial restructuring of the way we estimate
    the rate of decay in prediction [1;31mquality[m and determine
    the arf interval and amount of boost used.
    
    Also other changes to support moving to a lower first pass
    Q which exposes some new features and allows us to better
    distinguish genuinely static blocks from low motion or noisy
    blocks.
    
    Net gains now visible on all the test sets with std-hd PSNR up
    1.87%. There are still some bad outlier cases but most of these
    are low motion or slide show type content where the metrics
    are already high at any given rate. The best + case is up by
    more than 10%.
    
    Change-Id: I18e25170053bdf3188f493ff8062f48a74515815

[33mcommit 46aed7b8d0b5f6f33d047c47a229f0f93033e39e[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Sep 15 16:50:19 2014 -0700

    Set the skip flag to 1 for skippable blocks
    
    If the partition block is skippable, which means no coefficients
    for Y, U, and V planes, its skip flag is set to 1. No [1;31mquality[m
    change (verified by borg tests), and no noticeable speed change.
    
    Change-Id: I9231f720f8dd6364384cf05aa148ca24d75450f1

[33mcommit 4e94dec35278db559168cad97323ec78cb1b8d07[m
Author: Tom Finegan <tomfinegan@google.com>
Date:   Wed Sep 10 11:10:29 2014 -0700

    examples/twopass_encoder: Use good [1;31mquality[m.
    
    This speeds up the encode significantly. Also added a comment about using
    best [1;31mquality[m to keep new developers informed.
    
    Change-Id: I04e8154d4b2c4cae07fe7cc9a71e707f649e9ed4

[33mcommit f10d7eeda23bfccdb49a7fefc471132ae3eacca1[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Sep 9 10:18:55 2014 -0700

    Remove the use of use_lastframe_partitioning at speed 4
    
    The use of use_lastframe_partitioning is totally removed in good-
    [1;31mquality[m encoding. Its usage in real-time encoding needs to be
    evaluated to see if it can be removed too.
    
    The Borg tests at speed 4 showed:
    stdhd set: 0.220% psnr gain, 0.166% ssim gain;
    derf set:  0.329% psnr gain, 0.476% ssim gain.
    
    Speed test on selected clips showed 1.54% speedup.(Worst case:
    pedestrian_area_1080p25.y4m, speed loss: 1.5%)
    
    Change-Id: I1c844d329b0b5678558439b887297c1be7ddab00

[33mcommit 4d2c37692345f588e00bd33faefcdb17bd27835b[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Aug 14 17:25:21 2014 -0700

    Early termination in encoding partition search
    
    In the partition search, the encoder checks all possible
    partitionings in the superblock's partition search tree.
    This patch proposed a set of criteria for partition search
    early termination, which effectively decided whether or
    not to terminate the search in current branch based on the
    "skippable" result of the quantized transform coefficients.
    The "skippable" information was gathered during the
    partition mode search, and no overhead calculations were
    introduced.
    
    This patch gives significant encoding speed gains without
    sacrificing the [1;31mquality[m.
    
    Borg test results:
    1. At speed 1,
       stdhd set: psnr: +0.074%, ssim: +0.093%;
       derf set:  psnr: -0.024%, ssim: +0.011%;
    2. At speed 2,
       stdhd set: psnr: +0.033%, ssim: +0.100%;
       derf set:  psnr: -0.062%, ssim: +0.003%;
    3. At speed 3,
       stdhd set: psnr: +0.060%, ssim: +0.190%;
       derf set:  psnr: -0.064%, ssim: -0.002%;
    4. At speed 4,
       stdhd set: psnr: +0.070%, ssim: +0.143%;
       derf set:  psnr: -0.104%, ssim: +0.039%;
    
    The speedup ranges from several percent to 60+%.
                     speed1    speed2    speed3    speed4
    (1080p, 100f):
    old_town_cross:  48.2%     23.9%     20.8%     16.5%
    park_joy:        11.4%     17.8%     29.4%     18.2%
    pedestrian_area: 10.7%      4.0%      4.2%      2.4%
    (720p, 200f):
    mobcal:          68.1%     36.3%     34.4%     17.7%
    parkrun:         15.8%     24.2%     37.1%     16.8%
    shields:         45.1%     32.8%     30.1%      9.6%
    (cif, 300f)
    bus:              3.7%     10.4%     14.0%      7.9%
    deadline:        13.6%     14.8%     12.6%     10.9%
    mobile:           5.3%     11.5%     14.7%     10.7%
    
    Change-Id: I246c38fb952ad762ce5e365711235b605f470a66

[33mcommit beff5b6aa4e8d33bc25d5ae84f743c9fd9656d20[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Aug 18 09:27:50 2014 -0700

    Revert "Removing duplicated code from init_config()."
    
    This reverts commit 5509b7fd8fe6ad3555831b8d49077182daf92758
    
    
    Observed a big drop in compression [1;31mquality[m and speed for speed 1 for a 360p test clip, revert this now for investigation.
    
    Change-Id: If69dc8d77a225b34dc7907a9472e1a7a0a22762d

[33mcommit 4f2f86725b3e56b28762318f3f810edcd6d619ef[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 23 11:47:56 2014 -0700

    Use the chessboard pattern pred search in newmv mode
    
    This commit extends the chessboard pattern prediction filter search.
    If the above and left blocks have the same prediction filter type,
    the encoder will skip the prediction filter type search and use the
    reference one.
    
    The overall chessboard pattern prediction filter type search reduces
    speed 3 runtime for hard clips. Experiments on park joy at 1080p
    and 15000 kbps show that the runtime goes from 723265 ms to 65832 ms,
    i.e., about 10% speed-up. Compression performance wise, it affects
    the coding [1;31mquality[m by
    
    Change-Id: I880975497c7ad166532e9eea9bf46684d77ff327
    derf:    -0.326%
    yt:      -0.257%
    hd:      -0.241%
    stdhd:   -0.417%

[33mcommit f744f19cff674a3e70df1f40be7c552de037c9c2[m
Merge: a04655016 44666b7ce
Author: Guillaume Martres <gmartres@google.com>
Date:   Wed Jul 16 14:29:32 2014 -0700

    Merge "vp9_ratectrl.c: refactor get_active_[1;31mquality[m usage"

[33mcommit 9bd3be69a447766780e6164ad69eda8b7d0a266f[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jul 8 14:52:47 2014 -0700

    Adjust full-pixel search method in real-time mode
    
    Use FAST_HEX in speed 5 and 6, which covers more points than
    FAST_DIAMOND and improves motion search [1;31mquality[m.
    
    At speed 6, RTC set borg tests showed slight [1;31mquality[m gain (psnr
    gain: 0.143%, ssim gain: 0.226%). No noticeable encoding speed
    change.
    
    Change-Id: Ifa62875d9a52ee382ec494f271382bb77d8c67bf

[33mcommit 44666b7ce38122b3d20520a177291e960a02058f[m
Author: Guillaume Martres <gmartres@google.com>
Date:   Fri Jul 4 17:57:44 2014 +0200

    vp9_ratectrl.c: refactor get_active_[1;31mquality[m usage
    
    Change-Id: I53db06acf5bc434f9584136b848322f5870300b3

[33mcommit 3f92b7b994aceae610ef40bcf92437ca844f73d2[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Jun 27 10:05:24 2014 -0700

    Added a new speed 7 in rt mode
    
    To experiment with different speed/[1;31mquality[m compromises.
    
    Change-Id: Ia9d4b85243554d620498a327da37c356e752b07f

[33mcommit 46218c9cb91ab19ab395e6ed1797f89e41d67730[m
Merge: e84e86857 1c27e1f12
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Jun 26 09:41:40 2014 -0700

    Merge "Fix [1;31mquality[m regression for multi arf off case."

[33mcommit 1c27e1f127e9f6c775b71922eb85de1e11fc81d4[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Jun 26 09:48:31 2014 +0100

    Fix [1;31mquality[m regression for multi arf off case.
    
    Bug introduced during multiple iterations on: I3831*
    
    gf_group->arf_update_idx[] cannot currently be used
    to select the arf buffer index if buffer flipping on overlays
    is enabled (still currently the case when multi arf OFF).
    
    Change-Id: I4ce9ea08f1dd03ac3ad8b3e27375a91ee1d964dc

[33mcommit b04d766800f39ed97361d2ec13b740cbf5bca534[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu May 29 16:53:23 2014 -0700

    Use small transform size in non-rd real-time mode
    
    In non-rd real-time mode, choosing smaller transform size in
    encoding gives better video [1;31mquality[m and good speed gain than
    choosing larger transform size. This patch set tx size search
    method to ALLOW_8X8, which is better than using 4x4 or other
    larger sizes.
    
    Borg tests on rtc set at speed 6 showed significant gain on [1;31mquality[m.
    PSNR gain: 11.034% and SSIM gain: 15.466%.
    
    The speed gain is 5% - 12% for <720p clips, and 2% - 7% for
    720p clips.
    
    Change-Id: If4dc74ed2df359346b059f47fb73b4a0193ec548

[33mcommit cebb03c39b5a75cc2fa2a4b2af73bb1063b7ff04[m
Merge: f73889509 53f1452f5
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu May 22 13:49:17 2014 -0700

    Merge "Adjust cq_level in constrained [1;31mquality[m mode"

[33mcommit 53f1452f5d104155b32ccac0af80ef8a85fe70c5[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu May 22 08:11:37 2014 -0700

    Adjust cq_level in constrained [1;31mquality[m mode
    
    If we are already saving a lot in bits from the target (maximum)
    bitrate in the constrained [1;31mquality[m mode, allow the quantizer
    to go lower than the cq level. This hopefully will solve issues
    with getting too low a bitrate and consequently poor [1;31mquality[m for
    certain videos in cq mode.
    
    Change-Id: I1c4e8b0171fcf58f95198b3add85eea5f3c8f19f

[33mcommit 3bda7ec1bab9b7336cf3218d1e7596f79930208c[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue May 20 11:36:44 2014 -0700

    Enable various thresholds of motion detection
    
    This commit changed to enable the encoder to adjust motion dection
    speed threshold based on picture size. In addition, cpu-used 1 now
    does a partition search every other frame instead of every third
    frame for low resolution inputs.
    
    The change has no [1;31mquality[m/speed impact for 720p and above. Test
    showed the change increase encoding time by between 3% to 6% for
    cpu-used 2 encodiong of 360p sequences. It also has a compression
    gain about .3%.
    
    For cpu-used 2, the change resolved some very disturbing visual
    artifacts in certain sequences when large block partitionings and
    transforms are used as a result of copying the partition from a
    previous frame.
    
    Change-Id: Ic7fd22508cdb811d4ca935655adbf20109286cfa

[33mcommit 7af34402687ecfb95e52573ebac2af9e1c7cadc5[m
Author: Minghai Shang <minghai@google.com>
Date:   Tue May 20 11:00:30 2014 -0700

    [spatial svc] Remove some restrictions that are needed to improve the [1;31mquality[m
    
    Change-Id: I76a48b03388a8c5cc74b871deb836cd92263b306

[33mcommit d9e8c1eafc6bfb8515ffea60e025df3c724a7694[m
Merge: 3f6d1bce3 4a1386e3c
Author: Minghai Shang <minghai@google.com>
Date:   Wed Apr 30 11:02:54 2014 -0700

    Merge "[svc rc] Increase worst [1;31mquality[m for enhancement layers"

[33mcommit 4a1386e3c89c2fb671133c2898701398102edb56[m
Author: Minghai Shang <minghai@google.com>
Date:   Thu Apr 24 11:33:23 2014 -0700

    [svc rc] Increase worst [1;31mquality[m for enhancement layers
    
    Change-Id: Ifbfa90894eec9944bd55f364f1d17eb152338d6b

[33mcommit e62875b5a67164162be09152b6313ed92da0493e[m
Merge: 69b88df20 53dbc7f92
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Apr 17 18:27:19 2014 -0700

    Merge "Removing cq_target_[1;31mquality[m from VP9_COMP."

[33mcommit 53dbc7f92cf12cdc3d1fb3f7a4ec568f47bc8cce[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Apr 17 14:57:43 2014 -0700

    Removing cq_target_[1;31mquality[m from VP9_COMP.
    
    Use cq_level (which is identical) from VP9_CONFIG instead.
    
    Change-Id: I1aaf2fcef3d2dbd4577f613d27693ff8a68989fd

[33mcommit 658daf36fa25ff89a4041d398b7a572898b23ead[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Apr 15 19:15:43 2014 -0700

    Fix rate control bug.
    
    Fix rate control bug whereby the rate factor heuristics
    were being updated on arf overlays causing a rate surge
    for a few frames followed by a corrective drop.
    
    This fix eliminates many of the overshoot problems that
    we were seeing on hard clips (even without applying
    stricter vbr rate control) and also helps [1;31mquality[m on
    almost all clips with some hard clips improving by >5%.
    
    Overall [1;31mquality[m results measured at speed 2.
    Derf  +1.78% opsnr , +2.44% SSIM
    Stdhd +2.41% opsnr, +2.85% SSIM
    
    Change-Id: I2369df6295c2705963fa6307877f6acb304bcc39

[33mcommit 6fe75c6397cac4530bbbb64a27d5c6b8f7430a1e[m
Merge: 99983859f c3de569bb
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Apr 15 14:57:33 2014 -0700

    Merge "Cleaning up vp9_twopass_worst_[1;31mquality[m()."

[33mcommit 0639b5cff5ac3e476f0ee76c3c3f51fdc9fd2758[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Mar 28 15:21:26 2014 +0000

    Speed 2 alternative balance.
    
    A previous path improved speed 2 [1;31mquality[m a little but
    more extensive testing showed that it slowed encode
    by a few %.
    
    The change will have a similar effect for speed 3 but
    should not impact speeds 4+;
    
    This experiment should reverse that and give a speed
    up at the cost of a small [1;31mquality[m loss.
    
    Borg results pending.
    
    Change-Id: I4493fc1541aaf44587f1a41ff219f7088da9252c

[33mcommit d83f6f06328e9ac9370481f60589329c5de9afc4[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Apr 4 12:56:50 2014 +0100

    Change Qlimit for arf kf.
    
    The limits applied under the flag
    "LIMIT_QRANGE_FOR_ALTREF_AND_KEY"
    behaved in an undesirable way if the gap between
    active_worst_[1;31mquality[m and active_best_[1;31mquality[m was
    changed.
    
    In this patch, the adjustment is made using the
    vp9_compute_qdelta_by_rate() function and fixed
    rate multiplier values. Hence it is not impacted by
    the relative value of active_best_[1;31mquality[m.
    
    Change-Id: I93b3308e04ade1e4eb5af63edf64f91cd3700249

[33mcommit c3de569bb9f3a8cc22d104ce784223b7835d76e7[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Apr 9 21:06:11 2014 -0700

    Cleaning up vp9_twopass_worst_[1;31mquality[m().
    
    Change-Id: Ie144e9ece57f2d59c230704a2f166bda1042adeb

[33mcommit 99893f2410f618b712037db4d3ec60e81aa9de1f[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Mar 28 17:42:45 2014 -0700

    Apply finer quantizer to partition search frames in non-RD flow
    
    This commit optimizes the bit allocation for the non-RD coding flow.
    It applies slightly better quantizer to the frames, where all blocks
    run a non-RD partition search. Such frames typically have better
    rate-distortion trade off, thus improving the reconstruction [1;31mquality[m
    for next few frames reference at reasonably low increment in rate
    cost.
    
    The coding performance for rtc set at speed -5 with error-resilient
    tuned on and rate control set as cbr is improved by 19.58%. It improved
    the coding speed by about 10% for a portion of local test clips.
    
    Change-Id: I9d56696cd4359dc8136ca10aff10fff05aaa2686

[33mcommit 6fc20a8434352793f4ecb09e6369112c92952456[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Mar 26 16:15:00 2014 -0700

    Adjust rt speed steps.
    
    This commit adjusted the speed steps in rt mode to make the steps
    more evenly spaced on speed and [1;31mquality[m, specifically:
    1. Merged 3 and 4 into one single step 3 and removed confilicting
    features.
    2. Move 8, 7, 6, 5 to be 7, 6, 5, 4 repsectively.
    
    Change-Id: I38d56d61531f3561d772aef953c411c8fb38c063

[33mcommit 01148d4548de6b0b8f6f277736580127cf7afe8b[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Mar 24 18:11:47 2014 +0000

    Further speed trade off adjustments.
    
    Small speed gain for speed 1.
    
    Quality is generally a little up for speed 2.
    
    Speed 3 was similar to speed 4 but now positioned more
    evenly between 2 and 4 speed and [1;31mquality[m wise.
       (opsnr +5.6% ssim +8.25% across all sets)
    
    Speed 4 is a little slower than before but sizable [1;31mquality[m gains.
       (opsnr +3.7% ssim +6.8% across all sets)
    
    The code has been cleaned up a bit so that for each incremental
    speed step changes over the previous speed step are applied.
    This makes it easier to see what is changing from one setting to
    the next.
    
    Change-Id: I2d98d0d6230af23486adaec01908f58942a7cdeb

[33mcommit 32c4fdec7862657bc3865ca0f2dd151ee0e45646[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Mar 21 16:14:46 2014 +0000

    Experimental change to speed 1 settings.
    
    Allow tx search for ARF and GF helps [1;31mquality[m but a little slower.
    Setting subpel_iters_per_step to 1 improves encode speed.
    Setting sf->mode_skip_start = 10 improves speed.
    
    Initial local results suggest overall impact on [1;31mquality[m is neutral
    but encode is up to 15% faster.
    
    Change-Id: Ibde02cae6626a44c10a1da0cefe888afbb51f037

[33mcommit 2e05341ab4990f11763fc97361395134822667ee[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Mar 20 15:16:35 2014 +0000

    Fix bad speed settings interaction.
    
    The flag x->skip_recode interacts badly with
    the cpi->sf.use_nonrd_pick_mode and
    cpi->sf.skip_encode_sb speed settings.
    
    Restricting the use of the skip_decode flag when
    these other speed choices are in use helps [1;31mquality[m
    for speeds 3 and 4 by a large amount with only a
    small impact on speed.
    
    Average improvmentes for 2 pass speed 4:
    Derf +8.8%
    Yt + 10.53%
    Std-Hd +6.95%
    yt-hd + 22.95%
    
    Change-Id: I8010876d8012042a11077c92e69d813c3dfa58eb

[33mcommit d3df2086c90dfad39d610cf01fda08e1e293dab6[m
Merge: 2e84633d0 645cb98e9
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Mar 18 13:10:10 2014 -0700

    Merge "Cleaning up calc_active_worst_[1;31mquality[m_one_pass_vbr()."

[33mcommit 645cb98e9045733f87ea59b411377bc8a9c68ab8[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Mar 18 10:41:22 2014 -0700

    Cleaning up calc_active_worst_[1;31mquality[m_one_pass_vbr().
    
    Change-Id: Ibfccee5e35c235c02843e1c1fbd3c39034619cf5

[33mcommit 801f136be2c605a867f41f10267fef057348f65b[m
Author: Aℓex Converse <alexconv@twitch.tv>
Date:   Wed Feb 26 16:46:21 2014 -0800

    Don't let GOLDEN_FRAME turn off LAST_FRAME as a reference when GOLDEN_FRAME is disabled.
    
    There was a bug in the previous code that if GOLDEN was better than
    LAST neither would be used. LAST would get turned off due to superior
    GOLDEN [1;31mquality[m then all GOLDEN modes would get skipped.
    
    Change-Id: I173f3720451707dab7b2cbbe8b8e6a047089bde7

[33mcommit 8b33c641621237e321c6907c86be1ac7d25fb8cc[m
Merge: e211244b0 8d80c262d
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Feb 26 09:20:14 2014 -0800

    Merge "Using clamp() for active_{best, worst}_[1;31mquality[m."

[33mcommit 8d80c262d11db39212fd96c325c8ca281be79340[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Feb 25 18:01:49 2014 -0800

    Using clamp() for active_{best, worst}_[1;31mquality[m.
    
    Change-Id: Ia79f975f54829b8ae6b568ca5c05f4f1f541706f

[33mcommit 360c80cfb95559b3a49fc4624a24dee01e1abb6a[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Feb 14 15:55:49 2014 -0800

    Use fast HEX search in real time mode
    
    In good [1;31mquality[m mode motion search, the best matches are normally
    found after searching in a large area. In real time mode, to make
    encoding fast, a center-biased fast HEX search is used, which
    converges quickly most of the time. A 4-point diamond search is
    also carried out as the following refining search, which gives more
    precise results, and maintains good motion search [1;31mquality[m.
    
    At speed 5, the borg test on rtc set showed an overall PSNR loss of
    0.936%. The encoding speed gain is 4% - 5%.
    
    Change-Id: I42cd68bb56a09ca1b86293c99d5f7312225ca7ae

[33mcommit cf479baa03d4c926e65311bc0bcd0c9bdb4ad78a[m
Merge: 356a7e964 d23e33920
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Feb 12 09:20:31 2014 -0800

    Merge "Removes active_worst_[1;31mquality[m feedback"

[33mcommit d23e339202b46f6d54595d2464f9312a95f26075[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Feb 10 17:52:44 2014 -0800

    Removes active_worst_[1;31mquality[m feedback
    
    Removes certain cases of feedback of active_worst_[1;31mquality[m,
    and removes it from the RATE_CONTROL structure. Now active
    worst [1;31mquality[m is expected to be computed locally in the
    q picking function during the encode.
    Making temporal filter strength depend on avg_frame_qindex
    rather than on active_worst_[1;31mquality[m actually improves
    performance esp. for yt.
    derf: +0.038%
    yt: +0.359%
    
    Change-Id: I1fe5a343034b55af9322289165321f00ac0827b1

[33mcommit 6432ae4902cf07a9751b02c2bc5ff9e9beca8960[m
Merge: 9d477bd2f aaa43ed38
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Feb 5 15:53:00 2014 -0800

    Merge "Clamping active_{best, worst}_[1;31mquality[m values."

[33mcommit ea8aaf15b55a19f569c328f26cc8d8ad82a9235c[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Jan 29 08:39:39 2014 -0800

    create super fast rtc mode
    
    This patch only works if the video is a width and height that are both
    a multiple of 32..   It sets every partition to 16x16, and does INTRADC
    only on the first frame and ZEROMV on every other frame.   It always does
    does the largest possible transform, and loop filter level is set to 4.
    
    Was ~20% faster than speed -5 of vp8
    
    Now 20% slower but adds motion search ( every block ), nearest, near
    and zeromv
    
    The SVC test was changed because - while this realtime mode produces
    bad [1;31mquality[m albeit quickly, it isn't obeying all the rules it should
    about which frames are available.
    
    Change-Id: I235c0b22573957986d41497dfb84568ec1dec8c7

[33mcommit aaa43ed38326f6df346b9156e79a12562cf1ffdd[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Jan 24 13:46:56 2014 -0800

    Clamping active_{best, worst}_[1;31mquality[m values.
    
    Change-Id: If370f83080b403e417716d1edad58fdaa2b90170

[33mcommit 3fa1356994e2309b632d8863957c91f7f0813847[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Jan 21 09:56:43 2014 -0800

    remove complex rd modeling.
    
    The affect on [1;31mquality[m was minimal.  Less than .1%, various sets
    yt ( +.15%), derf (-.1%), hd ( -.1% ), std hd(-.15%)...
    
    The affect on speed of encode at speed -5 was substantial ( ~3% ).
    
    Change-Id: I8903346fbae0c35f5b9ea20f81fdd239ae81247d

[33mcommit 5c808ba13acf26a9a5037583f3ca8156163ff06a[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Jan 10 17:26:44 2014 +0000

    Add max burst bitrate control.
    
    Applies an upper limit on burst bitrate for any
    frame. This is to insure that typical encodes for YT
    do not produce frames that are so large that they
    risk stalling HW implementations. Such frames
    could also cause playback problems in SW.
    
    For now the limit is set at 250 bits per MB for 1080P
    and larger (with the 1080P limit used for smaller frames).
    
    Setting maxQ, constant [1;31mquality[m mode or targeting a
    very high bandwidth will have precedence over this limit.
    
    Change-Id: Ie6f776c38b06ac7cec043d034085f4b79ee46a38

[33mcommit 5e5d4c0ea72aae6a18af6609ace02d13c12e7253[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Jan 13 10:03:28 2014 -0800

    Enable reference frame masking for rt mode
    
    Reference frame masking helped good [1;31mquality[m mode to gain about 5% in
    encoding speed, this commit enable it for rt mode to gain the speed
    improvement.
    
    In addition, this commit move the speed feature setup to a separate
    function.
    
    Change-Id: I015e8f78bbb21dd43ae183b9b9355bea2ccda9c5

[33mcommit d66c7486351530662c2c906b55c1c0e89ec6299d[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jan 9 18:01:30 2014 -0800

    Enable skipping reference frame check in rd loop
    
    This commit allows encoder to compare the SAD cost associated with
    the best motion vector predictor, per frame. If one reference frame
    has this cost more than 4 times of the best SAD cost given by other
    reference frames, skip NEARESTMV, NEARMV, ZEROMV mode check of this
    reference frame.
    
    This setting is turned on in speed 2 and above. Compression [1;31mquality[m
    change in speed 2:
    derf  -0.014%
    yt    -0.097%
    hd    -0.023%
    stdhd  0.046%
    
    It reduces the speed 2 runtime of test sequences:
    pedestrian_area_1080p 4000 kbps 310763 ms -> 303595 ms
    bluesky_1080p 6000 kbps         259852 ms -> 251920 ms
    
    Change-Id: I7f59cf79503d51836d61d56d50dc5bdf0e502e22

[33mcommit 2d381d76d867d70e946b62a82f5f3fcedd25d330[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jan 9 11:50:24 2014 -0800

    Simplify set_rt_speed_feature()
    
    1. Made speed choices to be progressive
    2. Adjusted rt speed settings to achieve better speed/[1;31mquality[m
    
    Overall, rt-5 gained 2.5% in compression/[1;31mquality[m, encoding time of 720p
    niklas clip goes from 137,052ms to 121,874ms
    
    Change-Id: Ia6e7e1e15225395a868a2f1059c3db8e266e1600

[33mcommit 9a005c994c2586795c4978eb59ae3b9ec7a4b73a[m
Merge: e71985632 1e59cbf23
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Dec 16 17:40:30 2013 -0800

    Merge "Rate control changes on active_worst_[1;31mquality[m"

[33mcommit 1e59cbf23bbc630baaaff23b9cb75fe80be0d4ea[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Dec 13 09:32:05 2013 -0800

    Rate control changes on active_worst_[1;31mquality[m
    
    Various cleanups and refactoring.
    Removes feedback of active worst qaulity and uses last_q
    instead to make the interface cleaner. Active worst [1;31mquality[m
    is now decided only once for a frame being coded in the
    beginning based on last_q and other stats. Also, adds other
    cleaups on last_q to store also the last_q for altref frames,
    and reduces the altref interval a little.
    
    The output does change a little.
    derfraw300: +0.224% (global psnr)
    stdhdraw250: +0.442% (global psnr)
    
    Change-Id: Ie634cdc032697044c472dd0fe79c109b3e7f9767

[33mcommit 570b6d25c0498f77339db28a291cab87de2d3ea2[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Dec 6 13:17:34 2013 +0000

    Remove rate correction factor.
    
    Removed an adaptive rate correction factor that was having
    a negative impact on [1;31mquality[m in many clips. This factor
    was influencing the Q range available to each frame
    independently of the bits allocated to each.
    
    Average results with DISABLE_RC_LONG_TERM_MEM.
    
    derf +0.199, -0.059.
    yt +3.957, +3.798
    std hd +1.577, +2.140
    yt hd +4.127, +4.513
    
    Average results without  DISABLE_RC_LONG_TERM_MEM
    
    derf -0.628, -0.665
    yt +3.432, +3.015
    std hd -0.105, +0.153
    yt hd +3.432, +3.015
    
    Change-Id: I45bab6b606f49a442e7b27a6d631f3ffd843bbce

[33mcommit 52d273674beab6efa96d36c4da672ee23813c7b4[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Dec 3 17:05:19 2013 -0800

    Further rate control cleanups
    
    Includes various cleanups.
    Streamlines the interfaces so that all rate control state
    updates happen in the vp9_rc_postencode_update() function.
    This will hopefully make it easier to support multiple
    rate control schemes.
    Removes some unnecessary code, which in rare cases can casue
    a difference in the constrained [1;31mquality[m mode output, but
    other than that there is no bitstream change yet.
    
    Change-Id: I3198cc37249932feea1e3691c0b2650e7b0c22fc
