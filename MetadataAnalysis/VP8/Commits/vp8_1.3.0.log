Searching between v1.2.0 and v1.3.0
Keywords: slow, fast, time, perf(ormance), optim(ize), regression
Additional keywords: quality,pass
Keywords: slow fast time perf optim regression speed quality pass
For keyword slow:
[33mcommit 11abab356e4c04d4a21ac43f58f9ec05c7c80eca[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 27 16:02:49 2013 -0700

    Refactor inter mode rate-distortion search
    
    This commit separates the rate-distortion optimization loop of
    superblocks from that of sub8x8 blocks. This allows better design
    rate-distortion optimization search loop for each setting. It also
    removes the use of SPLITMV and I4X4_PRED therein.
    
    No performance change in speed 0 settings. For bus@CIF at 2000kbps,
    the speed 1 runtime goes from 48009ms to 43894ms (about 10% faster).
    The overall compression performance on derf changed by -0.021%.
    
    Speed 2 runtime goes from 27114ms to 28700ms (6% [1;31mslow[mer), while the
    overall coding efficiency goes up by 1.629% for derf, 1.236% for yt.
    
    Change-Id: Ie6bdfa0a370148dd60bd800961077f7e97e67dd4

[33mcommit b96464675611fae99fa67461eaae87e8ed2854cb[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Sep 11 15:16:36 2013 -0700

    Clean up of the search best filter speed feature
    
    Removes this speed feature since it is very [1;31mslow[m and unlikely
    to be used in practice. This cleanup removes a bunch of unnecessary
    complications in the outer encode loop.
    
    Change-Id: I3c66ef1ca924fbfad7dadff297c9e7f652d308a1

[33mcommit 0d8723f8d5372eaaadfb5373a3b9d35e2c78c42d[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Aug 19 14:16:26 2013 -0700

    Make "good" quality 2-pass vpxenc encoding default
    
    Currently, the best quality mode in VP9 is not very well developed,
    and unnecessarily makes the encode too [1;31mslow[m. Hence the command line
    default is changed to "good" quality. Also, the number of passes
    default is changed to 2 passes as well, since 1-pass encoding is
    not very efficient in VP9.
    
    Besides, a number of VP9 defaults are set to the currently
    recommended settings. With these changes, vpxenc
    run with --codec=vp9 --kf-max-dist=9999 --cpu-used=0 should
    work about the same as our borg results.
    Note when the --cpu-used=0 option is dropped there will be a slight
    difference in the output, because of a difference in the cpu-used
    value for the first pass. Specifically, the default when unspecified
    is to use cpu_used=1 for the first pass and cpu_used=0 for the
    second pass. But when specified, both passes will use the cpu-used
    value specified.
    
    Note that this also changes the default for VP8 as being "good"
    but other options stay unchanged.
    
    Change-Id: Ib23c1a05ae2f36ee076c0e34403efbda518c5066

[33mcommit f4f60f600560440157f849433e260a01a0c6c9ac[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Thu Jul 11 17:13:03 2013 -0700

    Neon: Update mbfilter if all vectors follow one branch.
    
    Change the mbfilter Neon code from executing both branches if all
    vectors follow only one branch.
    
    The code is about 5% faster when executing only one branch and about
    1% [1;31mslow[mer when executing both branches.
    
    -PS5: Remove local stack space from mbfilter.
    
    Change-Id: I6a23f9b318a9f4568a2718b4c9348db988fe2182

[33mcommit df2314cfdd1ea6c0b4bca77165d959b74b58e4bb[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Jun 19 11:05:34 2013 -0700

    don't copy partitions for key frames or altrefs
    
    force us to go through [1;31mslow[m partitioning for keyframes, altref and
    overlays.
    
    Change-Id: I1a286361bf74083e71973575a7296be46eb98742

[33mcommit 9f5811c2da890c8bd675ed3112692a43633ff003[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue May 7 09:45:28 2013 -0700

    Add joint motion search in comp_inter_inter mode(experiment)
    
    In current code, motion vectors got from single prediction mode are used
    in compound prediction mode directly. These motion vectors may not give
    accurate prediction since they are searched independently. In this patch,
    we took Pascal's suggestion, and did joint motion search in compound
    prediction mode to find better motion vectors in this situation.
    Test results:
    Overall PSNR: 0.570%(derf), 0.918%(stdhd);
    SSIM: 0.572%(derf), 1.009%(stdhd);
    
    The encoder is a little [1;31mslow[mer. This can be improved since some c
    code is used in motion search.
    
    Change-Id: Ib30c9240f6c56c9b070867b4ca89412a76d9f3c6

[33mcommit 537311971348b1919de8b36266f900aa4657672f[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Oct 22 14:43:01 2012 -0700

    Merging in the Switchable interp experiment
    
    There is a macro DEFAULT_INTERP_FILTER defined in encoder/onyx_if.c that
    is set as EIGHTTAP for now - so SWITCHABLE is not really used. Ideally,
    this should be SWITCHABLE but that would make the encoder quite a bit [1;31mslow[mer.
    We will change the default filter to SWITCHABLE once we find a faster way to
    search for switchable filters.
    
    Change-Id: Iee91832cdc07e6e14108d9b543130fdd12fc9874

[33mcommit 0b17ea6f689a2716f314d13000901c9107eb03af[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Aug 7 13:55:49 2012 -0700

    A bit of temporary relief on encoder [1;31mslow[mness
    
    The commit replaces run-time initialization of cosine constants with
    static constant values, which provides ~30% relief on [1;31mslow[m speed. The
    real solution, however will be to implement integer versions of those
    functions that current use float/double.
    
    Change-Id: Ie3ff1793509653d78dd1aeaf88cc6737da1bc55f

[33mcommit 5259744145fe4ff41d3c814514c0744444969ad3[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Jul 18 13:43:01 2012 -0700

    Adds support for switchable interpolation filters.
    
    Allows for swtiching/setting interpolation filters at the MB
    level. A frame level flag indicates whether to use a specifc
    filter for the entire frame or to signal the interpolation
    filter for each MB. When switchable filters are used, the
    encoder chooses between 8-tap and 8-tap sharp filters. The
    code currently has options to explore other variations as well,
    which will be cleaned up subsequently.
    
    One issue with the framework is that encoding is [1;31mslow[m. I
    tried to do some tricks to speed things up but it is still [1;31mslow[m.
    Decoding speed should not be affected since the number of
    filter taps remain unchanged.
    
    With the current version, we are up 0.5% on derf on average but
    some videos city/mobile improve by close to 4 and 2% respectively.
    If we did a full-search by turning the SEARCH_BEST_FILTER flag
    on, the results are somewhat better.
    
    The framework can be combined with filtered prediction, and I
    seek feedback regarding that.
    
    Rebased.
    
    Change-Id: I8f632cb2c111e76284140a2bd480945d6d42b77a

[33mcommit 237718dcbda2331cd43095faa9c0ad731a0a6616[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Apr 11 14:32:20 2012 -0700

    Turning off interpolation filter selection
    
    Turning off the interpolation filter selection based on edge
    proportion. This heuristics has not been working as well as
    expected and I have started a more rigorous investigation into
    this. We can turn this off for now since it is unnecessarily
    [1;31mslow[ming things down.
    
    Rebase.
    
    Change-Id: Ic5958b2b3a35ec2d8eb73b6d81617ca8fbe07e74

[33mcommit 6035da5448392244936f1e1a9079e7f6cd857ffe[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Mar 9 17:32:50 2012 -0800

    WebM Experimental Codec Branch Snapshot
    
    This is a code snapshot of experimental work currently ongoing for a
    next-generation codec.
    
    The codebase has been cut down considerably from the libvpx baseline.
    For example, we are currently only supporting VBR 2-pass rate control
    and have removed most of the code relating to coding speed, threading,
    error resilience, partitions and various other features.  This is in
    part to make the codebase easier to work on and experiment with, but
    also because we want to have an open discussion about how the bitstream
    will be structured and partitioned and not have that conversation
    constrained by past work.
    
    Our basic working pattern has been to initially encapsulate experiments
    using configure options linked to #IF CONFIG_XXX statements in the
    code. Once experiments have matured and we are reasonably happy that
    they give benefit and can be merged without breaking other experiments,
    we remove the conditional compile statements and merge them in.
    
    Current changes include:
    * Temporal coding experiment for segments (though still only 4 max, it
      will likely be increased).
    * Segment feature experiment - to allow various bits of information to
      be coded at the segment level. Features tested so far include mode
      and reference frame information, limiting end of block offset and
      transform size, alongside Q and loop filter parameters, but this set
      is very fluid.
    * Support for 8x8 transform - 8x8 dct with 2nd order 2x2 haar is used
      in MBs using 16x16 prediction modes within inter frames.
    * Compound prediction (combination of signals from existing predictors
      to create a new predictor).
    * 8 tap interpolation filters and 1/8th pel motion vectors.
    * Loop filter modifications.
    * Various entropy modifications and changes to how entropy contexts and
      updates are handled.
    * Extended quantizer range matched to transform precision improvements.
    
    There are also ongoing further experiments that we hope to merge in the
    near future: For example, coding of motion and other aspects of the
    prediction signal to better support larger image formats, use of larger
    block sizes (e.g. 32x32 and up) and lossless non-transform based coding
    options (especially for key frames). It is our hope that we will be
    able to make regular updates and we will warmly welcome community
    contributions.
    
    Please be warned that, at this stage, the codebase is currently [1;31mslow[mer
    than VP8 stable branch as most new code has not been optimized, and
    even the 'C' has been deliberately written to be simple and obvious,
    not fast.
    
    The following graphs have the initial test results, numbers in the
    tables measure the compression improvement in terms of percentage. The
    build has  the following optional experiments configured:
    --enable-experimental --enable-enhanced_interp --enable-uvintra
    --enable-high_precision_mv --enable-sixteenth_subpel_uv
    
    CIF Size clips:
    http://getwebm.org/tmp/cif/
    HD size clips:
    http://getwebm.org/tmp/hd/
    (stable_20120309 represents encoding results of WebM master branch
    build as of commit#7a15907)
    
    They were encoded using the following encode parameters:
    --good --cpu-used=0 -t 0 --lag-in-frames=25 --min-q=0 --max-q=63
    --end-usage=0 --auto-alt-ref=1 -p 2 --pass=2 --kf-max-dist=9999
    --kf-min-dist=0 --drop-frame=0 --static-thresh=0 --bias-pct=50
    --minsection-pct=0 --maxsection-pct=800 --sharpness=0
    --arnr-maxframes=7 --arnr-strength=3(for HD,6 for CIF)
    --arnr-type=3
    
    Change-Id: I5c62ed09cfff5815a2bb34e7820d6a810c23183c

[33mcommit 9c9300f56f4788ed5a9aade371c185b33dcb7781[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Feb 3 15:10:44 2012 +0000

    Merged NEWNEAR experiment
    
    This commit merges the NEWNEAR experiment such that it
    is effectively always on.
    
    The fact that there were changes in the threading code again
    highlights the need to strip out such features during the
    bitstream development phase as trying to maintain this code
    (especially as it is not being tested) [1;31mslow[ms the development cycle.
    
    Change-Id: I8b34950a1333231ced9928aa11cd6d6459984b65
For keyword fast:
[33mcommit 5ade423774690e2bf877559dc1a1f9547db5dac1[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Nov 5 17:25:38 2013 -0800

    Removes conditional statements from band getting
    
    Implements scan order to band map with arrays in both the encoder
    and decoder to remove conditional statements.
    
    Encoding seems to be about 1% [1;31mfast[mer at speed 0, tested on football.
    Decoding seems to be about 0.5-1% [1;31mfast[mer on a set of 25 videos.
    
    Change-Id: Idb233ca0b9e0efd790e30880642e8717e1c5c8dd

[33mcommit 22a001988bffbd6ba023d1522460d380bf65baa5[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Nov 8 12:44:56 2013 -0800

    Optimizing set_contexts() function.
    
    Inlining set_contexts_on_border() into set_contexts(). The only difference
    is the additional check that "has_eob != 0" in addition to
    "xd->mb_to_right_edge < 0" and "xd->mb_to_right_edge < 0". If has_eob == 0
    then memset does the right thing and works [1;31mfast[mer.
    
    Change-Id: I5206f767d729f758b14c667592b7034df4837d0e

[33mcommit a8ffa96e9bdc72fa74b0165111880305bcb0d19a[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Oct 16 12:35:07 2013 -0700

    Passing block index explicitly instead of using get_sb_index().
    
    That makes decoder and encoder (only bitstream writing part) a little bit
    simpler and [1;31mfast[mer. Moving get_sb_index() function to the encoder.
    
    Change-Id: Ie91aaeefd69c84b085948267b33556a7666c6278

[33mcommit 3fb728c749db856423633125c5be699e44788724[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Oct 10 13:51:35 2013 -0700

    SSE2 8-tap sub-pixel filter optimization
    
    To ensure [1;31mfast[m encoding/decoding on devices without ssse3 support,
    SSE2 optimization of sub-pixel filters was done. Test using 1080p
    clip showed the decoder speeds were ~70fps with ssse3 filters, ~60fps
    with sse2 filters, and ~15fps with c filters.
    
    Change-Id: Ie2088f87d83a889fba80a613e4d0e287aadd785c

[33mcommit 03fe08ca3033d0386919211e66079894add2fea9[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Oct 7 11:20:50 2013 -0700

    Deprecate the use of PARTITION_INFO from encoder
    
    Use b_mode_info to store the inter prediction mode of sub8x8 block,
    in replacement of the use of partition_info. Remove redundant buffer
    update for partition_info. For bus_cif at 2000 kbps, this seem to make
    speed 0 about 1% [1;31mfast[mer.
    
    Change-Id: Id1b3be45e75a24fb4b42335ac480c23e440978f6

[33mcommit 11abab356e4c04d4a21ac43f58f9ec05c7c80eca[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 27 16:02:49 2013 -0700

    Refactor inter mode rate-distortion search
    
    This commit separates the rate-distortion optimization loop of
    superblocks from that of sub8x8 blocks. This allows better design
    rate-distortion optimization search loop for each setting. It also
    removes the use of SPLITMV and I4X4_PRED therein.
    
    No performance change in speed 0 settings. For bus@CIF at 2000kbps,
    the speed 1 runtime goes from 48009ms to 43894ms (about 10% [1;31mfast[mer).
    The overall compression performance on derf changed by -0.021%.
    
    Speed 2 runtime goes from 27114ms to 28700ms (6% slower), while the
    overall coding efficiency goes up by 1.629% for derf, 1.236% for yt.
    
    Change-Id: Ie6bdfa0a370148dd60bd800961077f7e97e67dd4

[33mcommit 6253cc9279652fd7550bc103f85bb45525ff20f1[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Oct 1 16:57:18 2013 +0100

    Speed setting review.
    
    Substantial reworking of the speed vs quality trade offs for
    speed 1 and 2.
    
    In this patch I am attempting to freeze the "quality" meaning of
    speeds 1 and 2 relative to speed 0 so that in future we can
    better evaluate progress.
    
    I am targeting :
    Speed 1 quality ~-5% vs speed 0.
    Speed 2 quality ~-10% vs speed 0
    
    It is inevitable that quality will still fluctuate a little as we adjust
    settings and add new features, but we will attempt to keep as
    close as possible to these values. Above speed 2 things will remain
    a bit more fluid for now.
    
    In this patch speed 1 is approximately 4-5x as [1;31mfast[m as speed 0. This
    is similar to before but the quality hit is a lot less. Likewise speed 2
    is approximately 2x as [1;31mfast[m as speed 1 but is similar in quality to the
    previous speed 1 configuration.
    
    Also slight change to behavior of FLAG_EARLY_TERMINATE to insure
    all reference frames get at least one rd test. Important for very low
    variance regions.
    
    WIP :- Added a new speed level with old speed 4 becoming speed 5.
    Speed 3 and 4 tradeoffs still WIP
    
    Change-Id: Ic7a38dd7b5b63ab1501f9352411972f480ac6264

[33mcommit 65b93c7e5289b3740b8518867170cdad2f5c95a9[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Sep 27 12:59:06 2013 +0100

    Improved auto_partition_range.
    
    The code now takes into account temporal and spatial
    information to determine the partition size range, but the
    frequency counts have been removed.
    
    The net effect is similar in quality but about 10% [1;31mfast[mer.
    
    Change-Id: I39a513fb79cec9177b73b2a7218f0da70963ae95

[33mcommit 398ddafb629b7f49cf255bf09d3e38b4abd0bb95[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Sep 26 18:44:48 2013 -0700

    New way of updating last frame segmentation map.
    
    Implementing more natural (and [1;31mfast[mer) way of updating last frame
    segmentation map.
    
    Change-Id: I9fefa8f78e77bd7948133b04173da45edc15a17e

[33mcommit 44b708b4c4608137d54dc1d36b8ee7ebec4fd2fe[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 19 10:27:09 2013 -0700

    Remove redundant mv_pred use for sub8x8 blocks
    
    The sub8x8 blocks has its own motion vector reference scheme. The
    mv_pred is only used blocks of sizes 8x8 and above, to find the
    starting point for motion search.
    
    This change does not change any coding behavior. It makes the
    encoding process slightly [1;31mfast[mer. (0.5% speed-up for local test on
    speed 1.)
    
    Change-Id: I746ee6ef0eac19aa3621be014afa12be8d82cbb9

[33mcommit cbf394574d68fe845320397638ced8c38f636593[m
Merge: eeae6f946 23e1a29fc
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Sep 16 14:39:45 2013 -0700

    Merge "Speed up iht8x8 by rearranging instructions. Speed improves from 282% to 302% [1;31mfast[mer based on assembly-perf."

[33mcommit 23e1a29fc79837aa4ce97953d4b8e77dbc4b0761[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Sep 16 10:55:54 2013 -0700

    Speed up iht8x8 by rearranging instructions.
    Speed improves from 282% to 302% [1;31mfast[mer based on assembly-perf.
    
    Change-Id: I08c5c1a542d43361611198f750b725e4303d19e2

[33mcommit 040ffb6326866c9cea3f10530007da511521ed57[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Sep 13 09:23:53 2013 -0700

    Minor adjustment in unit tests
    
    The CpuSpeedTest is extended to cover 2pass good quality with CpuUsed
    from 0 to 4. The BordersTest is changed to use CpuUsed 1 for [1;31mfast[mer
    turn around.
    
    Change-Id: I005e89adee7fe63af4b1f2a76a3a13ea826feadf

[33mcommit 86fb12b600b9e361fcf9ae4c65eec3aedf211bd5[m
Merge: 25655e579 182366c73
Author: Hangyu Kuang <hkuang@google.com>
Date:   Thu Sep 12 15:42:44 2013 -0700

    Merge "Add neon optimize iht8x8 which is 282% [1;31mfast[mer than C."

[33mcommit 182366c736fe59275efa5048ac2ed527ef90470c[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Thu Sep 12 11:45:15 2013 -0700

    Add neon optimize iht8x8 which is 282% [1;31mfast[mer than C.
    
    Change-Id: I963dd4a6e8671957403ccbb9a16ea7de703e3530

[33mcommit 6a501462f80ecaef615cddc7de5ee2ddfbeebe6c[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Wed Sep 11 15:18:47 2013 -0700

    First draft of vp9_short_idct32x32_add_neon.
    
    Lots of TODO which will be taken care in upcoming changes. As is,
    about 6x [1;31mfast[mer than C version.
    
    Change-Id: Ie2557b72fd2d8edca376dbf400a4d173aa5e63e0

[33mcommit fc5ec206a7aaa090a442294c6e498879e31f2eb5[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Sep 9 11:36:51 2013 -0700

    Speed up idct16x16 by rearrange instructions.
    
    Speed improve from 376% to 400% [1;31mfast[mer base on assembly-perf.
    
    Change-Id: If0b2eccc39d5793dc101ce9feb7fcadf88396ea2

[33mcommit 9fc3d32a5044d4fd52a2c330606c7f8d0663cf45[m
Merge: 9158b8956 532179e84
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu Sep 5 12:38:56 2013 -0700

    Merge "[1;31mfast[mer accounting of inc_mv"

[33mcommit 532179e845a37861fe7a703b0f6243d06e8e3a5b[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Sep 4 09:47:57 2013 -0700

    [1;31mfast[mer accounting of inc_mv
    
    Moves counting of mv branches to where we have a new mv, instead of after
    the whole frame is summed.
    
    Change-Id: I945d9f6d9199ba2443fe816c92d5849340d17bbd

[33mcommit b6dbf11ed5c9901bf26f32156f46071d263ec1ad[m
Merge: e83e8f042 e02dc84c1
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Aug 29 15:54:04 2013 -0700

    Merge "Adds a speed feature for [1;31mfast[m 1-loop forw updates"

[33mcommit e02dc84c1aae3a0c22c8c225c8e7b34335d1379b[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Aug 27 15:07:50 2013 -0700

    Adds a speed feature for [1;31mfast[m 1-loop forw updates
    
    Incorporates a speed feature for [1;31mfast[m forward updates of
    coefficients. This feature takes 3 values:
    0 - use standard 2-loop version
    1 - use a 1-loop version
    2 - use a 1-loop version with reduced updates
    
    Results: derfraw300 +0.007% (on speed 0) at feature value = 1
                        -0.160% (on speed 0) at feature value = 2
    
    There is substantial speed up at speeds 2 and above for low
    resolution sequences where the entropy updates are a big part
    of the overall computations.
    
    Change-Id: Ie96fc50777088a5bd441288bca6111e43d03bcae

[33mcommit b84dc949c8a4a520ef1e9121d72a6250fb8f8e47[m
Author: Mans Rullgard <mans@mansr.com>
Date:   Sun Aug 11 15:34:24 2013 +0100

    vp9: neon: optimise convolve8_horiz functions
    
    Each iteration of the horizontal loop reuses 7 of the 11 source
    values.  Loading only the 4 new values saves some time.
    
    Also add preload for source data.
    
    Overall 4% [1;31mfast[mer on Chromebook.
    
    Change-Id: I8f69e749f2b7f79e9734620dcee51dbfcd716b44

[33mcommit 83ee80c045728863834ec476df1ea84c4a0c93f2[m
Author: Adrian Grange <agrange@google.com>
Date:   Fri Aug 2 17:19:29 2013 -0700

    Moved [1;31mfast[m motion search level decision to function
    
    Moving this block of code into a function makes the
    code easier to read and change.
    
    Change-Id: If4ede570cce1eab1982b188c4d3e4fd3d4db236e

[33mcommit debb9c68c8ea92b80627138f95de901cb39cf8dc[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 7 15:22:51 2013 -0700

    Use low precision 32x32fdct for encodemb in speed1
    
    The low precision 32x32 fdct has all the intermediate steps within
    16-bit depth, hence allowing [1;31mfast[mer SSE2 implementation, at the
    expense of larger round-trip error. It was used in the rate-distortion
    optimization search loop only.
    
    Using the low precision version, in replace of the high precision one,
    affects the compression performance by about 0.7% (derf, stdhd) at
    speed 0. For speed 1, it makes derf set down by only 0.017%.
    
    Change-Id: I4e7d18fac5bea5317b91c8e7dabae143bc6b5c8b

[33mcommit 15b5a6a2c7bda61d62536a95b3f84390efc88350[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Jul 22 14:47:57 2013 -0700

    Flexible support for various pattern searches
    
    Adds a few pattern searches to achieve various tradeoffs
    between motion estimation complexity and performance.
    The search framework is unified across these searches so that a
    common pattern search function is used for all. Besides it will
    be easier to experiment with various patterns or combinations
    thereof at different scales in the future.
    
    The new pattern search is multi-scale and is capable of using
    different patterns at different scales.
    
    The new hex search uses 8 points at the smallest scale
    and 6 points at other scales.
    Two other pattern searches - big-diamond and square are
    also added. Big diamond uses 4 points at the smallest scale and
    8 points in diamond shape at the larger scales.
    Square is very similar conceptually to the default n-step search
    but is somewhat [1;31mfast[mer since it keeps only one survivor across
    all scales.
    
    Psnr/speed-up results on derf300:
    
    hex: -1.6% psnr%, 6-8% speed-up
    big-diamond: -0.96% psnr, 4-5% speedup
    square: -0.93% psnr, 4-5% speedup
    
    Change-Id: I02a7ef5193f762601e0994e2c99399a3535a43d2

[33mcommit 9d67495f72cc2c0067bacc594689de53cf6f29c1[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 31 16:50:34 2013 -0700

    Optimize 32x32 2D inverse DCT for speed-up
    
    This commit exploits the sparsity of quantized coefficient matrix.
    It detects each 32x8 array and skip the corresponding inverse
    transformation if all entries are zero.
    
    For ped1080p at 8000 kbps, this on average reduces the runtime of
    32x32 inverse 2D-DCT SSE2 function from 6256 cycles -> 5200
    cycles. It makes the overall encoding process about 2% [1;31mfast[mer at
    speed 0. The speed-up is more pronounceable for the decoding process.
    
    Change-Id: If20056c3566bd117642a76f8884c83e8bc8efbcf

[33mcommit 455f2de20b3f821a4b8bb9edb7e250192d7736a0[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 29 16:03:02 2013 -0700

    Tune tokenization/detokenization flow for speed-up
    
    This commit optimizes the tokenization and detokenization operational
    flow for speed-up. It makes the coding process about 0.3% [1;31mfast[mer at
    speed 0.
    
    Change-Id: I28008df7482874e4b5f237f2d418ff82a249dd56

[33mcommit b5323ed89a27dcf57dc62190cca128e8ae8366b4[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 29 14:54:31 2013 -0700

    Skip redundant tokenization in rd loop
    
    This commit makes the encoder skip the redundant tokenization process
    in the rate-distortion optimization search loop, while updating the
    entropy contexts accordingly. It makes the speed 0 encoding process
    about 0.5% [1;31mfast[mer at no performance change.
    
    Change-Id: I34a4155a0b5332afeb45c93a51c7f35a294d685c

[33mcommit 118ccdcd309c6bdaa967ffe1e13ba6df8aad64db[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 24 15:13:58 2013 -0700

    Inverse dimension order in token_cost array.
    
    This allows us to increment the position at the band-level only as
    we go from one band to the next; more importantly, that allows us to
    use an add instead of multiply instruction, and omit the instruction
    altogether if the band doesn't change from one coef to the next, thus
    being slightly [1;31mfast[mer (probably more noticeable on systems where a
    multiply is expensive, like arm).
    
    Change-Id: I4343fe35b9f9a47fa00b217bdcbf5f91ff96c381

[33mcommit 2f58faffa40036e0c8dfb8b4351a0ce0b11eb9ee[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 23 15:53:09 2013 -0700

    Make coeff_optimize initialized per-plane
    
    This commit makes the initialization of trellis coeff optimization
    a per-plane operation, thereby eliminating the redundant steps in
    encode_sby and encode_sbuv. It makes the encoder at speed 0 slightly
    [1;31mfast[mer.
    
    Change-Id: Iffe9faca6a109dafc0dd69dc7273cbdec19b17cd

[33mcommit 7817d3221ff3a33781d05984bd71bebfc3793259[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 22 15:39:43 2013 -0700

    Save pixels instead of coefficients in intra4x4 RD loop.
    
    Prevents doing duplicate IDCTs; encoding of first 50 frames of bus
    (speed 0) @ 1500kbps goes from 1min4.0 to 1min3.5, i.e. 0.87% [1;31mfast[mer
    overall.
    
    Change-Id: I2df39e29ed9d5ea5e7d2704a34940ba622832ddd

[33mcommit b72ecbb1b98be5cb24e6f68d8d2eeda6efc38cc0[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Jul 19 09:17:00 2013 -0700

    Add best_rd breakout in intra4x4 RD loop.
    
    Encoding time of first 50 frames of bus (speed 0) @ 1500kbps goes from
    1min5.4 to 1min4.0, i.e. 2.2% [1;31mfast[mer overall.
    
    Change-Id: I8c32f2aff9a649ce7dd49d910dc5ba16b99c3bc6

[33mcommit e20fcd9585295d3bae106548d79d501ac8668a6b[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 22 16:09:09 2013 -0700

    More optimizations for cost_coeffs().
    
    4x4:    163 ->  123 cycles (33% [1;31mfast[mer)
    8x8:    491 ->  399 cycles (23% [1;31mfast[mer)
    16x16: 1889 -> 1763 cycles (7% [1;31mfast[mer)
    32x32: 8311 -> 8180 cycles (1.6% [1;31mfast[mer)
    
    Overall encoding time of first 50 frames of bus (speed 0) @ 1500kbps
    goes from 1min4.33 to 1min3.00, i.e. 2.11% [1;31mfast[mer.
    
    Change-Id: Ib52d1dbb5649b14de769d3e7a74af67440b5284f

[33mcommit c6917528a570c13ac1870d9ec96d06db71e066c1[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 17 14:21:44 2013 -0700

    Add a best_yrd shortcut in splitmv mode search.
    
    Encoding of first 50 frames of bus (speed 0) @ 1500kbps goes from
    1min6.2 to 1min5.9, i.e. 0.5% [1;31mfast[mer overall.
    
    Change-Id: I59d8a3b2f0a75010fa041d5e2646c8caac5bd683

[33mcommit 161c99565809a44db2ebad9a87be2b03c2670c2c[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 17 13:53:35 2013 -0700

    Skip redundant nearest/near/zero encodes in splitmv.
    
    Encode of first 50 frames of bus @ 1500kbps (speed 0) goes from
    1min7.3 to 1min6.2, i.e. 1.7% [1;31mfast[mer overall.
    
    Change-Id: I19d2deacfbffadd61d32551cee9586757ab4a987

[33mcommit 8fea880b6f6c1337296a8701bae9249029d7b28a[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 17 11:33:15 2013 -0700

    Skip nearest/near/zero redundant encodes.
    
    Encode of first 50 frames of bus @ 1500kbps (speed 0) goes from 1min12.8
    to 1min7.3, i.e. 8% [1;31mfast[mer.
    
    Change-Id: Ia22d1c7b687316c553cc60eacae988b24e175b62

[33mcommit 9f427bfe9883b07418f81b04bde977b7d50f3cd4[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 17 09:56:46 2013 -0700

    Best_rd breakout in rd partition search.
    
    About 15% [1;31mfast[mer for bus (speed 0) first 50 frames @ 1500kbps, which
    goes from 1min36 to 1min24. Results become slightly better (+0.2% on
    derf/yt, +0.4% on hd), probably because of a bugfix for skipmode in
    super_block_yrd(). Overall speed change (on derfraw300) is roughly
    -13%. This can probably be improved further by caching best_yrd
    between partition searches. Also, we might be able to get more
    speedups by always doing PARTITION_NONE before PARTITIONS_SPLIT, not
    just at the sb8x8 level.
    
    Change-Id: I83736949ebd5b4a3b400ee688d7661913fefc98b

[33mcommit 1ff94fea5639c1c7c4bc99a080aaa985d60d25b7[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jul 11 13:01:44 2013 -0700

    Inline vp9_quantize() in xform_quant().
    
    Cycle times:
    4x4:    151 to  131 cycles (15% [1;31mfast[mer)
    8x8:    334 to  306 cycles (9% [1;31mfast[mer)
    16x16: 1401 to 1368 cycles (2.5% [1;31mfast[mer)
    32x32: 7403 to 7367 cycles (0.5% [1;31mfast[mer)
    
    Total encode time of first 50 frames of bus @ 1500kbps (speed 0)
    goes from 1min39.2 to 1min38.6, i.e. a 0.67% overall speedup.
    
    Change-Id: I799a49460e5e3fcab01725564dd49c629bfe935f

[33mcommit 6fb418741faa990a61dbcae8d35a0959727ade57[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jul 11 11:35:13 2013 -0700

    Inline xform_quant() in encode_block_intra().
    
    Also inline some of the block calculations to assist the compiler to
    not do silly things like calculating the same offset (or converting
    between raster/transform block offset or block, mi and pixel unit)
    many, many, many times.
    
    Cycle times:
    4x4:     584 ->   505 cycles (16% [1;31mfast[mer)
    8x8:    1651 ->  1560 cycles (6% [1;31mfast[mer)
    16x16:  7897 ->  7704 cycles (2.5% [1;31mfast[mer)
    32x32: 16096 -> 15852 cycles (1.5% [1;31mfast[mer)
    
    Overall, this saves about 0.5 seconds (1min49.8 -> 1min49.3) on the
    first 50 frames of bus (speed 0) @ 1500kbps, i.e. 0.5% overall.
    
    Change-Id: If3dd62453f8e2ab9d4ee616bc4ea956fb8874b80

[33mcommit f4f60f600560440157f849433e260a01a0c6c9ac[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Thu Jul 11 17:13:03 2013 -0700

    Neon: Update mbfilter if all vectors follow one branch.
    
    Change the mbfilter Neon code from executing both branches if all
    vectors follow only one branch.
    
    The code is about 5% [1;31mfast[mer when executing only one branch and about
    1% slower when executing both branches.
    
    -PS5: Remove local stack space from mbfilter.
    
    Change-Id: I6a23f9b318a9f4568a2718b4c9348db988fe2182

[33mcommit 198fa6d0a049ca338a50ac40eb1bc84367464738[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Mon Jul 1 12:52:38 2013 -0700

    Add Neon horizontal and vertical vp9_mbloop_filter
    
    - The vp9 mbfilter C code will branch on flat and mask. This CL
      will perform both branches and combine the data. A later CL will
      perform a check to see if all patch will take one branch.
    - These functions are about 1.75 times [1;31mfast[mer than the C code on
      Nexus 7.
    
    PS #3
    - Changed all functions to dub limit, blimit, and thresh from
      vld {dx[]}, freeing up r4-r6.
    - Changed code to use vbif to reduce one instruction and free
      up a d register.
    
    Change-Id: I028dae0e434dc9891c3677bdb182e201ffb04777

[33mcommit bd867f16191a5ec2c2ebbd2e63bcb2721f0a0d78[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 3 12:04:30 2013 -0700

    Inline vp9_get_mv_joint().
    
    Encode time for first 50 frames of bus (speed 0) @ 1500kbps goes from
    2min10.9 to 2min10.5, i.e. 0.3% [1;31mfast[mer overall, basically because we
    prevent the call overhead.
    
    Change-Id: I1eab1a95dd3eae282f9b866f1f0b3dcadff073d5

[33mcommit 8fde07a3aeef421ed7b15c424e7fad2ede46f9bf[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 3 10:54:36 2013 -0700

    Don't recalculate mv_ref costs for each block/partition.
    
    Changes cost_mv_ref() into doing a LUT into pre-calculated cost
    arrays instead. Encode time of first 50 frames of bus (speed 0)
    @ 1500kbps goes from 2min11.6 to 2min10.9, i.e. 0.5% [1;31mfast[mer overall.
    
    Change-Id: If186e92c34c201b29cbbc058785a15c9c09e433a

[33mcommit 466e0cf30390addce6d19ab7961062d8ae921551[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Tue Jun 18 15:23:25 2013 -0700

    SSE2 version of vp9_short_fdct32x32_rd.
    
    43,000 -> 5,750 cycles, about 7.5x [1;31mfast[mer.
    
    Change-Id: Ibfd92821b9603f4ed9c256e0ececec14fa4565d0

[33mcommit a63e31e81e9d94587de41c57e843e3944902d7fe[m
Author: James Zern <jzern@google.com>
Date:   Fri Jun 28 18:07:37 2013 -0700

    fix test compile error
    
    since:
    92479d9 Make update_partition_context [1;31mfast[mer
    
    fixes:
    vp9/common/vp9_blockd.h:408:22: error:
    non-constant-expression cannot be narrowed from type 'int' to 'char' in
    initializer list [-Wc++11-narrowing]
      char pcvalue[2] = {~(0xe << boffset), ~(0xf <<boffset)};
                         ^~~~~~~~~~~~~~~~~
    
    Change-Id: Id5b00b9a72d00a2b314081a23879bd1fa3ce983b

[33mcommit d00b8e5f82069a2ce819f1ee1588d52d04cbf65c[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Jun 28 10:40:21 2013 -0700

    Inline vp9_get_coef_context() (and remove vp9_ prefix).
    
    Makes cost_coeffs() a lot [1;31mfast[mer:
    4x4: 236 -> 181 cycles
    8x8: 888 -> 588 cycles
    16x16: 3550 -> 2483 cycles
    32x32: 17392 -> 12010 cycles
    
    Total encode time of first 50 frames of bus (speed 0) @ 1500kbps goes
    from 2min51.6 to 2min43.9, i.e. 4.7% overall speedup.
    
    Change-Id: I16b8d595946393c8dc661599550b3f37f5718896

[33mcommit 91d223bd5c3ece5edc28d048a866d1c0fb39bdc7[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jun 27 20:57:37 2013 -0700

    Some minor optimizations for cost_coeffs().
    
    Cycle timings for first 3 frames of bus (speed 0) at 1500kbps:
    4x4: 298 -> 234 cycles
    8x8: 1227 -> 878 cycles
    16x16: 23426 -> 18134 cycles
    32x32: 4906 -> 3664 cycles
    
    Total encode time of first 50 frames of bus @ 1500kbps (speed 0) goes
    from 3min0.7 to 2min51.6 seconds, i.e. 5.3% [1;31mfast[mer.
    
    Change-Id: I68a0e1b530b0563b84a67342cca4b45146077e95

[33mcommit 7a049be6bf8273be4871555520f6bbbfb0a1cb4f[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Tue Jun 25 17:28:24 2013 -0700

    Inline quantize so idiv instruction gets removed from inner loop.
    
    Encoding time of first 50 frames of bus @ 1500kbps (speed 0) goes from
    3min15.0 to 3min10.9, i.e. 2.1% [1;31mfast[mer overall.
    
    Change-Id: If592ee99be09bcd34a7c8498347f44e7305e982c

[33mcommit 4c10515f89eb6616246f635c5f388049a23ae8c4[m
Merge: 896dc47ca 92479d952
Author: Jingning Han <jingning@google.com>
Date:   Wed Jun 26 19:01:45 2013 -0700

    Merge "Make update_partition_context [1;31mfast[mer"

[33mcommit 92479d9526b903ea87131e435084a5b2ae6ef2d3[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jun 26 11:50:14 2013 -0700

    Make update_partition_context [1;31mfast[mer
    
    Use vpx_memset for updating the partition contexts. Thanks to Noah
    for pointing out the need of refactoring in this part.
    
    Change-Id: I67fb78429d632298f1cd8a0be346cc76f79392a6

[33mcommit c24d922396f4dcd50216be3cdfd784ea31c47564[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Tue Jun 25 11:26:49 2013 -0700

    Add averaging-SAD functions for 8-point comp-inter motion search.
    
    Makes first 50 frames of bus @ 1500kbps encode from 3min22.7 to 3min18.2,
    i.e. 2.3% [1;31mfast[mer. In addition, use the sub_pixel_avg functions to calc
    the variance of the averaging predictor. This is slightly suboptimal
    because the function is subpixel-position-aware, but it will (at least
    for the SSE2 version) not actually use a bilinear filter for a full-pixel
    position, thus leading to approximately the same performance compared to
    if we implemented an actual average-aware full-pixel variance function.
    That gains another 0.3 seconds (i.e. encode time goes to 3min17.4), thus
    leading to a total gain of 2.7%.
    
    Change-Id: I3f059d2b04243921868cfed2568d4fa65d7b5acd

[33mcommit 25c588b1e49deb70a06549a8c843c9a3bc19ea1a[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Jun 21 09:35:37 2013 -0700

    Add subtract_block SSE2 version and unit test.
    
    3% [1;31mfast[mer overall (3min35.0 to 3min28.5).
    
    Change-Id: I5ff8a5c2c91586b6632ca5009ad1ea51ce94af5e

[33mcommit 7947a33d727af01020a12600c577f10b1c90cecb[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Jun 19 16:23:21 2013 -0700

    Improving model rd with variance and quant step
    
    Improves the rd modeling function and implements them using interpolation
    from a table which is a little [1;31mfast[mer. Also uses sse as input to the
    modeling function rather than var - since there is no dc prediction
    used and as a result the sse works a little better.
    
    derfraw300: +0.05%
    Speedup: ~1%
    
    Change-Id: I151353c6451e0e8fe3ae18ab9842f8f67e5151ff

[33mcommit b5bf7b13a83fc6fccafec1611410910eb78155a9[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jun 18 17:09:50 2013 -0700

    Add two-pass quantization
    
    Optimized the quantization function by making it a two-pass
    process. The first pass does a quick checking of the transform
    coefficients against the base ZBIN, and only keep the good
    enough set of coefficients for quantization. A skipping
    check is added. If all coefficients are within the base ZBIN, no
    quantization is needed. The second pass is the actual quantization
    pass, which only processes the coefficient subset determined
    in first pass. This reduces the computation. Furthermore, an
    alternitive method is used for large transform size, which often
    has sparse nonzero quantized coefficients.
    
    Overall, the encoder speedup is about 4%. The quantization function
    itself gets 20% [1;31mfast[mer.
    
    Change-Id: I3a9dd0da6db030260b6d9c314a9fa48ecae89f22

[33mcommit a2f33e2505adab7543447d9017f0def0a901a0de[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jun 17 14:57:13 2013 -0700

    Use assembly-optimized variance functions in sub_pixel_{avg}_var().
    
    2.5% [1;31mfast[mer when encoding first 50 frames of bus @ 1500kbps.
    
    Change-Id: I5a64703996cf7fd39b07e32c72311c4b125ec6d4

[33mcommit 869a39ba60379b031573ed5ba1911088d353a3c1[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Jun 7 13:24:14 2013 -0700

    Cleans up mbskip encoding
    
    Refactors mbskip coding to be compatible with coding of the rest of
    the symbols. Adds forward/backward adaptation and removes a lot of
    the legacy code.
    
    Results:
    [1;31mfast[m50: +1.6%
    derfraw300: +0.317%
    
    Change-Id: I395a2976d15af044d3b8ded5acfa45f6f065f980

[33mcommit b6ef0823c575869b1d603f8f7076c1a96df65f48[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri Apr 19 08:04:57 2013 -0700

    set up a new speed 1
    
    slightly worse results for [1;31mfast[mer encodes
    
    Change-Id: I25ea82a18ce20635dbcd328808c1d05ac1f58fd7

[33mcommit 5b6d33f9afee6da7a370cdd94aae4ac85c8588c9[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Mon Mar 25 16:18:38 2013 -0700

    Faster vp9_short_fdct4x4 and vp9_short_fdct8x4.
    
    Scalar path is about 1.3x [1;31mfast[mer (2.1% overall encoder speedup).
    SSE2 path is about 5.0x [1;31mfast[mer (8.4% overall encoder speedup).
    
    Change-Id: I360d167b5ad6f387bba00406129323e2fe6e7dda

[33mcommit f13b69d07c337bf8f7165b01934ae8ad971694bd[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Mon Mar 25 16:18:38 2013 -0700

    Faster vp9_short_fdct4x4 and vp9_short_fdct8x4.
    
    Scalar path is about 1.3x [1;31mfast[mer (2.1% overall encoder speedup).
    SSE2 path is about 5.0x [1;31mfast[mer (8.4% overall encoder speedup).
    
    Change-Id: I360d167b5ad6f387bba00406129323e2fe6e7dda

[33mcommit 94649bc0ef85813dd42834a3df985753864b9be6[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Apr 16 14:49:30 2013 -0700

    set up a speed 1
    
    slightly worse results for [1;31mfast[mer encodes
    
    Change-Id: Ic5b38fcde7a2e334c4724e125b558bcb97783af6

[33mcommit 2da90fddc23a5df5ca6b241c720ef6f0c94d5e4c[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Apr 10 13:45:22 2013 -0700

    Remove obselete code
    
    The strategy to run [1;31mfast[m loop filter picking for encoder speed-up
    should be revisited at a later stage.
    
    Change-Id: I3b75e06d767cff41be952a42e63b3292f4eab996

[33mcommit 21a718d9a7d64d7700e52ec5d25894a54d21ac14[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Mar 27 10:46:35 2013 -0700

    Optimize 32x32 idct function
    
    Wrote sse2 version of vp9_short_idct_32x32 function. Compared
    to c version, the sse2 version is 5X [1;31mfast[mer.
    
    Change-Id: I071ab7378358346ab4d9c6e2980f713c3c209864

[33mcommit 869d6c053428b64796a1306a8ef3c2a7299b6e19[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Mar 21 16:29:36 2013 -0700

    Optimize 16x16 idct10 function
    
    Wrote sse2 version of vp9_short_idct10_16x16 function. Compared
    to c version, the sse2 version is 2.3X [1;31mfast[mer.
    
    Change-Id: I314c4f09369648721798321eeed6f58e38857f26

[33mcommit ec3100661c090c4f46fe231cef51897dc6660551[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Mar 21 09:22:22 2013 -0700

    Optimize 16x16 idct function
    
    Wrote sse2 version of vp9_short_idct16x16 function. Compared to c
    version, the sse2 version is over 2.5X [1;31mfast[mer.
    
    Change-Id: I38536e2b846427a2cc5c5423aaf305fd0e605d61

[33mcommit 6344c84c82f6a4f82a6a4f9f33a6d1ec85691930[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Mar 15 11:33:10 2013 -0700

    Optimize 8x8 idct function
    
    Wrote sse2 functions of vp9_short_idct8x8 and vp9_short_idct10_8x8.
    Compared to c version, the sse2 version is 2X [1;31mfast[mer. The decoder
    test didn't show noticeable gain since 8x8 idct doesn't take much
    of decoding time (less than 1% in my test).
    
    Change-Id: I56313e18cd481700b3b52c4eda5ca204ca6365f3

[33mcommit 4418b790a79342a0b89cac0c83e07bc4d8729262[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Fri Mar 15 15:50:55 2013 -0700

    Faster vp9_short_fdct16x16.
    
    Scalar path is about 1.5x [1;31mfast[mer (3.1% overall encoder speedup).
    SSE2 path is about 7.2x [1;31mfast[mer (7.8% overall encoder speedup).
    
    Change-Id: I06da5ad0cdae2488431eabf002b0d898d66d8289

[33mcommit 67978d1380ee460991edb876a3abaa235da4e413[m
Merge: 3b7900012 ef887974a
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Feb 28 11:32:03 2013 -0800

    Merge "vp8 [1;31mfast[m quantizer with intrinsics"

[33mcommit c129203f7e5e20f5d67f92c27c65f7d5e362aa7a[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Wed Feb 27 12:29:06 2013 -0800

    Faster vp9_short_fdct8x8.
    
    Scalar path is about 1.4x [1;31mfast[mer (4% overall encoder speedup).
    SSE2 path is about 7x [1;31mfast[mer (13% overall encoder speedup).
    
    Change-Id: I7e85d8225a914a74c61ea370210414696560094d

[33mcommit ef887974aa0d129b2738a1b87da5f50822b70e08[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Fri Feb 1 16:14:38 2013 -0800

    vp8 [1;31mfast[m quantizer with intrinsics
    
    Reduce dependency on offsets file by using intrinsics. Disassembly shows
    improvements over previous assembly specifically in register management,
    preloading, and {pro,epi}log. Speed change is within margin of error.
    
    Change-Id: I8131b4b4d62bc092407fe847bfaa8f2c0e1384ff

[33mcommit 02ff360b333a88ca8866b191d8928e4b980911dd[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Feb 7 10:24:46 2013 -0800

    Add sad64x64 and sad32x32 SSE2 versions.
    
    Also port the 4x4, 16x16, 8x16 and 16x8 versions to x86inc.asm; this
    makes them all slightly [1;31mfast[mer, particularly on x86-64. Remove SSE3
    sad16x16 version, since the SSE2 version is now [1;31mfast[mer.
    
    About 1.5% overall encoding speedup.
    
    Change-Id: Id4011a78cce7839f554b301d0800d5ca021af797

[33mcommit 639b863d2276d8100a5e585fa5ab9bf2d3983946[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Feb 6 17:16:36 2013 -0800

    Make cost_coeffs() more efficient.
    
    Cache the constant offset in one variable to prevent re-loading that
    in each loop iteration, and mark the function as inline so we can use
    the fact that the transform size is always known in the caller.
    
    Almost 1% [1;31mfast[mer encoding overall.
    
    Change-Id: Id78325a60b025057d8f4ecd9003a74086ccbf85a

[33mcommit 5cfd82bcaf666c1b9cacd8a4899fc703598aa5b0[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Feb 6 14:13:05 2013 -0800

    Use fdct8x4 instead of fdct4x4 where the block size allows it.
    
    This allows for [1;31mfast[mer SIMD implementations in the future (currently
    there is no speed impact).
    
    Change-Id: I732647e9148b5dcb44e6bc8728138f0141218329

[33mcommit a788e0fe63e90dca31c67c6ddc21658f86d8a49a[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Feb 6 11:20:59 2013 -0800

    Add sse2 versions of sub_pixel_variance{32x32,64x64}.
    
    7.5% [1;31mfast[mer overall encoding.
    
    Change-Id: Ie9bb7f9fdf93659eda106404cb342525df1ba02f

[33mcommit 58c983d1093b941e32ef6460e94bed32998eb8d2[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Tue Feb 5 15:21:47 2013 -0800

    Add SSE3 versions for sad{32x32,64x64}x4d functions.
    
    Overall encoding about 15% [1;31mfast[mer.
    
    Change-Id: I176a775c704317509e32eee83739721804120ff2

[33mcommit bdca030cafc31446afc1685906f7c44e1850ed84[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Jan 3 15:47:34 2013 -0800

    Use seg/ref/mode offsets in loop_filter_partial.
    
    Use the proper seg/mode/ref filter offsets when selecting the
    frame loop filter level for [1;31mfast[m mode (pick_filter_level_[1;31mfast[m).
    
    Change-Id: I2473e2131c800ad19755cb6211ad735fecfe2ac0

[33mcommit 537311971348b1919de8b36266f900aa4657672f[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Oct 22 14:43:01 2012 -0700

    Merging in the Switchable interp experiment
    
    There is a macro DEFAULT_INTERP_FILTER defined in encoder/onyx_if.c that
    is set as EIGHTTAP for now - so SWITCHABLE is not really used. Ideally,
    this should be SWITCHABLE but that would make the encoder quite a bit slower.
    We will change the default filter to SWITCHABLE once we find a [1;31mfast[mer way to
    search for switchable filters.
    
    Change-Id: Iee91832cdc07e6e14108d9b543130fdd12fc9874

[33mcommit 525b18391055627ac8fa9bc2998d49fbf4e553c0[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Wed Aug 15 22:41:32 2012 -0700

    A few more optimizations, about 1% overall speedup.
    
    Unroll horizontal pass, no more intermediate buffer, [1;31mfast[mer special transpose.
    
    Change-Id: I05df75be4e5f01420066cdf3c61a2edf35bedb64

[33mcommit 5a34e0eb89e16aafa2dafc73596078409fa40bbb[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Tue Aug 14 18:19:09 2012 -0700

    First partial snapshot of vectorized 8-tap filtering.
    
    About 3.5x [1;31mfast[mer, 30% overall encoder speedup. Rest of optimizations
    will come soon (see TODO section in filter_sse4.c).
    
    Change-Id: If18108048bfd5345fc942e8574e4c7f58e0e86e0

[33mcommit c88d335f7d204bd7529d386c8f30f77b6e81c0ad[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Mar 21 18:22:33 2012 +0000

    Only support improved quant
    
    Deprecate [1;31mfast[m quant and strict_quant code.
    Small effect on quality as [1;31mfast[m was used in first pass but the
    effect is basically neutral across the derf set.
    
    The rationale here is to reduce the number of code paths for
    now to make experimentation easier. Optimized and [1;31mfast[m code
    options can be re-introduced later along with other  encode
    speed options.
    
    Change-Id: Ia30c5daf3dbc52e72c83b277a1d281e3c934cdad

[33mcommit 6035da5448392244936f1e1a9079e7f6cd857ffe[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Mar 9 17:32:50 2012 -0800

    WebM Experimental Codec Branch Snapshot
    
    This is a code snapshot of experimental work currently ongoing for a
    next-generation codec.
    
    The codebase has been cut down considerably from the libvpx baseline.
    For example, we are currently only supporting VBR 2-pass rate control
    and have removed most of the code relating to coding speed, threading,
    error resilience, partitions and various other features.  This is in
    part to make the codebase easier to work on and experiment with, but
    also because we want to have an open discussion about how the bitstream
    will be structured and partitioned and not have that conversation
    constrained by past work.
    
    Our basic working pattern has been to initially encapsulate experiments
    using configure options linked to #IF CONFIG_XXX statements in the
    code. Once experiments have matured and we are reasonably happy that
    they give benefit and can be merged without breaking other experiments,
    we remove the conditional compile statements and merge them in.
    
    Current changes include:
    * Temporal coding experiment for segments (though still only 4 max, it
      will likely be increased).
    * Segment feature experiment - to allow various bits of information to
      be coded at the segment level. Features tested so far include mode
      and reference frame information, limiting end of block offset and
      transform size, alongside Q and loop filter parameters, but this set
      is very fluid.
    * Support for 8x8 transform - 8x8 dct with 2nd order 2x2 haar is used
      in MBs using 16x16 prediction modes within inter frames.
    * Compound prediction (combination of signals from existing predictors
      to create a new predictor).
    * 8 tap interpolation filters and 1/8th pel motion vectors.
    * Loop filter modifications.
    * Various entropy modifications and changes to how entropy contexts and
      updates are handled.
    * Extended quantizer range matched to transform precision improvements.
    
    There are also ongoing further experiments that we hope to merge in the
    near future: For example, coding of motion and other aspects of the
    prediction signal to better support larger image formats, use of larger
    block sizes (e.g. 32x32 and up) and lossless non-transform based coding
    options (especially for key frames). It is our hope that we will be
    able to make regular updates and we will warmly welcome community
    contributions.
    
    Please be warned that, at this stage, the codebase is currently slower
    than VP8 stable branch as most new code has not been optimized, and
    even the 'C' has been deliberately written to be simple and obvious,
    not [1;31mfast[m.
    
    The following graphs have the initial test results, numbers in the
    tables measure the compression improvement in terms of percentage. The
    build has  the following optional experiments configured:
    --enable-experimental --enable-enhanced_interp --enable-uvintra
    --enable-high_precision_mv --enable-sixteenth_subpel_uv
    
    CIF Size clips:
    http://getwebm.org/tmp/cif/
    HD size clips:
    http://getwebm.org/tmp/hd/
    (stable_20120309 represents encoding results of WebM master branch
    build as of commit#7a15907)
    
    They were encoded using the following encode parameters:
    --good --cpu-used=0 -t 0 --lag-in-frames=25 --min-q=0 --max-q=63
    --end-usage=0 --auto-alt-ref=1 -p 2 --pass=2 --kf-max-dist=9999
    --kf-min-dist=0 --drop-frame=0 --static-thresh=0 --bias-pct=50
    --minsection-pct=0 --maxsection-pct=800 --sharpness=0
    --arnr-maxframes=7 --arnr-strength=3(for HD,6 for CIF)
    --arnr-type=3
    
    Change-Id: I5c62ed09cfff5815a2bb34e7820d6a810c23183c
For keyword time:
[33mcommit 2e88f2f2ec777259bda1714e72f1ecd2519bceb5[m
Author: Adrian Grange <agrange@google.com>
Date:   Thu Nov 21 17:19:04 2013 -0800

    Fix bug in extend_frame chroma extended too far
    
    This fixes issue 667.
    
    In the case where the frame was an odd number of pixels
    wide or high, the border was being extended by one col
    or row too far.
    
    The calculation of color plane dimensions was modified
    to use those already computed at the [1;31mtime[m the frame
    buffer was allocated.
    
    Also freed the temporary scaling buffer in vpxdec to
    prevent a memory leak.
    
    Change-Id: I195bc81d84c0fc5d8260c1232200d62399e4b51f

[33mcommit f16cde998b3c43ccda202e463b0ff72e725e9829[m
Author: Joshua Litt <joshualitt@google.com>
Date:   Wed Nov 13 16:30:31 2013 -0800

    Tweaks to vpx_test android make file
    
      * Change from thumb mode to arm mode improves test [1;31mtime[m significantly
      * Direct inclusion of test.mk allows for unit test configuration via
        configure script
    Change-Id: Id58d3ba8289374528756a672459d8334afe20e2a

[33mcommit b6b91432188a4773456b31a38194799b7b71e9c6[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Nov 7 14:56:58 2013 -0800

    Dual buffer encoding for intra modes
    
    Overall change (using dual buffer scheme for superblocks of both inter
    and intra modes) reduces speed 2 run[1;31mtime[m:
    bluesky_1080p at 6000kbps:   263553ms -> 257441ms
    riverbed_1080p at 8000kbps:  233230ms -> 225308ms.
    
    Change-Id: Idf8d70f768a4b0d97b2a8506372c57b7b4022119

[33mcommit dde8069e5731a49ea520ce7f796d046f28912a86[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Fri Nov 1 18:23:06 2013 -0700

    Splitting partition_probs array into two arrays.
    
    We only update partition_probs for inter frames but they are constant
    for key frames. It is not necessary to have constants inside frame
    context and copy them every [1;31mtime[m. This change reduces FRAME_CONTEXT size
    by at least 48 bytes.
    
    
    Change-Id: If70a53be51043f37fe7d113853217937710932a7

[33mcommit 44e25155f7e27a0fe469a01985835547e311e5e2[m
Author: Adrian Grange <agrange@google.com>
Date:   Mon Nov 4 12:17:54 2013 -0800

    Remove unused members from VP9_COMP
    
    Removed:
    goldfreq, avg_encode_[1;31mtime[m, avg_pick_mode_[1;31mtime[m,
    cpu_freq, interquantizer
    member variables from VP9_COMP since they are no longer
    used in the code.
    
    Change-Id: I010a82c217d0da03c3f53d1858d3462190c12dcf

[33mcommit a0a6590e0fa4d7dd8eeaf0384ec27bfc8d925349[m
Author: Adrian Grange <agrange@google.com>
Date:   Mon Nov 4 11:01:43 2013 -0800

    Remove unused member variables from VP9_COMP
    
    Removed three members from the VP9_COMP data structure:
    inter_zz_count, gf_bad_count, gf_update_recommended.
    
    These were part of the VP8 real-[1;31mtime[m mode implementation
    that was removed from the initial VP9 codecbase.
    
    Change-Id: I866b083b88ef02c74837277d50ce532ca88492f3

[33mcommit 72033fcff8e1ce2e94f578910a1cfa77cd1bf533[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 16 12:43:03 2013 -0700

    Make memory alloc in pick_mode_context bsize aware
    
    This commit makes the buffer allocation of zcoeff_blk array in
    pick_mode_context block size aware. It calculates the number of
    4x4 blocks in the partition and assigns the memory space accordingly.
    This process (and the uninitialization) is done once for each encoding
    pass. It allows memory copy of smaller buffer when possible.
    
    For football at 600kbps, the run[1;31mtime[ms improve by about 1%:
    speed 1, 45961ms -> 45472ms
    speed 2, 23863ms -> 23598ms
    
    Change-Id: Id2ca24906fa89f46fa5fe742ec4b8efc2a61f877

[33mcommit 660fc5f560f11d9cb95d960b123b913a33485b9f[m
Merge: 12b2c712c 650caeca0
Author: James Zern <jzern@google.com>
Date:   Wed Oct 16 01:44:24 2013 -0700

    Merge "lint-hunks: remove run[1;31mtime[m/int filter"

[33mcommit 650caeca0ba60a53caf034c6fe9948561fde0bc1[m
Author: Guillaume Martres <gmartres@google.com>
Date:   Tue Oct 15 15:43:42 2013 -0700

    lint-hunks: remove run[1;31mtime[m/int filter
    
    There's no good reason to use types like long or short in new code.
    
    Change-Id: Ic6de6259d5a99b7af478e9c6ab74e65d81b022e2

[33mcommit f60a3910c4ab7725dc6dd54877bbdd3ed5f0e187[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Oct 11 11:26:32 2013 -0700

    Move token_cache from cost_coeffs to MACROBLOCK
    
    This commit moves token_cache buffer into macroblock struct, instead
    of defining as a local variable in cost_coeffs. This avoids repeatedly
    re-allocating memory space in the rate-distortion optimization loop.
    
    The run[1;31mtime[m at speed 0 reduces:
    bus 2000kbps, 161692ms to 159951ms
    football 600kbps, 229505ms to 225821ms
    
    Change-Id: If7da6b0b6d8c5138a16271a33c4548fba33d8840

[33mcommit 3806bab2838e73573e2fb814f5605d4092e78c3e[m
Author: Scott Graham <scottmg@chromium.org>
Date:   Fri Oct 11 14:27:00 2013 -0700

    Get libvpx to compile on VS2013.
    
    `round` is defined in the run[1;31mtime[m library now.
    https://codereview.chromium.org/23922008/
    
    Change-Id: I3852740058d32f63ce283579acbe284865e32dba

[33mcommit 8b175679be83c228bcf2512df9f5ec46bc6b158c[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Oct 10 17:29:46 2013 -0700

    Masking intra mode choice adaptively
    
    The commit changes to mask available intra prediction modes for test
    based on prediction block size.
    
    With this patch, encoding [1;31mtime[m of CpuUsed 2 reduces from 10% to 20% for
    HD clips with a compression drop of 0.2%
    
    Change-Id: I65f320f1237c0f5ae3a355bf7caf447f55625455

[33mcommit 98400c1bc48939441b409b5c04c3ac93a56842cd[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Oct 10 17:16:20 2013 -0700

    Removing vp9_tree_p typedef.
    
    It is used only two [1;31mtime[ms and it is more clear to use real type instead
    of typedef.
    
    Change-Id: Idc25c16504c3da4d040e0cdb33a2987631bb6a5b

[33mcommit fc19243cedad003d181266fd41958bf27e6f21ae[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Oct 10 10:37:40 2013 -0700

    Re-design rate-distortion cost tracking buffers
    
    This commit re-designs the per transformed block rate-distortion
    costs tracking buffers. It removes redundant buffer usage, makes
    the needed context memory allocation per VP9_COMP instance and
    reuses the same buffer sets inside the rate-distortion optimization
    search loop, thereby avoiding repeatedly requiring memory space.
    
    It reduces speed 0 run[1;31mtime[m:
    
    bus at 2000 kbps from 166763ms to 158967ms,
    football at 600 kbps from 246614ms to 234257ms.
    
    Both about 5% speed-up. Local tests suggest about 2% to 5% speed-up
    for speed 1 and 2 settings. This does not change compression
    performance.
    
    Change-Id: I363514c5276b5cf9a38c7251088ffc6ab7f9a4c3

[33mcommit 0d0ed6a29b6e594e40fad9bcdaca5dab822754ce[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Oct 4 17:19:05 2013 -0700

    Allow sub8x8 intra modes test for alt frame coding
    
    This commit allows sub8x8 intra modes test in the rate-distortion
    loop for hd sequences in speed 1 and 2.
    
    For sequence y90n of hd set at 8000 kbps, speed 2 run[1;31mtime[m goes
    from 207s to 210s. For ped_1080p at 3000 kbps, speed 2 runtim goes
    from 336s to 337s. Both are running with 300 frames.
    
    This improves compression performance by 0.24% for stdhd and 0.32%
    for hd.
    
    Change-Id: I173ca38a6411565ae6cfadd184c42b2070c5de1f

[33mcommit 11abab356e4c04d4a21ac43f58f9ec05c7c80eca[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 27 16:02:49 2013 -0700

    Refactor inter mode rate-distortion search
    
    This commit separates the rate-distortion optimization loop of
    superblocks from that of sub8x8 blocks. This allows better design
    rate-distortion optimization search loop for each setting. It also
    removes the use of SPLITMV and I4X4_PRED therein.
    
    No performance change in speed 0 settings. For bus@CIF at 2000kbps,
    the speed 1 run[1;31mtime[m goes from 48009ms to 43894ms (about 10% faster).
    The overall compression performance on derf changed by -0.021%.
    
    Speed 2 run[1;31mtime[m goes from 27114ms to 28700ms (6% slower), while the
    overall coding efficiency goes up by 1.629% for derf, 1.236% for yt.
    
    Change-Id: Ie6bdfa0a370148dd60bd800961077f7e97e67dd4

[33mcommit 5215b83aead928f66d9133e846ede6fd1b52aa89[m
Author: A.Mahfoodh <ab.mahfoodh@gmail.com>
Date:   Wed Oct 2 18:41:54 2013 -0400

    Simplifying and inlining k_cvtlo_epi16 and k_cvthi_epi16
    
    Simplify the k_cvtlo_epi16 and k_cvthi_epi16 to only two
    instructions. Then inlined them.
    
    quoting from intel MMX_App_Compute_16bit_Vector.pdf‎
    "The PMADDWD instruction multiplies four
    pairs of 16-bit numbers and produces partial sums of the results
    and can do so once per clock (with a three-clock latency)."
    so I am assuming that there will be three clock overhead after the
    last _mm_madd_pi16 command.
    Even with the overhead the number of clocks in general should be
    smaller. I am not sure though becasue I could not find information
    about number of clocks required for instructions in k_cvtlo_epi16
    and k_cvthi_epi16. I will run a test and compare the execution [1;31mtime[m.
    
    Change-Id: Ieda4aa338f69ad3dd196ac6e7892da3cf1b47ea7

[33mcommit 195061fedaeca7ac79ef810213c35fb06ed155aa[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Sep 30 11:58:22 2013 -0700

    Fix rectangular partition check in speed 1
    
    Make encoder skip rectangular partition check in speed 1 and above,
    when early termination was triggered in partition split.
    Thanks Guillaume (gmartres@) for catching this issue.
    
    This change makes bus_cif at 2000kbps speed 1 run[1;31mtime[m goes down from
    25612ms to 23438ms (about 9% speed-up), at the expense of -0.235%
    performance down.
    
    Change-Id: I98613fad081a261d30d5fa206f934ca70601c180

[33mcommit d11221f43387696e6ffe80186ab874fd9148cba3[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Sep 20 00:41:29 2013 -0700

    Improves constant qual, constrained qual turned on
    
    Adds modeled functions to decide the qp for altref frames in constant q
    mode similar to other functions in use in bitrate mode.
    
    Also turns on the constrained quality mode (end-usage=2) option which
    was turned off before. Basic testing shows the mode works in principle,
    to cap bitrate to the target-bitrate specified, while allowing lower
    bitrate depending on the cq-level specified. The mode will need to be
    improved over [1;31mtime[m.
    
    Results for constant quality vs bitrate control mode:
    derfraw300/fullderfraw: +3.0% at constant quality over bitrate control.
    fullstdhdraw: +4.341%
    stdhdraw250: +5.361%
    
    Change-Id: If5027c9ec66c8e88d33e47062c6cb84a07b1cda9

[33mcommit c4826c59415f2fe8b8d9ab1a66f50f7e30d64f1d[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 12 10:06:47 2013 -0700

    Adaptive motion search control
    
    This commit enables adaptive constraint on motion search range for
    smaller partitions, given the motion vectors of collocated larger
    partition as a candidate initial search point.
    
    It makes speed 0 run[1;31mtime[m of bus at CIF and 2000 kbps goes from
    167s down to 162s (3% speed-up), at 0.01dB performance gains. In
    the settings of speed 1, this makes the run[1;31mtime[m goes from 33687 ms
    to 32142 ms (4.5% speed-up), at 0.03dB performance gains.
    
    Compression performance wise, it gains at speed 1:
    derf  0.118%
    yt    0.237%
    hd    0.203%
    stdhd 0.438%
    
    Change-Id: Ic8b34c67810d9504a9579bef2825d3fa54b69454

[33mcommit 01a37177d167f2f837ae6d2de03a17511d1b38c9[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Aug 20 14:34:17 2013 -0700

    Refactor rd_pick_partition for parameter control
    
    This commit changes the partition search order of superblocks from
    {SPLIT, NONE, HORZ, VERT} to {NONE, SPLIT, HORZ, VERT} for
    consistency with that of sub8x8 partition search. It enable the use
    of early termination in partition search for all block sizes.
    
    For ped_area_1080p 50 frames coded at 4000 kbps, it makes the run[1;31mtime[m
    goes down from 844305ms -> 818003ms (3% speed-up) at speed 0.
    
    This will further move towards making the in-search partition types
    configurable, hence unifying various speed-up approaches.
    
    Some speed 1 and 2 features are turned off during the refactoring
    process, including:
    disable_split_var_thresh
    using_small_partition_info
    
    Stricter constraints are applied to use_square_partition_only for
    right/bottom boundary blocks. Will bring back/refine these features
    subsequently. At this point, it makes derf set at speed 1 about
    0.45% higher in compression performance, and 9% down in run-[1;31mtime[m.
    
    Change-Id: I3db9f9d1d1a0d6cbe2e50e49bd9eda1cf705f37c

[33mcommit 3275ad701a5c37041ab90b743cc6fec6a8340f80[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 14 16:50:45 2013 -0700

    Enable early termination in uv rd loop
    
    This commit enables early termination in the rate-distortion
    optimization search loop for chroma components. When the cumulative
    rd cost is above the current best value, skip the rest per-block
    transform/quantization/coeff_cost and continue to the next
    prediction mode.
    
    For bus_cif at 2000 kbps, the average run-[1;31mtime[m goes down from
    168546ms -> 164678ms, (2% speed-up) at speed 0
     36197ms ->  34465ms, (4% speed-up) at speed 1
    
    Change-Id: I9d3043864126e62bd0166250d66b3170d520b3c0

[33mcommit 78136edcdc3f53bc63b58e76ec4b160a2da1a0e3[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 7 14:45:37 2013 -0700

    SSE2 high precision 32x32 forward DCT
    
    Enable SSE2 implementation of high precision 32x32 forward DCT. The
    intermediate stacks are of 32-bits. The run-[1;31mtime[m goes down from
    32126 cycles to 13442 cycles.
    
    Change-Id: Ib5ccafe3176c65bd6f2dbdef790bd47bbc880e56

[33mcommit b84dc949c8a4a520ef1e9121d72a6250fb8f8e47[m
Author: Mans Rullgard <mans@mansr.com>
Date:   Sun Aug 11 15:34:24 2013 +0100

    vp9: neon: optimise convolve8_horiz functions
    
    Each iteration of the horizontal loop reuses 7 of the 11 source
    values.  Loading only the 4 new values saves some [1;31mtime[m.
    
    Also add preload for source data.
    
    Overall 4% faster on Chromebook.
    
    Change-Id: I8f69e749f2b7f79e9734620dcee51dbfcd716b44

[33mcommit 6a8ec3eac29d7937c7b8c0d45e272dd98aae8188[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Aug 8 14:52:39 2013 -0700

    General code cleanup.
    
    Removing redundant parenthesis and curly braces. Combining declarations
    with initializations. Adding useful intermediate variables instead of
    recalculating expressions every [1;31mtime[m.
    
    Change-Id: I00106f404afd60bfc189905b0fded881684f941a

[33mcommit 1ba91a84ad1e1d2486e2aa68822ed147084cd4c8[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Aug 7 17:01:43 2013 -0700

    Adds a new subpel motion function
    
    Adds a new subpel motion estimation function that uses a 2-level
    tree-structured decision tree to eliminate redundant computations.
    It searches fewer points than iterative search (which can search
    the same point multiple [1;31mtime[ms) but has the same quality roughly.
    
    This is made the default setting at speeds 0 and 1, while at
    speed 2 and above only a 1-level search is used.
    
    Also includes various cleanups for consistency and redundancy removal.
    
    Results:
    derf: +0.012% psnr
    stdhd: +0.09% psnr
    Speedup of about 2-3%
    
    Change-Id: Iedde4866f5475586dea0f0ba4cb7428fba24eee9

[33mcommit 9d67495f72cc2c0067bacc594689de53cf6f29c1[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 31 16:50:34 2013 -0700

    Optimize 32x32 2D inverse DCT for speed-up
    
    This commit exploits the sparsity of quantized coefficient matrix.
    It detects each 32x8 array and skip the corresponding inverse
    transformation if all entries are zero.
    
    For ped1080p at 8000 kbps, this on average reduces the run[1;31mtime[m of
    32x32 inverse 2D-DCT SSE2 function from 6256 cycles -> 5200
    cycles. It makes the overall encoding process about 2% faster at
    speed 0. The speed-up is more pronounceable for the decoding process.
    
    Change-Id: If20056c3566bd117642a76f8884c83e8bc8efbcf

[33mcommit 52256cdbcaf07e637c964f92671dfc82321f2125[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Jul 25 19:17:46 2013 -0700

    Modify static threshold calculation
    
    Used 3 * standard_deviation in internal threshold calculation
    instead of fit curve. This actually approached the algorithm
    better.
    For comparison, similar tests were done:
    The overall psnr loss is less than before.
    1. derf set:
    when static-thresh = 1, psnr loss is 0.329%;
    when static-thresh = 500, psnr loss is 0.970%;
    2. stdhd set:
    when static-thresh = 1, psnr loss is 0.922%;
    when static-thresh = 500, psnr loss is 1.307%;
    
    Similar speedup is achieved. For example,
    clip            bitrate  static-thresh psnr    [1;31mtime[m
    akiyo(cif)       500        0          48.952  5.077s(50f)
    akiyo            500        500        48.866  4.169s(50f)
    
    parkjoy(1080p)   4000       0          30.388  78.20s(30f)
    parkjoy          4000       500        30.367  70.85s(30f)
    
    sunflower(1080p) 4000       0          44.402  74.55s(30f)
    sunflower        4000       500        44.414  68.69s(30f)
    
    Change-Id: Ic78833642ce1911dbbd1cb6c899a2d7e2dfcc1f3

[33mcommit d36852b702e6726db57cabe19e47d9aaa18c3ecb[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Jul 11 11:15:00 2013 -0700

    Add encoding option --static-thresh
    
    This option exists in VP8, and it was rewritten in VP9 to support
    skipping on different partition levels. After prediction is done,
    we can check if the residuals in the partition block will be all
    quantized to 0. If this is true, the skip flag is set, and only
    prediction data are needed in reconstruction. Based on DCT's energy
    conservation property, the skipping check can be estimated in
    spatial domain.
    
    The prediction error is calculated and compared to a threshold.
    The threshold is determined by the dequant values, and also
    adjusted by partition sizes. To be precise, the DC and AC parts
    for Y, U, and V planes are checked to decide skipping or not.
    
    Test showed that
    1. derf set:
    when static-thresh = 1, psnr loss is 0.666%;
    when static-thresh = 500, psnr loss is 1.162%;
    2. stdhd set:
    when static-thresh = 1, psnr loss is 1.249%;
    when static-thresh = 500, psnr loss is 1.668%;
    
    For different clips, encoding speedup range is between several
    percentage and 20+% when static-thresh <= 500. For example,
    clip            bitrate  static-thresh psnr    [1;31mtime[m
    akiyo(cif)       500        0          48.923  5.635s(50f)
    akiyo            500        500        48.863  4.402s(50f)
    
    parkjoy(1080p)   4000       0          30.380  77.54s(30f)
    parkjoy          4000       500        30.384  69.59s(30f)
    
    sunflower(1080p) 4000       0          44.461  85.2s(30f)
    sunflower        4000       500        44.418  78.1s(30f)
    
    Higher static-thresh values give larger speedup with larger
    quality loss.
    
    Change-Id: I857031ceb466ff314ab580ac5ec5d18542203c53

[33mcommit b72ecbb1b98be5cb24e6f68d8d2eeda6efc38cc0[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Jul 19 09:17:00 2013 -0700

    Add best_rd breakout in intra4x4 RD loop.
    
    Encoding [1;31mtime[m of first 50 frames of bus (speed 0) @ 1500kbps goes from
    1min5.4 to 1min4.0, i.e. 2.2% faster overall.
    
    Change-Id: I8c32f2aff9a649ce7dd49d910dc5ba16b99c3bc6

[33mcommit 0359ad7f9a8d8e78482b869d9c911df4d02f5dbf[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 23 10:02:43 2013 -0700

    Skip inverse transform when eob is zero
    
    When all the transform coefficients were quantized to zero, skip
    the inverse transform operation. For bus_cif at 1000 kbps, the
    run[1;31mtime[m goes from 154967ms -> 149842ms, i.e., about 3% speed-up,
    at speed 0.
    
    Change-Id: Ic0a813fff5e28972d4888ee42d8747846a6c3cc6

[33mcommit e20fcd9585295d3bae106548d79d501ac8668a6b[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 22 16:09:09 2013 -0700

    More optimizations for cost_coeffs().
    
    4x4:    163 ->  123 cycles (33% faster)
    8x8:    491 ->  399 cycles (23% faster)
    16x16: 1889 -> 1763 cycles (7% faster)
    32x32: 8311 -> 8180 cycles (1.6% faster)
    
    Overall encoding [1;31mtime[m of first 50 frames of bus (speed 0) @ 1500kbps
    goes from 1min4.33 to 1min3.00, i.e. 2.11% faster.
    
    Change-Id: Ib52d1dbb5649b14de769d3e7a74af67440b5284f

[33mcommit 5ebe503f0431b319e83be2158b8d43f38ccdd3f2[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 17 15:27:12 2013 -0700

    Merge scale_factors and scale_factors_uv.
    
    This prevents a duplicate memcpy of a 128-byte struct every [1;31mtime[m
    set_scale_factors() is called (which is a lot), thus leading to a
    decrease from 3.7 MB to 1.85 MB of struct copying per 64x64 block
    RD/partition loop.
    
    Overall, this decreases encoding [1;31mtime[m of the first 50 frames of bus
    @ 1500kbps (speed 0) from 1min5.9 to 1min4.9, i.e. about a 1.5%
    overall speedup. We can likely get more gains by removing the copy
    of the other struct (and replacing it with an indexing) as well.
    
    Change-Id: I3dceb7e79f71e6fe911b11cc994cf89a869dde7a

[33mcommit a142d6fc935cba1dc6ceb4d798b3aac68b34684b[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 16 12:04:07 2013 -0700

    Skip redundant motion search in 4x4 level rd loop
    
    This commit makes the encoder to perform motion search only once
    per reference frame type for each 4x4/4x8/8x4 block. For bus_cif
    at 2000 kbps, the run[1;31mtime[m goes from 253812ms -> 217817ms
    (14% speed-up) for speed 0.
    
    Change-Id: I5f17599ccc8cfaf93ccb4f98fcb6008af6d79e92

[33mcommit d05f66aa109a19b233048b3d617555e2fd1a5d43[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 15 11:05:31 2013 -0700

    SSE2 16x16 inverse ADST/DCT hybrid transform
    
    This commit enables SSE2 implementation of 16x16 inverse ADST/DCT
    hybrid transform. The run[1;31mtime[m goes from 5742 cycles -> 1821 cycles.
    This provides about 1% encoding speed-up at speed 0.
    
    Change-Id: I1678d0988bf30b9efd524877705bbb3645edb17b

[33mcommit 1ff94fea5639c1c7c4bc99a080aaa985d60d25b7[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jul 11 13:01:44 2013 -0700

    Inline vp9_quantize() in xform_quant().
    
    Cycle [1;31mtime[ms:
    4x4:    151 to  131 cycles (15% faster)
    8x8:    334 to  306 cycles (9% faster)
    16x16: 1401 to 1368 cycles (2.5% faster)
    32x32: 7403 to 7367 cycles (0.5% faster)
    
    Total encode [1;31mtime[m of first 50 frames of bus @ 1500kbps (speed 0)
    goes from 1min39.2 to 1min38.6, i.e. a 0.67% overall speedup.
    
    Change-Id: I799a49460e5e3fcab01725564dd49c629bfe935f

[33mcommit 6fb418741faa990a61dbcae8d35a0959727ade57[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jul 11 11:35:13 2013 -0700

    Inline xform_quant() in encode_block_intra().
    
    Also inline some of the block calculations to assist the compiler to
    not do silly things like calculating the same offset (or converting
    between raster/transform block offset or block, mi and pixel unit)
    many, many, many [1;31mtime[ms.
    
    Cycle [1;31mtime[ms:
    4x4:     584 ->   505 cycles (16% faster)
    8x8:    1651 ->  1560 cycles (6% faster)
    16x16:  7897 ->  7704 cycles (2.5% faster)
    32x32: 16096 -> 15852 cycles (1.5% faster)
    
    Overall, this saves about 0.5 seconds (1min49.8 -> 1min49.3) on the
    first 50 frames of bus (speed 0) @ 1500kbps, i.e. 0.5% overall.
    
    Change-Id: If3dd62453f8e2ab9d4ee616bc4ea956fb8874b80

[33mcommit faff6ed0fbb01ece1331021b749ec2f9114332ff[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 8 16:48:47 2013 -0700

    Skip duplicate block encoding in the rd loop
    
    This speed feature allows the encoder to largely remove the spatial
    dependency between blocks inside a 64x64 superblock, thereby removing
    the need to repeatedly encode superblocks per partition type in the
    rate-distortion optimization loop.
    
    A major challenge lies in the intra modes tested in the rate-distortion
    optimization loop. The subsequent blocks do not have access to the
    reconstructed boundary pixels without the intermediate coding steps.
    This was resolved by using the original pixels for intra prediction
    in the rd loop, followed by an appropriately designed distortion
    modeling on the quantization parameters. Experiments also suggested
    that the performance impact is more discernible at lower bit-rate/psnr
    settings. Hence a quantizer dependent threshold is applied to deactivate
    skip of block coding.
    
    For bus_cif at 2000 kbps,
    speed 0: run[1;31mtime[m 269854ms -> 237774ms (12% speed-up) at 0.05dB
             performance loss.
    
    speed 1: run[1;31mtime[m 65312ms  -> 61536ms, (7% speed-up) at 0.04dB
             performance loss.
    
    This operation is currently turned on in settings of speed 1.
    
    Change-Id: Ib689741dfff8dd38365d8c1b92860a3e176f56ec

[33mcommit 91365addf8ddb59629d6cfe29abf22a97c73918d[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jul 12 20:54:14 2013 -0700

    SSE2 8x8 inverse ADST/DCT transform
    
    This commit enables SSE2 implementation of 8x8 inverse ADST/DCT
    transform. The run[1;31mtime[m goes from 1216 cycles -> 266 cycles.
    For bus_cif at 2000 kbps, the overall run[1;31mtime[m reduces from
    253707ms -> 248430ms, i.e., 2% speed-up at speed 0.
    
    Change-Id: Ib0372e17e9162d7b11a10d653b1c8be547c878fb

[33mcommit e6ab476dd46bb0dbbee36433d68a9879166adbdb[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Jul 11 17:22:03 2013 -0700

    Remove print_nmvcounts
    
    For some reason iOS builds take a really long [1;31mtime[m to sort this
    function out.
    
    It's not used anywhere so remove it.
    
    Change-Id: Ia5c8513a0d9c7eb32641cca58ca1c1113e2dd9f4

[33mcommit 5000cdf0ff752abc5a64d21e914d94be8fdb9ebe[m
Merge: aedc7c59b 64f7a4d8c
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu Jul 11 06:44:02 2013 -0700

    Merge "Wide loopfilter 16 pix at a [1;31mtime[m"

[33mcommit 49b630204437f1169fb091a1d4df72ea285a20fb[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 10 12:11:09 2013 -0700

    SSE2 4x4 invserse ADST/DCT transform
    
    Enable SSE2 4x4 inverse ADST/DCT transform. The run[1;31mtime[m goes from
    292 cycles down to 89 cycles. Running bus_cif at 2000 kbps, the
    overall run[1;31mtime[m of speed 0 goes from 301s to 295s (2% speed-up).
    
    Change-Id: I24098136e7fee7ab2fbf1c11755bdf2ca37f3628

[33mcommit 64f7a4d8cb6a583417765336005703cdc308aa72[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Jun 12 14:37:01 2013 -0700

    Wide loopfilter 16 pix at a [1;31mtime[m
    
    Where possible, do the 16 pixel wide filter while doing the horizontal
    filtering pass. The same approach can be taken for the mbloop_filter
    when that's implemented. Doing so on the vertical pass is a little more
    involved, but possible.
    
    Change-Id: I010cb505e623464247ae8f67fa25a0cdac091320

[33mcommit 114423538f85e97d8405e9946708805852133c66[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 3 09:05:01 2013 -0700

    SSE2 16x16 ADST/DCT hybrid transform
    
    This commit enables 16x16 ADST/DCT forward hybrid transform using SSE2
    operations. It reduces the run[1;31mtime[m from 5433 cycles to 1621 cycles, at
    no compression performance loss.
    
    Change-Id: I75fd7f1984e9e28846af459f810ff0d6ae125230

[33mcommit b1df674a99c37ff8dea0609d1f6d7864fa6a05f4[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 10 09:26:32 2013 -0700

    Remove memcpy() in handle_inter_mode() filter selection.
    
    Encode [1;31mtime[m of first 50 frames of bus (speed 0) @ 1500kbps goes from
    2min4.9 to 2min3.1, i.e. a 1.4% speedup overall.
    
    Change-Id: I9b25e87974430cb942caa276410bb2eda815bd83

[33mcommit 198fa6d0a049ca338a50ac40eb1bc84367464738[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Mon Jul 1 12:52:38 2013 -0700

    Add Neon horizontal and vertical vp9_mbloop_filter
    
    - The vp9 mbfilter C code will branch on flat and mask. This CL
      will perform both branches and combine the data. A later CL will
      perform a check to see if all patch will take one branch.
    - These functions are about 1.75 [1;31mtime[ms faster than the C code on
      Nexus 7.
    
    PS #3
    - Changed all functions to dub limit, blimit, and thresh from
      vld {dx[]}, freeing up r4-r6.
    - Changed code to use vbif to reduce one instruction and free
      up a d register.
    
    Change-Id: I028dae0e434dc9891c3677bdb182e201ffb04777

[33mcommit a5062cc6356671da86ead502165f01b50b16b353[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 8 14:38:40 2013 -0700

    Don't call encode_sb() for the final of 4-split subpartitions.
    
    The resulting reconstruction is never used, thus it just wastes CPU
    cycles. Reduces encode [1;31mtime[m of first 50 frames of bus (speed 0) @
    1500kbps from 2min2.0 to 2min1.2, i.e. a 0.65% overall speedup.
    
    Change-Id: I74755ca3aadc21e2be220f486259060bd4088c45

[33mcommit bd867f16191a5ec2c2ebbd2e63bcb2721f0a0d78[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 3 12:04:30 2013 -0700

    Inline vp9_get_mv_joint().
    
    Encode [1;31mtime[m for first 50 frames of bus (speed 0) @ 1500kbps goes from
    2min10.9 to 2min10.5, i.e. 0.3% faster overall, basically because we
    prevent the call overhead.
    
    Change-Id: I1eab1a95dd3eae282f9b866f1f0b3dcadff073d5

[33mcommit 8fde07a3aeef421ed7b15c424e7fad2ede46f9bf[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 3 10:54:36 2013 -0700

    Don't recalculate mv_ref costs for each block/partition.
    
    Changes cost_mv_ref() into doing a LUT into pre-calculated cost
    arrays instead. Encode [1;31mtime[m of first 50 frames of bus (speed 0)
    @ 1500kbps goes from 2min11.6 to 2min10.9, i.e. 0.5% faster overall.
    
    Change-Id: If186e92c34c201b29cbbc058785a15c9c09e433a

[33mcommit fcf7998a47f7e1ec27fe93f99e488d345560a9be[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 8 14:49:48 2013 -0700

    Remove memcpy() in handle_inter_mode() filter selection.
    
    Encode [1;31mtime[m of first 50 frames of bus (speed 0) @ 1500kbps goes from
    2min4.9 to 2min3.1, i.e. a 1.4% speedup overall.
    
    Change-Id: Ibe8b08d159797504c5d0c5122de1b6da3b6595e0

[33mcommit 2bd6fe08f8f6b84816e4369ae53725cf97a43c41[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 2 16:48:15 2013 -0700

    Enable early termination in rd search
    
    This commit allows encoder to detect the cumulative rate-distortion
    cost per transformed block inside a partition. If the cumulative
    rd cost is already above the best rd value, it terminates the rest
    operations and continue to next prediction mode test.
    
    It reduces the run[1;31mtime[m of bus at target bit-rate 2000 from 308 second
    to 266 second, i.e., about 13% speed-up at no performance penalty.
    
    Change-Id: I5f15a3d8955d97031d5653006027866a00654e7a

[33mcommit 0d7b7c09cb57d32b0f341379cc3c19e21910ea8d[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jun 27 12:07:07 2013 -0700

    Added a speed feature use_square_partition_only
    
    This commit adds a speed feature where only squared partition are
    evaluated in partition picking. Enable this feature in cpu-used 2
    reduces encoding [1;31mtime[m by ~30%.
    
    loss of compression:
    -0.9% on cif set
    -1.23% on stdhd
    
    Change-Id: Ia6fad11210f0b78365abb889f9245604513be5b9

[33mcommit 8d3d2b76f304f622a5e2d2e54416e1188a697f61[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Jun 21 16:31:12 2013 -0700

    Tx size selection enhancements
    
    (1) Refines the modeling function and uses that to add some speed
    features. Specifically, intead of using a flag use_largest_txfm as
    a speed feature, an enum tx_size_search_method is used, of which
    two of the types are USE_FULL_RD and USE_LARGESTALL. Two other
    new types are added:
    USE_LARGESTINTRA (use largest only for intra)
    USE_LARGESTINTRA_MODELINTER (use largest for intra, and model for
    inter)
    
    (2) Another change is that the framework for deciding transform type
    is simplified to use a heuristic count based method rather than
    an rd based method using txfm_cache. In practice the new method
    is found to work just as well - with derf only -0.01 down.
    The new method is more compatible with the new framework where
    certain rd costs are based on full rd and certain others are
    based on modeled rd or are not computed. In this patch the existing
    rd based method is still kept for use in the USE_FULL_RD mode.
    In the other modes, the count based method is used.
    However the recommendation is to remove it eventually since the
    benefit is limited, and will remove a lot of complications in
    the code
    
    (3) Finally a bug is fixed with the existing use_largest_txfm speed feature
    that causes mismatches when the lossless mode and 4x4 WH transform is
    forced.
    
    Results on derf:
    USE_FULL_RD: +0.03% (due to change in the tables), 0% encode [1;31mtime[m reduction
    USE_LARGESTINTRA: -0.21%, 15% encode [1;31mtime[m reduction (this one is a
    pretty good compromise)
    USE_LARGESTINTRA_MODELINTER: -0.98%, 22% encode [1;31mtime[m reduction
    (currently the benefit of modeling is limited for txfm size selection,
    but keeping this enum as a placeholder) .
    USE_LARGESTALL: -1.05%, 27% encode-[1;31mtime[m reduction (same as existing
    use_largest_txfm speed feature).
    
    Change-Id: I4d60a5f9ce78fbc90cddf2f97ed91d8bc0d4f936

[33mcommit 26b6318de83761dd268a589f0b1324153e9d0923[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 1 10:40:00 2013 -0700

    Make get_coef_context() branchless.
    
    This should significantly speedup cost_coeffs(). Basically what the
    patch does is to make the neighbour arrays padded by one item to
    prevent an eob check in get_coef_context(), then it populates each
    col/row scan and left/top edge coefficient with two [1;31mtime[ms the same
    neighbour - this prevents a single/double context branch in
    get_coef_context(). Lastly, it populates neighbour arrays in pixel
    order (rather than scan order), so we don't have to dereference the
    scantable to get the correct neighbours.
    
    Total encoding [1;31mtime[m of first 50 frames of bus (speed 0) at 1500kbps
    goes from 2min10.1 to 2min5.3, i.e. a 2.6% overall speed increase.
    
    Change-Id: I42bcd2210fd7bec03767ef0e2945a665b851df56

[33mcommit c8defcfdeea614a780af9a2405f59c60cab876ad[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 1 11:36:33 2013 -0700

    Update quantize SSSE3 SIMD to cover 32x32 transform case also.
    
    Encode [1;31mtime[m of bus (speed 0) 50 frames @ 1500kbps goes from 2min14.4 to
    2min10.1, i.e. a 2.3% overall speed increase.
    
    Change-Id: I3699580e74ec26c7d24e03681bc47ba25ee1ee87

[33mcommit 7353ceab9d6b5c9d1bbdae18e509207c5afb2b19[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 1 11:36:07 2013 -0700

    Quantize (64-bit only, for now) SSSE3 SIMD.
    
    Total encoding [1;31mtime[m for first 50 frames of bus (speed 0) @ 1500kbps
    goes 2min34.8 to 2min14.4, i.e. a 10.4% overall speedup. The code is
    x86-64 only, it needs some minor modifications to be 32bit compatible,
    because it uses 15 xmm registers, whereas 32bit only has 8.
    
    Change-Id: I2df53770c2e850813ffa713e1a91b45b0082b904

[33mcommit 1109b6b888da9ba6bac50c82a87577c75ec43ab6[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jun 28 13:37:19 2013 -0700

    Enable SSE2 4x4 ADST/DCT transform
    
    This commit enables SSE2 4x4 foward hybrid transform. The run[1;31mtime[m
    goes from 249 cycles down to 74 cycles. Overall around 2% speed-up
    at no compression performance change.
    
    Change-Id: Iad4d526346e05c7be896466c05500711bb763660

[33mcommit d00b8e5f82069a2ce819f1ee1588d52d04cbf65c[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Jun 28 10:40:21 2013 -0700

    Inline vp9_get_coef_context() (and remove vp9_ prefix).
    
    Makes cost_coeffs() a lot faster:
    4x4: 236 -> 181 cycles
    8x8: 888 -> 588 cycles
    16x16: 3550 -> 2483 cycles
    32x32: 17392 -> 12010 cycles
    
    Total encode [1;31mtime[m of first 50 frames of bus (speed 0) @ 1500kbps goes
    from 2min51.6 to 2min43.9, i.e. 4.7% overall speedup.
    
    Change-Id: I16b8d595946393c8dc661599550b3f37f5718896

[33mcommit 91d223bd5c3ece5edc28d048a866d1c0fb39bdc7[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jun 27 20:57:37 2013 -0700

    Some minor optimizations for cost_coeffs().
    
    Cycle timings for first 3 frames of bus (speed 0) at 1500kbps:
    4x4: 298 -> 234 cycles
    8x8: 1227 -> 878 cycles
    16x16: 23426 -> 18134 cycles
    32x32: 4906 -> 3664 cycles
    
    Total encode [1;31mtime[m of first 50 frames of bus @ 1500kbps (speed 0) goes
    from 3min0.7 to 2min51.6 seconds, i.e. 5.3% faster.
    
    Change-Id: I68a0e1b530b0563b84a67342cca4b45146077e95

[33mcommit 7a049be6bf8273be4871555520f6bbbfb0a1cb4f[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Tue Jun 25 17:28:24 2013 -0700

    Inline quantize so idiv instruction gets removed from inner loop.
    
    Encoding [1;31mtime[m of first 50 frames of bus @ 1500kbps (speed 0) goes from
    3min15.0 to 3min10.9, i.e. 2.1% faster overall.
    
    Change-Id: If592ee99be09bcd34a7c8498347f44e7305e982c

[33mcommit c24d922396f4dcd50216be3cdfd784ea31c47564[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Tue Jun 25 11:26:49 2013 -0700

    Add averaging-SAD functions for 8-point comp-inter motion search.
    
    Makes first 50 frames of bus @ 1500kbps encode from 3min22.7 to 3min18.2,
    i.e. 2.3% faster. In addition, use the sub_pixel_avg functions to calc
    the variance of the averaging predictor. This is slightly suboptimal
    because the function is subpixel-position-aware, but it will (at least
    for the SSE2 version) not actually use a bilinear filter for a full-pixel
    position, thus leading to approximately the same performance compared to
    if we implemented an actual average-aware full-pixel variance function.
    That gains another 0.3 seconds (i.e. encode [1;31mtime[m goes to 3min17.4), thus
    leading to a total gain of 2.7%.
    
    Change-Id: I3f059d2b04243921868cfed2568d4fa65d7b5acd

[33mcommit 82d504b50f5dbc81ba1e1e1c1b07bb76dddde43f[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jun 24 19:52:55 2013 -0700

    Use aligned buffer operations in 8x8/16x16 2D-DCT
    
    This reduces 16x16 2D-DCT run[1;31mtime[m from 865 cycles to 837 cycles.
    
    Change-Id: I137758b81cd127b936175284310e81378db64552

[33mcommit a32a086d23c2061344af7653892456bde3fffd0d[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jun 20 09:00:23 2013 -0700

    Enable sse2 implmentation of 8x8 ADST/DCT
    
    This commit makes use of the butterfly structure to enable the sse2
    version implementation of 8x8 ADST/DCT hybrid transform coding.
    
    The run[1;31mtime[m of hybrid transform module goes down from 1170 cycles
    to 245 cycles. Overall speed-up around 1.5%.
    
    Change-Id: Ic808ffd21ece8a9d0410d8c0243d7b6c28ac3b3f

[33mcommit 54b2a59623b42c517010e4be9b13a41c41d21d66[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Jun 21 12:54:52 2013 -0700

    Implement SSE2 block_error.
    
    Change vp9_block_error() to return a 64bit error variable, change all
    callers to expect a 64bit return value (this will prevent overflows,
    which we basically don't check for at all right now). Remove duplicate
    block_error() function, which fixed that through truncation. Remove
    old (incompatible) mmx/sse2 block_error SIMD versions and replace with
    a new one that returns a 64bit value.
    
    Encoding [1;31mtime[m of first 50 frames of bus @ 1500kbps goes from 3min29 to
    3min23, i.e. a 3% overall speedup.
    
    Change-Id: Ib71ac5508b5ee8a80f1753cd85d72df1629abe68

[33mcommit c43af9a8a3adc7bd3888e746ce7b7bd581c476ae[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jun 13 11:07:12 2013 -0700

    Enable sse2 version of sad8x4/4x8
    
    The encoding [1;31mtime[m for bus at CIF goes from 661s to 625s. This commit
    also enabled unit test of sad8x4/4x8 in sad_test.cc.
    
    Change-Id: If3d10ebb56bda584bdb69bcf056599d580b12cb1

[33mcommit 15f50e7b4211fe50c5d0eac675d64afa09e5041f[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jun 13 11:07:12 2013 -0700

    Enable sse2 version of sad8x4/4x8
    
    The encoding [1;31mtime[m for bus at CIF goes from 661s to 625s. This commit
    also enabled unit test of sad8x4/4x8 in sad_test.cc.
    
    Change-Id: If3d10ebb56bda584bdb69bcf056599d580b12cb1

[33mcommit 9596a4cc54cfc047d37df5d1058255410d518eb8[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Jun 12 16:08:35 2013 -0700

    vpxdec: add --loops option
    
    Allows vpxdec to operate multiple [1;31mtime[ms on the same input. Mostly
    useful for debugging/development.
    
    Change-Id: Icf25ece22e387052eade4438971eee5ff4f798ba

[33mcommit fa96eeb835c88522740a96dcda77f8685fae96a5[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Tue Jun 11 15:19:14 2013 -0700

    Implement SSE version for sad4x8x4d and SSE2 version for sad8x4x4d.
    
    Encoding [1;31mtime[m of crew (CIF, first 50 frames) @ 1500kbps goes from 4min56
    to 4min42.
    
    Change-Id: I92c0c8b32980d2ae7c6dafc8b883a2c7fcd14a9f

[33mcommit 9068bce4e795215b59d0145d560d27ef5bd79295[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jun 3 09:16:48 2013 -0700

    Put iterative motion search under speed control
    
    Enable iterative motion search for compound inter-inter prediction
    of block sizes 4x4/4x8/8x4 only when best coding quality is selected.
    The iterative motion search provides about 0.1% gains for derf and
    stdhd at this point, at the expense of longer run[1;31mtime[m.
    
    Change-Id: Idc03e7f827e51f1bb8d269bc3752ee297a6bbfe5

[33mcommit 5700b4ea422fe85eeca2949b146c1fb98fc4e8cc[m
Author: Sami Pietilä <samipietila@google.com>
Date:   Thu May 30 12:51:36 2013 +0300

    Replace scatter scan 32x32 with HW friendly scan.
    
    The first 240 coeff positions (15 top-left blocks) are scanned in the
    same order as in scatter scan, after that the coeffs are scanned in
    "block bands", each band at a [1;31mtime[m, all coeffs in one band before
    moving on to the next band. This brings down the amount of 4x4 coeff
    blocks that need to be buffered while scanning, from 15 blocks to 8 blocks.
    
    Change-Id: I478a991d63c48bd5e64d36e59fed7a00c9a651ba

[33mcommit 80812829c2d45d9f5597e619b8759e9562d6f1c0[m
Author: Sami Pietilä <samipietila@google.com>
Date:   Mon May 27 10:14:53 2013 +0300

    Moving txfm_size bits before prediction mode bits.
    
    Hardware implementation needs to load coeff probs based on the
    transform size. For selectable transform size, moving these bits
    earlier in the bitstream adds some delay giving [1;31mtime[m to preload
    the probs and speeds up the decoding process.
    
    Change-Id: I3bfc1f662ae6f219c9286fe9ae6310c7d8a63ea7

[33mcommit 4b33eb05dc283b41b0c638ffd0b2ceb619f0f1dd[m
Merge: 709778146 fb48bbf5c
Author: Marco Paniconi <marpan@google.com>
Date:   Tue May 21 09:24:37 2013 -0700

    Merge "Fixes for run-[1;31mtime[m change in temporal layers."

[33mcommit fb48bbf5c6560a6a7230045fe4694a61d8fe4ff9[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri May 10 15:04:38 2013 -0700

    Fixes for run-[1;31mtime[m change in temporal layers.
    
    Use a separate counter for resetting the pattern upon
    a change in temporal layers, and set/initialize the
    layer context parameters for the new temporal layer state.
    
    Also moved the setting of layer configuation in init_config()
    to a separate function.
    
    Change-Id: Ic7fc023a1e5490020509e107004645098f4c00f0

[33mcommit 60456083e91f7a95c12309e22644c5c32bcbbb3a[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri May 10 18:46:43 2013 -0700

    Do joint motion search iteratively
    
    Allow motion search multiple [1;31mtime[ms iteratively, and break out
    the loop if this search couldn't find better motion vectors.
    Limit the maximum number of search to 2.
    
    Tests results:
    1. stdhd set: 0.311%(overall psnr); 0.346%(ssim).
    positive gain on 10 out of 16 clips(best: 2.746% on sunflower;
    worst: -0.434% on old_town_cross).
    2. derf set: 0.016%(overall psnr); 0.062%(ssim).
    positive gain on half of the clips(best: 0.499% on bowing;
    worst: -0.387 on city).
    
    Change-Id: Ibf0a51776d4caf7707be0586346db08128117559

[33mcommit 34324a98e7dfb57f8cfee3b40909e56564f580ee[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Fri Apr 26 06:52:43 2013 -0700

    Restore vp9_asm_enc_offsets.c
    
    The previous commit 15255ee "Move dequant from BLOCKD to per-plane MACROBLOCKD"
    removed the vp9_asm_enc_offsets.c file, but didn't update the various secondary
    build systems that special case these files. Restore it for now, to ensure any
    in-progress changes and builds continue working, to allow [1;31mtime[m to more carefully
    coordinate removal of these files.
    
    Change-Id: I24b78db3fb874d5fbd226548b7366a05ed98e536

[33mcommit 148eb803bbb3de3a8548445fe50c120ea872a882[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Apr 4 09:56:02 2013 -0700

    Optimize the scaling calculation
    
    In decoder, the scaling calculation, such as (mv * x_num / x_den),
    is fairly [1;31mtime[m-consuming. In this patch, we check if the scaling
    happens or not at frame level, and then decide which function to
    call to skip scaling calculation when no scaling is needed. Tests
    showed a 3% decoder performance gain.
    
    Change-Id: I270901dd0331048e50368cfd51ce273dd82b8733

[33mcommit 6344c84c82f6a4f82a6a4f9f33a6d1ec85691930[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Mar 15 11:33:10 2013 -0700

    Optimize 8x8 idct function
    
    Wrote sse2 functions of vp9_short_idct8x8 and vp9_short_idct10_8x8.
    Compared to c version, the sse2 version is 2X faster. The decoder
    test didn't show noticeable gain since 8x8 idct doesn't take much
    of decoding [1;31mtime[m (less than 1% in my test).
    
    Change-Id: I56313e18cd481700b3b52c4eda5ca204ca6365f3

[33mcommit bd84685f7841f4f571f063a18b96d53e0fdef8cc[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Sun Mar 10 13:39:30 2013 -0700

    Optimize vp9_tree_probs_from_distribution
    
    The previous implementation visited each node in the tree multiple [1;31mtime[ms
    because it used each symbol's encoding to revisit the branches taken and
    increment its count. Instead, we can traverse the tree depth first and
    calculate the probabilities and branch counts as we walk back up. The
    complexity goes from somewhere between O(nlogn) and O(n^2) (depending on
    how balanced the tree is) to O(n).
    
    Only tested one clip (256kbps, CIF), saw 13% decoding perf improvement.
    
    Note that this optimization should port trivially to VP8 as well. In VP8,
    the decoder doesn't use this function, but it does routinely show up
    on the profile for real[1;31mtime[m encoding.
    
    Change-Id: I4f2848e4f41dc9a7694f73f3e75034bce08d1b12

[33mcommit 406ec6b62e84141739ecc0fd75456110dc1dd2ae[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Feb 27 11:14:23 2013 -0800

    Fix rollover and pass 1 [1;31mtime[m estimate
    
    Fixes a rollover of the cx_[1;31mtime[m variable for encodes that take
    over ~4200 seconds. Also enable the [1;31mtime[m estimate in first pass.
    
    Change-Id: Ib5a98ee71bccd79a804d709cec7260651d0b7141

[33mcommit 60d8c50514b71c1ffe773c9300c65ce991e6f3b4[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue Feb 12 21:17:56 2013 -0800

    Add estimated completion [1;31mtime[m to vpxenc
    
    Make the progress line more useful by providing per-frame updates of
    processing frame rate and estimated [1;31mtime[m remaining.
    
    Fixes issue #534.
    
    Change-Id: Ic91551878ff4b2f5db1cedaafb588add220cfa52

[33mcommit d962bd530d119eb90ce48794da50203cc313592e[m
Merge: c6421433c ebf8b9fc6
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Feb 27 17:43:03 2013 -0800

    Merge "Fix rollover and pass 1 [1;31mtime[m estimate" into experimental

[33mcommit ebf8b9fc6d4dce95afd41b43ca356b6a0c1ee6d4[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Feb 27 11:14:23 2013 -0800

    Fix rollover and pass 1 [1;31mtime[m estimate
    
    Fixes a rollover of the cx_[1;31mtime[m variable for encodes that take
    over ~4200 seconds. Also enable the [1;31mtime[m estimate in first pass.
    
    Change-Id: Ib5a98ee71bccd79a804d709cec7260651d0b7141

[33mcommit 65821d668038d69b7b813616a02ffd97f7563821[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Feb 25 12:08:29 2013 -0800

    Improving the forward 16x16 ADST/DCT accuracy
    
    Increase the first stage dynamic range by 4 [1;31mtime[ms, and reduce it
    back with proper rounding before applying the second stage. Hence
    it still fits in the given dynamic range and slightly improves
    the key frame coding performance.
    
    Change-Id: Ia4c5907446f20a95dc3de079c314b3ad1221d8aa

[33mcommit 28b1db92783bdb8919bcaefe174a715009c5e444[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Feb 11 17:08:52 2013 -0800

    Refactoring of switchable filter search for speed
    
    Refactors the switchable filter search in the rd loop to
    improve encode speed.
    
    Uses a piecewise approximation to a closed form expression to estimate
    rd cost for a Laplacian source with a given variance and quantization
    step-size.
    
    About 40% encode [1;31mtime[m reduction is achieved.
    
    Results (on a feb 12 baseline) show a slight drop:
    
    derf: -0.019%
    yt: +0.010%
    std-hd: -0.162%
    hd: -0.050%
    
    Change-Id: Ie861badf5bba1e3b1052e29a0ef1b7e256edbcd0

[33mcommit 34732576c13bacd035b9e4d0e96314ad0ab69872[m
Merge: cd907b160 25b6e9f4d
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue Feb 19 10:51:42 2013 -0800

    Merge "Add estimated completion [1;31mtime[m to vpxenc" into experimental

[33mcommit 25b6e9f4d3bf1b8710ba591e2a4b0632772ac488[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue Feb 12 21:17:56 2013 -0800

    Add estimated completion [1;31mtime[m to vpxenc
    
    Make the progress line more useful by providing per-frame updates of
    processing frame rate and estimated [1;31mtime[m remaining.
    
    Fixes issue #534.
    
    Change-Id: Ic91551878ff4b2f5db1cedaafb588add220cfa52

[33mcommit 1407bdc24385cc77874188d8f88e54caea66506c[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Feb 1 09:35:28 2013 -0800

    [WIP] Add column-based tiling.
    
    This patch adds column-based tiling. The idea is to make each tile
    independently decodable (after reading the common frame header) and
    also independendly encodable (minus within-frame cost adjustments in
    the RD loop) to speed-up hardware & software en/decoders if they used
    multi-threading. Column-based tiling has the added advantage (over
    other tiling methods) that it minimizes real[1;31mtime[m use-case latency,
    since all threads can start encoding data as soon as the first SB-row
    worth of data is available to the encoder.
    
    There is some test code that does random tile ordering in the decoder,
    to confirm that each tile is indeed independently decodable from other
    tiles in the same frame. At tile edges, all contexts assume default
    values (i.e. 0, 0 motion vector, no coefficients, DC intra4x4 mode),
    and motion vector search and ordering do not cross tiles in the same
    frame.
    t log
    
    Tile independence is not maintained between frames ATM, i.e. tile 0 of
    frame 1 is free to use motion vectors that point into any tile of frame
    0. We support 1 (i.e. no tiling), 2 or 4 column-tiles.
    
    The loopfilter crosses tile boundaries. I discussed this briefly with Aki
    and he says that's OK. An in-loop loopfilter would need to do some sync
    between tile threads, but that shouldn't be a big issue.
    
    Resuls: with tiling disabled, we go up slightly because of improved edge
    use in the intra4x4 prediction. With 2 tiles, we lose about ~1% on derf,
    ~0.35% on HD and ~0.55% on STD/HD. With 4 tiles, we lose another ~1.5%
    on derf ~0.77% on HD and ~0.85% on STD/HD. Most of this loss is
    concentrated in the low-bitrate end of clips, and most of it is because
    of the loss of edges at tile boundaries and the resulting loss of intra
    predictors.
    
    TODO:
    - more tiles (perhaps allow row-based tiling also, and max. 8 tiles)?
    - maybe optionally (for EC purposes), motion vectors themselves
      should not cross tile edges, or we should emulate such borders as
      if they were off-frame, to limit error propagation to within one
      tile only. This doesn't have to be the default behaviour but could
      be an optional bitstream flag.
    
    Change-Id: I5951c3a0742a767b20bc9fb5af685d9892c2c96f

[33mcommit 5a5df19de30fec82bd64a846e4d0341b7d03594a[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Dec 12 10:25:58 2012 -0800

    New default coefficient/band probabilities.
    
    Gives 0.5-0.6% improvement on derf and stdhd, and 1.1% on hd. The
    old tables basically derive from [1;31mtime[ms that we had only 4x4 or
    only 4x4 and 8x8 DCTs.
    
    Note that some values are filled with 128, because e.g. ADST ever
    only occurs as Y-with-DC, as does 32x32; 16x16 ever only occurs
    as Y-with-DC or as UV (as complement of 32x32 Y); and 8x8 Y2 ever
    only has 4 coefficients max. If preferred, I can add values of
    other tables in their place (e.g. use 4x4 2nd order high-frequency
    probabilities for 8x8 2nd order), so that they make at least some
    sense if we ever implement a larger 2nd order transform for the
    8x8 DCT (etc.), please let me know
    
    Change-Id: I917db356f2aff8865f528eb873c56ef43aa5ce22

[33mcommit d984763867f82879783c5b88615d9a458e3e7ad0[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Mon Dec 10 12:07:59 2012 -0800

    configure: add --enable-external-build support
    
    First attempt at avoiding all the compile-[1;31mtime[m environment detection for
    cases where you can generate the environments statically, as when the
    real build is being performed by another build system.
    
    Change-Id: Ie3cf95d71d6c5169900f31e263b84bc123cdf73f

[33mcommit 52d350febfc19ec5a1783789c183af2397bf5b20[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Dec 3 12:26:51 2012 -0800

    Begin to refactor vpx_scale usage in VP9
    
    Only declare the functions in vpx_scale RTCD and include the relevant
    header.
    
    Remove unused files and functions in vpx_scale to avoid wasting [1;31mtime[m
    renaming. vpx_scale/win32/scaleopt.c contains functions which have not
    been called in a long [1;31mtime[m but are potentially optimized.
    
    The 'vp8' functions have not been renamed yet. That is for after the
    cleanup.
    
    Change-Id: I2c325a101d60fa9d27e7dfcd5b52a864b4a1e09c

[33mcommit c6bd29e2f55b14a0b0dacb5af407f485ee7ffb3f[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Dec 3 12:26:51 2012 -0800

    Begin to refactor vpx_scale usage in VP9
    
    Only declare the functions in vpx_scale RTCD and include the relevant
    header.
    
    Remove unused files and functions in vpx_scale to avoid wasting [1;31mtime[m
    renaming. vpx_scale/win32/scaleopt.c contains functions which have not
    been called in a long [1;31mtime[m but are potentially optimized.
    
    The 'vp8' functions have not been renamed yet. That is for after the
    cleanup.
    
    Change-Id: I2c325a101d60fa9d27e7dfcd5b52a864b4a1e09c

[33mcommit e7cd80718b04c03d5ce21f13981712704b36fc66[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Nov 20 16:28:08 2012 -0800

    Improve sad3x16 SSE2 function
    
    Vp9_sad3x16_sse2() is heavily called in decoder, in which the
    unaligned reads consume lots of cpu cycles. When CONFIG_SUBPELREFMV
    is off, the unaligned offset is 1. In this situation,
    we can adjust the src_ptr to be 4-byte aligned, and then do the
    aligned reads. This reduced the reading [1;31mtime[m significantly. Tests
    on 1080p clip showed over 2% decoder performance gain with
    CONFIG_SUBPELREFM off.
    
    Change-Id: I953afe3ac5406107933ef49d0b695eafba9a6507

[33mcommit a3384f00a32fdc33b8d96d43a29d9720f0641d34[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Nov 15 09:55:36 2012 -0800

    changed asm obj output filenames in MSVC build
    
    this commit changed the asm file compiling in MSVC to use individually
    customized build command line with object filename specified for each
    input file. This allows object filenames prefixed with path name, and
    avoid name collision in link [1;31mtime[m
    
    Change-Id: I996098643dcadc393af57035a04bef3877f45424

[33mcommit b91219e29eb52d429cc5051c7e7ab5aaac8e7d02[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Aug 10 17:05:46 2012 -0700

    extend the range of encoding [1;31mtime[m
    
    The commit also corrects unit of encoding from microsecond to
    milisecond.
    
    Change-Id: I030108e90f89f33dfad2d092dc8991db81979715

[33mcommit 0b17ea6f689a2716f314d13000901c9107eb03af[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Aug 7 13:55:49 2012 -0700

    A bit of temporary relief on encoder slowness
    
    The commit replaces run-[1;31mtime[m initialization of cosine constants with
    static constant values, which provides ~30% relief on slow speed. The
    real solution, however will be to implement integer versions of those
    functions that current use float/double.
    
    Change-Id: Ie3ff1793509653d78dd1aeaf88cc6737da1bc55f

[33mcommit ea0e4f1743e4b6f2c4ae2b475d046630dbb93316[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri May 25 10:55:47 2012 -0700

    fixed a number of compiling issues
    
    the commit fixed a number of compiling issues when some epxeriments
    are turned on at the same [1;31mtime[m.
    
    Change-Id: Idb15b215e2d2a7d25f2707f99ef55a34e7301ce7

[33mcommit 6b7ec50812611221a68e28309c59bcaaeaba4354[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Mar 14 17:29:39 2012 -0700

    fixed a bug of context overwritten by key frame recoding
    
    The recoding loop save and restore frame coding context for recodes.
    However in recoding of key frames, some of the coding context saved
    was stale from last encoded inter frame. The save/restore some[1;31mtime[ms
    overwrites the re-inintialized coding context with saved context
    from last frame, resulting in encoder/decoder mismatch
    
    Change-Id: I354ae2f71074d142602d51d06544c05a2462caaf

[33mcommit ea43ba4aee6b915f7309841c6e924c235d0723d3[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Mar 14 17:29:39 2012 -0700

    fixed a bug of context overwritten by key frame recoding
    
    The recoding loop save and restore frame coding context for recodes.
    However in recoding of key frames, some of the coding context saved
    was stale from last encoded inter frame. The save/restore some[1;31mtime[ms
    overwrites the re-inintialized coding context with saved context
    from last frame, resulting in encoder/decoder mismatch
    
    Change-Id: I354ae2f71074d142602d51d06544c05a2462caaf

[33mcommit 3e1cad9c69e9d89ecbed47ba187ccb5d48ae0a77[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Feb 27 10:22:38 2012 -0800

    Initial refactoring of high_precision mv code.
    
    This is the first patch for refactoring of the code related to
    high-precision mv, so that 1/4 and 1/8 pel motion vectors can
    co-exist in the same bit-stream by use of a frame level flag.
    The current patch works fine for only use of 1/4th and
    only use of 1/8th pel mv, but there are some issues with the
    mode switching in between. Subsequent patches on this change Id
    will fix the remaining issues.
    
    Patch 2: Adds fixes to make sure that multiple mv precisions can
    co-exist in the bit-stream. Frame level switching has been tested
    to work correctly.
    
    Patch 3: Fixes lines exceeding 80 char
    
    Patch 4:
    http://www.corp.google.com/~debargha/vp8_results/enhinterp.html
    
    Results on derf after ssse3 bugfix, compared to everything
    enabled but the 8-tap, 1/8-subpel and 1/16-subpel uv. Overall the
    gains are about 3% now. Hopefully there are no more bugs lingering.
    Apparently the sse3 bug affected the quartel subpel results more than
    the eighth pel ones (which is understandabale because one bad predictor
    due to the bug, matters less if there are a lot more subpel options
    available as in the 1/8 subpel case).
    The results in the 4th column correspond to the current settings.
    The first two columns correspond to two settings of adaptive switching
    of the 1/4 or 1/8 subpel mode based on initial Q estimate. These
    do not work as good as just using 1/8 all the [1;31mtime[m yet.
    
    Change-Id: I3ef392ad338329f4d68a85257a49f2b14f3af472

[33mcommit 79d330d7d5f948f66c38fc7a7bddb24134189ba8[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Feb 16 17:02:17 2012 +0000

    Code simplification
    
    Removal of the pickinter.c and .h files and calls to this
    code.
    
    Removal of some code relating to real [1;31mtime[m and one pass
    settings  though there is more to be done in this regard.
    
    However,  vp8_set_speed_features() now
    only supports modes 0 and 1 and speeds up to 3
    so rd should always be set.
    
    Change-Id: I62c0c1b6154ab499785baef310536080e87bc4d8

[33mcommit efa9abd02891855afc40670cc874922a5c1fcb1b[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Feb 15 17:35:48 2012 -0800

    optmized rounding for transforms
    
    the changes are still temporary, the final transforms, especially
    inverse ones should take in account both accuracy, complexity, and
    sign-bias, which should be decided at a later [1;31mtime[m.
    
    Change-Id: I116b0c70b25f5ee324ae5713d4564f5d0aa27151

[33mcommit 9b68ad0f30c8f4875a5aec5c3f09c3898b820e5f[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Feb 13 14:34:19 2012 -0800

    added 8x8 based Rate estimation for dualpred case
    
    This commmit added logic for MB using dual-pred to compute rate
    estimation based on correct transform size. The section of code
    was previously located under #if CONFIG_DUALPRED, that was made
    to be working with T8x8 experiment at the same [1;31mtime[m.
    
    Change-Id: Iebc2518c03f11378b9c2e72905520f088b54d5c0

[33mcommit af8f1928d1ca6df5ae6961acebd524da585fa8ab[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Mon Feb 13 08:21:24 2012 -0800

    vp8 - config_featureupdates
    
    Added a bit to signify that the feature changed since
    the last [1;31mtime[m we sent it, or not so that we don't need
    to send all the databits for every feature change.
    
    added config
    
    Change-Id: I8d3064ce90d4500bf0d5c6b87c664e46138dfcac

[33mcommit 5d0b5a17d9a73b3f4588ae95fbd4b18e7af79f35[m
Author: Adrian Grange <agrange@google.com>
Date:   Thu Feb 2 09:04:40 2012 -0800

    Added encoding in Superblock Order
    
    As a precursor to encoding 32x32 blocks this cl adds the
    ability to encode the frame superblock (=32x32 block) at
    a [1;31mtime[m. Within a SB the 4 indiviual MBs are encoded in
    raster-order (NW,NE,SW,SE).
    
    This functionality is added as an experiment which can be
    enabled by ispecifying --enable-superblocks in the
    command line specified to configure (CONFIG_SUPERBLOCKS
    macro in the code).
    
    To make this work I had to disable the two intra
    prediction modes that use data from the top-right of the
    MB.
    
    On the tests that I have run the results produce
    almost exactly the same PSNRs & SSIMs with a very
    slightly higher average data rate (and slightly higher
    data rate than just disabling the two intra modes in
    the original code).
    
    NOTE: This will also break the multi-threaded code.
    
    This replaces the abandoned change:
    Iebebe0d1a50ce8c15c79862c537b765a2f67e162
    
    Change-Id: I1bc1a00f236abc1a373c7210d756e25f970fcad8

[33mcommit 661b2c2dcf59bb56535332dcc88212ef8499b33f[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Nov 15 11:13:33 2011 +0000

    Further work on Segmentation Experiment:
    
    This check in includes quite a lot of clean up and refactoring.
    
    Most of the analysis and set up for the different coding options for the
    segment map (currently simple distribution based coding or temporaly
    predicted coding), has been moved to one location (the function
    choose_segmap_coding_method() in segmenation.c). This code was previously
    scattered around in various locations making integration with other
    experiments and modification / debug more difficult.
    
    Currently the functionality is as it was with the exception that the
    prediction probabilities are now only transmitted when the temporal
    prediction mode is selected.
    
    There is still quite a bit more clean up work that will be possible
    when the #ifdef is removed. Also at that [1;31mtime[m I may rename and alter
    the sense of macroblock based variable "segment_flag" which indicates
    (1 that the segmnet id is not predicted vs 0 that it is predicted).
    
    I also intend to experiment with a spatial prediction mode that can be
    used when coding a key frame segment map or in cases where temporal
    prediction does not work well but there is spatial correlation.
    
    In a later check in when the ifdefs have gone I may also move the call
    to choose_segmap_coding_method() to just before where the bitsream is
    packed (currently it is in vp8_encode_frame()) to further reduce the
    possibility of clashes with other experiments and prevent it being called
    on each itteration of the recode loop.
    
    Change-Id: I3d4aba2a2826ec21f367678d5b07c1d1c36db168

[33mcommit 1c24eb2b7b3a61893ea19e9e544c24a233f89921[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Jul 20 12:14:50 2011 -0700

    fixed a number of problems caused by auto merges
    
    The auto merge process pull and merge commits from public git or master
    branch. These automerges while worked well most [1;31mtime[m, but has created
    a few problems. This commit fixed several issues existed long before
    the latest 8x8 transform commit.
    
    Change-Id: I895ca99713231b1aec521d57db5d9839f74aacfa

[33mcommit 5b42ae09aeecedfdff1dae9d59be9fbb2aba3392[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Dec 1 15:50:14 2010 -0800

    experiment extending the quantizer range
    
    Prior to this change, VP8 min quantizer is 4, which caps the
    highest quality around 51DB. This experimental change extends
    the min quantizer to 1, removes the cap and allows the highest
    quality to be around ~73DB, consistent with the fdct/idct round trip
    error. To test this change, at configure [1;31mtime[m use options:
    
    --enable-experimental --enable-extend_qrange
    
    The following is a brief log of changes in each of the patch sets
    
    patch set 1:
    In this commit, the quantization/dequantization constants are kept
    unchanged, instead scaling factor 4 is rolled into fdct/idct.
    Fixed Q0 encoding tests on mobile:
      Before:    9560.567kbps Overall PSNR:50.255DB VPXSSIM:98.288
      Now:   18035.774kbps Overall PSNR:73.022DB VPXSSIM:99.991
    
    patch set 2:
    regenerated dc/ac quantizer lookup tables based on the scaling
    factor rolled in the fdct/idct. Also slightly extended the range
    towards the high quantizer end.
    
    patch set 3:
    slightly tweaked the quantizer tables and generated bits_per_mb
    table based on Paul's suggestions.
    
    patch set 4:
    fix a typo in idct, re-calculated tables relating active max Q
    to active min Q
    
    patch set 5:
    added rdmult lookup table based on Q
    
    patch set 6:
    fix rdmult scale: dct coefficient has scaled up by 4
    
    patch set 7:
    make transform coefficients to be within 16bits
    
    patch set 8:
    normalize 2nd order quantizers
    
    patch set 9:
    fix mis-spellings
    
    patch set 10:
    change the configure script and macros to allow experimental code
    to be enabled at configure [1;31mtime[m with --enable-extend_qrange
    
    patch set 11:
    rebase for merge
    
    Change-Id: Ib50641ddd44aba2a52ed890222c309faa31cc59c
For keyword perf:
[33mcommit eec3def7c5f8ae558e096615801d6afc7e779b29[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Oct 16 10:59:55 2013 +0100

    Modified no memory rate control.
    
    This 2-pass rate control setting allocates bits based
    on first pass stats to each kf group, gf group and individual
    frame but does not correct the bits left and allocation after
    each frame.
    
    In other words it recommends a bit allocation for each frame
    but does not try and correct any over or under spend on a
    frame over the remainder of the clip. This reduces the accuracy
    of rate control in terms of hitting an average bitrate but prevents
    problems that may arise because early frames either use to many
    or too few bits. This mode is currently more inclined to undershoot
    than overshoot (particularly at higher data rates).
    
    Also minor changes to rate of adaption when recode loop is not
    enabled.
    
    This mode is currently enabled by default for VBR.
    It gives the following % [1;31mperf[mormance gains.
    
    derf +0.467, +1.072
    yt 2.962, 2.645
    stdhd 1.682, 1.595,
    yt-hd 2.3, 2.174
    
    Change-Id: I3c84a9bf8884e5b345698ff0e19187f792c2f3a0

[33mcommit 8e3ce1a9e3ee2139fea89d5508a1d268f20426b7[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Oct 14 16:03:23 2013 -0700

    Re-design all-zero-coeff block index buffer use
    
    Use the zcoeff_blk buffer of PICK_MODE_CONTEXT to store the indexes
    of all-zero-coeff block of the current best mode. Remove the temporary
    buffer best_zcoeff_blk defined in the rate-distortion optimization
    loop. This improves the speed [1;31mperf[mormance by about 0.5% in all speed
    settings.
    
    Change-Id: Ie3e15988ddfa581eafa2e19a8228d3fe4a46095c

[33mcommit 51af8a5103ed0c1eccce95efceb0c0fc99cc0df3[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Oct 11 18:57:22 2013 -0700

    Adjust icc compiler options
    
    "-no-prec-div" option helps codec [1;31mperf[mormance, so it was added back.
    "-no-intel-extensions" was added to suppress link warning #10237.
    option '-use-asm' is deprecated and removed.
    
    Tested icc 32bit build and 64bit build.
    
    Change-Id: I736ec2619857efd425ef76338dc52f8fbc0bcc7e

[33mcommit d9655e42b84a405a291ad142df748cc7e0364916[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Oct 10 17:24:55 2013 -0700

    Change in rddiv parameter to make it a power of 2
    
    Converts the constant rddiv parameter to 128 (from 100) and
    implements RDCOST with bit-shift rather than multiplication.
    Other parameters are also adjusted to roughly keep the same
    balance between Rate and Distortion.
    
    There is a slight speed-up of about 0.5-1% (at speed 0) as
    testted on football_cif.
    
    There is a slight change in [1;31mperf[mormance due to small change
    in the parameters.
    derfraw300: +0.033%
    stdhdraw250; +0.102%
    
    Change-Id: I70ac69f58fa71c83108f68fe41796cd19d1fc760

[33mcommit fc19243cedad003d181266fd41958bf27e6f21ae[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Oct 10 10:37:40 2013 -0700

    Re-design rate-distortion cost tracking buffers
    
    This commit re-designs the per transformed block rate-distortion
    costs tracking buffers. It removes redundant buffer usage, makes
    the needed context memory allocation per VP9_COMP instance and
    reuses the same buffer sets inside the rate-distortion optimization
    search loop, thereby avoiding repeatedly requiring memory space.
    
    It reduces speed 0 runtime:
    
    bus at 2000 kbps from 166763ms to 158967ms,
    football at 600 kbps from 246614ms to 234257ms.
    
    Both about 5% speed-up. Local tests suggest about 2% to 5% speed-up
    for speed 1 and 2 settings. This does not change compression
    [1;31mperf[mormance.
    
    Change-Id: I363514c5276b5cf9a38c7251088ffc6ab7f9a4c3

[33mcommit 0d0ed6a29b6e594e40fad9bcdaca5dab822754ce[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Oct 4 17:19:05 2013 -0700

    Allow sub8x8 intra modes test for alt frame coding
    
    This commit allows sub8x8 intra modes test in the rate-distortion
    loop for hd sequences in speed 1 and 2.
    
    For sequence y90n of hd set at 8000 kbps, speed 2 runtime goes
    from 207s to 210s. For ped_1080p at 3000 kbps, speed 2 runtim goes
    from 336s to 337s. Both are running with 300 frames.
    
    This improves compression [1;31mperf[mormance by 0.24% for stdhd and 0.32%
    for hd.
    
    Change-Id: I173ca38a6411565ae6cfadd184c42b2070c5de1f

[33mcommit 11abab356e4c04d4a21ac43f58f9ec05c7c80eca[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 27 16:02:49 2013 -0700

    Refactor inter mode rate-distortion search
    
    This commit separates the rate-distortion optimization loop of
    superblocks from that of sub8x8 blocks. This allows better design
    rate-distortion optimization search loop for each setting. It also
    removes the use of SPLITMV and I4X4_PRED therein.
    
    No [1;31mperf[mormance change in speed 0 settings. For bus@CIF at 2000kbps,
    the speed 1 runtime goes from 48009ms to 43894ms (about 10% faster).
    The overall compression [1;31mperf[mormance on derf changed by -0.021%.
    
    Speed 2 runtime goes from 27114ms to 28700ms (6% slower), while the
    overall coding efficiency goes up by 1.629% for derf, 1.236% for yt.
    
    Change-Id: Ie6bdfa0a370148dd60bd800961077f7e97e67dd4

[33mcommit 195061fedaeca7ac79ef810213c35fb06ed155aa[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Sep 30 11:58:22 2013 -0700

    Fix rectangular partition check in speed 1
    
    Make encoder skip rectangular partition check in speed 1 and above,
    when early termination was triggered in partition split.
    Thanks Guillaume (gmartres@) for catching this issue.
    
    This change makes bus_cif at 2000kbps speed 1 runtime goes down from
    25612ms to 23438ms (about 9% speed-up), at the expense of -0.235%
    [1;31mperf[mormance down.
    
    Change-Id: I98613fad081a261d30d5fa206f934ca70601c180

[33mcommit a517343ca33edebadd963485abdd1a2cacda7df6[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 20 16:29:24 2013 -0700

    Enable per transformed block zero coeffs forcing
    
    This commit enables forcing all coefficients zero per transformed
    block, when its rate-distortion cost is lower than regular coeff
    quantization.
    
    The overall [1;31mperf[mormance improvement (including its parent patch on
    calculating rd cost per transformed block) at speed 1:
    derf:  0.298%
    yt:    0.452%
    hd:    0.741%
    stdhd: 0.006%
    
    Change-Id: I66005fe0fd7af192c3eba32e02fd6d77952accb5

[33mcommit 78fbb10642375b49ebf9d5d92901ff77a1129a08[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 20 11:30:46 2013 -0700

    Calculate rd cost per transformed block
    
    This commit makes the rate-distortion optimization loop evaluate
    the rd costs of regular quantization and all zero coeffs, per
    transformed block. It improves speed 1 compression [1;31mperf[mormance:
    
    derf: 0.245%
    yt:   0.515%
    
    For a large partition that consists multiple transformed blocks,
    this allows more flexibility to selectively force a portion of
    them coded as all zero coeffs, as well be continued in the next
    patches.
    
    Change-Id: I211518be4179747b57375696f017d1160cc91851

[33mcommit cbf394574d68fe845320397638ced8c38f636593[m
Merge: eeae6f946 23e1a29fc
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Sep 16 14:39:45 2013 -0700

    Merge "Speed up iht8x8 by rearranging instructions. Speed improves from 282% to 302% faster based on assembly-[1;31mperf[m."

[33mcommit 23e1a29fc79837aa4ce97953d4b8e77dbc4b0761[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Sep 16 10:55:54 2013 -0700

    Speed up iht8x8 by rearranging instructions.
    Speed improves from 282% to 302% faster based on assembly-[1;31mperf[m.
    
    Change-Id: I08c5c1a542d43361611198f750b725e4303d19e2

[33mcommit c4826c59415f2fe8b8d9ab1a66f50f7e30d64f1d[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 12 10:06:47 2013 -0700

    Adaptive motion search control
    
    This commit enables adaptive constraint on motion search range for
    smaller partitions, given the motion vectors of collocated larger
    partition as a candidate initial search point.
    
    It makes speed 0 runtime of bus at CIF and 2000 kbps goes from
    167s down to 162s (3% speed-up), at 0.01dB [1;31mperf[mormance gains. In
    the settings of speed 1, this makes the runtime goes from 33687 ms
    to 32142 ms (4.5% speed-up), at 0.03dB [1;31mperf[mormance gains.
    
    Compression [1;31mperf[mormance wise, it gains at speed 1:
    derf  0.118%
    yt    0.237%
    hd    0.203%
    stdhd 0.438%
    
    Change-Id: Ic8b34c67810d9504a9579bef2825d3fa54b69454

[33mcommit d22a504d11a15dc3eab666859db0046b5a7d75c5[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Sep 11 13:56:32 2013 -0400

    Improved 8t filters
    
    Reformatted version of a patch submitted by Erik/Tamar
    from Intel.  For the test clips used, the decoder
    [1;31mperf[mormance improved by ~2%.
    
    Change-Id: Ifbc37ac6311bca9ff1cfefe3f2e9b7f13a4a511b

[33mcommit fc5ec206a7aaa090a442294c6e498879e31f2eb5[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Sep 9 11:36:51 2013 -0700

    Speed up idct16x16 by rearrange instructions.
    
    Speed improve from 376% to 400% faster base on assembly-[1;31mperf[m.
    
    Change-Id: If0b2eccc39d5793dc101ce9feb7fcadf88396ea2

[33mcommit e378a89bd662ded5ae6f550f820070db93f50a39[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Aug 29 16:21:44 2013 -0700

    Support a constant quality mode in VP9
    
    Adds a new end-usage option for constant quality encoding in vpx. This
    first version implemented for VP9, encodes all regular inter frames
    using the quality specified in the --cq-level= option, while encoding
    all key frames and golden/altref frames at a quality better than that.
    
    The current [1;31mperf[mormance on derfraw300 is +0.910% up from bitrate control,
    but achieved without multiple recode loops per frame.
    
    The decision for qp for each altref/golden/key frame will be improved
    in subsequent patches based on better use of stats from the first pass.
    Further, the qp for regular inter frames may also be varied around the
    provided cq-level.
    
    Change-Id: I6c4a2a68563679d60e0616ebcb11698578615fb3

[33mcommit dae17734ece414091ba1184f7becd0aa6c0004f1[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Fri Sep 6 12:33:34 2013 -0400

    New mode_info_context storage
    
    mode_info_context was stored as a grid of MODE_INFO structs.
    The grid now constists of a pointer to a MODE_INFO struct and
    a "in the image" flag.  The MODE_INFO structs are now stored
    as a stream, eliminating unnecessary copies and is a little
    more cache friendly.
    
    For the test clips used, the decoder [1;31mperf[mormance improved
    by ~4.3% (1080p) and ~9.7% (720p).
    
    Patch Set 2: Re-encoded clips with latest. Now ~1.7% (1080p)
    and 5.9% (720p).
    
    Change-Id: I846f29e88610fce2523ca697a9a9ef2a182e9256

[33mcommit 3476404912e1f3685ad8538f45c9f6adf9d6c436[m
Merge: 170be56a7 01c4e0442
Author: Hangyu Kuang <hkuang@google.com>
Date:   Thu Sep 5 17:37:13 2013 -0700

    Merge "Speed up idct8x8 by rearrange instructions. Speed improve from 264% ~ 270% to 280% ~ 300% base on assembly-[1;31mperf[m."

[33mcommit 01c4e0442448e41da4fc82951f0f2dbaa31c33df[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Wed Sep 4 15:41:26 2013 -0700

    Speed up idct8x8 by rearrange instructions.
    Speed improve from 264% ~ 270% to 280% ~ 300% base on assembly-[1;31mperf[m.
    
    Change-Id: I3e2cc818ec14b432204ff43732f39b6438db685d

[33mcommit 22dc946a7e46e9a24e25d61232fb2f4678e9b9f6[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Thu Aug 29 08:30:17 2013 -0400

    Improved mb_lpf_horizontal_edge_w_sse2_8
    
    This patch is a reformatted version of optimizations done by
    engineers at Intel (Erik/Tamar) who have been providing
    [1;31mperf[mormance feedback for VP9.  For the test clips used (720p, 1080p),
    up to 1.2% [1;31mperf[mormance improvement was seen.
    
    Change-Id: Ic1a7149098740079d5453b564da6fbfdd0b2f3d2

[33mcommit 01a37177d167f2f837ae6d2de03a17511d1b38c9[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Aug 20 14:34:17 2013 -0700

    Refactor rd_pick_partition for parameter control
    
    This commit changes the partition search order of superblocks from
    {SPLIT, NONE, HORZ, VERT} to {NONE, SPLIT, HORZ, VERT} for
    consistency with that of sub8x8 partition search. It enable the use
    of early termination in partition search for all block sizes.
    
    For ped_area_1080p 50 frames coded at 4000 kbps, it makes the runtime
    goes down from 844305ms -> 818003ms (3% speed-up) at speed 0.
    
    This will further move towards making the in-search partition types
    configurable, hence unifying various speed-up approaches.
    
    Some speed 1 and 2 features are turned off during the refactoring
    process, including:
    disable_split_var_thresh
    using_small_partition_info
    
    Stricter constraints are applied to use_square_partition_only for
    right/bottom boundary blocks. Will bring back/refine these features
    subsequently. At this point, it makes derf set at speed 1 about
    0.45% higher in compression [1;31mperf[mormance, and 9% down in run-time.
    
    Change-Id: I3db9f9d1d1a0d6cbe2e50e49bd9eda1cf705f37c

[33mcommit debb9c68c8ea92b80627138f95de901cb39cf8dc[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 7 15:22:51 2013 -0700

    Use low precision 32x32fdct for encodemb in speed1
    
    The low precision 32x32 fdct has all the intermediate steps within
    16-bit depth, hence allowing faster SSE2 implementation, at the
    expense of larger round-trip error. It was used in the rate-distortion
    optimization search loop only.
    
    Using the low precision version, in replace of the high precision one,
    affects the compression [1;31mperf[mormance by about 0.7% (derf, stdhd) at
    speed 0. For speed 1, it makes derf set down by only 0.017%.
    
    Change-Id: I4e7d18fac5bea5317b91c8e7dabae143bc6b5c8b

[33mcommit 15b5a6a2c7bda61d62536a95b3f84390efc88350[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Jul 22 14:47:57 2013 -0700

    Flexible support for various pattern searches
    
    Adds a few pattern searches to achieve various tradeoffs
    between motion estimation complexity and [1;31mperf[mormance.
    The search framework is unified across these searches so that a
    common pattern search function is used for all. Besides it will
    be easier to experiment with various patterns or combinations
    thereof at different scales in the future.
    
    The new pattern search is multi-scale and is capable of using
    different patterns at different scales.
    
    The new hex search uses 8 points at the smallest scale
    and 6 points at other scales.
    Two other pattern searches - big-diamond and square are
    also added. Big diamond uses 4 points at the smallest scale and
    8 points in diamond shape at the larger scales.
    Square is very similar conceptually to the default n-step search
    but is somewhat faster since it keeps only one survivor across
    all scales.
    
    Psnr/speed-up results on derf300:
    
    hex: -1.6% psnr%, 6-8% speed-up
    big-diamond: -0.96% psnr, 4-5% speedup
    square: -0.93% psnr, 4-5% speedup
    
    Change-Id: I02a7ef5193f762601e0994e2c99399a3535a43d2

[33mcommit 67719abde190ba7d585559df77d1bdc2a272a072[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Aug 1 12:45:16 2013 -0700

    Remove unused vp9_short_idct10_32x32_add
    
    The inverse 32x32 transform detects all zero entries and skips the
    computations accordingly per 8 rows in the first 1-D operation. The
    function vp9_short_idct10_32x32_add [1;31mperf[morms differently and is not
    used anywhere, hence removed.
    
    Change-Id: Ic4fad422debbde7b6b6ffed47c69fbd4268a906c

[33mcommit b5323ed89a27dcf57dc62190cca128e8ae8366b4[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 29 14:54:31 2013 -0700

    Skip redundant tokenization in rd loop
    
    This commit makes the encoder skip the redundant tokenization process
    in the rate-distortion optimization search loop, while updating the
    entropy contexts accordingly. It makes the speed 0 encoding process
    about 0.5% faster at no [1;31mperf[mormance change.
    
    Change-Id: I34a4155a0b5332afeb45c93a51c7f35a294d685c

[33mcommit a142d6fc935cba1dc6ceb4d798b3aac68b34684b[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 16 12:04:07 2013 -0700

    Skip redundant motion search in 4x4 level rd loop
    
    This commit makes the encoder to [1;31mperf[morm motion search only once
    per reference frame type for each 4x4/4x8/8x4 block. For bus_cif
    at 2000 kbps, the runtime goes from 253812ms -> 217817ms
    (14% speed-up) for speed 0.
    
    Change-Id: I5f17599ccc8cfaf93ccb4f98fcb6008af6d79e92

[33mcommit 043e0f9dad1106b60ba3e58dfc4075ed261080dc[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 15 11:28:46 2013 -0700

    Skip inter-coded block reconstruction in rd loop
    
    Skip the inverse transform and reconstruction of inter-mode coded
    blocks in the rate-distortion optimization loop, when skip_encode_sb
    feature is turned on. This provides about 1% speed-up at speed 0,
    and 1.5% speed-up at speed 1. No [1;31mperf[mormance change in both settings.
    
    Change-Id: I2932718bf4d007163702b61b16b6ff100cf9d007

[33mcommit faff6ed0fbb01ece1331021b749ec2f9114332ff[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 8 16:48:47 2013 -0700

    Skip duplicate block encoding in the rd loop
    
    This speed feature allows the encoder to largely remove the spatial
    dependency between blocks inside a 64x64 superblock, thereby removing
    the need to repeatedly encode superblocks per partition type in the
    rate-distortion optimization loop.
    
    A major challenge lies in the intra modes tested in the rate-distortion
    optimization loop. The subsequent blocks do not have access to the
    reconstructed boundary pixels without the intermediate coding steps.
    This was resolved by using the original pixels for intra prediction
    in the rd loop, followed by an appropriately designed distortion
    modeling on the quantization parameters. Experiments also suggested
    that the [1;31mperf[mormance impact is more discernible at lower bit-rate/psnr
    settings. Hence a quantizer dependent threshold is applied to deactivate
    skip of block coding.
    
    For bus_cif at 2000 kbps,
    speed 0: runtime 269854ms -> 237774ms (12% speed-up) at 0.05dB
             [1;31mperf[mormance loss.
    
    speed 1: runtime 65312ms  -> 61536ms, (7% speed-up) at 0.04dB
             [1;31mperf[mormance loss.
    
    This operation is currently turned on in settings of speed 1.
    
    Change-Id: Ib689741dfff8dd38365d8c1b92860a3e176f56ec

[33mcommit 18803f9cc4386e8631090471a948a3baad3fb3c0[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 10 15:45:34 2013 -0700

    Fix tx_type bug in intra4x4 rd loop
    
    This commit fixed the mis-use of the tx_type for inverse transform
    in intra4x4 rate-distortion optimization loop. It improves the
    overall coding [1;31mperf[mormance.
    
    Change-Id: I7fe9953175b74890357dbcee33c138573766e980

[33mcommit 53ff43adc341068945f0857bcf28846080e8f368[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Jul 8 16:01:01 2013 -0700

    Prunes out full-rd computation based on modeled rd
    
    Adds a speed feature to eliminate full-rd computation if the modeled
    rd or rd based on a different parameter in the same mode is already
    a lot larger than the best rd yet.
    
    Specifically, only search the sharp and smooth filters if the modeled
    rd cost based on the  regular filter is within a certain factor of the
    best rd cost so far. Also, skip full-rd computation of non splitmv
    inter modes if the modeled rd cost based on pred error is within the
    same factor of the best rd cost so far.
    
    Also adds some enhancements in the rd search for splitmv mode to
    speed things up by early breakouts. Negligible impact on [1;31mperf[mormance.
    
    Resuts on derfraw300:
    psnr:    -0.013% with the splitmv enhancements, -0.24% with the rd
             breakout feature on.
    speedup: 6% with splitmv enhancements, 20% with also residual breakout
             (tested on football sequence at 600 Kbps)
    
    Change-Id: I37abc308ea9f110c1679ce649b6a7e73ab1ad5fc

[33mcommit 114423538f85e97d8405e9946708805852133c66[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 3 09:05:01 2013 -0700

    SSE2 16x16 ADST/DCT hybrid transform
    
    This commit enables 16x16 ADST/DCT forward hybrid transform using SSE2
    operations. It reduces the runtime from 5433 cycles to 1621 cycles, at
    no compression [1;31mperf[mormance loss.
    
    Change-Id: I75fd7f1984e9e28846af459f810ff0d6ae125230

[33mcommit 198fa6d0a049ca338a50ac40eb1bc84367464738[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Mon Jul 1 12:52:38 2013 -0700

    Add Neon horizontal and vertical vp9_mbloop_filter
    
    - The vp9 mbfilter C code will branch on flat and mask. This CL
      will [1;31mperf[morm both branches and combine the data. A later CL will
      [1;31mperf[morm a check to see if all patch will take one branch.
    - These functions are about 1.75 times faster than the C code on
      Nexus 7.
    
    PS #3
    - Changed all functions to dub limit, blimit, and thresh from
      vld {dx[]}, freeing up r4-r6.
    - Changed code to use vbif to reduce one instruction and free
      up a d register.
    
    Change-Id: I028dae0e434dc9891c3677bdb182e201ffb04777

[33mcommit 8350e7fe38ef7fe76ae995b8e1f1c68b26c6a91d[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 8 17:25:51 2013 -0700

    Make intra prediction pointers RTCD-based.
    
    This probably has a mildly negative impact on [1;31mperf[mormance, but will
    (in future commits - or possibly merged with this one) allow SIMD
    implementations of individual intra prediction functions. We may
    perhaps want to consider having separate functions per txfm-size
    also (i.e. 4x4, 8x8, 16x16 and 32x32 intra prediction functions for
    each intra prediction mode), but I haven't played much with that
    yet.
    
    Change-Id: Ie739985eee0a3fcbb7aed29ee6910fdb653ea269

[33mcommit 2bd6fe08f8f6b84816e4369ae53725cf97a43c41[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 2 16:48:15 2013 -0700

    Enable early termination in rd search
    
    This commit allows encoder to detect the cumulative rate-distortion
    cost per transformed block inside a partition. If the cumulative
    rd cost is already above the best rd value, it terminates the rest
    operations and continue to next prediction mode test.
    
    It reduces the runtime of bus at target bit-rate 2000 from 308 second
    to 266 second, i.e., about 13% speed-up at no [1;31mperf[mormance penalty.
    
    Change-Id: I5f15a3d8955d97031d5653006027866a00654e7a

[33mcommit 1109b6b888da9ba6bac50c82a87577c75ec43ab6[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jun 28 13:37:19 2013 -0700

    Enable SSE2 4x4 ADST/DCT transform
    
    This commit enables SSE2 4x4 foward hybrid transform. The runtime
    goes from 249 cycles down to 74 cycles. Overall around 2% speed-up
    at no compression [1;31mperf[mormance change.
    
    Change-Id: Iad4d526346e05c7be896466c05500711bb763660

[33mcommit c24d922396f4dcd50216be3cdfd784ea31c47564[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Tue Jun 25 11:26:49 2013 -0700

    Add averaging-SAD functions for 8-point comp-inter motion search.
    
    Makes first 50 frames of bus @ 1500kbps encode from 3min22.7 to 3min18.2,
    i.e. 2.3% faster. In addition, use the sub_pixel_avg functions to calc
    the variance of the averaging predictor. This is slightly suboptimal
    because the function is subpixel-position-aware, but it will (at least
    for the SSE2 version) not actually use a bilinear filter for a full-pixel
    position, thus leading to approximately the same [1;31mperf[mormance compared to
    if we implemented an actual average-aware full-pixel variance function.
    That gains another 0.3 seconds (i.e. encode time goes to 3min17.4), thus
    leading to a total gain of 2.7%.
    
    Change-Id: I3f059d2b04243921868cfed2568d4fa65d7b5acd

[33mcommit ab362621fe4331486155e1ac7dbbb17a85108324[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jun 21 11:45:47 2013 -0700

    Add 8x8 dct/adst unit tests
    
    This commit enables 8x8 DCT and hybrid transform unit tests. It
    also tunes the forward hybrid transform rounding opertions for
    more precise round-trip [1;31mperf[mormance.
    
    Change-Id: If05c1ce59d75d641b9c6c91527d02d3a6ef498c3

[33mcommit 1e6a32f1af8066fd0b718b11f00cb09104280f49[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jun 20 15:59:48 2013 -0700

    SSE2/SSSE3 optimizations and unit test for sub_pixel_avg_variance().
    
    Encoding of bus @ 1500kbps (first 50 frames) goes from 3min57 to
    3min35, i.e. approximately a 10.5% speedup. Note that the SIMD versions
    which use a bilinear filter (x_offset & 7 || y_offset & 7) aren't
    [1;31mperf[mectly interleaved, and can probably be improved further in the
    future. I've marked this with a few TODOs/FIXMEs in the code.
    
    Change-Id: I5c9e900c0f0d32e431a50fecae213b510b2549f9

[33mcommit a41a4860c0b3be7815f37b4ec833e87218307c4f[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jun 14 11:28:56 2013 -0700

    Make fdct32 computation flow within 16bit range
    
    This commit makes use of dual fdct32x32 versions for rate-distortion
    optimization loop and encoding process, respectively. The one for
    rd loop requires only 16 bits precision for intermediate steps.
    The original fdct32x32 that allows higher intermediate precision (18
    bits) was retained for the encoding process only.
    
    This allows speed-up for fdct32x32 in the rd loop. No [1;31mperf[mormance
    loss observed.
    
    Change-Id: I3237770e39a8f87ed17ae5513c87228533397cc3

[33mcommit 17da2cab78f960008d0945e447e16842ffb450ba[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Sat Jun 8 00:09:44 2013 -0700

    TX_SIZE contexts simplification.
    
    Reduces TX_SIZE contexts to 2 for each kind. The code is
    cleaner and there is hardly any [1;31mperf[mormance difference with
    more than two contexts.
    
    Results: almost neutral
    
    Change-Id: I17656bd6db76224ae2856adf882504560e7dbaa4

[33mcommit 51b6e73a686bedcd6abe4e004f573cd5acbfeccd[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jun 3 15:33:31 2013 -0700

    Make sb intra rd search consistent with encoding
    
    This commit makes operations of the superblock intra coding rate
    distortion optimization consistent with those used in the encoding
    process. Given the test prediction mode and transform size, the rd
    optimizer encodes and reconstructs each transformed block of the
    superblock consecutively, then computes the total rate-distortion
    costs accosicated with the current superblock to select the coding
    decisions.
    
    It achieves coding [1;31mperf[mormance gains:
    derf 0.353%
    yt   1.111%
    
    Change-Id: I0da2eb7a71361dfb8c1384927fc536b0c2790d07

[33mcommit 84c5ed0e9860f9111e0be7a6726bc3afb794fa5d[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu May 30 12:20:03 2013 -0700

    Bugfix in forward update with modeling on.
    
    Fixes an issue with reducing branch cts in the encoder causing
    a drop in [1;31mperf[mormance. The bug was introduced in a previous
    clean up patch.
    
    Test: Went back to the offending patch, applied this same fix
    to it, and checked that results are identical to the parent
    of that patch.
    
    Change-Id: I0bad8e2d930235d0284300fcebf836ceb56f2498

[33mcommit 64b30f41cdc2f848956dd19497c472193883349f[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Fri May 24 13:39:48 2013 -0400

    Removed setup_pre_planes() call in read_mb_modes_mv()
    
    This code does not seem to be necessary anymore.
    
    For the 1080p clip used, the decoder [1;31mperf[mormance improved by
    ~2%.
    
    Change-Id: I66bb0496d4998b0d6c6637c746b642b77bdbef88

[33mcommit f153a5d06302eec5e2ada78e4576ca29f804c999[m
Author: Jingning Han <jingning@google.com>
Date:   Mon May 20 16:04:28 2013 -0700

    Make the intra rd search support 8x4/4x8
    
    This commit allows the rate-distortion optimization of intra coding
    capable of supporting 8x4 and 4x8 partition settings.
    
    It enables the entropy coding of intra modes in key frame using a
    unified contextual probability model conditioned on its above/left
    prediction modes.
    
    Coding [1;31mperf[mormance:
    derf 0.464%
    
    Change-Id: Ieed055084e11fcb64d5d5faeb0e706d30268ba18

[33mcommit 810b612c233e82addc09412815ce06dfdaa589c9[m
Author: Jingning Han <jingning@google.com>
Date:   Wed May 15 22:28:36 2013 -0700

    Enable bit-stream support to 8x4 and 4x8 partition
    
    The recursive partition type search is enabled down to 4x4, 4x8 and
    8x4, followed by the corresponding rate-distortion optimization for
    the per-partition encoding mode decisions.
    
    The bit-stream writing/reading synchronized in supporting the
    rectangular partition of 8x8 block.
    
    This provides above 1% coding [1;31mperf[mormance gains on derf.
    
    To do next:
    1. re-design the rate-distortion loop for inter prediction below 8x8.
    2. re-design the rate-distortion loop for intra prediction below 4x4.
    3. make the loop-filter aware of rectangular partition of 8x8 block.
    4. clean the unused probability models.
    5. update default probability values.
    
    Change-Id: Idd41a315b16879db08f045a322241f46f1d53f20

[33mcommit 6ff3eb1647c68c9afcd2e57f184eea5f3d369d57[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu May 16 11:27:12 2013 +0100

    New inter mode context.
    
    This patch creates a new inter mode contest that avoids
    a dependence on the reconstructed motion vectors from
    neighboring blocks. This was a change requested by
    a hardware vendor to improve decode [1;31mperf[mormance.
    
    As part of this change I have also made some modifications
    to stats output code (under a flag) to allow accumulation of
    inter mode context flags over multiple clips
    
    Some further changes will be required to accommodate the
    deprecation of the split mv mode over the next few days.
    
    Performance as stands is around -0.25% on derf and
    std-hd but up on the YT and YT-HD sets. With further tuning
    or some adjustment to the context criteria it should be
    possible to make this change broadly neutral.
    
    Change-Id: Ia15cb4470969b9e87332a59c546ae0bd40676f6c

[33mcommit 4a88ad89fdda7b1b1f5f98c9791f135b9119ae5f[m
Author: Jingning Han <jingning@google.com>
Date:   Tue May 7 15:36:30 2013 -0700

    Extend left/above partition context to per mi(8x8)
    
    Update and buffer left/above partition information context per 8x8
    block. This allows to further enable recursive partition down to
    4x4 block size, and hence deprecating I4X4_PRED and SPLITMV.
    
    This commit also fixes a context buffer swap/restore issue in 32x32
    partition type search. This gives 0.1% [1;31mperf[mormance gain for derf/yt.
    Will refactor the superblock partition type search into recursion
    form.
    
    Change-Id: Ib61975aca5f12b78d8018481d7fa1393d085689b

[33mcommit 74a43bdfec67a048deff8bd64c8d4ada9f3fe484[m
Merge: 1069c12cf c0b44b316
Author: John Koleszar <jkoleszar@google.com>
Date:   Thu May 2 18:53:27 2013 -0700

    Merge "su[1;31mperf[mrame_test: use delete[] where appropriate" into experimental

[33mcommit c0b44b3160c3e39c723df89377771fba7be8572c[m
Author: James Zern <jzern@google.com>
Date:   Thu May 2 18:14:38 2013 -0700

    su[1;31mperf[mrame_test: use delete[] where appropriate
    
    Change-Id: Id374267c93a7e14e985b8079833364c8eff5248b

[33mcommit 040eeed9d03dbf9f6efaecf2c6e1fdfbfabee64d[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Apr 26 11:13:26 2013 -0700

    Turning model based reverse update on for coefs
    
    Turns model based reverse updates on for coefficients in an
    effort to reduce the memory requirement for counters.
    
    With this patch the counters needed will be reduced by about
    75% since only 3 counts are needed instead of 12.
    
    The impact in [1;31mperf[mormance is:
    derf300: -0.252%
    stdhd250: -0.046%
    
    However retraining should alleviate some of the drop in
    [1;31mperf[mormance.
    
    Change-Id: I6f2b3e13f6d5520aa3400b0b228fb5e8b4a43caa

[33mcommit ff2b8aa2c9f95a8456306d2a9ce28803eb90b38a[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Apr 23 10:12:18 2013 -0700

    Contextual entropy coding of partition syntax
    
    This commit enables selecting probability models for recursive block
    partition information syntax, depending on its above/left partition
    information, as well as the current block size. These conditional
    probability models are reasonably stationary and consistent across
    frames, hence the backward adaptive approach is used to maintain and
    update the contextual models.
    
    It achieves coding [1;31mperf[mormance gains (on top of enabling rectangular
    block sizes):
    derf:   0.242%
    yt:     0.391%
    hd:     0.376%
    stdhd:  0.645%
    
    Change-Id: Ie513d9673337f0d27abd65fb566b711d0844ec2e

[33mcommit 148eb803bbb3de3a8548445fe50c120ea872a882[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Apr 4 09:56:02 2013 -0700

    Optimize the scaling calculation
    
    In decoder, the scaling calculation, such as (mv * x_num / x_den),
    is fairly time-consuming. In this patch, we check if the scaling
    happens or not at frame level, and then decide which function to
    call to skip scaling calculation when no scaling is needed. Tests
    showed a 3% decoder [1;31mperf[mormance gain.
    
    Change-Id: I270901dd0331048e50368cfd51ce273dd82b8733

[33mcommit 12bf0796e6a4ad75d9ffb2768c362c584441ea05[m
Author: Jingning Han <jingning@google.com>
Date:   Sat Apr 6 10:00:53 2013 -0700

    Clamp inferred motion vectors only
    
    Clamp only the motion vectors inferred from neighboring reference
    macroblocks. The motion vectors obtained through motion search in
    NEWMV mode are constrained during the search process, which allows
    a relatively larger referencing region than the inferred mvs.
    Hence further clamping the best mv provided by the motion search may
    affect the efficacy of NEWMV mode.
    
    Synchronized the decoding process. The decoded mvs in NEWMV modes
    should be guaranteed to fit in the effective range. Put a mv range
    clamping function there for security purpose.
    
    This improves the coding [1;31mperf[mormance of high motion sequences, e.g.,
    derf set:
    foreman 0.233%
    husky   0.175%
    icd     0.135%
    mother_daughter 0.337%
    pamphlet        0.561%
    
    stdhd set:
    blue_sky 0.408%
    city     0.455%
    also saw sunflower goes down by -0.469%.
    
    Change-Id: I3fcbba669e56dab779857a8126a91b926e899cb5

[33mcommit 4ca882f32fb7f45044ccf01db0f4a40c52e5fcca[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Apr 3 12:22:50 2013 -0700

    Modify vp9_setup_interp_filters function
    
    Took vp9_setup_scale_factors_for_frame() out from
    vp9_setup_interp_filters(), so that it is only called once per
    frame instead of per macroblock. Decoder tests showed a 1.5%
    [1;31mperf[mormance gain.
    
    Change-Id: I770cb09eb2140ab85132f82aed388ac0bdd3a0aa

[33mcommit fe9b5143ba5192b5dc488bb3c86ffeea3dc481f0[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Mar 26 15:23:30 2013 -0700

    Framework changes in nzc to allow more flexibility
    
    The patch adds the flexibility to use standard EOB based coding
    on smaller block sizes and nzc based coding on larger blocksizes.
    The tx-sizes that use nzc based coding and those that use EOB based
    coding are controlled by a function get_nzc_used().
    By default, this function uses nzc based coding for 16x16 and 32x32
    transform blocks, which seem to bridge the [1;31mperf[mormance gap
    substantially.
    
    All sets are now lower by 0.5% to 0.7%, as opposed to ~1.8% before.
    
    Change-Id: I06abed3df57b52d241ea1f51b0d571c71e38fd0b

[33mcommit fd18d5dffee14e986243932dd54b20e1f27f9cba[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Mar 13 11:03:17 2013 -0700

    Modeling default coef probs with distribution
    
    Replaces the default tables for single coefficient magnitudes with
    those obtained from an appropriate distribution. The EOB node
    is left unchanged. The model is represeted as a 256-size codebook
    where the index corresponds to the probability of the Zero or the
    One node. Two variations are implemented corresponding to whether
    the Zero node or the One-node is used as the peg. The main advantage
    is that the default prob tables will become considerably smaller and
    manageable. Besides there is substantially less risk of over-fitting
    for a training set.
    
    Various distributions are tried and the one that gives the best
    results is the family of Generalized Gaussian distributions with
    shape parameter 0.75. The results are within about 0.2% of fully
    trained tables for the Zero peg variant, and within 0.1% of the
    One peg variant.
    
    The forward updates are optionally (controlled by a macro)
    model-based, i.e. restricted to only convey probabilities from the
    codebook. Backward updates can also be optionally (controlled by
    another macro) model-based, but is turned off by default. Currently
    model-based forward updates work about the same as unconstrained
    updates, but there is a drop in [1;31mperf[mormance with backward-updates
    being model based.
    
    The model based approach also allows the probabilities for the key
    frames to be adjusted from the defaults based on the base_qindex of
    the frame. Currently the adjustment function is a placeholder that
    adjusts the prob of EOB and Zero node from the nominal one at higher
    quality (lower qindex) or lower quality (higher qindex) ends of the
    range. The rest of the probabilities are then derived based on the
    model from the adjusted prob of zero.
    
    Change-Id: Iae050f3cbcc6d8b3f204e8dc395ae47b3b2192c9

[33mcommit bd9cd9a1859aa464b3092f2023b3a4040166572d[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue Mar 12 19:03:05 2013 -0700

    fix su[1;31mperf[mrame index marker masks
    
    The su[1;31mperf[mrame index marker byte carries data in the lower 5 bits. Only the
    upper 3 should be used as part of the mask to detect it. By masking with
    0xf0, the previous code was incorrect for frames over 65k bytes.
    
    Change-Id: I6248889f5af227457f359a56b2348ef6db87a3b4

[33mcommit c11313e31e41e8167dd93c2e2072ba925fa86687[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue Mar 12 16:33:38 2013 -0700

    fix su[1;31mperf[mrame index with lagged encoding
    
    If a su[1;31mperf[mrame (ARF) is generated while flushing the lagged frames
    at the end of the clip, the buffer pointer wasn't being properly
    updated to account for the size of the index, causing the next
    frame to overwrite the index on the previous frame.
    
    Change-Id: Ib158cc8e4183d663bdfb9ba002dd4c98916abdc9

[33mcommit a2c6f6e94592fbc0df239bd17c65454d07572453[m
Merge: 21ba242bf 872fc3ded
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Mar 12 16:00:30 2013 -0700

    Merge "disambiguate su[1;31mperf[mrame index in vp9_stop_encode()" into experimental

[33mcommit 872fc3ded88da483e723d5aa0a19993dff191fc7[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue Mar 12 14:30:18 2013 -0700

    disambiguate su[1;31mperf[mrame index in vp9_stop_encode()
    
    If the bool-coded partition naturally ends in a byte that matches the
    su[1;31mperf[mrame index marker, it could lead to a parse error. This commit
    ensures that if such a marker is seen, it is padded out with an
    additional zero byte to disambiguate it.
    
    Change-Id: Id977de05745b6fa9ef08afb71e210a2a3ecca02e

[33mcommit 0a18228274fe0b648ce76456ca28987257a93f0a[m
Merge: e6d5ad6ea 522d4bf85
Author: John Koleszar <jkoleszar@google.com>
Date:   Mon Mar 11 16:31:48 2013 -0700

    Merge "Add 'su[1;31mperf[mrame' index" into experimental

[33mcommit bd84685f7841f4f571f063a18b96d53e0fdef8cc[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Sun Mar 10 13:39:30 2013 -0700

    Optimize vp9_tree_probs_from_distribution
    
    The previous implementation visited each node in the tree multiple times
    because it used each symbol's encoding to revisit the branches taken and
    increment its count. Instead, we can traverse the tree depth first and
    calculate the probabilities and branch counts as we walk back up. The
    complexity goes from somewhere between O(nlogn) and O(n^2) (depending on
    how balanced the tree is) to O(n).
    
    Only tested one clip (256kbps, CIF), saw 13% decoding [1;31mperf[m improvement.
    
    Note that this optimization should port trivially to VP8 as well. In VP8,
    the decoder doesn't use this function, but it does routinely show up
    on the profile for realtime encoding.
    
    Change-Id: I4f2848e4f41dc9a7694f73f3e75034bce08d1b12

[33mcommit 2a5278bdbdc908ac994edb4dd2ba71c11eec6364[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Mar 6 12:02:15 2013 -0800

    Extend diff MV limit from +/-256 to +/-1024
    
    Increase the motion search range by 4x. Change MV_CLASS tree of the
    entropy coding to allow two additional mv classes to cover the
    extended motion vector limit. The codec determines the effective
    motion search range conditioned on the actual frame dimension.
    
    It provides coding gains:
    
    stdhd 0.39%
    yt    0.56%
    hd    0.47%
    
    Major coding [1;31mperf[mormance gains are packed in several sequences with
    intense motion activities, e.g., ped_1080p gains 7% at high bit-rates,
    and on average 3%.
    
    TODO: Need to further tune the rate control and motion search units.
    
    Change-Id: Ib842540a6796fbee5a797809433ef6a477c6d78d

[33mcommit f2407826503b53d05447f015811153e4fb4304d5[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Mar 7 15:48:14 2013 -0800

    Optimize add_constant_residual function
    
    Optimized adding constant diff to predictor, which gave about
    2% decoder [1;31mperf[mormance gain.
    
    Change-Id: I47db20c31428e8c4a8f16214a85cbe386a6e9303

[33mcommit 943c6d7172d30b41860edb3aeba13dc04b81fba8[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Mar 5 14:38:00 2013 -0800

    Optimize add_residual function
    
    Optimized adding diff to predictor, which gave 0.8% decoder
    [1;31mperf[mormance gain.
    
    Change-Id: Ic920f0baa8cbd13a73fa77b7f9da83b58749f0f8

[33mcommit 93e10c8e87704e2e36aa3005995051dddea64911[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue Mar 5 13:44:56 2013 -0800

    Update ResizeInternalTest threshold
    
    Improved coding [1;31mperf[mormance made this test fail. Adjust the threshold
    so that it passes again. A more stable metric is an open TODO.
    
    Change-Id: I56e18749ced48123ee2488888a3eed631759912b

[33mcommit 522d4bf852c484579de0591879a1d006abf08959[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue Mar 5 12:23:34 2013 -0800

    Add 'su[1;31mperf[mrame' index
    
    A 'su[1;31mperf[mrame' is a group of frames that share the same PTS, but have a
    defined decoding order. This commit adds the ability to append an index
    to such a group of frames, allowing for random access to the constituent
    frames. This could be useful for frame-level parallelism or partial
    decoding in a multilayer scenario.
    
    Decoding the stream serially without such an index should work as a
    fallback, and VP9/TestSu[1;31mperf[mrameIndexIsOptional verifies that.
    
    Change-Id: Idff83b7560e1a7077d8fb067bfbc45b567e78b1c

[33mcommit e8bc9f4220016a52ae3147f87f134f066df2a6e4[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Mar 4 12:01:27 2013 -0800

    Optimize vp9_short_idct4x4llm function
    
    Wrote a SSE2 vp9_short_idct4x4llm to improve the decoder
    [1;31mperf[mormance.
    
    Change-Id: I90b9d48c4bf37aaf47995bffe7e584e6d4a2c000

[33mcommit c550bb3b09e516fdb4ec574d2f5b9b803a7cd19d[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Feb 28 16:32:05 2013 -0800

    Add eob<=10 case in idct32x32
    
    Simplified idct32x32 calculation when there are only 10 or less
    non-zero coefficients in 32x32 block. This helps the decoder
    [1;31mperf[mormance.
    
    Change-Id: If7f8893d27b64a9892b4b2621a37fdf4ac0c2a6d

[33mcommit 35bc02c6eb22602997d9c8aebeb46ef588266cc4[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Feb 26 16:27:41 2013 -0800

    Optimize vp9_dc_only_idct_add_c function
    
    Wrote SSE2 version of vp9_dc_only_idct_add_c function. In order to
    improve [1;31mperf[mormance, clipped the absolute diff values to [0, 255].
    This allowed us to keep the additions/subtractions in 8 bits.
    Test showed an over 2% decoder [1;31mperf[mormance increase.
    
    Change-Id: Ie1a236d23d207e4ffcd1fc9f3d77462a9c7fe09d

[33mcommit 65821d668038d69b7b813616a02ffd97f7563821[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Feb 25 12:08:29 2013 -0800

    Improving the forward 16x16 ADST/DCT accuracy
    
    Increase the first stage dynamic range by 4 times, and reduce it
    back with proper rounding before applying the second stage. Hence
    it still fits in the given dynamic range and slightly improves
    the key frame coding [1;31mperf[mormance.
    
    Change-Id: Ia4c5907446f20a95dc3de079c314b3ad1221d8aa

[33mcommit cd907b160133296b74c249537fc636e7462d21d2[m
Author: Jingning Han <jingning@google.com>
Date:   Sat Feb 16 14:08:36 2013 -0800

    16x16 butterfly inverse ADST/DCT hybrid transform
    
    rebased.
    
    This patch includes 16x16 butterfly inverse ADST/DCT hybrid
    transform. It uses the variant ADST of kernel
        sin((2k+1)*(2n+1)/4N),
    which allows a butterfly implementation.
    
    The coding gains as compared to DCT 16x16 are about 0.1% for
    both derf and std-hd. It is noteworthy that for std-hd sets
    many sequences gains about 0.5%, some 0.2%. There are also few
    points that provides -1% to -3% [1;31mperf[mormance. Hence the average
    goes to about 0.1%.
    
    Change-Id: Ie80ac84cf403390f6e5d282caa58723739e5ec17

[33mcommit 30f866f44b4ba2bceb4421eecc541842ff0eb972[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Feb 13 09:15:38 2013 -0800

    WIP: ssse3 version of convolve avg functions
    
    Initial ssse3 convolve avg functions and is one step closer
    to using x86inc.asm.  The decoder [1;31mperf[mormance improved by 8% for
    the test clip used.  This should be revisited later to see if
    averaging outside the loop is better than having many similar
    filter functions.
    
    Change-Id: Ice3fafb423b02710b0448ffca18b296bcac649e9

[33mcommit 29d47ac80eb934368dee41d2a7e6265aa8ccee9c[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Thu Feb 7 17:00:37 2013 -0800

    Restore SSSE3 subpixel filters in new convolve framework
    
    This commit adds the 8 tap SSSE3 subpixel filters back into the code
    underneath the convolve API. The C code is still called for 4x4
    blocks, as well as compound prediction modes. This restores the
    encode [1;31mperf[mormance to be within about 8% of the baseline.
    
    Change-Id: Ife0d81477075ae33c05b53c65003951efdc8b09c

[33mcommit d15e1da4940f813311035c3ed101a9c69f15b527[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Feb 5 12:37:13 2013 -0800

    Butterfly ADST based hybrid transform
    
    Refactor the 8x8 inverse hybrid transform. It is now consistent
    with the new inverse DCT. Overall [1;31mperf[mormance loss (due to the
    use of this variant ADST, and the rounding errors in the butterfly
    implementation) for std-hd is -0.02.
    
    Fixed BUILD warning.
    
    Devise a variant of the original ADST, which allows butterfly
    computation structure. This new transform has kernel of the
    form: sin((2k+1)*(2n+1) / (4N)). One of its butterfly structures
    using floating-point multiplications was reported in Z. Wang,
    "Fast algorithms for the discrete W transform and for the discrete
    Fourier transform", IEEE Trans. on ASSP, 1984.
    
    This patch includes the butterfly implementation of the inverse
    ADST/DCT hybrid transform of dimension 8x8.
    
    Change-Id: I3533cb715f749343a80b9087ce34b3e776d1581d

[33mcommit 7a07eea13fc94036f54cdb6f1233b9af8b094ced[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Mon Jan 28 16:59:03 2013 -0800

    Convert subpixel filters to use convolve framework
    
    Update the code to call the new convolution functions to do subpixel
    prediction rather than the existing functions. Remove the old C and
    assembly code, since it is unused. This causes a 50% [1;31mperf[mormance
    reduction on the decoder, but that will be resolved when the asm for
    the new functions is available.
    
    There is no consensus for whether 6-tap or 2-tap predictors will be
    supported in the final codec, so these filters are implemented in
    terms of the 8-tap code, so that quality testing of these modes
    can continue. Implementing the lower complexity algorithms is a
    simple exercise, should it be necessary.
    
    This code produces slightly better results in the EIGHTTAP_SMOOTH
    case, since the filter is now applied in only one direction when
    the subpel motion is only in one direction. Like the previous code,
    the filtering is skipped entirely on full-pel MVs. This combination
    seems to give the best quality gains, but this may be indicative of a
    bug in the encoder's filter selection, since the encoder could
    achieve the result of skipping the filtering on full-pel by selecting
    one of the other filters. This should be revisited.
    
    Quality gains on derf positive on almost all clips. The only clip
    that seemed to be hurt at all datarates was football
    (-0.115% PSNR average, -0.587% min). Overall averages 0.375% PSNR,
    0.347% SSIM.
    
    Change-Id: I7d469716091b1d89b4b08adde5863999319d69ff

[33mcommit 5780c4cbd592c92da567609f737dbf823b055cd6[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Mon Feb 4 16:49:17 2013 -0800

    Added vp9_short_idct1_32x32_c
    
    and called this function in vp9_dequant_idct_add_32x32_c when
    eob == 1.  For the test clip used, the decoder [1;31mperf[mormance improved
    by 21+%.  Based on Yaowu's 16 point idct work.
    
    Change-Id: Ib579a90fed531d45777980e04bf0c9b23c093c43

[33mcommit 9d4c26531b600a98c236833269a4ca81e1cc0d39[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Thu Jan 24 17:09:56 2013 -0800

    Added eob == 0 check to vp9_dequant_idct_add_32x32_c
    
    Added a quick eob == 0 check.  Once the integer version of the dct32x32 is
    complete, we can check for other eob cases.
    
    For the 1080p clip used, the decoder [1;31mperf[mormance improved by 4%.
    
    Change-Id: I9390b6ed3c8be0c0c0a0c44c578d9a031d6e026e

[33mcommit 6a997400ff863e473dbdace0f4ac0d211946251f[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Jan 23 09:31:40 2013 -0800

    Intrinsic version of loopfilter now matches C code
    
    Updated the instrinsic code to match Yaowu's latest loopfilter change.
    (I584393906c4f5f948a581d6590959522572743bb)
    
    The decoder [1;31mperf[mormance improved by ~30% for the test clip used.
    
    Change-Id: I026cfc75d5bcb7d8d58be6f0440ac9e126ef39d2

[33mcommit b95ed6883a3ade47044fbf6b2ee6470f1bac53ed[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jan 17 13:26:24 2013 -0800

    a minor change to a portion of loop filtering
    
    The loop filtering used for MB edge or internal edge of a MB using 8x8
    tranform was reading 5 pixel each side and writting 3 pixel each side.
    With suggestion from Aki and Scott on hardware&software [1;31mperf[mormance,
    this commit changed to read 4 pixel each side and write 3 pixel each
    side.
    
    Change-Id: I584393906c4f5f948a581d6590959522572743bb

[33mcommit b20ce07d76d9b8fa2230bfccdd11324b565e39c0[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Fri Jan 11 17:11:04 2013 -0800

    WIP: Added sse2 version of vp9_mb_lpf_horizontal_edge_w
    
    and vp9_mb_lpf_vertical_edge_w_sse2.  This was quickly done so we can
    run some tests over the weekend.  Future commits will optimize/refactor these
    functions further.
    
    The decoder [1;31mperf[mormance improved by ~17% for the clip used.
    
    Change-Id: I612687cd5a7670ee840a0cbc3c68dc2b84d4af76

[33mcommit 4987c0f07e1791099fe87199b27a2804079f62f0[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Fri Jan 11 14:54:14 2013 -0800

    Initial sse2 version of the wide loopfilters
    
    Updated the rtcd_defs and used the sse2 uv version
    of the loopfilter.  The [1;31mperf[mormance improved by ~8%
    for the test clip used.
    
    Change-Id: I5a0bca3b6674198d40ca4a77b8cc722ddde79c36

[33mcommit b575394e215ea46c9885992d85c3047de5171f4c[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Dec 12 15:49:39 2012 -0800

    Improved vp9_ihtllm_c
    
    As suggested by Yaowu, we can use eob to reduce the complexity
    of the vp9_ihtllm_c function.  For the 1080p test clip used, the decoder
    [1;31mperf[mormance improved by 17%.
    
    Change-Id: I32486f2f06f9b8f60467d2a574209aa3a3daa435

[33mcommit d984763867f82879783c5b88615d9a458e3e7ad0[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Mon Dec 10 12:07:59 2012 -0800

    configure: add --enable-external-build support
    
    First attempt at avoiding all the compile-time environment detection for
    cases where you can generate the environments statically, as when the
    real build is being [1;31mperf[mormed by another build system.
    
    Change-Id: Ie3cf95d71d6c5169900f31e263b84bc123cdf73f

[33mcommit 3e0ea7f6e1cec3c785312a140a72b120ff831ff0[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Mon Dec 3 10:20:11 2012 -0800

    vp9: Remove su[1;31mperf[mluous command.
    
    - vpx_calloc is called on arf_not_zz above.
    - Note The removed vpx_memset call had an issue with sizeof.
    
    Change-Id: I86fd7a167d0a042e581e613e2a6c0b5e63073fc6

[33mcommit be08b5af1a74ff82499e79cb312c6d48d149c671[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Nov 29 15:26:56 2012 -0800

    Minor refactoring of superblock decoding
    
    Refactoring for improved readability - no bitstream or
    [1;31mperf[mormance change.
    
    Change-Id: I4488ed4715f8dbe38c66431106478669041b8b33

[33mcommit d2021386214242d1553e686d704d9b4e127490c7[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Nov 27 19:16:32 2012 -0800

    Further improve macroblock loop filters
    
    This change included:
    1. Aligned reads in vp9_mbloop_filter_vertical_edge function.
    Since we actually read 16 bytes, we can align the reads to read
    starting at (s - 8) instead of (s - 5).
    2. Combined u, v loop filters.
    3. Added 8x16 transpose.
    
    This gave 2% decoder [1;31mperf[mormance gain (tulip clip).
    
    Change-Id: Ib14c2f1645c4a3436df17fe2f24789506bf0bb58

[33mcommit e7cd80718b04c03d5ce21f13981712704b36fc66[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Nov 20 16:28:08 2012 -0800

    Improve sad3x16 SSE2 function
    
    Vp9_sad3x16_sse2() is heavily called in decoder, in which the
    unaligned reads consume lots of cpu cycles. When CONFIG_SUBPELREFMV
    is off, the unaligned offset is 1. In this situation,
    we can adjust the src_ptr to be 4-byte aligned, and then do the
    aligned reads. This reduced the reading time significantly. Tests
    on 1080p clip showed over 2% decoder [1;31mperf[mormance gain with
    CONFIG_SUBPELREFM off.
    
    Change-Id: I953afe3ac5406107933ef49d0b695eafba9a6507

[33mcommit e60478d46d9a692e2e7b90b35355660682bfe58b[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Nov 9 17:50:13 2012 -0800

    Optimize 8x8 dequant and idct
    
    Similar to 16x16 dequant and idct, based on the value of eobs, the
    8x8 dequant and idct calculation was simplified to improve decorder
    [1;31mperf[mormance.
    
    Combined vp9_dequant_idct_add_8x8 and vp9_dequant_dc_idct_add_8x8
    to eliminate duplicate code.
    
    Change-Id: Ia58e50ab27f7012b7379c495837c9c0b5ba9cf7f

[33mcommit 6c17c9fae0f54942abe480414b4c0db7b2476412[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Nov 6 16:06:22 2012 -0800

    Optimize 16x16 dequant and idct
    
    As suggested by Yaowu, simplified 16x16 dequant and idct. In decoder,
    after detoken step, we know the number of non-zero dct coefficients
    (eobs) in a macroblock. Idct calculation can be skipped or simplified
    based on eobs, which improves the decoder [1;31mperf[mormance.
    
    Change-Id: I9ffa1cb134bcb5a7d64fcf90c81871a96d1b4018

[33mcommit ce811f87c49d8dbd0f11895d1105310fe061bc5f[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Thu Oct 25 17:24:50 2012 -0700

    Faster 8t filtering
    
    Quickly modified the ssse3 sixtap filters to support eight taps.  For the test
    clip used, a 23+% boost in decoder [1;31mperf[mormance was seen.  We can
    revisit later and improve further.
    
    Change-Id: I5f59860459e80d6fa23e6cc0fd91296a969f5240

[33mcommit d3465a53523878052f75cc80fe7603b3fcaff2aa[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Mon Oct 22 16:38:58 2012 -0700

    Added sse2 instrinsic version of vp8_sad3x16
    
    1.6% boost in decoder [1;31mperf[mormance for the clip used.
    
    Change-Id: I91f3c4573fd3d10afbf18930f279af7ae2223e3a

[33mcommit 9ba2efd0340c2e0b9a3ac46ac1c94563552a112b[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Mon Oct 22 16:16:04 2012 -0700

    Added sse2 instrinsic version of vp8_sad16x3
    
    3.7% boost in decoder [1;31mperf[mormance for the clip used.
    
    Change-Id: I74f28486a9352b472b36e21b5eaf30eff35e9199

[33mcommit 085433c2d057e60cf140da903c7bf0c021bd87d1[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Fri Oct 19 15:52:12 2012 -0700

    sse2 intrinsic version of vp8_mbloop_filter_vertical_edge()
    
    First sse2 version of vp8_mbloop_filter_vertical_edge().  For now,
    intrinsics are being used until the bitstream is finalized.  This function
    will be revisited later for further [1;31mperf[mormance improvements.
    
    For the test clip used, a 34+% decoder [1;31mperf[mormance improvement
    was seen.  This will vary depending on material.
    
    Change-Id: I455b438bc8d8af76cf7533ac42eda5f689b21f7c

[33mcommit 992b5e2d95b0071ee2bde5cad92a5807a600d89d[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Thu Oct 18 14:29:26 2012 -0700

    sse2 intrinsic version of vp8_mbloop_filter_horizontal_edge()
    
    First sse2 version of vp8_mbloop_filter_horizontal_edge().  For now,
    intrinsics are being used until the bitstream is finalized.  This function
    will be revisited later for further [1;31mperf[mormance improvements.
    For the test clip used, a 31+% decoder [1;31mperf[mormance improvement
    was seen.  This will vary depending on material.
    
    Change-Id: I03ed3a7182478bdd1f094644ff3e0442625600e7

[33mcommit 00f9eb659034cb5cef0bf063c1b72c72c6333f36[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Jul 26 13:42:07 2012 -0700

    New motion vector entropy coding
    
    Adds a new experiment with redesigned/refactored motion vector entropy
    coding. The patch also takes a first step towards separating the
    integer and fractional pel components of a MV. However the fractional
    pel encoding still depends on the integer pel part and so they are
    not fully independent. Further experiments are in progress to see
    how much they can be decoupled without affecting [1;31mperf[mormance.
    All components including entropy coding/decoding, costing for MV
    search, forward updates and backward updates to probability tables,
    have been implemented.
    
    Results so far:
    derf: +0.19%
    std-hd: +0.28%
    yt: +0.80%
    hd: +1.15%
    
    Patch: Simplifies the fractional pel models:
    derf: +0.284%
    std-hd: +0.289%
    yt: +0.849%
    hd: +1.254%
    
    Patch: Some changes in the models, rebased.
    derf: +0.330%
    std-hd: +0.306%
    yt: +0.816%
    hd: +1.225%
    
    Change-Id: I646b3c48f3587f4cc909639b78c3798da6402678

[33mcommit de6dfa6bb0cd680ca446a15b52b2a026859eb1e6[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 29 11:25:38 2012 -0700

    hybrid transform of 16x16 dimension
    
    Enable ADST/DCT of dimension 16x16 for I16X16 modes. This change provides
    benefits mostly for hd sequences.
    
    Set up the framework for selectable transform dimension.
    
    Also allowing quantization parameter threshold to control the use
    of hybrid transform (This is currently disabled by setting threshold
    always above the quantization parameter. Adaptive thresholding can
    be built upon this, which will further improve the coding [1;31mperf[mormance.)
    
    The coding [1;31mperf[mormance gains (with respect to the codec that has all
    other configuration settings turned on) are
    
    derf:   0.013
    yt:     0.086
    hd:     0.198
    std-hd: 0.501
    
    Change-Id: Ibb4263a61fc74e0b3c345f54d73e8c73552bf926

[33mcommit 60ed954535e1beb6283ba8674cf65565cbd66bba[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Aug 16 13:25:49 2012 -0700

    Fixed decoder mismatch issue
    
    Resolved the decoder mismatch issue due to quantization parameter
    threshold for hybrid transform coding. The macroblock dequantizer
    initialization is moved to be [1;31mperf[mormed before coefficient
    detokenization, since the (de)tokenization is now dependent on the
    macroblock level quantization parameter.
    
    Change-Id: I443da4992ebb70ae4114750b2f1363c0c628580e

[33mcommit 66f440f1ee6c993eff908da9c75cc2ae9de08775[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Aug 6 14:48:11 2012 -0700

    Refactoring hybrid transform coding
    
    The forward and inverse hybrid transforms are now [1;31mperf[mormed using
    single function modules, where the dimension is sent as argument.
    
    Added an inline function clip8b to clip the reconstruction pixels
    into range of 0-255.
    
    Change-Id: Id7d870b3e1aefc092721c80c0af6f641eb5f3747

[33mcommit e44ee38aef85e48601e54a13939f2a299bb583e0[m
Author: Hui Su <huisu@google.com>
Date:   Wed Jun 13 19:03:31 2012 -0700

    Add lossless compression mode.
    
    This commit adds lossless compression capability to the experimental
    branch. The lossless experiment can be enabled using --enable-lossless
    in configure. When the experiment is enabled, the encoder will use
    lossless compression mode by command line option --lossless, and the
    decoder automatically recognizes a losslessly encoded clip and decodes
    accordingly.
    
    To achieve the lossless coding, this commit has changed the following:
        1. To encode at lossless mode, encoder forces the use of unit
    quantizer, i.e, Q 0, where effective quantization is 1. Encoder also
    disables the usage of 8x8 transform and allows only 4x4 transform;
        2. At Q 0, the first order 4x4  DCT/IDCT have been switched over
    to a pair of forward and inverse Walsh-Hadamard Transform
    (http://goo.gl/EIsfy),  with proper scaling applied to match the range
    of the original 4x4 DCT/IDCT pair;
        3. At Q 0, the second order remains to use the previous
    walsh-hadamard transform pair. However, to maintain the reversibility
    in second order transform at Q 0, scaling down is applied to first
    order DC coefficients prior to forward transform, and scaling up is
    applied to the second order output prior to quantization. Symmetric
    upscaling and downscaling are added around inverse second order
    transform;
        4. At lossless mode, encoder also disables a number of minor
    features to ensure no loss is introduced, these features includes:
            a. Trellis quantization optimization
            b. Loop filtering
            c. Aggressive zero-binning, rounding and zero-bin boosting
            d. Mode based zero-bin boosting
    
    Lossless coding test was [1;31mperf[mormed on all clips within the derf set,
    to verify that the commit has achieved lossless compression for all
    clips. The average compression ratio is around 2.57 to 1.
    (http://goo.gl/dEShs)
    
    Change-Id: Ia3aba7dd09df40dd590f93b9aba134defbc64e34

[33mcommit 959b296a40a8b2111cff474e039034fc41f17aa9[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri May 11 17:48:20 2012 -0700

    Don't use compound prediction for golden frames based on alt-ref frames.
    
    These frames can force reference frame (arf), mode (zeromv) and skip,
    which means that if we use compound prediction (i.e. arf+last), we
    might use a blend of a [1;31mperf[mect (arf) and an im[1;31mperf[mect (last) predictor,
    leading to semi-garbage display and thus a huge drop in SSIM/PSNR (up
    to 10dB for some frames I analyzed).
    
    Gives a +0.2% gain on YT.
    
    Change-Id: If1f2b7899ad165684af3808fd379295e82558cbb

[33mcommit 8266abfe96cb1b46f537aec66b3dfcf22da2bb1c[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Feb 9 15:44:18 2012 +0000

    Dual pred flag
    
    Further changes to make experiments with the context
    used for coding the dual pred flag easier.
    
    Current best [1;31mperf[morming method tested on derf is a two
    element context based on reference frame. I also tried
    various combinations of mode and reference frame as
    shown in commented out case using up to 6 contexts.
    
    Derf +0.26 overall psnr +0.15% ssim vs original method.
    
    Change-Id: I64c21ddec0abbb27feaaeaa1da2e9f164ebaca03

[33mcommit 57d521a09585dc4ddd8ca280339450e1f3eaf70c[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Jan 30 09:27:44 2012 -0800

    Refining the 8-tap interpolation filters.
    
    Fixes a rounding issue with the 8-tap filters, which allows us to
    use sharper filters that before with a little better [1;31mperf[mormance.
    Results on derf (0verall gain 0.76):
    http://www.corp.google.com/~debargha/vp8_results/enhinterp.html
    Results on a 720P set (Overall gain 0.61):
    http://www.corp.google.com/~debargha/vp8_results/enhinterp_hd.html
    
    Change-Id: I4cd7bdf3583db974dc5589fa64857bc31ac861fa

[33mcommit d39b5d05462c4b0755dd93814e887bda22b7327c[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Nov 21 15:45:10 2011 +0000

    Removal of Qindex LUTS.
    
    One of the problems arising when tweaking or adjusting the quantizer
    tables is that there are a lot of look up tables that depend on the QINDEX.
    Any adjustment to the link between QINDEX and real quantizer therefore tends
    to break aspects of for example the rate control.
    
    In this check in I have replaced several of the look up tables with functions that
    approximate the same results as the old Q luts but use a formulaic approach
    based on real Q values rather than QIndex. This should hopefully make it easier
    to experiment with changes to the Q tables without always having to go through
    and hand optimize a set of look up tables. Once things stabilize we may choose
    to re-instate luts for the sake of [1;31mperf[mormance.
    
    Patch 2:
        Addressed Ronald's comments.
        vp8_init_me_luts() Added so luts only initialized once.
    
    Change-Id: Ic80db2212d2fd01e08e8cb5c7dca1fda1102be57
For keyword optim:
[33mcommit 4da2a8b7187618b1d2daf3e56e9d8eacc266fa30[m
Merge: 248cf6f69 1530a6b77
Author: Johann Koenig <johannkoenig@google.com>
Date:   Wed Nov 13 09:00:09 2013 -0800

    Merge "mips dsp-ase r2 vp9 decoder intra module [1;31moptim[mizations (rebase)"

[33mcommit 1530a6b77fadc975f9839316222bf2f28e760bf7[m
Author: Parag Salasakar <img.mips1@gmail.com>
Date:   Wed Nov 13 11:17:14 2013 +0530

    mips dsp-ase r2 vp9 decoder intra module [1;31moptim[mizations (rebase)
    
    Change-Id: Ib27fc4f3dbe01fe8adfa04a61aaba21b3480e75c

[33mcommit 248cf6f69f73d581595ccdb92f86c8f6b16381b4[m
Author: Parag Salasakar <img.mips1@gmail.com>
Date:   Wed Nov 13 10:53:16 2013 +0530

    mips dsp-ase r2 vp9 decoder loopfilter module [1;31moptim[mizations (rebase)
    
    Change-Id: Ia7f640ca395e8deaac5986f19d11ab18d85eec2d

[33mcommit 8dd3905163c5301e6746d7a8583fd68a714e2992[m
Merge: c88f1ec8c d5a52edc1
Author: Johann Koenig <johannkoenig@google.com>
Date:   Tue Nov 12 15:30:00 2013 -0800

    Merge "Added [1;31moptim[mized vp9_idct32x32_34_add_dspr2"

[33mcommit 34b6abefa2c2e78d85adca528fd8eca98a13439c[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Nov 5 21:07:08 2013 -0800

    Enable dual buffer rd search and encoding scheme
    
    This commit enables the dual buffer rate-distortion [1;31moptim[mization
    and encoding scheme. It stacks the original transform coefficients,
    quantized levels, and reconstructed coefficients, in the rate-
    distortion [1;31moptim[mization search process, hence eliminates the need
    to re-run residual generation, forward transform, and quantization
    in the encoding stage.
    
    Change-Id: I011bfad3a59a380a869ee552e91dae0394ec492e

[33mcommit b45438181c1ec6e448715ba6f8f74c79680de0a4[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Nov 8 16:12:04 2013 -0800

    Rewrite filter_selectively_horiz for parallel loopfiltering
    
    Added loop filter mask checking, and made the caller function
    ready for implementation of parallel loopfiltering in horizontal
    direction.
    
    Next, we need to go through the loopfilter functions (both c and
    [1;31moptim[mized versions), and provide 16-byte wide loopfiltering for
    each filter type.
    
    Change-Id: Ifef47e7ef9086ebc2fd6ca7ede8f27c9bbf79e66

[33mcommit d8b4c7927075bfb2f29c54e6ff7d9fc3a52e2436[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Oct 31 12:21:49 2013 -0700

    Decouple macroblockd_plane buffer usage
    
    Make the macroblockd_plane contain dynamic buffer pointers instead
    static pointers to the memory space allocated therein. The decoder
    uses the buffer allocated in pbi, while encoder will use a dual
    buffer approach for rate-distortion [1;31moptim[mization search.
    
    Change-Id: Ie6f24be2dcda35df7c15b4014e5ccf236fb3f76c

[33mcommit 103c4603d2aa366bb8064da29da490b3eb79f307[m
Merge: 278856319 9f37d8903
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Nov 6 10:25:52 2013 -0800

    Merge "[1;31moptim[mize decode_bool operation"

[33mcommit 9f37d89037a69798d89fd984b4bff861d5eba28c[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Nov 4 14:56:37 2013 -0800

    [1;31moptim[mize decode_bool operation
    
    Change-Id: I7fe44633d29046ddd38c88c00e8520d27ac748bf

[33mcommit a272530bf0962d4cbf54fdb8abd1051f8fbb5917[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Nov 1 07:24:07 2013 -0700

    Two [1;31moptim[mizations:
    
    1. Reduced the size memset based on eob for 32x32 transform. The reset
    of non-zero coefficient should probably go into where they are read in
    inverse transform functions. (TODO)
    2. Removed a redundant level of indirection.
    vp9_iht4x4_add() checks transform type and call vp9_iht4x4_16_add()
    for tranforms other than DCT_DCT. In this case, the DCT_DCT case
    has been already handled here.
    
    Change-Id: Iacbc77da761f0b308df5acea0f20c9add9f33d20

[33mcommit d51571614067da1cc185176a42a586e9373c67a4[m
Merge: d03b3cbdd 54f920565
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Oct 31 10:43:57 2013 -0700

    Merge "mb_lpf_horizontal_edge AVX2 [1;31moptim[mization"

[33mcommit 54f9205653491d5087f63bd15ee05cd1e4ff0d73[m
Author: Tamar Levy <tamar.levy@intel.com>
Date:   Wed Oct 30 09:04:31 2013 -0600

    mb_lpf_horizontal_edge AVX2 [1;31moptim[mization
    
    This CL contains two AVX2 [1;31moptim[mized loop filter functions,
    mb_lpf_horizontal_edge_w_avx2_8 and mb_lpf_horizontal_edge_w_avx2_16.
    
    Change-Id: I604e4fe6e99752b7800c2ea98721d97f7e0b931b

[33mcommit d5a52edc117fdedb087034635d601888de553691[m
Author: Parag Salasakar <img.mips1@gmail.com>
Date:   Thu Oct 31 12:12:34 2013 +0530

    Added [1;31moptim[mized vp9_idct32x32_34_add_dspr2
    
    Change-Id: I2ba9467525b87a8e4a58f0c546e63031b4e38a4e

[33mcommit 8c8381d5439b0caedec42261d32724612cef7f3e[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 30 13:52:55 2013 -0700

    Enable all-zero coeff block index for sub8x8 blk
    
    This commit makes zcoeff_blk cache the case where the entire block
    is quantized to be zero (without applying zero-forcing) in the rate-
    distortion [1;31moptim[mization loop, and skip the forward DCT, quantization,
    inverse DCT, and reconstruction process in the encode_block stage.
    
    It now works for all the block sizes, including sub8x8 blocks.
    
    Change-Id: I5ae60a9c436ba3637d11666733554bec4580ef98

[33mcommit 502912de3ab0b9a1b6d66eece92443c146f8177c[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Oct 28 09:02:42 2013 -0700

    changed to comply with strict aliasing rule
    
    The clamp operation may not affect the values of the final assigned mv
    where compiler may make use of strict aliasing rule to [1;31moptim[mize out the
    clamp operation. This change made the code segments to better comply
    the strict aliasing rule.
    
    Change-Id: I24502ff18bd4f9e62507a879cc8760a91a0fd07e

[33mcommit 35c4437bf5d9467d4df3c557e94f87f9eadce842[m
Merge: 8a74a9e2f 1699eb0bf
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Oct 24 15:49:31 2013 -0700

    Merge "mips dsp-ase r2 vp9 decoder idct module [1;31moptim[mizations (rebase)"

[33mcommit 1699eb0bf696da635361616a6a485807c7e6c211[m
Author: Parag Salasakar <img.mips1@gmail.com>
Date:   Thu Oct 24 11:29:04 2013 +0530

    mips dsp-ase r2 vp9 decoder idct module [1;31moptim[mizations (rebase)
    
    Change-Id: Iedcdb8867084f328f4fce2fadb968e0984217308

[33mcommit 4e2732c3c3bdeca417008c361a2387399719b3a2[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 23 11:09:27 2013 -0700

    Separate encode_block for pass 1 and 2
    
    The encode_block for pass 1 takes simpler functionalities and can
    save a few branches. The main reason is to make encode_block only
    used after running rate-distortion [1;31moptim[mization search in pass 2,
    hence allowing dual buffer stack approach later.
    
    Change-Id: I9e549ffb758e554fe185e48a07d6e0e01e475bcf

[33mcommit 8e3ce1a9e3ee2139fea89d5508a1d268f20426b7[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Oct 14 16:03:23 2013 -0700

    Re-design all-zero-coeff block index buffer use
    
    Use the zcoeff_blk buffer of PICK_MODE_CONTEXT to store the indexes
    of all-zero-coeff block of the current best mode. Remove the temporary
    buffer best_zcoeff_blk defined in the rate-distortion [1;31moptim[mization
    loop. This improves the speed performance by about 0.5% in all speed
    settings.
    
    Change-Id: Ie3e15988ddfa581eafa2e19a8228d3fe4a46095c

[33mcommit f60a3910c4ab7725dc6dd54877bbdd3ed5f0e187[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Oct 11 11:26:32 2013 -0700

    Move token_cache from cost_coeffs to MACROBLOCK
    
    This commit moves token_cache buffer into macroblock struct, instead
    of defining as a local variable in cost_coeffs. This avoids repeatedly
    re-allocating memory space in the rate-distortion [1;31moptim[mization loop.
    
    The runtime at speed 0 reduces:
    bus 2000kbps, 161692ms to 159951ms
    football 600kbps, 229505ms to 225821ms
    
    Change-Id: If7da6b0b6d8c5138a16271a33c4548fba33d8840

[33mcommit 3a0b59e3fdf6ca2d276cc324519248e97272aa04[m
Merge: 899ab95c8 3fb728c74
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Oct 11 08:44:56 2013 -0700

    Merge "SSE2 8-tap sub-pixel filter [1;31moptim[mization"

[33mcommit ddf1b7620511d21389ca3ef1d6dca2248dc78666[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Oct 10 16:50:43 2013 -0700

    Removing vp9_idct4_1d_sse2 function.
    
    We have two SSE2-[1;31moptim[mized functions for idct4_1d:
      vp9_idct4_1d_sse2 <-- removing this one
      idct4_1d_sse2
    
    vp9_idct4_1d_sse2 was used only by the following functions which already
    have SSE2 [1;31moptim[mized variants:
      vp9_idct4x4_16_add_c   -> vp9_idct4x4_16_add_see2
      idct8_1d               -> vp9_idct8x8_{16, 10, 1}_see2
      vp9_short_iht4x4_add_c -> vp9_short_iht4x4_add_see2
    
    Change-Id: Ib0a7f6d1373dbaf7a4a41208cd9d0671fdf15edb

[33mcommit 83936e8cd51116cbfec9fb73e0a85baf6e3d6175[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Fri Sep 27 13:56:30 2013 -0400

    d207 intra prediction ssse3 using bytes
    
    byte version of ronalds d207 ssse3 [1;31moptim[mizations
    (commit: f891f84d3ba9345b0074e682f0fea09b8ddf4f1e)
    
    Change-Id: If15f71a589ea16f78ac86a501b0c5c6231dc9af1

[33mcommit 3fb728c749db856423633125c5be699e44788724[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Oct 10 13:51:35 2013 -0700

    SSE2 8-tap sub-pixel filter [1;31moptim[mization
    
    To ensure fast encoding/decoding on devices without ssse3 support,
    SSE2 [1;31moptim[mization of sub-pixel filters was done. Test using 1080p
    clip showed the decoder speeds were ~70fps with ssse3 filters, ~60fps
    with sse2 filters, and ~15fps with c filters.
    
    Change-Id: Ie2088f87d83a889fba80a613e4d0e287aadd785c

[33mcommit fc19243cedad003d181266fd41958bf27e6f21ae[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Oct 10 10:37:40 2013 -0700

    Re-design rate-distortion cost tracking buffers
    
    This commit re-designs the per transformed block rate-distortion
    costs tracking buffers. It removes redundant buffer usage, makes
    the needed context memory allocation per VP9_COMP instance and
    reuses the same buffer sets inside the rate-distortion [1;31moptim[mization
    search loop, thereby avoiding repeatedly requiring memory space.
    
    It reduces speed 0 runtime:
    
    bus at 2000 kbps from 166763ms to 158967ms,
    football at 600 kbps from 246614ms to 234257ms.
    
    Both about 5% speed-up. Local tests suggest about 2% to 5% speed-up
    for speed 1 and 2 settings. This does not change compression
    performance.
    
    Change-Id: I363514c5276b5cf9a38c7251088ffc6ab7f9a4c3

[33mcommit eeb5b62dc19aef73c0fb37655253a46b0c4dc602[m
Author: Parag Salasakar <img.mips1@gmail.com>
Date:   Wed Oct 9 18:05:27 2013 +0530

    mips dsp-ase r2 vp9 decoder bilinear convolve [1;31moptim[mizations
    
    Change-Id: Ic31b4ef85e65070b4f8b9f26e068ccfaae00c4f0

[33mcommit 63a92eb66577c068f641026c6d0f9e265f8a1e04[m
Merge: 3b7794f9e b9daef91d
Author: Jingning Han <jingning@google.com>
Date:   Thu Oct 3 17:04:16 2013 -0700

    Merge "Use vp9_zero in sub8x8 RD [1;31moptim[miazion loop"

[33mcommit 2952b7d1fb1cd57ef2a8e4d8f14ce34e79bae036[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Oct 3 14:00:42 2013 -0700

    Remove redundant second_ref_frame check in sub8x8
    
    This commit removes the redundant second reference frame check in
    the rate-distortion [1;31moptim[mization loop for sub8x8 blocks.
    
    Change-Id: I13a57a6f624c4a9bcef02ff2a867fa30d8b44a93

[33mcommit b9daef91d8b52f1dadee4ca1a3a8ff0f1100b190[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Oct 3 12:32:31 2013 -0700

    Use vp9_zero in sub8x8 RD [1;31moptim[miazion loop
    
    Change-Id: Ic23a705e48cadaa7151f2bd8536d56636cb973e3

[33mcommit 11abab356e4c04d4a21ac43f58f9ec05c7c80eca[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 27 16:02:49 2013 -0700

    Refactor inter mode rate-distortion search
    
    This commit separates the rate-distortion [1;31moptim[mization loop of
    superblocks from that of sub8x8 blocks. This allows better design
    rate-distortion [1;31moptim[mization search loop for each setting. It also
    removes the use of SPLITMV and I4X4_PRED therein.
    
    No performance change in speed 0 settings. For bus@CIF at 2000kbps,
    the speed 1 runtime goes from 48009ms to 43894ms (about 10% faster).
    The overall compression performance on derf changed by -0.021%.
    
    Speed 2 runtime goes from 27114ms to 28700ms (6% slower), while the
    overall coding efficiency goes up by 1.629% for derf, 1.236% for yt.
    
    Change-Id: Ie6bdfa0a370148dd60bd800961077f7e97e67dd4

[33mcommit fd6c4c71d6184c4c86c7274fff4fc9e008a6d7da[m
Merge: 6cb6987d4 40edab5e3
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Oct 3 09:41:16 2013 -0700

    Merge "mips dsp-ase r2 vp9 decoder convolve module [1;31moptim[mizations"

[33mcommit 40edab5e391efc11b5c07fddd920f6dc96c1c719[m
Author: Parag Salasakar <img.mips1@gmail.com>
Date:   Fri Sep 13 15:18:32 2013 +0530

    mips dsp-ase r2 vp9 decoder convolve module [1;31moptim[mizations
    
    Change-Id: I401536778e3c68ba2b3ae3955c689d005e1f1d59

[33mcommit 3c4e9e341f9f5f9ed875b0a974f91bd1d2931e0f[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue Oct 1 18:34:36 2013 -0700

    Adding SSE2 [1;31moptim[mized vp9_short_idct32x32_1_add function.
    
    Change-Id: I4b1c6bb9ff615f5872b96ed07dbf0f5e18e63643

[33mcommit 27b390e1a1ede9063f7ac6c88d44f3dea1d092e4[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Tue Oct 1 09:05:20 2013 -0400

    d153 intra prediction ssse3 using bytes
    
    byte version of ronalds d153 ssse3 [1;31moptim[mizations for
    4x4 and 8x8
    (commit: fc91a2a112238a1aee568f3b840585de4e928fca)
    
    Change-Id: Iec4426032311483f615fd9e0dceba3ee85ddebd7

[33mcommit 548671dd201f58f5453108eb27e7c0042f862c34[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Sep 30 10:56:37 2013 -0700

    Removing vp9_add_constant_residual_{8x8, 16x16, 32x32} functions.
    
    We don't need these functions anymore. The only one which was actually
    used is vp9_add_constant_residual_32x32. Addition of
    vp9_short_idct32x32_1_add eliminates this single usage. SSE2 [1;31moptim[mized
    version of vp9_short_idct32x32_1_add will be added in the next patch set,
    right now it is only C implementation. Now we have all idct functions
    implemented in a consistent manner.
    
    Change-Id: I63df79a13cf62aa2c9360a7a26933c100f9ebda3

[33mcommit 6903efa93db09df21670fb534d7127993032c574[m
Merge: ceaa3c37a b6c5dbe9e
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Sun Sep 29 10:31:09 2013 -0700

    Merge "mips dsp-ase r2 vp9 decoder extend module [1;31moptim[mizations"

[33mcommit b6c5dbe9ef38c8e90c7b3930ab8e336051b67708[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Sun Sep 29 10:27:11 2013 -0700

    mips dsp-ase r2 vp9 decoder extend module [1;31moptim[mizations
    
    Adopted again to shepherd through system.
    
    Change-Id: If1b742618a95a2198ae2e30eec4b53ad1f7353e5

[33mcommit 208658490ce1396a237acd721f0b3b4ded9c3fd4[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Sep 25 16:16:44 2013 -0400

    d63 intra prediction ssse3 using bytes
    
    byte version of ronalds d63 ssse3 [1;31moptim[mizations
    (commit: c5a1c8cf3541cf3665fee981b36d22c9fbd4191e)
    
    Change-Id: Ifd3e6d454a2246085f23eabb38518a930321e807

[33mcommit 78fbb10642375b49ebf9d5d92901ff77a1129a08[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 20 11:30:46 2013 -0700

    Calculate rd cost per transformed block
    
    This commit makes the rate-distortion [1;31moptim[mization loop evaluate
    the rd costs of regular quantization and all zero coeffs, per
    transformed block. It improves speed 1 compression performance:
    
    derf: 0.245%
    yt:   0.515%
    
    For a large partition that consists multiple transformed blocks,
    this allows more flexibility to selectively force a portion of
    them coded as all zero coeffs, as well be continued in the next
    patches.
    
    Change-Id: I211518be4179747b57375696f017d1160cc91851

[33mcommit c437bbcde0ca07fc406d52e05240e458be474604[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 17 14:06:00 2013 -0700

    Clean up second ref check in sub8x8 rd loop
    
    This commit cleans up the second reference check in the
    rate-distortion [1;31moptim[mization loop of sub8x8 blocks.
    
    Change-Id: Ife68feaa4cddbfad2878c9b44d3012788d634f97

[33mcommit 86fb12b600b9e361fcf9ae4c65eec3aedf211bd5[m
Merge: 25655e579 182366c73
Author: Hangyu Kuang <hkuang@google.com>
Date:   Thu Sep 12 15:42:44 2013 -0700

    Merge "Add neon [1;31moptim[mize iht8x8 which is 282% faster than C."

[33mcommit 182366c736fe59275efa5048ac2ed527ef90470c[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Thu Sep 12 11:45:15 2013 -0700

    Add neon [1;31moptim[mize iht8x8 which is 282% faster than C.
    
    Change-Id: I963dd4a6e8671957403ccbb9a16ea7de703e3530

[33mcommit 3c05bda058f3aecb6dc08cba0f59b261866d47d8[m
Merge: 76a437a31 3b8614a8f
Author: Hangyu Kuang <hkuang@google.com>
Date:   Wed Sep 4 13:35:09 2013 -0700

    Merge "Add neon [1;31moptim[mize vp9_short_iht4x4_add."

[33mcommit 3b8614a8f6833e98e891f19c095f7d9fbc4e4622[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Sep 3 10:19:21 2013 -0700

    Add neon [1;31moptim[mize vp9_short_iht4x4_add.
    
    Change-Id: I42c497b68ae1ee645b59c9968ad805db0a43e37e

[33mcommit 22dc946a7e46e9a24e25d61232fb2f4678e9b9f6[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Thu Aug 29 08:30:17 2013 -0400

    Improved mb_lpf_horizontal_edge_w_sse2_8
    
    This patch is a reformatted version of [1;31moptim[mizations done by
    engineers at Intel (Erik/Tamar) who have been providing
    performance feedback for VP9.  For the test clips used (720p, 1080p),
    up to 1.2% performance improvement was seen.
    
    Change-Id: Ic1a7149098740079d5453b564da6fbfdd0b2f3d2

[33mcommit 3a679e56b2b0f290bbf37ad1e88fc6d7cae53608[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Aug 27 13:57:32 2013 -0700

    Add neon [1;31moptim[mize vp9_short_idct16x16_1_add.
    
    Change-Id: Ib9354c1d975d03e8081df20d50b6a77dfe2dc7e5

[33mcommit ce04b1aa628821b9f08794333b01e4a71c88e700[m
Merge: 7b95f9bf3 36e9b8208
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Aug 27 12:10:07 2013 -0700

    Merge "Add neon [1;31moptim[mize vp9_short_idct8x8_1_add."

[33mcommit 36e9b82080605f8f015ad1bf388b00cb7f83f325[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Aug 26 16:28:57 2013 -0700

    Add neon [1;31moptim[mize vp9_short_idct8x8_1_add.
    
    Change-Id: I0b15d5e3b0eb97abb9ab5ec08e88b61f8723aaf4

[33mcommit ba8fc719792616e253ba2a1c62504a64bb5acb7a[m
Merge: bbb490f6a 69384f4fa
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Aug 26 16:26:38 2013 -0700

    Merge "Add neon [1;31moptim[mize vp9_short_idct4x4_1_add."

[33mcommit 69384f4fadf73cb6f2427f91134c9a54a5267140[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Mon Aug 26 12:39:12 2013 -0700

    Add neon [1;31moptim[mize vp9_short_idct4x4_1_add.
    
    Change-Id: I6ecb5c4a1a472feb8e84e9f3352b536d5e28a4a5

[33mcommit 4205d79273b3ae00f38c870d7c6939f5db615e2b[m
Merge: 13eed79c7 4082bf9d7
Author: Hangyu Kuang <hkuang@google.com>
Date:   Thu Aug 22 15:57:28 2013 -0700

    Merge "Add neon [1;31moptim[mize vp9_short_idct10_16x16_add."

[33mcommit 4082bf9d7c607c62a1ab8b3573f695de2cd39dd6[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Wed Aug 21 14:19:08 2013 -0700

    Add neon [1;31moptim[mize vp9_short_idct10_16x16_add.
    
    vp9_short_idct10_16x16_add is used to handle the block that only have valid data
    at top left 4x4 block. All the other datas are 0. So we could cut many
    unnecessary calculations in order to save instructions.
    
    Change-Id: I6e30a3fee1ece5af7f258532416d0bfddd1143f0

[33mcommit cb05a451c6266e97008e7686f05f67289d39c471[m
Merge: 64c0f5c59 be60924f2
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Aug 22 01:35:27 2013 -0700

    Merge "Cleaning up [1;31moptim[mize_init_b function."

[33mcommit be60924f29d47d86cd4b8a90fcc23edffc20ddae[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Aug 21 16:40:16 2013 -0700

    Cleaning up [1;31moptim[mize_init_b function.
    
    Change-Id: Ib2c975e1d96deefb7ac4d6b600c8c5388035d111

[33mcommit 62a2cd9ed2cb5793f8cb3a96cc5a106fdc0729cb[m
Merge: 381d3b8b7 37cda6dc4
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Aug 20 14:06:57 2013 -0700

    Merge "Add neon [1;31moptim[mize vp9_short_idct10_8x8_add."

[33mcommit 37cda6dc4c1d6e585e5f648b44c473e01bd8ae91[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Fri Aug 16 16:36:07 2013 -0700

    Add neon [1;31moptim[mize vp9_short_idct10_8x8_add.
    
    vp9_short_idct10_8x8_add is used to handle the block that only have valid data
    at top left 4x4 block. All the other datas are 0. So we could cut several
    unnecessary calculations in order to save instructions.
    
    Change-Id: I34fda95e29082b789aded97c2df193991c2d9195

[33mcommit 3275ad701a5c37041ab90b743cc6fec6a8340f80[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 14 16:50:45 2013 -0700

    Enable early termination in uv rd loop
    
    This commit enables early termination in the rate-distortion
    [1;31moptim[mization search loop for chroma components. When the cumulative
    rd cost is above the current best value, skip the rest per-block
    transform/quantization/coeff_cost and continue to the next
    prediction mode.
    
    For bus_cif at 2000 kbps, the average run-time goes down from
    168546ms -> 164678ms, (2% speed-up) at speed 0
     36197ms ->  34465ms, (4% speed-up) at speed 1
    
    Change-Id: I9d3043864126e62bd0166250d66b3170d520b3c0

[33mcommit b34ce04378081f37c0a4c0885a19911de43ac014[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Aug 19 09:28:34 2013 -0700

    Fix potential use of uninitialized value
    
    Initialize the best mode and tx_size values in the rate-distortion
    [1;31moptim[mization search loop.
    
    Change-Id: Ibfb5c0895691f172abcd4265c23aef4cb99fa8af

[33mcommit bdc785e976c0f75cc8e970cbf434d782dc51b76e[m
Merge: bba68342c 67e53716e
Author: Frank Galligan <fgalligan@google.com>
Date:   Fri Aug 16 11:16:48 2013 -0700

    Merge "vp9: neon: [1;31moptim[mise vp9_wide_mbfilter_neon"

[33mcommit afd9bd3e3ce8bbdc3b4f9b23c7d882fee7109fd2[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Aug 15 17:03:03 2013 -0700

    Moving from ss_txfrm_size to tx_size.
    
    Updating foreach_transformed_block_visitor and corresponding functions
    to accept tx_size instead of ss_txfrm_size. List of functions per file:
    
    vp9_decodframe.c
      decode_block
      decode_block_intra
    
    vp9_detokenize.c
      decode_block
    
    vp9_encodemb.c
      [1;31moptim[mize_block
      vp9_xform_quant
      vp9_encode_block_intra
    
    vp9_rdopt.c
      dist_block
      rate_block
      block_yrd_txfm
    
    vp9_tokenize.c
      set_entropy_context_b
      tokenize_b
      is_skippable
    
    Change-Id: I351bf563eb36cf34db71c3f06b9bbc9a61b55b73

[33mcommit 68369ca89741e4bd1ef9a3822c8041dc6deda974[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 14 10:52:36 2013 -0700

    Refactor rd loop for chroma components
    
    This commit makes the rate-distortion [1;31moptim[mization search of chroma
    components consistent across all block sizes. It removes redundant
    codes.
    
    Change-Id: I7e76f54d045e8efdd41d84a164c71f55b484471b

[33mcommit bb3b817c1e64e4f1460db0d5b3c65f44273c0944[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Thu Aug 15 11:44:57 2013 -0700

    Converting code from using ss_txfrm_size to tx_size.
    
    Updated function signatures:
      txfrm_block_to_raster_block
      txfrm_block_to_raster_xy
      extend_for_intra
      vp9_[1;31moptim[mize_b
    
    Change-Id: I7213f4c4b1b9ec802f90621d5ba61d5e4dac5e0a

[33mcommit 67e53716e0239286a6391c6a51a0dcda70cb4ff1[m
Author: Mans Rullgard <mans@mansr.com>
Date:   Thu Aug 15 18:54:51 2013 +0100

    vp9: neon: [1;31moptim[mise vp9_wide_mbfilter_neon
    
    Break up long dependency chains to improve instruction scheduling.
    
    Change-Id: I0e0cb66943df24af920767bb4167b25c38af9630

[33mcommit 39f42c8713144df97fd5ce750123d41902abe38a[m
Merge: bb072000e cf6beea66
Author: Hangyu Kuang <hkuang@google.com>
Date:   Wed Aug 14 14:16:20 2013 -0700

    Merge "Add neon [1;31moptim[mize vp9_short_idct16x16_add."

[33mcommit cf6beea661e8b09580d9dbe77401e4b3ad84a51f[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Aug 6 16:05:14 2013 -0700

    Add neon [1;31moptim[mize vp9_short_idct16x16_add.
    
    Change-Id: I27134b9a5cace2bdad53534562c91d829b48838d

[33mcommit 4417c045315c0d3f8ab565ba813cb9cd48cdc9cd[m
Merge: 4cabbca4c ad7021dd6
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Aug 12 17:54:47 2013 -0700

    Merge "vp9: neon: [1;31moptim[mise convolve8_vert functions"

[33mcommit 4cabbca4ce5bd2ecdf5cf4e264b77deb8336823d[m
Merge: b89eef8f8 b84dc949c
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Aug 12 17:54:42 2013 -0700

    Merge "vp9: neon: [1;31moptim[mise convolve8_horiz functions"

[33mcommit ad7021dd6c652ca2653544546f3e4a7926a2dda9[m
Author: Mans Rullgard <mans@mansr.com>
Date:   Mon Aug 12 15:37:48 2013 +0100

    vp9: neon: [1;31moptim[mise convolve8_vert functions
    
    Invert loops to operate vertically in the inner loop.  This allows
    removing redundant loads.
    
    Also add preloading of data.
    
    Change-Id: I4fa85c0ab1735bcb1dd6ea58937efac949172bdc

[33mcommit b84dc949c8a4a520ef1e9121d72a6250fb8f8e47[m
Author: Mans Rullgard <mans@mansr.com>
Date:   Sun Aug 11 15:34:24 2013 +0100

    vp9: neon: [1;31moptim[mise convolve8_horiz functions
    
    Each iteration of the horizontal loop reuses 7 of the 11 source
    values.  Loading only the 4 new values saves some time.
    
    Also add preload for source data.
    
    Overall 4% faster on Chromebook.
    
    Change-Id: I8f69e749f2b7f79e9734620dcee51dbfcd716b44

[33mcommit aae6a4c895185661948e0e816fce58bbd0da2ad0[m
Author: Adrian Grange <agrange@google.com>
Date:   Thu Aug 1 14:57:46 2013 -0700

    Simplify & fix potential bug in rd_pick_partition
    
    Different partitionings were not being evaluated against
    best_rd and there were unnecessary calls to RDCOST. This
    could have resulted in a non-[1;31moptim[mal partioning being
    selected.
    
    I simplified the variables used to track the rate,
    distortion and RD values throughout the function.
    
    Change-Id: Ifa7085ee80d824e86791432a5bc6d8fea5a3e313

[33mcommit debb9c68c8ea92b80627138f95de901cb39cf8dc[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 7 15:22:51 2013 -0700

    Use low precision 32x32fdct for encodemb in speed1
    
    The low precision 32x32 fdct has all the intermediate steps within
    16-bit depth, hence allowing faster SSE2 implementation, at the
    expense of larger round-trip error. It was used in the rate-distortion
    [1;31moptim[mization search loop only.
    
    Using the low precision version, in replace of the high precision one,
    affects the compression performance by about 0.7% (derf, stdhd) at
    speed 0. For speed 1, it makes derf set down by only 0.017%.
    
    Change-Id: I4e7d18fac5bea5317b91c8e7dabae143bc6b5c8b

[33mcommit 7d14ce8ba52bd8383b5fecc5eee30ebf11401e73[m
Merge: 319b7dc28 5e2e78d02
Author: Johann Koenig <johannkoenig@google.com>
Date:   Fri Aug 2 11:28:04 2013 -0700

    Merge "vp9: neon: [1;31moptim[mise loads in horiz convolve functions"

[33mcommit 5e2e78d024455a60dfe509a25cf1d715d7de03c3[m
Author: Mans Rullgard <mans@mansr.com>
Date:   Tue Jul 30 18:11:06 2013 +0100

    vp9: neon: [1;31moptim[mise loads in horiz convolve functions
    
    Loading to single lanes in multiple registers is expensive since
    it requires a read and write of each register which saturates
    the register file access.  Loading to single registers followed
    by a separate transpose reduces this pressure.
    
    Change-Id: I4cc35887ddbca80e5e635b50d2b1d158de9668ee

[33mcommit 455f2de20b3f821a4b8bb9edb7e250192d7736a0[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 29 16:03:02 2013 -0700

    Tune tokenization/detokenization flow for speed-up
    
    This commit [1;31moptim[mizes the tokenization and detokenization operational
    flow for speed-up. It makes the coding process about 0.3% faster at
    speed 0.
    
    Change-Id: I28008df7482874e4b5f237f2d418ff82a249dd56

[33mcommit b5323ed89a27dcf57dc62190cca128e8ae8366b4[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 29 14:54:31 2013 -0700

    Skip redundant tokenization in rd loop
    
    This commit makes the encoder skip the redundant tokenization process
    in the rate-distortion [1;31moptim[mization search loop, while updating the
    entropy contexts accordingly. It makes the speed 0 encoding process
    about 0.5% faster at no performance change.
    
    Change-Id: I34a4155a0b5332afeb45c93a51c7f35a294d685c

[33mcommit 6f3054b65dffa34e05a8927d21fd5adce5310bcc[m
Merge: dcacce6dd 94b0c6791
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Jul 26 17:21:09 2013 -0700

    Merge "d45 intra prediction SSSE3 [1;31moptim[mizations."

[33mcommit 94b0c6791d87f0fababf55f739b79feeb2083b98[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 24 15:11:04 2013 -0700

    d45 intra prediction SSSE3 [1;31moptim[mizations.
    
    Change-Id: Ie48035ff4f93c41f8a9b3023e6444fd10432d8fb

[33mcommit d571af76d3142c5a424d13867c3d080214d0dacd[m
Merge: f7ece8314 2f58faffa
Author: Jingning Han <jingning@google.com>
Date:   Thu Jul 25 12:46:14 2013 -0700

    Merge "Make coeff_[1;31moptim[mize initialized per-plane"

[33mcommit 2f58faffa40036e0c8dfb8b4351a0ce0b11eb9ee[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 23 15:53:09 2013 -0700

    Make coeff_[1;31moptim[mize initialized per-plane
    
    This commit makes the initialization of trellis coeff [1;31moptim[mization
    a per-plane operation, thereby eliminating the redundant steps in
    encode_sby and encode_sbuv. It makes the encoder at speed 0 slightly
    faster.
    
    Change-Id: Iffe9faca6a109dafc0dd69dc7273cbdec19b17cd

[33mcommit 47336afd8dd257cb7502db0664746f251be37e41[m
Merge: 666c26662 e20fcd958
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Tue Jul 23 21:36:12 2013 -0700

    Merge "More [1;31moptim[mizations for cost_coeffs()."

[33mcommit 666c2666233a65cd09e36a0d9b8ddfa634b03ff1[m
Merge: 1099a436d ab77828b3
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 23 18:08:50 2013 -0700

    Merge "Unify the use of encode_b_args/[1;31moptim[mize_block_args"

[33mcommit ab77828b36e2defd47c6b8166cbf61b77e26aa2b[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 23 15:59:58 2013 -0700

    Unify the use of encode_b_args/[1;31moptim[mize_block_args
    
    The struct [1;31moptim[mize_block_args is defined same as encode_b_args.
    Remove this redundant definition, and use encode_b_args consistently.
    
    Change-Id: I1703aeeb3bacf92e98a34f4355202712110173d9

[33mcommit e20fcd9585295d3bae106548d79d501ac8668a6b[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 22 16:09:09 2013 -0700

    More [1;31moptim[mizations for cost_coeffs().
    
    4x4:    163 ->  123 cycles (33% faster)
    8x8:    491 ->  399 cycles (23% faster)
    16x16: 1889 -> 1763 cycles (7% faster)
    32x32: 8311 -> 8180 cycles (1.6% faster)
    
    Overall encoding time of first 50 frames of bus (speed 0) @ 1500kbps
    goes from 1min4.33 to 1min3.00, i.e. 2.11% faster.
    
    Change-Id: Ib52d1dbb5649b14de769d3e7a74af67440b5284f

[33mcommit 409e77f2d4919c29861bdaab88241d23bba67230[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 17 17:07:32 2013 -0700

    Optimize operation flow in sub8x8 rd loop
    
    Stack the rate-distortion statistics in the sub8x8 rd loop. This allows
    the encoder to skip the forward transform, quantization, and coeff cost
    estimation, in the sub8x8 rd [1;31moptim[mization search, if the motion
    vector(s) are of integer pixel value, and have been tested in the
    previous prediction filter type rd loops of the same block.
    
    This gives about 2% speed-up for bus_cif at 2000 kpbs, for speed 0.
    Its efficacy depends how frequently the motion search will select an
    integer motion vector.
    
    Change-Id: Iee15d4283ad4adea05522c1d40b198b127e6dd97

[33mcommit 97dbee00dd5e8f1ab5fdcf3c222413355e6404ef[m
Merge: 13253d612 d757de744
Author: Hangyu Kuang <hkuang@google.com>
Date:   Fri Jul 19 08:28:39 2013 -0700

    Merge "Add neon [1;31moptim[mize vp9_short_idct8x8_add."

[33mcommit d757de744cbdd31c9267a49a87e2cc2488c12535[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Wed Jul 17 12:21:28 2013 -0700

    Add neon [1;31moptim[mize vp9_short_idct8x8_add.
    
    Change-Id: Ic32acf3e2939c6d12d9c2bf192a5f5da59705fda

[33mcommit 59dc4e9cdd0263ca159697d8641b8b681d8042ae[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Tue Jul 16 10:13:06 2013 -0700

    vp9_convolve8_neon placeholder
    
    Call the individually [1;31moptim[mized horizontal and vertical functions. This
    implementation abuses the temp buffer.
    
    This will be replaced with a custom [1;31moptim[mized function.
    
    Over 2x speedup.
    
    Change-Id: I5b908d2a73d264e9810d6022bbff73207a3055dd

[33mcommit 5b915ebd92e2a09d5e4acd4d9816c350744c4b4a[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Jul 15 14:59:59 2013 -0700

    Change to extend full border only when needed
    
    This is a short term [1;31moptim[mization till we work out a decoder
    implementation requiring no frame border extension.
    
    Change-Id: I02d15bfde4d926b50a4e58b393d8c4062d1be70f

[33mcommit 043e0f9dad1106b60ba3e58dfc4075ed261080dc[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 15 11:28:46 2013 -0700

    Skip inter-coded block reconstruction in rd loop
    
    Skip the inverse transform and reconstruction of inter-mode coded
    blocks in the rate-distortion [1;31moptim[mization loop, when skip_encode_sb
    feature is turned on. This provides about 1% speed-up at speed 0,
    and 1.5% speed-up at speed 1. No performance change in both settings.
    
    Change-Id: I2932718bf4d007163702b61b16b6ff100cf9d007

[33mcommit faff6ed0fbb01ece1331021b749ec2f9114332ff[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 8 16:48:47 2013 -0700

    Skip duplicate block encoding in the rd loop
    
    This speed feature allows the encoder to largely remove the spatial
    dependency between blocks inside a 64x64 superblock, thereby removing
    the need to repeatedly encode superblocks per partition type in the
    rate-distortion [1;31moptim[mization loop.
    
    A major challenge lies in the intra modes tested in the rate-distortion
    [1;31moptim[mization loop. The subsequent blocks do not have access to the
    reconstructed boundary pixels without the intermediate coding steps.
    This was resolved by using the original pixels for intra prediction
    in the rd loop, followed by an appropriately designed distortion
    modeling on the quantization parameters. Experiments also suggested
    that the performance impact is more discernible at lower bit-rate/psnr
    settings. Hence a quantizer dependent threshold is applied to deactivate
    skip of block coding.
    
    For bus_cif at 2000 kbps,
    speed 0: runtime 269854ms -> 237774ms (12% speed-up) at 0.05dB
             performance loss.
    
    speed 1: runtime 65312ms  -> 61536ms, (7% speed-up) at 0.04dB
             performance loss.
    
    This operation is currently turned on in settings of speed 1.
    
    Change-Id: Ib689741dfff8dd38365d8c1b92860a3e176f56ec

[33mcommit 158c80cbb0aa6ab5e054d64917900a4422165777[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu May 23 12:50:41 2013 -0700

    convolve8 [1;31moptim[mizations for neon
    
    Independent horizontal and vertical implementations.
    
    Requires that blocks be built from 4x4 and [xy]_step_q4 == 16
    
    6-10% improvement. CIF improved the least.
    
    Change-Id: I137f5ceae4440adc0960bf88e4453e55a618bcda

[33mcommit c9b25dcae4f492b558f2025d96664f4d4b2b42ea[m
Author: Hangyu Kuang <hkuang@google.com>
Date:   Tue Jul 9 12:06:21 2013 -0700

    Add neon [1;31moptim[mize vp9_dc_only_idct_add.
    
    Change-Id: Iae84ab945cc9662a0ddd839aa2b9ca59f2ae5423

[33mcommit 5290eeab8806c8f1382adfad6bd42d8ffc8fb261[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Jul 3 17:54:06 2013 +0100

    Speed 2 feature adjustment.
    
    With sf->auto_mv_step_size on it is questionable
    whether sf->reduce_first_step_size is worthwhile.
    At speed 2 it was not having a big impact.
    
    Even at speed 2 sf->[1;31moptim[mize_coefficients = 0 is not
    having a big speed imapct so for now I have moved it
    down into a higher speed setting.
    
    Change-Id: I8a54de76d486ad37aabce76474889da2768b14c1

[33mcommit 18803f9cc4386e8631090471a948a3baad3fb3c0[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 10 15:45:34 2013 -0700

    Fix tx_type bug in intra4x4 rd loop
    
    This commit fixed the mis-use of the tx_type for inverse transform
    in intra4x4 rate-distortion [1;31moptim[mization loop. It improves the
    overall coding performance.
    
    Change-Id: I7fe9953175b74890357dbcee33c138573766e980

[33mcommit 5a73254918b7f37582a606a6621a9eb0d05abb06[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 3 10:09:15 2013 -0700

    Remove unnecessary memset(best_index, 0) from trellis/[1;31moptim[mize.
    
    First 50 frames of bus @ 1500kbps (speed 0) goes from 2min12.6 to
    2min11.6, i.e. 0.75% overall speedup.
    
    Change-Id: I67054f8146e82a02b6457c51a1c8627a937e5e1e

[33mcommit b91a1586a31886b96f06bc9bd82b3f62091cf1ef[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 1 16:50:58 2013 -0700

    Calculate rd cost per transformed block
    
    Compute the rate-distortion cost per transformed block, and cumulate
    the cost through all blocks inside a partition. This allows encoder
    to detect if the cumulative rd cost is already above the best rd cost,
    thereby enabling early termination in the rate-distortion [1;31moptim[mization
    search.
    
    Change-Id: I0a856367a9a7b6dd0b466e7b767f54d5018d09ac

[33mcommit 6098e359f42ce21cf784d11d0d0a81cb64a02f76[m
Merge: 84d08fa9c a83cfd4da
Author: Johann Koenig <johannkoenig@google.com>
Date:   Fri Jun 28 19:50:38 2013 -0700

    Merge "add Neon [1;31moptim[mized add constant residual functions"

[33mcommit a83cfd4da1e607cd0c2bd9e37db3a4efd627eb3a[m
Author: chm <chm@rock-chips.com>
Date:   Thu Jun 27 20:47:56 2013 +0800

    add Neon [1;31moptim[mized add constant residual functions
    
    - Add add_constant_residual_8x8 16x16 32x32 functions
    - Tested under RealView debugger enviroment
    
    Change-Id: I5c3a432f651b49bf375de6496353706a33e3e68e

[33mcommit cee3bc6ffa823848651d9839647c9aa96a6cf0f2[m
Merge: ec5d09b95 91d223bd5
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Jun 28 11:54:50 2013 -0700

    Merge "Some minor [1;31moptim[mizations for cost_coeffs()."

[33mcommit 91d223bd5c3ece5edc28d048a866d1c0fb39bdc7[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jun 27 20:57:37 2013 -0700

    Some minor [1;31moptim[mizations for cost_coeffs().
    
    Cycle timings for first 3 frames of bus (speed 0) at 1500kbps:
    4x4: 298 -> 234 cycles
    8x8: 1227 -> 878 cycles
    16x16: 23426 -> 18134 cycles
    32x32: 4906 -> 3664 cycles
    
    Total encode time of first 50 frames of bus @ 1500kbps (speed 0) goes
    from 3min0.7 to 2min51.6 seconds, i.e. 5.3% faster.
    
    Change-Id: I68a0e1b530b0563b84a67342cca4b45146077e95

[33mcommit af660715c01fc5403700c49686885b2f0ee6133b[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jun 27 17:41:54 2013 -0700

    Make coefficient skip condition an explicit RD choice.
    
    This commit replaces zrun_zbin_boost, a method of biasing non-zero
    coefficients following runs of zero-coefficients to be rounded towards
    zero, with an explicit skip-block choice in the RD loop.
    
    The logic is basically that if individual coefficients should be rounded
    towards zero (from a RD point of view), the trellis/[1;31moptim[mize loop should
    take care of it. If whole blocks should be zero (from a RD point of
    view), a single RD check is much more efficient than a complete
    serialization of the quantization loop.
    
    Quality change: derf +0.5% psnr, +1.6% ssim; yt +0.6% psnr, +1.1% ssim.
    SIMD for quantize will follow in a separate patch. Results for other
    test sets pending.
    
    Change-Id: Ife5fa641163ac5150ac428011e87188f1937c1f4

[33mcommit 1d6dc1b7022e6966ab417f6e24d6e15e4211aacb[m
Author: Frank Galligan <fgalligan@google.com>
Date:   Fri Jun 21 12:58:46 2013 -0700

    Add Neon [1;31moptim[mized loop filter functions.
    
    - Added vp9_loop_filter_horizontal_edge_neon and
      vp9_loop_filter_vertical_edge_neon.
    - The functions are based off the vp8 loopfilter
      functions.
    - Matches x86 md5 checksum.
    
    Change-Id: Id1c4dddb03584227e5ecd29f574a6ac27738fdd0

[33mcommit 861cb06c67641dbe417db637d83ee7b7553bf7a8[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jun 25 19:41:56 2013 -0700

    Make intra predictor reference buffer configurable
    
    This commit enables configurable reference buffer pointer for intra
    predictor. This allows later removal of spatial dependency between
    blocks inside a 64x64 superblock in the rate-distortion [1;31moptim[mization
    loop.
    
    Change-Id: I02418c2077efe19adc86e046a6b49364a980f5b1

[33mcommit c24d922396f4dcd50216be3cdfd784ea31c47564[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Tue Jun 25 11:26:49 2013 -0700

    Add averaging-SAD functions for 8-point comp-inter motion search.
    
    Makes first 50 frames of bus @ 1500kbps encode from 3min22.7 to 3min18.2,
    i.e. 2.3% faster. In addition, use the sub_pixel_avg functions to calc
    the variance of the averaging predictor. This is slightly sub[1;31moptim[mal
    because the function is subpixel-position-aware, but it will (at least
    for the SSE2 version) not actually use a bilinear filter for a full-pixel
    position, thus leading to approximately the same performance compared to
    if we implemented an actual average-aware full-pixel variance function.
    That gains another 0.3 seconds (i.e. encode time goes to 3min17.4), thus
    leading to a total gain of 2.7%.
    
    Change-Id: I3f059d2b04243921868cfed2568d4fa65d7b5acd

[33mcommit 9a480482cbc7f0d359d959bb2cfe097d0a672d6b[m
Merge: 869d77061 1e6a32f1a
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Jun 21 12:49:43 2013 -0700

    Merge "SSE2/SSSE3 [1;31moptim[mizations and unit test for sub_pixel_avg_variance()."

[33mcommit 1e6a32f1af8066fd0b718b11f00cb09104280f49[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jun 20 15:59:48 2013 -0700

    SSE2/SSSE3 [1;31moptim[mizations and unit test for sub_pixel_avg_variance().
    
    Encoding of bus @ 1500kbps (first 50 frames) goes from 3min57 to
    3min35, i.e. approximately a 10.5% speedup. Note that the SIMD versions
    which use a bilinear filter (x_offset & 7 || y_offset & 7) aren't
    perfectly interleaved, and can probably be improved further in the
    future. I've marked this with a few TODOs/FIXMEs in the code.
    
    Change-Id: I5c9e900c0f0d32e431a50fecae213b510b2549f9

[33mcommit 8fb6c58191251792765c2910af3f9d6da22d6c11[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jun 20 09:34:25 2013 -0700

    Implement sse2 and ssse3 versions for all sub_pixel_variance sizes.
    
    Overall speedup around 5% (bus @ 1500kbps first 50 frames 4min10 ->
    3min58). Specific changes to timings for each function compared to
    original assembly-[1;31moptim[mized versions (or just new version timings if
    no previous assembly-[1;31moptim[mized version was available):
    
    sse2   4x4:    99 ->   82 cycles
    sse2   4x8:           128 cycles
    sse2   8x4:           121 cycles
    sse2   8x8:   149 ->  129 cycles
    sse2   8x16:  235 ->  245 cycles (?)
    sse2  16x8:   269 ->  203 cycles
    sse2  16x16:  441 ->  349 cycles
    sse2  16x32:          641 cycles
    sse2  32x16:          643 cycles
    sse2  32x32: 1733 -> 1154 cycles
    sse2  32x64:         2247 cycles
    sse2  64x32:         2323 cycles
    sse2  64x64: 6984 -> 4442 cycles
    
    ssse3  4x4:           100 cycles (?)
    ssse3  4x8:           103 cycles
    ssse3  8x4:            71 cycles
    ssse3  8x8:           147 cycles
    ssse3  8x16:          158 cycles
    ssse3 16x8:   188 ->  162 cycles
    ssse3 16x16:  316 ->  273 cycles
    ssse3 16x32:          535 cycles
    ssse3 32x16:          564 cycles
    ssse3 32x32:          973 cycles
    ssse3 32x64:         1930 cycles
    ssse3 64x32:         1922 cycles
    ssse3 64x64:         3760 cycles
    
    Change-Id: I81ff6fe51daf35a40d19785167004664d7e0c59d

[33mcommit a41a4860c0b3be7815f37b4ec833e87218307c4f[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jun 14 11:28:56 2013 -0700

    Make fdct32 computation flow within 16bit range
    
    This commit makes use of dual fdct32x32 versions for rate-distortion
    [1;31moptim[mization loop and encoding process, respectively. The one for
    rd loop requires only 16 bits precision for intermediate steps.
    The original fdct32x32 that allows higher intermediate precision (18
    bits) was retained for the encoding process only.
    
    This allows speed-up for fdct32x32 in the rd loop. No performance
    loss observed.
    
    Change-Id: I3237770e39a8f87ed17ae5513c87228533397cc3

[33mcommit b1a17e4ba7a52f70dbc46e1c1f02200ac1bc750f[m
Merge: a15ca3fc0 a2f33e250
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Tue Jun 18 09:07:11 2013 -0700

    Merge "Use assembly-[1;31moptim[mized variance functions in sub_pixel_{avg}_var()."

[33mcommit a2f33e2505adab7543447d9017f0def0a901a0de[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jun 17 14:57:13 2013 -0700

    Use assembly-[1;31moptim[mized variance functions in sub_pixel_{avg}_var().
    
    2.5% faster when encoding first 50 frames of bus @ 1500kbps.
    
    Change-Id: I5a64703996cf7fd39b07e32c72311c4b125ec6d4

[33mcommit a81bd12a2e3df637fb240e4d478d74e34d121043[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Jun 12 19:23:03 2013 -0400

    Quick modifications to mb loopfilter intrinsic functions
    
    Modified to work with 8x8 blocks of memory.  Will revisit
    later for further [1;31moptim[mizations.  For the HD clip used, the
    decoder improved by almost 20%.
    
    Change-Id: Iaa4785be293a32a42e8db07141bd699f504b8c67

[33mcommit 26496c52bf90b616bbf5ae92a1b0702c0468b7bc[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Jun 12 16:40:22 2013 -0400

    Quick modifications to wide loopfilter intrinsic functions
    
    Modified to work with 8x8 blocks of memory.  Will revisit
    later for further [1;31moptim[mizations.  For the HD clip used, the
    decoder improved my 20%.
    
    Change-Id: Ia0057f55d66d1445882351ea6c43b595a5a980e5

[33mcommit 51b6e73a686bedcd6abe4e004f573cd5acbfeccd[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jun 3 15:33:31 2013 -0700

    Make sb intra rd search consistent with encoding
    
    This commit makes operations of the superblock intra coding rate
    distortion [1;31moptim[mization consistent with those used in the encoding
    process. Given the test prediction mode and transform size, the rd
    [1;31moptim[mizer encodes and reconstructs each transformed block of the
    superblock consecutively, then computes the total rate-distortion
    costs accosicated with the current superblock to select the coding
    decisions.
    
    It achieves coding performance gains:
    derf 0.353%
    yt   1.111%
    
    Change-Id: I0da2eb7a71361dfb8c1384927fc536b0c2790d07

[33mcommit 0048ec2329df2cc9f072adce25a7fb024f97d874[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu May 30 16:20:58 2013 -0700

    Costing fixes related to trellis [1;31moptim[mization
    
    Migrates costing changes/fixes from the rebalance expt to the head
    without the expt on.
    
    Rebased.
    
    Change-Id: I51677d62f77ed08aca8d21a4c9a13103eb8de93f
    Results:
    derfraw300: +0.126%

[33mcommit f153a5d06302eec5e2ada78e4576ca29f804c999[m
Author: Jingning Han <jingning@google.com>
Date:   Mon May 20 16:04:28 2013 -0700

    Make the intra rd search support 8x4/4x8
    
    This commit allows the rate-distortion [1;31moptim[mization of intra coding
    capable of supporting 8x4 and 4x8 partition settings.
    
    It enables the entropy coding of intra modes in key frame using a
    unified contextual probability model conditioned on its above/left
    prediction modes.
    
    Coding performance:
    derf 0.464%
    
    Change-Id: Ieed055084e11fcb64d5d5faeb0e706d30268ba18

[33mcommit ad484fc6be3b11448c67787786e1fd2f22ee18eb[m
Author: Martin Storsjö <martin@martin.st>
Date:   Sat May 18 23:32:49 2013 +0300

    Add support for armv7-win32-vs11
    
    The arm assembly files are named .s after conversion, to reuse
    as much of the existing makefile infrastructure for conversion to
    gas format as possible. Within the generated visual studio project,
    only the converted assembly sources are available, which might not
    be [1;31moptim[mal for actually developing it, but is acceptable for
    just building the library.
    
    Multithreading is disabled since the traditional win32 threading
    functions aren't available on WinRT/Windows Phone 8.
    
    Building of vpx itself and the examples succeed, while building the
    tests fail due to them using functions not available in the
    windows store/windows phone API subsets - therefore the unit tests
    are disabled.
    
    This works for building in Visual Studio Express 2012 for Windows
    Phone, while Visual Studio Express 2012 for Windows 8 (for
    "Windows Store" apps) seems to reject the vcxproj files due to
    not supporting "classic style native application or managed
    projects". The built static library should be compatible with that
    platform though.
    
    Change-Id: Idcd7eca60bfaaaeb09392a9cd7a02e4a670e3b30

[33mcommit 810b612c233e82addc09412815ce06dfdaa589c9[m
Author: Jingning Han <jingning@google.com>
Date:   Wed May 15 22:28:36 2013 -0700

    Enable bit-stream support to 8x4 and 4x8 partition
    
    The recursive partition type search is enabled down to 4x4, 4x8 and
    8x4, followed by the corresponding rate-distortion [1;31moptim[mization for
    the per-partition encoding mode decisions.
    
    The bit-stream writing/reading synchronized in supporting the
    rectangular partition of 8x8 block.
    
    This provides above 1% coding performance gains on derf.
    
    To do next:
    1. re-design the rate-distortion loop for inter prediction below 8x8.
    2. re-design the rate-distortion loop for intra prediction below 4x4.
    3. make the loop-filter aware of rectangular partition of 8x8 block.
    4. clean the unused probability models.
    5. update default probability values.
    
    Change-Id: Idd41a315b16879db08f045a322241f46f1d53f20

[33mcommit 8e3d0e4d7db867caa110e96fa0fd1ff9ba37cb9f[m
Author: Jingning Han <jingning@google.com>
Date:   Wed May 15 12:19:59 2013 -0700

    Add building blocks for 4x8/8x4 rd search
    
    These building blocks enable rate-distortion [1;31moptim[mization search
    over block sizes of 8x4 and 4x8. Need to convert them into mmx/sse
    forms.
    
    Change-Id: I570ea2d22d14ceec3fe3575128d7dfa172a577de

[33mcommit 1f26840fbfbef085ed53016bfc91705f148916fd[m
Author: Jingning Han <jingning@google.com>
Date:   Fri May 10 17:06:37 2013 -0700

    Enable recursive partition down to 4x4
    
    This commit allows the rate-distortion [1;31moptim[mization recursion
    at encoder to go down to 4x4 block size. It deprecates the use
    of I4X4_PRED and SPLITMV syntax elements from bit-stream
    writing/reading. Will remove the unused probability models in
    the next patch.
    
    The partition type search and bit-stream are now capable of
    supporting the rectangular partition of 8x8 block, i.e., 8x4
    and 4x8. Need to revise the rate-distortion parts to get these
    two partition tested in the rd loop.
    
    Change-Id: I0dfe3b90a1507ad6138db10cc58e6e237a06a9d6

[33mcommit e44678c0613481937a997ad7e073477f24c629d9[m
Author: Jingning Han <jingning@google.com>
Date:   Wed May 8 14:24:43 2013 -0700

    Enable recursive partition type search
    
    This commit enables the search for the [1;31moptim[mal superblock
    partition types in the recursion form. The intention is to
    make the [1;31moptim[mization process more concise and ready to
    support partition down to 4x4 block size next.
    
    Change-Id: Iae279a67df3a7cc372553c84c775bc4d2f3e4336

[33mcommit a37ee9d2e8b9b7cf33455af60bcd9312dc898126[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed May 8 16:14:14 2013 -0700

    Fix non-4:2:0 chroma MV calculation for SPLITMV
    
    The previous code was somewhat vestigial for 16x16 MI units, but was
    incorrect when called with chroma blocks larger than 4x4 because the
    block index caused a reference to a non-existent BMI. This patch uses
    the same MV for all chroma subblocks in SPLITMV mode, which is
    sub[1;31moptim[mal for non-4:2:0 subsamplings, but as SPLITMV may be removed
    in the near future, will use this as a stop gap.
    
    Change-Id: I3211cee5ccf1cfb426e5eef5353b0ce5bb92b4cd

[33mcommit 3f4e80634b7cfb5ab5be2be362d0fb92dc378f23[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue Apr 30 11:29:27 2013 -0700

    Create common vp9_encode_sb{,y}
    
    Creates a common encode (subtract, transform, quantize, [1;31moptim[mize,
    inverse transform, reconstruct) function for all sb sizes, including
    the old 16x16 path.
    
    Change-Id: I964dff1ea7a0a5c378046a069ad83495f54df007

[33mcommit 9b94f647cd696782ad2040bdc5a409ff7bba504f[m
Merge: 451ce65e2 e43662e8e
Author: Johann Koenig <johannkoenig@google.com>
Date:   Wed May 1 15:13:42 2013 -0700

    Merge "Remove unused quantize [1;31moptim[mizations." into experimental

[33mcommit d139655b144c7e5d97d5c6c93f33259625c890d7[m
Merge: 09aaf61e1 1f80a568d
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue Apr 30 21:43:26 2013 -0700

    Merge "Make vp9_[1;31moptim[mize_sb* common" into experimental

[33mcommit 1f80a568d24f91125ba10d9b7f6c543ab9b8700d[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue Apr 30 09:54:51 2013 -0700

    Make vp9_[1;31moptim[mize_sb* common
    
    Unify the various vp9_[1;31moptim[mize_sb functions into one that handles all
    transform sizes.
    
    Change-Id: I48b642fbfb3e72cc2e0bcf1d0317a80a80547882

[33mcommit e43662e8e65ff9d24ba1f8f94a3b1de720d339e0[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Tue Apr 30 18:42:05 2013 -0700

    Remove unused quantize [1;31moptim[mizations.
    
    Files were copied from vp8 and never maintained.
    
    Change-Id: I9659a8755985da73e8c19c3c984423b6666d8871

[33mcommit c77aff1286df07fb9f3b49feaacf384703813eca[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Apr 24 10:20:52 2013 +0100

    Simplify Segment Coding
    
    Remove top node [1;31moptim[mization.
    The improvement this gives is not sufficient to justify
    the extra complexity.
    
    Change-Id: I2bb4a12a50ffd52cacfa4a3e8acbb2e522066905

[33mcommit 13e41ba44064d7c5c6c46fead819996cc3c8d955[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Apr 11 10:57:16 2013 -0700

    Remove unused macroblock versions of reconstruction functions.
    
    More specifically, remove vp9_quantize_mb*, vp9_[1;31moptim[mize_mb*,
    vp9_inverse_transform_mb* and vp9_transform_mb*. Instead, use the
    generic _sb* functions that take a size argument, and call them with
    BLOCK_SIZE_MB16X16.
    
    Change-Id: I33024afea95d3a23ffbc1df7da426e4645110f29

[33mcommit c5840a8d8e25a733c108fd2ba7527d6282daae20[m
Merge: 0b4deea89 57c97e2a5
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Mar 29 07:15:05 2013 -0700

    Merge "Re[1;31moptim[mizing the interpolation filters" into experimental

[33mcommit 57c97e2a5ba53d945513aa54fdbffa82ce8d08d8[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Mar 25 22:10:06 2013 -0700

    Re[1;31moptim[mizing the interpolation filters
    
    Re[1;31moptim[mizes the 8-tap smooth filter.
    
    Results:
    derf: +0.101%
    yt: +0.157%
    hd: +0.791%
    stdhd: +0.264%
    
    The next step will be to re[1;31moptim[mize the other two filters.
    
    Change-Id: I3d256a510ad9c7c30c33fae4a70fb43dfc708ed0

[33mcommit fad43d42491c570abbf0092699462ca810f35b18[m
Merge: e6257342b f74c55eb0
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Mar 11 09:43:54 2013 -0700

    Merge "Minor [1;31moptim[mization in mv entropy adaptation" into experimental

[33mcommit f74c55eb038a861ed641841dbc9a56e6f3253d19[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Mar 11 08:49:14 2013 -0700

    Minor [1;31moptim[mization in mv entropy adaptation
    
    Adds a check to exit from the increment_nmv_count function when the
    increment is 0.
    
    Change-Id: I99c1e342d351f7800e23590f9c2419881bf1d708

[33mcommit bd84685f7841f4f571f063a18b96d53e0fdef8cc[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Sun Mar 10 13:39:30 2013 -0700

    Optimize vp9_tree_probs_from_distribution
    
    The previous implementation visited each node in the tree multiple times
    because it used each symbol's encoding to revisit the branches taken and
    increment its count. Instead, we can traverse the tree depth first and
    calculate the probabilities and branch counts as we walk back up. The
    complexity goes from somewhere between O(nlogn) and O(n^2) (depending on
    how balanced the tree is) to O(n).
    
    Only tested one clip (256kbps, CIF), saw 13% decoding perf improvement.
    
    Note that this [1;31moptim[mization should port trivially to VP8 as well. In VP8,
    the decoder doesn't use this function, but it does routinely show up
    on the profile for realtime encoding.
    
    Change-Id: I4f2848e4f41dc9a7694f73f3e75034bce08d1b12

[33mcommit eb6ef2417f9a386ba8d91e934d6e8691b8312a98[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Feb 20 10:16:24 2013 -0800

    Coding con-zero count rather than EOB for coeffs
    
    This patch revamps the entropy coding of coefficients to code first
    a non-zero count per coded block and correspondingly remove the EOB
    token from the token set.
    
    STATUS:
    Main encode/decode code achieving encode/decode sync - done.
    Forward and backward probability updates to the nzcs - done.
    Rd costing updates for nzcs - done.
    Note: The dynamic progrmaming apporach used in trellis quantization
    is not exactly compatible with nzcs. A sub[1;31moptim[mal approach has been
    used instead where branch costs are updated to account for changes
    in the nzcs.
    
    TODO:
    Training the default probs/counts for nzcs
    
    Change-Id: I951bc1e22f47885077a7453a09b0493daa77883d

[33mcommit 111ca4213355ac4edd10b3c14461096d56e3f3d0[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Mar 4 14:12:17 2013 -0800

    Make superblocks independent of macroblock code and data.
    
    Split macroblock and superblock tokenization and detokenization
    functions and coefficient-related data structs so that the bitstream
    layout and related code of superblock coefficients looks less like it's
    a hack to fit macroblocks in superblocks.
    
    In addition, unify chroma transform size selection from luma transform
    size (i.e. always use the same size, as long as it fits the predictor);
    in practice, this means 32x32 and 64x64 superblocks using the 16x16 luma
    transform will now use the 16x16 (instead of the 8x8) chroma transform,
    and 64x64 superblocks using the 32x32 luma transform will now use the
    32x32 (instead of the 16x16) chroma transform.
    
    Lastly, add a trellis [1;31moptim[mize function for 32x32 transform blocks.
    
    HD gains about 0.3%, STDHD about 0.15% and derf about 0.1%. There's
    a few negative points here and there that I might want to analyze
    a little closer.
    
    Change-Id: Ibad7c3ddfe1acfc52771dfc27c03e9783e054430

[33mcommit 04c24078748dc062b97bbb1b2cadb35c1a09703e[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Feb 20 16:32:02 2013 -0800

    convolve test: validate 1D filters are 1D
    
    Since the 8-tap lowpass filter is non-interpolating, the results are
    different between applying it at whole-pel values and not. This
    means that 1D-only versions are requried to be implemented, as
    opposed to being an [1;31moptim[mization of the 2D case. Calling the 2D
    filter instead of the horizontal-only filter is not equivalent
    in this case. Update the test to pass invalid filters to the
    unused stage of the 1D-only calls, to verify they're unused.
    
    Change-Id: Idc1c490f059adadd4cc80dbe770c1ccefe628b0a

[33mcommit 7ad8dbe417b03619855892e32726b75de9e9da1a[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Feb 27 10:23:06 2013 -0800

    Remove unused vp9_copy32xn
    
    This function was part of an [1;31moptim[mization used in VP8 that required
    caching two macroblocks. This is unused in VP9, and might not
    survive refactoring to support superblocks, so removing it for now.
    
    Change-Id: I744e585206ccc1ef9a402665c33863fc9fb46f0d

[33mcommit 499fe05dc030b31d15c2ad9717e6bcee839f7d12[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Feb 22 16:18:08 2013 -0800

    [1;31moptim[mize forward 16x16 DCT for accuracy
    
    This commit added pre/post scaling for first half of fDCT16x16 to
    reduce error, by simulation of 100,000 blocks for random inputs,
    the average sse reduced from 2.1/block to 0.0498/block.
    
    also enabled tests for 16x16 fDCT and iDCT
    
    Change-Id: Id2a95f0464c6dd4118797d456237ae90274c0f02

[33mcommit bf0570a7e6773ea4daeeab1e59a911ba7e002b23[m
Merge: 8bf1c4dde 22012ee99
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Feb 22 22:20:57 2013 -0800

    Merge "[1;31moptim[mize 8x8 fdct rounding for accuracy" into experimental

[33mcommit 22012ee99416dae8640e1b72009ea9aeaa143850[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Feb 22 11:14:04 2013 -0800

    [1;31moptim[mize 8x8 fdct rounding for accuracy
    
    The commit added a final rounding choice for 8x8 forward dct to get
    rid of a sign bias at DC position and improve the accuracry in term
    of round trip error for 8x8 fDCT/iDCT.
    
    This commit also enabled forward 8x8 dct test.
    
    Change-Id: Ib67f99b0a24d513e230c7812bc04569d472fdc50

[33mcommit 0e4397f0cd8b8d6dc106a80d9e01b4ba63486b2b[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Mon Feb 11 17:43:27 2013 -0800

    Faster vp9_regular_quantize_b_8x8.
    
    A couple of scalar [1;31moptim[mizations speeding up quantization by about 1.6x. Overall encoder speedup is around 3%.
    
    Change-Id: I19981d1ef0b33e4e5732739574f367fe82771a84

[33mcommit 094e2572df23fd849688c2f95380b184c071efec[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Mon Feb 11 15:34:08 2013 -0800

    Faster convolve8_avg.
    
    Implement convolve8_avg using common functions which are already [1;31moptim[mized
    instead of using more obscure ones which have only C versions. Encoder
    overall speed-up of about 12%.
    
    Change-Id: I8c57aa76936c8a48f22b115f19f61d9f2ae1e4b6

[33mcommit 8e2c03fbfd7a1add56c03fc265600e714fcd0cd8[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Jan 24 18:28:33 2013 +0000

    Simplify Zero bin and zero bin run code.
    
    Simplification to eliminate a number of very large data
    data structures. All zero run, zbin boosts for different
    transform sizes are now limited to a maximum run length
    of 15 before they max out the boost.
    
    Some further work still needs be done to refactor, rationalize
    and [1;31moptim[mize the multiple quantizer functions.
    
    The simplification coupled with tweaks to the 16 element array
    now used for all transform sizes, has minimal effect on quality.
    
    Change-Id: I6f3948b8ca0418b60d4db9030ff19026a34ed423

[33mcommit b20ce07d76d9b8fa2230bfccdd11324b565e39c0[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Fri Jan 11 17:11:04 2013 -0800

    WIP: Added sse2 version of vp9_mb_lpf_horizontal_edge_w
    
    and vp9_mb_lpf_vertical_edge_w_sse2.  This was quickly done so we can
    run some tests over the weekend.  Future commits will [1;31moptim[mize/refactor these
    functions further.
    
    The decoder performance improved by ~17% for the clip used.
    
    Change-Id: I612687cd5a7670ee840a0cbc3c68dc2b84d4af76

[33mcommit f1c56a8c8cb0959734a14446c60c132de676388a[m
Merge: 879cb7d96 8d568312a
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jan 8 12:59:08 2013 -0800

    Merge "vp9_sub_pixel_variance16x2 SSE2 [1;31moptim[mization" into experimental

[33mcommit 8d568312a2e6882a336eb3525fbe6b9e752163f3[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jan 8 10:44:19 2013 -0800

    vp9_sub_pixel_variance16x2 SSE2 [1;31moptim[mization
    
    About 5% decoder speedup.
    
    Change-Id: Ib6687d337af758a536a0e7e289f400990f1f9794

[33mcommit 210dc5b2db5de75b6cdd97e0bf79e7fb2bc11cba[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Dec 11 17:06:35 2012 -0800

    Further improvements on the hybrid dwt/dct expt
    
    Modifies the scanning pattern and uses a floating point 16x16
    dct implementation for now to handle scaling better.
    Also experiments are in progress with 2/6 and 9/7 wavelets.
    
    Results have improved to within ~0.25% of 32x32 dct for std-hd
    and about 0.03% for derf. This difference can probably be bridged by
    re-[1;31moptim[mizing the entropy stats for these transforms. Currently
    the stats used are common between 32x32 dct and dwt/dct.
    
    Experiments are in progress with various scan pattern - wavelet
    combinations.
    
    Ideally the subbands should be tokenized separately, and an
    experiment will be condcuted next on that.
    
    Change-Id: Ia9cbfc2d63cb7a47e562b2cd9341caf962bcc110

[33mcommit 52d350febfc19ec5a1783789c183af2397bf5b20[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Dec 3 12:26:51 2012 -0800

    Begin to refactor vpx_scale usage in VP9
    
    Only declare the functions in vpx_scale RTCD and include the relevant
    header.
    
    Remove unused files and functions in vpx_scale to avoid wasting time
    renaming. vpx_scale/win32/scaleopt.c contains functions which have not
    been called in a long time but are potentially [1;31moptim[mized.
    
    The 'vp8' functions have not been renamed yet. That is for after the
    cleanup.
    
    Change-Id: I2c325a101d60fa9d27e7dfcd5b52a864b4a1e09c

[33mcommit a905672906716b2be9e741d81213177ebb4720d2[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Sun Dec 2 14:14:00 2012 -0800

    Remove ARM [1;31moptim[mizations from VP9
    
    Change-Id: I9f0ae635fb9a95c4aa1529c177ccb07e2b76970b

[33mcommit 806d05e1a81b3a04bdab7af08fb032f57b815886[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Dec 3 14:53:45 2012 -0800

    merged [1;31moptim[miz_b_16x16() into optmize_b()
    
    The commit changed the trellis quantization function [1;31moptim[mize_b() to
    work for MBs using all transform sizes, and eliminated the function
    for MB using 16x16 transform only, [1;31moptim[mize_b_16x16.
    
    Change-Id: I3fa650587ab5198ed16315b38754783a72b33ba2

[33mcommit 57e72208b398b948cebb6c9ae1d861503a9e3b07[m
Merge: 514e1c937 34591b54d
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Dec 3 13:54:38 2012 -0800

    Merge "Remove ARM [1;31moptim[mizations from VP9" into experimental

[33mcommit c6bd29e2f55b14a0b0dacb5af407f485ee7ffb3f[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Dec 3 12:26:51 2012 -0800

    Begin to refactor vpx_scale usage in VP9
    
    Only declare the functions in vpx_scale RTCD and include the relevant
    header.
    
    Remove unused files and functions in vpx_scale to avoid wasting time
    renaming. vpx_scale/win32/scaleopt.c contains functions which have not
    been called in a long time but are potentially [1;31moptim[mized.
    
    The 'vp8' functions have not been renamed yet. That is for after the
    cleanup.
    
    Change-Id: I2c325a101d60fa9d27e7dfcd5b52a864b4a1e09c

[33mcommit 34591b54dda4a25f42aa5add71b625b2600f6d6a[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Sun Dec 2 14:14:00 2012 -0800

    Remove ARM [1;31moptim[mizations from VP9
    
    Change-Id: I9f0ae635fb9a95c4aa1529c177ccb07e2b76970b

[33mcommit 2669f42b0d50bcff236176584caf623585e487b7[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Nov 12 15:09:25 2012 +0000

    New inter mode context
    
    This change is a fix / extension of the newbestrefmv
    experiment. As such it is presented without IFDEF.
    
    The change creates a new context for coding inter modes
    in vp9_find_mv_refs(). This replaces the context that
    was previously calculated in vp9_find_near_mvs().
    The new context is un[1;31moptim[mized and not necessarily
    any better at this stage (results pending), but eliminates
    the need for a legacy call to vp9_find_near_mvs().
    Based on numbers from Scott, this could help decode
    speed by several %.
    
    In a later patch I will add support for forward update of
    context (assuming this helps) and refine the context as
    necessary.
    
    Change-Id: I1cd991b82c8df86cc02237a34185e6d67510698a

[33mcommit 637c4d2ec866b09a9b83f44b0f0fc1be304e5d76[m
Merge: 96276f97e 3182ab619
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Oct 18 12:39:10 2012 -0700

    Merge "Use correct context for [1;31moptim[mize_b() in vp8_[1;31moptim[mize_mby_8x8()." into experimental

[33mcommit 3182ab619da1fea6b95a190cf8383a3bcf694728[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Oct 17 13:14:56 2012 -0700

    Use correct context for [1;31moptim[mize_b() in vp8_[1;31moptim[mize_mby_8x8().
    
    Change-Id: Ic975ab85a9924adc7b3d421f64155cc79f40ffd0

[33mcommit e7a4bccaee301285875bbc0e7133c2a21cb690ec[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Sat Oct 13 08:31:02 2012 -0700

    Make [1;31moptim[mize_mb_16x16() static.
    
    It is not used outside this file.
    
    Change-Id: Id0947180edab4c5f1f50589863350b21e97c25f1

[33mcommit 781f6ad7c68eda359526e546d825dfab754170c2[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Sat Oct 13 08:29:59 2012 -0700

    Remove assignment in vp8_[1;31moptim[mize_mby_16x16().
    
    The result of the assignment is unused.
    
    Change-Id: Id94b790baa6451f24e9aeda6f036390388d93921

[33mcommit 11e42d46aab65b41af3a543fa25109855224b025[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Sat Oct 13 08:26:05 2012 -0700

    Remove duplicate code in [1;31moptim[mize_mb_NxN vs. vp8_[1;31moptim[mize_mby/uv_NxN().
    
    Instead, just call vp8_[1;31moptim[mize_mby/uv_NxN() inside [1;31moptim[mize_mb_NxN().
    
    Change-Id: Ief941064d86db4277ba02e990a26819144b55f7c

[33mcommit f1e629320b5526c02588a23de118f8810d13568a[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Oct 12 21:41:58 2012 -0700

    Add a _4x4 sufix to all 4x4-transform-related functions.
    
    This includes trellis [1;31moptim[mization, forward/inverse transform,
    quantization, tokenization and stuffing functions.
    
    Change-Id: Ibd34132e1bf0cd667671a57b3f25b3d361b9bf8a

[33mcommit 778ec421e7f5d75e360fa5e67e25fbf9d1714ca3[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Sep 7 14:21:22 2012 +0100

    Partial merge of NEWBESTREFMV and NEW_MVREF.
    
    This commit merges those parts of the CONFIG_NEW_MVREF
    that specifically relate to choosing a better set of candidate
    MV references into the NEWBESTREFMV experiment.
    
    CONFIG_NEW_MVREF will then be used for changes relating
    to the explicit coding of a cost [1;31moptim[mized MV reference in the
    bitstream as part of MV coding.
    
    Change-Id: Ied982c0ad72093eab29e38b8cd74d5c3d7458b10

[33mcommit ee59dd7e1513196a4f1b82cc98ca9c92bb9fd2e8[m
Merge: 60ed95453 525b18391
Author: Christian Duvivier <cduvivier@google.com>
Date:   Thu Aug 16 17:03:08 2012 -0700

    Merge "A few more [1;31moptim[mizations, about 1% overall speedup." into experimental

[33mcommit 525b18391055627ac8fa9bc2998d49fbf4e553c0[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Wed Aug 15 22:41:32 2012 -0700

    A few more [1;31moptim[mizations, about 1% overall speedup.
    
    Unroll horizontal pass, no more intermediate buffer, faster special transpose.
    
    Change-Id: I05df75be4e5f01420066cdf3c61a2edf35bedb64

[33mcommit 5a34e0eb89e16aafa2dafc73596078409fa40bbb[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Tue Aug 14 18:19:09 2012 -0700

    First partial snapshot of vectorized 8-tap filtering.
    
    About 3.5x faster, 30% overall encoder speedup. Rest of [1;31moptim[mizations
    will come soon (see TODO section in filter_sse4.c).
    
    Change-Id: If18108048bfd5345fc942e8574e4c7f58e0e86e0

[33mcommit 1b8169bb5475dbc1889e016c5c2b32d61562e92a[m
Author: Daniel Kang <ddkang@google.com>
Date:   Fri Aug 10 15:34:31 2012 -0700

    Combine [1;31moptim[mize_b and [1;31moptim[mize_b_8x8
    
    The 16x16 has not been done yet for speed reasons.
    
    Change-Id: I066e369a065674d58986e937344c9303fed19450

[33mcommit e44ee38aef85e48601e54a13939f2a299bb583e0[m
Author: Hui Su <huisu@google.com>
Date:   Wed Jun 13 19:03:31 2012 -0700

    Add lossless compression mode.
    
    This commit adds lossless compression capability to the experimental
    branch. The lossless experiment can be enabled using --enable-lossless
    in configure. When the experiment is enabled, the encoder will use
    lossless compression mode by command line option --lossless, and the
    decoder automatically recognizes a losslessly encoded clip and decodes
    accordingly.
    
    To achieve the lossless coding, this commit has changed the following:
        1. To encode at lossless mode, encoder forces the use of unit
    quantizer, i.e, Q 0, where effective quantization is 1. Encoder also
    disables the usage of 8x8 transform and allows only 4x4 transform;
        2. At Q 0, the first order 4x4  DCT/IDCT have been switched over
    to a pair of forward and inverse Walsh-Hadamard Transform
    (http://goo.gl/EIsfy),  with proper scaling applied to match the range
    of the original 4x4 DCT/IDCT pair;
        3. At Q 0, the second order remains to use the previous
    walsh-hadamard transform pair. However, to maintain the reversibility
    in second order transform at Q 0, scaling down is applied to first
    order DC coefficients prior to forward transform, and scaling up is
    applied to the second order output prior to quantization. Symmetric
    upscaling and downscaling are added around inverse second order
    transform;
        4. At lossless mode, encoder also disables a number of minor
    features to ensure no loss is introduced, these features includes:
            a. Trellis quantization [1;31moptim[mization
            b. Loop filtering
            c. Aggressive zero-binning, rounding and zero-bin boosting
            d. Mode based zero-bin boosting
    
    Lossless coding test was performed on all clips within the derf set,
    to verify that the commit has achieved lossless compression for all
    clips. The average compression ratio is around 2.57 to 1.
    (http://goo.gl/dEShs)
    
    Change-Id: Ia3aba7dd09df40dd590f93b9aba134defbc64e34

[33mcommit 78ecbc98e4df70e94e8f2029c8d2d65f643e6f74[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Mar 28 15:19:45 2012 -0700

    Bug fix in probability update savings computation
    
    Found this bug while tracking down some anomalies in my experiments.
    Since vp8_cost_one and vp8_cost_zero return unsigned int, the
    bit shift by 8 will be incorrect if the value is negative.
    I am cautiously [1;31moptim[mistic that this fix will make the prob
    updates more correct and somewhat improve results across the board.
    But the update probabilities will need to be retuned I think.
    
    Patch 2: Adding more of the same fixes using a macro.
    
    Change-Id: I1a168f040e74e8c67e7225103b1c2af9a611da49

[33mcommit 6035da5448392244936f1e1a9079e7f6cd857ffe[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Mar 9 17:32:50 2012 -0800

    WebM Experimental Codec Branch Snapshot
    
    This is a code snapshot of experimental work currently ongoing for a
    next-generation codec.
    
    The codebase has been cut down considerably from the libvpx baseline.
    For example, we are currently only supporting VBR 2-pass rate control
    and have removed most of the code relating to coding speed, threading,
    error resilience, partitions and various other features.  This is in
    part to make the codebase easier to work on and experiment with, but
    also because we want to have an open discussion about how the bitstream
    will be structured and partitioned and not have that conversation
    constrained by past work.
    
    Our basic working pattern has been to initially encapsulate experiments
    using configure options linked to #IF CONFIG_XXX statements in the
    code. Once experiments have matured and we are reasonably happy that
    they give benefit and can be merged without breaking other experiments,
    we remove the conditional compile statements and merge them in.
    
    Current changes include:
    * Temporal coding experiment for segments (though still only 4 max, it
      will likely be increased).
    * Segment feature experiment - to allow various bits of information to
      be coded at the segment level. Features tested so far include mode
      and reference frame information, limiting end of block offset and
      transform size, alongside Q and loop filter parameters, but this set
      is very fluid.
    * Support for 8x8 transform - 8x8 dct with 2nd order 2x2 haar is used
      in MBs using 16x16 prediction modes within inter frames.
    * Compound prediction (combination of signals from existing predictors
      to create a new predictor).
    * 8 tap interpolation filters and 1/8th pel motion vectors.
    * Loop filter modifications.
    * Various entropy modifications and changes to how entropy contexts and
      updates are handled.
    * Extended quantizer range matched to transform precision improvements.
    
    There are also ongoing further experiments that we hope to merge in the
    near future: For example, coding of motion and other aspects of the
    prediction signal to better support larger image formats, use of larger
    block sizes (e.g. 32x32 and up) and lossless non-transform based coding
    options (especially for key frames). It is our hope that we will be
    able to make regular updates and we will warmly welcome community
    contributions.
    
    Please be warned that, at this stage, the codebase is currently slower
    than VP8 stable branch as most new code has not been [1;31moptim[mized, and
    even the 'C' has been deliberately written to be simple and obvious,
    not fast.
    
    The following graphs have the initial test results, numbers in the
    tables measure the compression improvement in terms of percentage. The
    build has  the following optional experiments configured:
    --enable-experimental --enable-enhanced_interp --enable-uvintra
    --enable-high_precision_mv --enable-sixteenth_subpel_uv
    
    CIF Size clips:
    http://getwebm.org/tmp/cif/
    HD size clips:
    http://getwebm.org/tmp/hd/
    (stable_20120309 represents encoding results of WebM master branch
    build as of commit#7a15907)
    
    They were encoded using the following encode parameters:
    --good --cpu-used=0 -t 0 --lag-in-frames=25 --min-q=0 --max-q=63
    --end-usage=0 --auto-alt-ref=1 -p 2 --pass=2 --kf-max-dist=9999
    --kf-min-dist=0 --drop-frame=0 --static-thresh=0 --bias-pct=50
    --minsection-pct=0 --maxsection-pct=800 --sharpness=0
    --arnr-maxframes=7 --arnr-strength=3(for HD,6 for CIF)
    --arnr-type=3
    
    Change-Id: I5c62ed09cfff5815a2bb34e7820d6a810c23183c

[33mcommit f64725a0097819edf124fc15d300c77b2b42f744[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Feb 9 16:12:23 2012 -0800

    Improved coding using 8x8 transform
    
    In summary, this commit encompasses a series of changes in attempt to
    improve the 8x8 transform based coding to help overall compression
    quality, please refer to the detailed commit history below for what
    are the rationale underly the series of changes:
    
    a. A frame level flag to indicate if 8x8 transform is used at all.
    b. 8x8 transform is not used for key frames and small image size.
    c. On inter coded frame, macroblocks using modes B_PRED, SPLIT_MV
    and I8X8_PRED are forced to using 4x4 transform based coding, the
    rest uses 8x8 transform based coding.
    d. Encoder and decoder has the same assumption on the relationship
    between prediction modes and transform size, therefore no signaling
    is encoded in bitstream.
    e. Mode decision process now calculate the rate and distortion scores
    using their respective transforms.
    
    Overall test results:
    1. HD set
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/HD_t8x8_20120206.html
    (avg psnr: 3.09% glb psnr: 3.22%, ssim: 3.90%)
    2. Cif set:
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/cif_t8x8_20120206.html
    (avg psnr: -0.03%, glb psnr: -0.02%, ssim: -0.04%)
    It should be noted here, as 8x8 transform coding itself is disabled
    for cif size clips, the 0.03% loss is purely from the 1 bit/frame
    flag overhead on if 8x8 transform is used or not for the frame.
    
    ---patch history for future reference---
    Patch 1:
    this commit tries to select transform size based on macroblock
    prediction mode. If the size of a prediction mode is 16x16, then
    the macroblock is forced to use 8x8 transform. If the prediction
    mode is B_PRED, SPLITMV or I8X8_PRED, then the macroblock is forced
    to use 4x4 transform. Tests on the following HD clips showed mixed
    results: (all hd clips only used first 100 frames in the test)
    
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hdmodebased8x8.html
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hdmodebased8x8_log.html
    
    while the results are mixed and overall negative, it is interesting to
    see 8x8 helped a few of the clips.
    
    Patch 2:
    this patch tries to hard-wire selection of transform size based on
    prediction modes without using segmentation to signal the transform size.
    encoder and decoder both takes the same assumption that all macroblocks
    use 8x8 transform except when prediciton mode is B_PRED, I8X8_PRED or
    SPLITMV. Test results are as follows:
    
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/cifmodebase8x8_0125.html
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hdmodebased8x8_0125log.html
    
    Interestingly, by removing the overhead or coding the segmentation, the
    results on this limited HD set have turn positive on average.
    
    Patch 3:
    this patch disabled the usage of 8x8 transform on key frames, and kept the
    logic from patch 2 for inter frames only. test results on HD set turned
    decidedly positive with 8x8 transform enabled on inter frame with 16x16
    prediction modes: (avg psnr: .81% glb psnr: .82 ssim: .55%)
    
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hdintermode8x8_0125.html
    results on cif set still negative overall
    
    Patch 4:
    continued from last patch, but now in mode decision process, the rate and
    distortion estimates are computed based on 8x8 transform results for MBs
    with modes associated with 8x8 transform. This patch also fixed a problem
    related to segment based eob coding when 8x8 transform is used. The patch
    significantly improved the results on HD clips:
    
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hd8x8RDintermode.html
    (avg psnr: 2.70% glb psnr: 2.76% ssim: 3.34%)
    results on cif also improved, though they are still negative compared to
    baseline that uses 4x4 transform only:
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/cif8x8RDintermode.html
    (avg psnr: -.78% glb psnr: -.86% ssim: -.19%)
    
    Patch 5:
    This patch does 3 things:
    a. a bunch of decoder bug fixes, encodings and decodings were verified
    to have matched recon buffer on a number of encodes on cif size mobile and
    hd version of _pedestrian.
    b. the patch further improved the rate distortion calculation of MBS that
    use 8x8 transform. This provided some further gain on compression.
    c. the patch also got the experimental work SEG_LVL_EOB to work with 8x8
    transformed macroblock, test results indicates it improves the cif set
    but hurt the HD set slightly.
    
    Tests results on HD clips:
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/HD_t8x8_20120201.html
    (avg psnr: 3.19% glb psnr: 3.30% ssim: 3.93%)
    
    Test results on cif clips:
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/cif_t8x8_20120201.html
    (avg psnr: -.47% glb psnr: -.51% ssim: +.28%)
    
    Patch 6:
    Added a frame level flag to indicate if 8x8 transform is allowed at all.
    temporarily the decision is based on frame size, can be [1;31moptim[mized later
    one. This get the cif results to basically unchanged, with one bit per
    frame overhead on both cif and hd clips.
    
    Patch 8:
    Rebase and Merge to head by PGW.
    Fixed some suspect 4s that look like hey should be 64s in regard
    to segmented EOB. Perhaps #defines would be bette.
    Bulit and tested without T8x8 enabled and produces unchanged
    output.
    
    Patch 9:
    Corrected misalligned code/decode of "txfm_mode" bit.
    Limited testing for correct encode and decode with
    T8x8 configured on derf clips.
    
    Change-Id: I156e1405d25f81579d579dff8ab9af53944ec49c

[33mcommit 5e7d7d3d95ecf2ce2b50ff4b8d5dbea0ae190e32[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Jan 13 14:37:17 2012 -0800

    new loop filter functions for macroblock boundaries
    
    The commit adds a new set of loop filter for macroblock edge filtering.
    The new loop filter has a mask to detect so-called "flat" regions. The
    detection checks 5 pixels of each side of an edge. If the all pixels
    have value with +/-1 from the edge pixel on the same side, the region
    is treated as a "flat" region. For such case, a 7 tap filter is used
    to change 3 pixel values on each side. The 7 taps are:
                   [1, 1, 1, 2, 1, 1, 1]/8
    The furthest away pixels used as input are +/-5 away from edge. For
    non-flat region, we fall back to old filtering. It should be noted
    here that the thresholds and filter taps may require more [1;31moptim[mization
    for best possible results.
    
    Tests on a set of hd clips showed consistent gains:
    http://www.corp.google.com/~yaowu/no_crawl/mblpf_hd.html
    (avg psnr: .83% glb psnr: .77% ssim: .82%)
    
    Tests on derf set also showed consistent gains:
    http://www.corp.google.com/~yaowu/no_crawl/mblpf_derf.html
    (avg psnr: .24% glb psnr: .22% ssim: .48%)
    
    Change-Id: I0855b1ff48e79e1175c20b81967137e18b2af352

[33mcommit 60cb39da860c91adc45f51f2dfa193d19598a801[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Tue Dec 6 11:53:02 2011 -0800

    Dual 16x16 inter prediction.
    
    This patch introduces the concept of dual inter16x16 prediction. A
    16x16 inter-predicted macroblock can use 2 references instead of 1,
    where both references use the same mvmode (new, near/est, zero). In the
    case of newmv, this means that two MVs are coded instead of one. The
    frame can be encoded in 3 ways: all MBs single-prediction, all MBs dual
    prediction, or per-MB single/dual prediction selection ("hybrid"), in
    which case a single bit is coded per-MB to indicate whether the MB uses
    single or dual inter prediction.
    
    In the future, we can (maybe?) get further gains by mixing this with
    Adrian's 32x32 work, per-segment dual prediction settings, or adding
    support for dual splitmv/8x8mv inter prediction.
    
    Gain (on derf-set, CQ mode) is ~2.8% (SSIM) or ~3.6% (glb PSNR). Most
    gain is at medium/high bitrates, but there's minor gains at low bitrates
    also. Output was confirmed to match between encoder and decoder.
    
    Note for [1;31moptim[mization people: this patch introduces a 2nd version of
    16x16/8x8 sixtap/bilin functions, which does an avg instead of a
    store. They may want to look and make sure this is implemented to
    their satisfaction so we can [1;31moptim[mize it best in the future.
    
    Change-ID: I59dc84b07cbb3ccf073ac0f756d03d294cb19281

[33mcommit d39b5d05462c4b0755dd93814e887bda22b7327c[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Nov 21 15:45:10 2011 +0000

    Removal of Qindex LUTS.
    
    One of the problems arising when tweaking or adjusting the quantizer
    tables is that there are a lot of look up tables that depend on the QINDEX.
    Any adjustment to the link between QINDEX and real quantizer therefore tends
    to break aspects of for example the rate control.
    
    In this check in I have replaced several of the look up tables with functions that
    approximate the same results as the old Q luts but use a formulaic approach
    based on real Q values rather than QIndex. This should hopefully make it easier
    to experiment with changes to the Q tables without always having to go through
    and hand [1;31moptim[mize a set of look up tables. Once things stabilize we may choose
    to re-instate luts for the sake of performance.
    
    Patch 2:
        Addressed Ronald's comments.
        vp8_init_me_luts() Added so luts only initialized once.
    
    Change-Id: Ic80db2212d2fd01e08e8cb5c7dca1fda1102be57

[33mcommit 01ce04bc06d34a3d58cd900664d233f41e6e06d0[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Oct 5 11:26:00 2011 +0100

    Further segment feature extensions.
    
    This quite large check in includes the following:
    
    Merge in some code from Ronald (mbgraph.c) that scans a Gf/arf group.
    This is used as a basis for a simple segmentation for the normal frames
    in a gf/arf group. This code also uses satd functions from Yaowu.
    
    Adds functionality for coding the latest possible position of an EOB for
    blocks in the segment. (Currently 0-15 only, hence just for 4x4 dct).
    Where the EOB position is 0 this acts like "skip" and the normal coding
    of skip at the per mb level is disabled.
    
    Added functions (seg_common.c) for setting and reading segment feature
    elements. These may want to be [1;31moptim[mized away at some point but while the
    mecahnism is in a state of flux they provide a single location for making
    changes and keep things a bit cleaner.
    
    This is still proof of concept code. Currently the tested feature set:-
    
    Quantizer,
    Loop Filter level,
    Reference frame,
    Prediction Mode,
    EOB end stop.
    
    TBD:-
    
    Add functions for setting and reading the feature data with range
    and validity checking.
    
    Handling of signed and unsigned feature data. At the moment all is assumed
    to be signed and a sign bit is coded but many cannot be negative.
    
    Correct handling of EOB feature with intra coded blocks.
    
    Testing/trapping of legal/illegal ref frame and mode combinations.
    
    Transform size switch plus merge and test with 8c8 DCT work
    
    Merge and test with Sumans Segmenation coding [1;31moptim[mizations
    
    Change-Id: Iee12e83661c7abbd1e0ce6810915eb4ec35e2d8e
For keyword regression:
[33mcommit c88f1ec8ca1e51bf2f38462b255e72c3a4b748c0[m
Author: Joshua Litt <joshualitt@google.com>
Date:   Mon Nov 11 12:31:42 2013 -0800

    Android.mk file for vpx unittests
    
    These changes are to support automated [1;31mregression[ms of vpx on android
            new file:   test/android/Android.mk
            new file:   test/android/README
            new file:   test/android/get_files.py
    
    Change-Id: I52c8e9daf3676a3561badbe710ec3a16fed72abd

[33mcommit 2d1ab9a85049852434129c0862f84dd412b32295[m
Author: James Zern <jzern@google.com>
Date:   Mon Oct 21 18:07:50 2013 +0200

    vp9 dec/com: only update frame counts when necessary (2)
    
    missed one in vp9_detokenize.c in the last
    + add some asserts in vp9_decode_frame() to catch [1;31mregression[ms
    
    Change-Id: Ide67505114ee17efdafb13694aed0c09039e5a16

[33mcommit e81a3ede4c18153df675a72637973a5c1e53b428[m
Author: Martin Storsjö <martin@martin.st>
Date:   Sun Sep 29 21:22:37 2013 +0300

    thumb: Keep whitespace between arguments as before
    
    Include the whitespace after the first argument's comma in the
    optional first argument group.
    
    This fixes a minor style [1;31mregression[m in the converted output
    since 2a233dd31.
    
    Change-Id: I254f4aaff175e2d728d9b6f3c12ede03846adcf1
For keyword speed:
[33mcommit e1b6c42eed8d9526d62539afcb607925a91a2a1c[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri Nov 15 08:00:43 2013 -0800

    partition plane context [1;31mspeed[m up
    
    Removes silly operations inside loop.
    
    Change-Id: I9eeab1e914e715a887f86cf1089de508e2364165

[33mcommit b6b91432188a4773456b31a38194799b7b71e9c6[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Nov 7 14:56:58 2013 -0800

    Dual buffer encoding for intra modes
    
    Overall change (using dual buffer scheme for superblocks of both inter
    and intra modes) reduces [1;31mspeed[m 2 runtime:
    bluesky_1080p at 6000kbps:   263553ms -> 257441ms
    riverbed_1080p at 8000kbps:  233230ms -> 225308ms.
    
    Change-Id: Idf8d70f768a4b0d97b2a8506372c57b7b4022119

[33mcommit 5ade423774690e2bf877559dc1a1f9547db5dac1[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Nov 5 17:25:38 2013 -0800

    Removes conditional statements from band getting
    
    Implements scan order to band map with arrays in both the encoder
    and decoder to remove conditional statements.
    
    Encoding seems to be about 1% faster at [1;31mspeed[m 0, tested on football.
    Decoding seems to be about 0.5-1% faster on a set of 25 videos.
    
    Change-Id: Idb233ca0b9e0efd790e30880642e8717e1c5c8dd

[33mcommit 49cf335e7f076e90ff45a51b374d7d11576efbd5[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Nov 1 14:08:54 2013 -0700

    Improve loopfilter function
    
    This patch continued the work done in "Rewrite loop_filter_info_n
    struct"(commit:00dbd369c70270428d56da6d15ea5486fc821c52) to further
    improve loopfilter function.
    
    1. Instead of storing pointers to thresholds, store loopfilter
    levels within 64x64 SB;
    2. Since loopfilter levels are already calculated in setup_mask,
    we don't need call build_lfi to look up them again. Just save
    loopfilter levels in setup_mask.
    3. Reorganized and simplified filter_block_plane().
    
    Tests showed a ~0.8% decoder [1;31mspeed[mup.
    
    Change-Id: I723c7779738bbc2afcb9afa2c6f78580ee6c3af7

[33mcommit 6cf3b98ac2df088d58e5ff834d025139ee3a9f54[m
Merge: 4bdb1d2e6 551829d8f
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Nov 7 09:40:07 2013 -0800

    Merge "Miscelleneous changes in detokenize for [1;31mspeed[m"

[33mcommit 551829d8f364718bcea06a162021087bedcd22a4[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Nov 1 16:01:52 2013 -0700

    Miscelleneous changes in detokenize for [1;31mspeed[m
    
    Changes to reduce branching in detokenization  in order
    to improve decode [1;31mspeed[m.
    
    Change-Id: I23a74d072cc14d99f6fc054c1e6a72021e777903

[33mcommit 3a833ea38f1231dd940eb129b0f1caccd370ff10[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Nov 4 16:34:18 2013 -0800

    token_cache changes in decoder
    
    Removes stack-alocation of token_cache in decode_coefs function
    
    Seems to achieve about 1% decode [1;31mspeed[m improvement as tested on
    25 480p videos.
    
    Change-Id: I8e7eb3361fa09d9654dfad0677a6d606701fdc6e

[33mcommit b26ce8b1bead574613fa20212bd6f15cc9613e2e[m
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Oct 22 11:30:06 2013 -0700

    Updates to 1-pass:
    
       -Don't reduce maxQ for gold/alt in CBR mode.
    
       -Fix to min/maxQ for first/initial key frame.
    
       -Add more [1;31mspeed[ms to datarate test and reduce the starting bitrate for test.
    
    Change-Id: Id2a333d76dd3f6a51b322ca984588e2a22159c58

[33mcommit 00dbd369c70270428d56da6d15ea5486fc821c52[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Oct 25 14:32:10 2013 -0700

    Rewrite loop_filter_info_n struct
    
    Restructured the storing of loopfilter information. Deleted
    loop_filter_info struct and reduced copying happened in every
    superblock.
    
    Tests showed a 0.5% ~ 0.8% decoder [1;31mspeed[m gain.
    
    Change-Id: Ie6a8e46bae71dc3a3cd8c6054f5de540b8e0ef5e

[33mcommit 175c313a128fd3b543e73751dc2334af5c45a5fa[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Oct 18 08:56:30 2013 -0700

    Improve scale_factors struct
    
    The ref's scale_factors are set at frame level, and then copied for
    each partition block. Since the struct members are mostly constant,
    this patch separated the constant and non-constant members, and
    reduced struct copying. This gave 0.5% ~ 1.4% decoder [1;31mspeed[m gain.
    
    Change-Id: I94043bf5a6995c8042da52e5c661818dfa6f6d4c

[33mcommit a2769bb73d005c9f94c07fef808fd2aee7d9b5a4[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Sat Oct 19 12:24:59 2013 +0100

    Reduced delta for kf/gf/arf when at maxq.
    
    Delta reduced because of concern about popping on some
    very hard clips.
    
    Also allow some frame recode at [1;31mspeed[m 2 for kf/gf/arf.
    
    Change-Id: Ib47dff42da41aa6eec83b7285fcaaca24abb851e

[33mcommit 72033fcff8e1ce2e94f578910a1cfa77cd1bf533[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 16 12:43:03 2013 -0700

    Make memory alloc in pick_mode_context bsize aware
    
    This commit makes the buffer allocation of zcoeff_blk array in
    pick_mode_context block size aware. It calculates the number of
    4x4 blocks in the partition and assigns the memory space accordingly.
    This process (and the uninitialization) is done once for each encoding
    pass. It allows memory copy of smaller buffer when possible.
    
    For football at 600kbps, the runtimes improve by about 1%:
    [1;31mspeed[m 1, 45961ms -> 45472ms
    [1;31mspeed[m 2, 23863ms -> 23598ms
    
    Change-Id: Id2ca24906fa89f46fa5fe742ec4b8efc2a61f877

[33mcommit 8e3ce1a9e3ee2139fea89d5508a1d268f20426b7[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Oct 14 16:03:23 2013 -0700

    Re-design all-zero-coeff block index buffer use
    
    Use the zcoeff_blk buffer of PICK_MODE_CONTEXT to store the indexes
    of all-zero-coeff block of the current best mode. Remove the temporary
    buffer best_zcoeff_blk defined in the rate-distortion optimization
    loop. This improves the [1;31mspeed[m performance by about 0.5% in all [1;31mspeed[m
    settings.
    
    Change-Id: Ie3e15988ddfa581eafa2e19a8228d3fe4a46095c

[33mcommit f60a3910c4ab7725dc6dd54877bbdd3ed5f0e187[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Oct 11 11:26:32 2013 -0700

    Move token_cache from cost_coeffs to MACROBLOCK
    
    This commit moves token_cache buffer into macroblock struct, instead
    of defining as a local variable in cost_coeffs. This avoids repeatedly
    re-allocating memory space in the rate-distortion optimization loop.
    
    The runtime at [1;31mspeed[m 0 reduces:
    bus 2000kbps, 161692ms to 159951ms
    football 600kbps, 229505ms to 225821ms
    
    Change-Id: If7da6b0b6d8c5138a16271a33c4548fba33d8840

[33mcommit d9655e42b84a405a291ad142df748cc7e0364916[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Oct 10 17:24:55 2013 -0700

    Change in rddiv parameter to make it a power of 2
    
    Converts the constant rddiv parameter to 128 (from 100) and
    implements RDCOST with bit-shift rather than multiplication.
    Other parameters are also adjusted to roughly keep the same
    balance between Rate and Distortion.
    
    There is a slight [1;31mspeed[m-up of about 0.5-1% (at [1;31mspeed[m 0) as
    testted on football_cif.
    
    There is a slight change in performance due to small change
    in the parameters.
    derfraw300: +0.033%
    stdhdraw250; +0.102%
    
    Change-Id: I70ac69f58fa71c83108f68fe41796cd19d1fc760

[33mcommit 8b989f5b23a8a7d3337f486622001f58a0443184[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Oct 9 14:57:28 2013 +0100

    Disable recode loop.
    
    For VBR coding disable the recode loop for [1;31mspeed[ms > 0.
    
    Results pending.
    
    Change-Id: I2cd9a87c3fcbe39c05b954798d0671a4ca62c37f

[33mcommit 3fb728c749db856423633125c5be699e44788724[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Oct 10 13:51:35 2013 -0700

    SSE2 8-tap sub-pixel filter optimization
    
    To ensure fast encoding/decoding on devices without ssse3 support,
    SSE2 optimization of sub-pixel filters was done. Test using 1080p
    clip showed the decoder [1;31mspeed[ms were ~70fps with ssse3 filters, ~60fps
    with sse2 filters, and ~15fps with c filters.
    
    Change-Id: Ie2088f87d83a889fba80a613e4d0e287aadd785c

[33mcommit fc19243cedad003d181266fd41958bf27e6f21ae[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Oct 10 10:37:40 2013 -0700

    Re-design rate-distortion cost tracking buffers
    
    This commit re-designs the per transformed block rate-distortion
    costs tracking buffers. It removes redundant buffer usage, makes
    the needed context memory allocation per VP9_COMP instance and
    reuses the same buffer sets inside the rate-distortion optimization
    search loop, thereby avoiding repeatedly requiring memory space.
    
    It reduces [1;31mspeed[m 0 runtime:
    
    bus at 2000 kbps from 166763ms to 158967ms,
    football at 600 kbps from 246614ms to 234257ms.
    
    Both about 5% [1;31mspeed[m-up. Local tests suggest about 2% to 5% [1;31mspeed[m-up
    for [1;31mspeed[m 1 and 2 settings. This does not change compression
    performance.
    
    Change-Id: I363514c5276b5cf9a38c7251088ffc6ab7f9a4c3

[33mcommit 03fe08ca3033d0386919211e66079894add2fea9[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Oct 7 11:20:50 2013 -0700

    Deprecate the use of PARTITION_INFO from encoder
    
    Use b_mode_info to store the inter prediction mode of sub8x8 block,
    in replacement of the use of partition_info. Remove redundant buffer
    update for partition_info. For bus_cif at 2000 kbps, this seem to make
    [1;31mspeed[m 0 about 1% faster.
    
    Change-Id: Id1b3be45e75a24fb4b42335ac480c23e440978f6

[33mcommit f43c3199bdc8c1f81b661b21b2cce5f2a389c5e9[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Sat Oct 5 13:49:21 2013 -0700

    Rate control parameter adjustment
    
    Adjusts the bits per mb parameter about 10% smaller.
    
    Results at [1;31mspeed[m 0:
    fullderfraw: +0.255%
    fullstdhdraw: +0.262%
    stdhdraw250: +0.291%
    
    Change-Id: I2b7317ac3f61737bc77eb5470aad870cade83fa5

[33mcommit 0d0ed6a29b6e594e40fad9bcdaca5dab822754ce[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Oct 4 17:19:05 2013 -0700

    Allow sub8x8 intra modes test for alt frame coding
    
    This commit allows sub8x8 intra modes test in the rate-distortion
    loop for hd sequences in [1;31mspeed[m 1 and 2.
    
    For sequence y90n of hd set at 8000 kbps, [1;31mspeed[m 2 runtime goes
    from 207s to 210s. For ped_1080p at 3000 kbps, [1;31mspeed[m 2 runtim goes
    from 336s to 337s. Both are running with 300 frames.
    
    This improves compression performance by 0.24% for stdhd and 0.32%
    for hd.
    
    Change-Id: I173ca38a6411565ae6cfadd184c42b2070c5de1f

[33mcommit d129eea9fab78fe9f12627186e5c1e329d1a3fba[m
Merge: 660dcfe6a 44e039b4f
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Oct 4 14:45:21 2013 -0700

    Merge "Further clean up of [1;31mspeed[m 4"

[33mcommit 44e039b4f5cc75b8b3821c8c4fd397eaef93b7a0[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Oct 3 14:20:20 2013 +0100

    Further clean up of [1;31mspeed[m 4
    
    Speed 4 still does not give a big gain over [1;31mspeed[m 3.
    This just cleans it up a little from the last patch and comments
    out features that do not seem to be giving much benefit.
    
    Change-Id: I5f366e6160e1dbe5dc45cf5eb90cc02712baa1b6

[33mcommit de6ecc5ac31e9344ebdd2a5a032c1a90107d57c3[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Oct 4 14:10:25 2013 +0100

    Selective masking of split modes.
    
    Allow selective masking of individual split modes rather than
    just a single on / off flag.
    
    For [1;31mspeed[m 2 recovers the large [1;31mspeed[m loss seen for some derf
    clips  in change Ie6bdfa0a370148dd60bd800961077f7e97e67dd4
    and a small quality gain.
    
    For [1;31mspeed[m 1 10 % [1;31mspeed[m increase observed locally on some derf clips
    for minimal quality change.
    
    Change-Id: If86191087b93cbc05351c26c60c7933e2149e485

[33mcommit 11abab356e4c04d4a21ac43f58f9ec05c7c80eca[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 27 16:02:49 2013 -0700

    Refactor inter mode rate-distortion search
    
    This commit separates the rate-distortion optimization loop of
    superblocks from that of sub8x8 blocks. This allows better design
    rate-distortion optimization search loop for each setting. It also
    removes the use of SPLITMV and I4X4_PRED therein.
    
    No performance change in [1;31mspeed[m 0 settings. For bus@CIF at 2000kbps,
    the [1;31mspeed[m 1 runtime goes from 48009ms to 43894ms (about 10% faster).
    The overall compression performance on derf changed by -0.021%.
    
    Speed 2 runtime goes from 27114ms to 28700ms (6% slower), while the
    overall coding efficiency goes up by 1.629% for derf, 1.236% for yt.
    
    Change-Id: Ie6bdfa0a370148dd60bd800961077f7e97e67dd4

[33mcommit ed22179a82700f4f0ba58030e2f3af2c17a02e52[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Oct 2 17:26:01 2013 -0700

    Rewrite HORIZx4 and HORIZx8 in subpixel filter functions
    
    In subpixel filters, prefetched source data, unrolled loops,
    and interleaved instructions.
    
    In HORIZx4, integrated the idea in Scott's CL (commit:
    d22a504d11a15dc3eab666859db0046b5a7d75c5), which was suggested by
    Erik/Tamar from Intel. Further tweaking was done to combine row 0,
    2, and row 1, 3 in registers to do more 2-row-in-1 operations until
    the last add.
    
    Test showed a ~2% decoder [1;31mspeed[mup.
    
    Change-Id: Ib53d04ede8166c38c3dc744da8c6f737ce26a0e3

[33mcommit 6253cc9279652fd7550bc103f85bb45525ff20f1[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Oct 1 16:57:18 2013 +0100

    Speed setting review.
    
    Substantial reworking of the [1;31mspeed[m vs quality trade offs for
    [1;31mspeed[m 1 and 2.
    
    In this patch I am attempting to freeze the "quality" meaning of
    [1;31mspeed[ms 1 and 2 relative to [1;31mspeed[m 0 so that in future we can
    better evaluate progress.
    
    I am targeting :
    Speed 1 quality ~-5% vs [1;31mspeed[m 0.
    Speed 2 quality ~-10% vs [1;31mspeed[m 0
    
    It is inevitable that quality will still fluctuate a little as we adjust
    settings and add new features, but we will attempt to keep as
    close as possible to these values. Above [1;31mspeed[m 2 things will remain
    a bit more fluid for now.
    
    In this patch [1;31mspeed[m 1 is approximately 4-5x as fast as [1;31mspeed[m 0. This
    is similar to before but the quality hit is a lot less. Likewise [1;31mspeed[m 2
    is approximately 2x as fast as [1;31mspeed[m 1 but is similar in quality to the
    previous [1;31mspeed[m 1 configuration.
    
    Also slight change to behavior of FLAG_EARLY_TERMINATE to insure
    all reference frames get at least one rd test. Important for very low
    variance regions.
    
    WIP :- Added a new [1;31mspeed[m level with old [1;31mspeed[m 4 becoming [1;31mspeed[m 5.
    Speed 3 and 4 tradeoffs still WIP
    
    Change-Id: Ic7a38dd7b5b63ab1501f9352411972f480ac6264

[33mcommit df8e1564324f28e6e3bd17413b589a21647a07c2[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Oct 1 12:49:25 2013 -0700

    Modify HORIZx16 macro in subpixel filter functions
    
    Interleaved the instructions, reduced register dependency, and
    prefetched the source data. This improved the decoder [1;31mspeed[m
    by 0.6% - 2%.
    
    Change-Id: I568067aa0c629b2e58219326899c82aedf7eccca

[33mcommit 195061fedaeca7ac79ef810213c35fb06ed155aa[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Sep 30 11:58:22 2013 -0700

    Fix rectangular partition check in [1;31mspeed[m 1
    
    Make encoder skip rectangular partition check in [1;31mspeed[m 1 and above,
    when early termination was triggered in partition split.
    Thanks Guillaume (gmartres@) for catching this issue.
    
    This change makes bus_cif at 2000kbps [1;31mspeed[m 1 runtime goes down from
    25612ms to 23438ms (about 9% [1;31mspeed[m-up), at the expense of -0.235%
    performance down.
    
    Change-Id: I98613fad081a261d30d5fa206f934ca70601c180

[33mcommit a76caa7ff447dac52d9c705d5791b2314882f13a[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Sep 19 18:20:18 2013 +0100

    Alter Speed 3.
    
    This patch deletes the variance based [1;31mspeed[m three partitioning.
    Speed 3 now uses the same partitioning method as [1;31mspeed[m 2
    but with some stricter conditions.
    
    The [1;31mspeed[m and quality are now somewhere between [1;31mspeed[ms 2 and 4
    whereas before it was worse in both than [1;31mspeed[m 4.
    
    Change-Id: Ia142e7007299d79db3ceee6ca8670540db6f7a41

[33mcommit 2b426969c3d6447c857053969ef46e3fd801d106[m
Author: Guillaume Martres <gmartres@google.com>
Date:   Thu Sep 26 13:34:33 2013 -0700

    Simplify RDMULT and RDDIV derivation
    
    Don't divide RDMULT and RDDIV by 100 when RDMULT > 1000. This was
    probably done to avoid overflow when the rd cost was stored in a 32 bits
    integer but this is not the case anymore. This change will make it easier
    to support multiple quantizers per frame.
    
    derf compression gain at [1;31mspeed[m 0: 0.037%
    
    Change-Id: Ibeeb9b7cfa1a132a7af41bc90fc07a3bba0857f6

[33mcommit ff1ae7f713dc079de7e124a023ee3dc6aa9b616d[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Sep 24 09:37:55 2013 -0700

    Prevent using uninitialized value in RD decision
    
    INT64_MAX may be assigned as RDCOST when RDCSOST computation is skipped
    for [1;31mspeed[m, this commit to prevent INT64_MAX from being used as real
    RDCOST in transform size decision.
    
    Change-Id: I89a945134191bbdea1f1431ade70424ac079eaac

[33mcommit a517343ca33edebadd963485abdd1a2cacda7df6[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 20 16:29:24 2013 -0700

    Enable per transformed block zero coeffs forcing
    
    This commit enables forcing all coefficients zero per transformed
    block, when its rate-distortion cost is lower than regular coeff
    quantization.
    
    The overall performance improvement (including its parent patch on
    calculating rd cost per transformed block) at [1;31mspeed[m 1:
    derf:  0.298%
    yt:    0.452%
    hd:    0.741%
    stdhd: 0.006%
    
    Change-Id: I66005fe0fd7af192c3eba32e02fd6d77952accb5

[33mcommit 78fbb10642375b49ebf9d5d92901ff77a1129a08[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 20 11:30:46 2013 -0700

    Calculate rd cost per transformed block
    
    This commit makes the rate-distortion optimization loop evaluate
    the rd costs of regular quantization and all zero coeffs, per
    transformed block. It improves [1;31mspeed[m 1 compression performance:
    
    derf: 0.245%
    yt:   0.515%
    
    For a large partition that consists multiple transformed blocks,
    this allows more flexibility to selectively force a portion of
    them coded as all zero coeffs, as well be continued in the next
    patches.
    
    Change-Id: I211518be4179747b57375696f017d1160cc91851

[33mcommit 44b708b4c4608137d54dc1d36b8ee7ebec4fd2fe[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 19 10:27:09 2013 -0700

    Remove redundant mv_pred use for sub8x8 blocks
    
    The sub8x8 blocks has its own motion vector reference scheme. The
    mv_pred is only used blocks of sizes 8x8 and above, to find the
    starting point for motion search.
    
    This change does not change any coding behavior. It makes the
    encoding process slightly faster. (0.5% [1;31mspeed[m-up for local test on
    [1;31mspeed[m 1.)
    
    Change-Id: I746ee6ef0eac19aa3621be014afa12be8d82cbb9

[33mcommit eeae6f946dd99b961308fb5f30877061aa7b2caf[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Sep 16 12:44:50 2013 -0700

    fix a problem where an invalid mv used in search
    
    The commit added reset of pred_mv at the beginning of each SB64x64
    partition mv search, also limited the usage of pred_mv only when
    search on the largest partition is already done. This is to fix
    a crash at [1;31mspeed[m 1/2 encoder where an invalid mv is used in mv
    search.
    
    Change-Id: I39010177da76d054e3c90b7899a44feb2e3a5b1b

[33mcommit c4826c59415f2fe8b8d9ab1a66f50f7e30d64f1d[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Sep 12 10:06:47 2013 -0700

    Adaptive motion search control
    
    This commit enables adaptive constraint on motion search range for
    smaller partitions, given the motion vectors of collocated larger
    partition as a candidate initial search point.
    
    It makes [1;31mspeed[m 0 runtime of bus at CIF and 2000 kbps goes from
    167s down to 162s (3% [1;31mspeed[m-up), at 0.01dB performance gains. In
    the settings of [1;31mspeed[m 1, this makes the runtime goes from 33687 ms
    to 32142 ms (4.5% [1;31mspeed[m-up), at 0.03dB performance gains.
    
    Compression performance wise, it gains at [1;31mspeed[m 1:
    derf  0.118%
    yt    0.237%
    hd    0.203%
    stdhd 0.438%
    
    Change-Id: Ic8b34c67810d9504a9579bef2825d3fa54b69454

[33mcommit 0c3038234d486c5228ecb8e29b65d05e820341a5[m
Merge: 5d8642354 b96464675
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Sep 13 11:03:59 2013 -0700

    Merge "Clean up of the search best filter [1;31mspeed[m feature"

[33mcommit 1407cf8588a7514be9829a8470ad23d5b97b2153[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Sep 13 13:14:38 2013 +0100

    Fix VP9_mode_order[]
    
    Mis-merge of the following change managed to break mode order
    and delete two mode options (new alt ref and near alt ref)
    It also created a situation where we could test two undefined
    modes off the end of the VP9_mode_order[] data structure.
      "clang warnings : remove split and i4x4_pred fake modes"
      "Change Id: I8ef3c*"
    
    Initial testing on Akiyo at [1;31mspeed[m 2.
    101.35   44.567  44.447 improves to
    96.82    44.915  44.815
    
    Approx 0.3-0.4db gain and 2.5% size reduction
    
    Change-Id: Icff813e7c0778d140ad4f0eea18cf1ed203c4e34

[33mcommit 66755abff425360b002f138387bcfa1ba4c2ff6a[m
Merge: 23845947c 69fe840ec
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Sep 12 02:22:45 2013 -0700

    Merge "Changes in [1;31mspeed[m 2 settings"

[33mcommit b96464675611fae99fa67461eaae87e8ed2854cb[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Sep 11 15:16:36 2013 -0700

    Clean up of the search best filter [1;31mspeed[m feature
    
    Removes this [1;31mspeed[m feature since it is very slow and unlikely
    to be used in practice. This cleanup removes a bunch of unnecessary
    complications in the outer encode loop.
    
    Change-Id: I3c66ef1ca924fbfad7dadff297c9e7f652d308a1

[33mcommit 69fe840ec4588ef131b0927484a34efd8709f519[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Sep 10 16:13:15 2013 -0700

    Changes in [1;31mspeed[m 2 settings
    
    Propose some changes to the [1;31mspeed[m 2 settings to improve quality.
    In particular, turns off the adjust_thresholds_by_[1;31mspeed[m feature
    which improves results by 6%. Also removes the code for
    adjust_thresholds_by_[1;31mspeed[m since it conflicts with the adaptive
    rd thresh feature.
    
    Overall, with this change [1;31mspeed[m 2 is -15.2% from [1;31mspeed[m 0 settings,
    on derf, which is significantly better than -21.6% down before.
    
    Change-Id: I6e90a563470979eb0c258ec32d6183ed7ce9a505

[33mcommit 0607abc3dd26e6782ad9577765f9aeef311b0de9[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Sep 6 16:59:55 2013 -0700

    Stop partition checking when distortion is small
    
    If the current obtained distortion is very small, which happens
    for static image case, we pick the current partition type without
    further split checking.
    
    This won't affect regular videos. For static videos, we got 10%~12%
    encoding [1;31mspeed[m gain. PSNR was better for some clips, and worse for
    others. Overall it was even.
    
    Change-Id: If787a57bedf46fc595ca4f5ded2b0c0a69e9fdef

[33mcommit 4f660cc018307da2b17c20f6da34a1084aa746d0[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Sep 4 17:15:05 2013 -0700

    Modified mode skip functionality.
    
    A previous [1;31mspeed[m feature skipped modes not used in earlier
    partitions but this not longer worked as intended following
    changes to the partition coding order and in conjunction
    with some other [1;31mspeed[m features (Especially [1;31mspeed[m 2 and above).
    
    This modified mode skip feature sets a mask after the first X
    modes have been tested in each partition depending on the
    reference frame of the current best case.
    
    This patch also makes some changes to the order modes are
    tested to fit better with this skip functionality.
    
    Initial testing suggests [1;31mspeed[m and rd hit count improvements
    of up to 20% at [1;31mspeed[m 1. Quality results. (derf -1.9%, std hd  +0.23%).
    
    Change-Id: Idd8efa656cbc0c28f06d09690984c1f18b1115e1

[33mcommit 740acd6891e6ca60411802dd4096c03612e027b1[m
Merge: e37856606 f15cdc745
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Sep 9 05:39:13 2013 -0700

    Merge "Enable kf restrictions at [1;31mspeed[m 4"

[33mcommit f15cdc745178cca9517cf974f19170d44fa13163[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Aug 30 00:29:53 2013 +0100

    Enable kf restrictions at [1;31mspeed[m 4
    
    Change-Id: I453409d3be3f5fe118b15affde45cb52184aef20

[33mcommit e5deed06c0a04159c4412472b70e8e2caef936be[m
Merge: 72872d3d8 49317cdda
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Sep 4 17:19:22 2013 -0700

    Merge "Attempt to fix [1;31mspeed[m 4"

[33mcommit 872c6d85c07be63d5671158bb70f82c924e862c6[m
Merge: bb2313db2 5dda1d239
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Sep 4 10:35:51 2013 -0700

    Merge "[1;31mspeed[m up inc_mv_component"

[33mcommit 5dda1d2394e203265224790734cd0eab97375800[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Sep 3 15:49:58 2013 -0700

    [1;31mspeed[m up inc_mv_component
    
    Convert mv_class if statements to look up.  re order to avoid ifs...
    
    Change-Id: I76966a21bf517bb1f9a7957c08c476c7bb3e9a63

[33mcommit 49317cddad5d18bd9eb9de4d32dfd5b47455acd0[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Sat Aug 31 00:39:26 2013 +0100

    Attempt to fix [1;31mspeed[m 4
    
    Speed 4 fixed partition size. Use fixed size unless it does not
    fit inside image, in which case use the largest size that does.
    
    Change-Id: I250f7a80506750dd82ab355721624a1344247223

[33mcommit b6dbf11ed5c9901bf26f32156f46071d263ec1ad[m
Merge: e83e8f042 e02dc84c1
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Aug 29 15:54:04 2013 -0700

    Merge "Adds a [1;31mspeed[m feature for fast 1-loop forw updates"

[33mcommit e02dc84c1aae3a0c22c8c225c8e7b34335d1379b[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Aug 27 15:07:50 2013 -0700

    Adds a [1;31mspeed[m feature for fast 1-loop forw updates
    
    Incorporates a [1;31mspeed[m feature for fast forward updates of
    coefficients. This feature takes 3 values:
    0 - use standard 2-loop version
    1 - use a 1-loop version
    2 - use a 1-loop version with reduced updates
    
    Results: derfraw300 +0.007% (on [1;31mspeed[m 0) at feature value = 1
                        -0.160% (on [1;31mspeed[m 0) at feature value = 2
    
    There is substantial [1;31mspeed[m up at [1;31mspeed[ms 2 and above for low
    resolution sequences where the entropy updates are a big part
    of the overall computations.
    
    Change-Id: Ie96fc50777088a5bd441288bca6111e43d03bcae

[33mcommit aa5b67add04539ae2e4516f651f4221d83b5ff39[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Aug 23 14:00:54 2013 +0100

    Changes to adaptive inter rd thresholds.
    
    Values now carried over frame to frame.
    Change to algorithm for decreasing threshold after
    a hit and to max threshold (now based on [1;31mspeed[m)
    
    Removed some old commented out code relating to
    VP8 adaptive thresholds.
    
    The impact of these changes tested on Akiyo (50 frames)
    and measured in terms of unit rd hits is as follows:
    
    Speed 0 84.36 -> 84.67
    Speed 1 29.48 -> 22.22
    Speed 2 11.76 -> 8.21
    Speed 3 12.32 -> 7.21
    
    Encode [1;31mspeed[m impact is broadly in line with these.
    
    Change-Id: I5b886efee3077a11553fa950d796fd6d00c8cb19

[33mcommit f76f52df61dfbec0113727196c4a0e030dd15205[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Aug 22 17:23:02 2013 +0100

    Limit Key frame Intra modes checks.
    
    Most of the focus so far has been on inter frames.
    
    At high [1;31mspeed[m settings the key frame is now taking a high %
    of the cycles.
    
    This patch puts in some masking to reduce the number
    of INTRA modes searched during key frame coding (as already
    happens for inter frames) at higher [1;31mspeed[m settings
    
    TODO: Develop this further with either adaptive rd thresholds
    when choosing which intra modes to consider or some other
    heuristic.
    
    Impact.
    At high [1;31mspeed[m settings on some clips the key frame was starting
    to dominate. In a coding of the first 50 frames of AKIYO at [1;31mspeed[m
    2 limiting the key frame intra modes to DC or TM_PRED resulted in
    ~30% overall [1;31mspeed[mup. For Bus the number was lower at ~4-5%.
    
    Change-Id: I7bde68aee04995f9d9beb13a1902143112e341e2

[33mcommit 84f3b76e1cd3d80e7f15e24dea79a85c86689bc6[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Aug 22 17:15:01 2013 -0700

    Fix rectangular partition check flag
    
    Put rectangular partition check flag change according to the rd
    costs of NONE and SPLIT partition types under the [1;31mspeed[m feature.
    
    Change-Id: If681e1e078a8d43d86961ea4b748da5cd1b6c331

[33mcommit 01a37177d167f2f837ae6d2de03a17511d1b38c9[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Aug 20 14:34:17 2013 -0700

    Refactor rd_pick_partition for parameter control
    
    This commit changes the partition search order of superblocks from
    {SPLIT, NONE, HORZ, VERT} to {NONE, SPLIT, HORZ, VERT} for
    consistency with that of sub8x8 partition search. It enable the use
    of early termination in partition search for all block sizes.
    
    For ped_area_1080p 50 frames coded at 4000 kbps, it makes the runtime
    goes down from 844305ms -> 818003ms (3% [1;31mspeed[m-up) at [1;31mspeed[m 0.
    
    This will further move towards making the in-search partition types
    configurable, hence unifying various [1;31mspeed[m-up approaches.
    
    Some [1;31mspeed[m 1 and 2 features are turned off during the refactoring
    process, including:
    disable_split_var_thresh
    using_small_partition_info
    
    Stricter constraints are applied to use_square_partition_only for
    right/bottom boundary blocks. Will bring back/refine these features
    subsequently. At this point, it makes derf set at [1;31mspeed[m 1 about
    0.45% higher in compression performance, and 9% down in run-time.
    
    Change-Id: I3db9f9d1d1a0d6cbe2e50e49bd9eda1cf705f37c

[33mcommit 8b810c7a78cbaac715cc516973de2bfdbf4067f9[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Aug 21 16:19:35 2013 -0700

    Fixes on feature disabling split based on variance
    
    Adds a couple of minor fixes, which may be absorbed in Jingning's
    patch. Thanks to Guillaume for pointing these out.
    Also adjusts the thresholds for [1;31mspeed[m 1 and 2 to 16 and 32
    respectively, to keep quality drops small.
    
    Results:
    --------
    derfraw300:  threshold = 16, psnr -0.082%, [1;31mspeed[mup 2-3%
                 threshold = 32, psnr -0.218%, [1;31mspeed[mup 5-6%
    stdhdraw250: threshold = 16, psnr -0.031%, [1;31mspeed[mup 2-3%
                 threshold = 32, psnr -0.273%, [1;31mspeed[mup 5-6%
    
    Change-Id: I4b11ae8296cca6c2a9f644be7e40de7c423b8330

[33mcommit 2ffe64ad5ceb7443fefceab0adf6722428825efe[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Aug 16 13:51:00 2013 -0700

    Cleanup/enhancements of switchable filter search
    
    Cleans up the switchable filter search logic. Also adds a
    [1;31mspeed[m feature - a variance threshold - to disable filter search
    if source variance is lower than this value.
    
    Results: derfraw300
    threshold = 16, psnr -0.238%, 4-5% [1;31mspeed[mup (tested on football)
    threshold = 32, psnr -0.381%, 8-9% [1;31mspeed[mup (tested on football)
    threshold = 64, psnr -0.611%, 12-13% [1;31mspeed[mup (tested on football)
    threshold = 96, psnr -0.804%, 16-17% [1;31mspeed[mup (tested on football)
    
    Based on these results, the threshold is chosen as 16 for [1;31mspeed[m 1,
    32 for [1;31mspeed[m 2, 64 for [1;31mspeed[m 3 and 96 for [1;31mspeed[m 4.
    
    Change-Id: Ib630d39192773b1983d3d349b97973768e170c04

[33mcommit e8923fe49207640704e5538aae6dafd136f35e19[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Aug 16 16:54:12 2013 +0100

    Changes to auto partition size selection.
    
    Changes to code to auto select a partition size range
    based on data from spatial neighbors.
    
    Now looks at the sb_type in each 8x8 block of above
    and left SB64.
    
    The effect on [1;31mspeed[m 1 is now weaker giving better
    quality but less [1;31mspeed[m gain. Now also used in [1;31mspeed[m 2.
    
    Change-Id: Iace33a97d5c3498dd2a9a8a4067351941abcbabc

[33mcommit 3275ad701a5c37041ab90b743cc6fec6a8340f80[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 14 16:50:45 2013 -0700

    Enable early termination in uv rd loop
    
    This commit enables early termination in the rate-distortion
    optimization search loop for chroma components. When the cumulative
    rd cost is above the current best value, skip the rest per-block
    transform/quantization/coeff_cost and continue to the next
    prediction mode.
    
    For bus_cif at 2000 kbps, the average run-time goes down from
    168546ms -> 164678ms, (2% [1;31mspeed[m-up) at [1;31mspeed[m 0
     36197ms ->  34465ms, (4% [1;31mspeed[m-up) at [1;31mspeed[m 1
    
    Change-Id: I9d3043864126e62bd0166250d66b3170d520b3c0

[33mcommit 24856b6abc8494b6c9ab073c47aecc8e477d44f2[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Aug 2 17:15:38 2013 -0700

    Speed feature to skip split partition based on var
    
    Adds a [1;31mspeed[m feature to disable split partition search based on a
    given threshold on the source variance. A tighter threshold derived
    from the threshold provided is used to also disable horizontal and
    vertical partitions.
    
    Results on derfraw300:
    threshold = 16, psnr = -0.057%, [1;31mspeed[mup ~1% (football)
    threshold = 32, psnr = -0.150%, [1;31mspeed[mup ~4-5% (football)
    threshold = 64, psnr = -0.570%, [1;31mspeed[mup ~10-12% (football)
    
    Results on stdhdraw250:
    threshold = 32, psnr = -0.18%, [1;31mspeed[mup is somewhat more than derf
    because of a larger number of smoother blocks at higher resolution.
    
    Based on these results, a threshold of 32 is chosen for [1;31mspeed[m 1,
    and a threshold of 64 is chosen for [1;31mspeed[ms 2 and above.
    
    Change-Id: If08912fb6c67fd4242d12a0d094783a99f52f6c6

[33mcommit c7c990184526d7eea814263a65f006eaa9d5dbfe[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Aug 6 15:46:26 2013 -0700

    added a [1;31mspeed[m feature on lpf level picking
    
    Change-Id: Id578f8afdeab3702fc8386969f2d832d8f1b5420

[33mcommit 1ba91a84ad1e1d2486e2aa68822ed147084cd4c8[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Aug 7 17:01:43 2013 -0700

    Adds a new subpel motion function
    
    Adds a new subpel motion estimation function that uses a 2-level
    tree-structured decision tree to eliminate redundant computations.
    It searches fewer points than iterative search (which can search
    the same point multiple times) but has the same quality roughly.
    
    This is made the default setting at [1;31mspeed[ms 0 and 1, while at
    [1;31mspeed[m 2 and above only a 1-level search is used.
    
    Also includes various cleanups for consistency and redundancy removal.
    
    Results:
    derf: +0.012% psnr
    stdhd: +0.09% psnr
    Speedup of about 2-3%
    
    Change-Id: Iedde4866f5475586dea0f0ba4cb7428fba24eee9

[33mcommit 6bfcce8c7a046f098ffdb1496d6fd5950b91e212[m
Merge: 82d7c6fb3 debb9c68c
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 7 19:05:14 2013 -0700

    Merge "Use low precision 32x32fdct for encodemb in [1;31mspeed[m1"

[33mcommit debb9c68c8ea92b80627138f95de901cb39cf8dc[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Aug 7 15:22:51 2013 -0700

    Use low precision 32x32fdct for encodemb in [1;31mspeed[m1
    
    The low precision 32x32 fdct has all the intermediate steps within
    16-bit depth, hence allowing faster SSE2 implementation, at the
    expense of larger round-trip error. It was used in the rate-distortion
    optimization search loop only.
    
    Using the low precision version, in replace of the high precision one,
    affects the compression performance by about 0.7% (derf, stdhd) at
    [1;31mspeed[m 0. For [1;31mspeed[m 1, it makes derf set down by only 0.017%.
    
    Change-Id: I4e7d18fac5bea5317b91c8e7dabae143bc6b5c8b

[33mcommit 71b43b0ff0aad2ab222a56e7fc0564ea00892de4[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Aug 6 15:53:35 2013 -0700

    Clean ups of the subpel search functions
    
    Removes some unused code and [1;31mspeed[m features, and organizes the
    interfaces for fractional mv step functions for use in new [1;31mspeed[m
    features to come.
    
    In the process a new [1;31mspeed[m feature - number of iterations per
    step during the subpel search - is exposed.
    
    No change when this parameter is set as the original value of 3.
    
    Results:
    subpel_iters_per_step = 3: baseline
    subpel_iters_per_step = 2: psnr -0.067%, 1% [1;31mspeed[mup
    subpel_iters_per_step = 1: psnr -0.331%, 3-4% [1;31mspeed[mup
    
    Change-Id: I2eba8a21f6461be8caf56af04a5337257a5693a8

[33mcommit 15b5a6a2c7bda61d62536a95b3f84390efc88350[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Jul 22 14:47:57 2013 -0700

    Flexible support for various pattern searches
    
    Adds a few pattern searches to achieve various tradeoffs
    between motion estimation complexity and performance.
    The search framework is unified across these searches so that a
    common pattern search function is used for all. Besides it will
    be easier to experiment with various patterns or combinations
    thereof at different scales in the future.
    
    The new pattern search is multi-scale and is capable of using
    different patterns at different scales.
    
    The new hex search uses 8 points at the smallest scale
    and 6 points at other scales.
    Two other pattern searches - big-diamond and square are
    also added. Big diamond uses 4 points at the smallest scale and
    8 points in diamond shape at the larger scales.
    Square is very similar conceptually to the default n-step search
    but is somewhat faster since it keeps only one survivor across
    all scales.
    
    Psnr/[1;31mspeed[m-up results on derf300:
    
    hex: -1.6% psnr%, 6-8% [1;31mspeed[m-up
    big-diamond: -0.96% psnr, 4-5% [1;31mspeed[mup
    square: -0.93% psnr, 4-5% [1;31mspeed[mup
    
    Change-Id: I02a7ef5193f762601e0994e2c99399a3535a43d2

[33mcommit 8b3faccb9e950c01daa3d9aa011970674e1ec0fc[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Jul 31 09:33:58 2013 -0700

    Add variance based mode/skipping
    
    Adds a [1;31mspeed[m feature to skip all intra modes other than
    DC_PRED if the source variance is small. This feature is
    made part of [1;31mspeed[m 1 and up.
    
    Results on derf300: psnr -0.07%, [1;31mspeed[mup about 1-2%
    
    Also uses the source variance to fine-tune the early
    termination criteria when FLAG_EARLY_TERMINATE is on.
    This feature is made part of [1;31mspeed[m 2 and up.
    
    Results on derf300: psnr -0.52%, [1;31mspeed[mup about 5-7%
    
    Change-Id: I59e38aa836557cfa5405ae706fc64815cbfe4232

[33mcommit f703f98757f6a767749b92dc327ac87c69df1605[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Sat Aug 3 19:51:56 2013 -0700

    reworked find_mv_ref
    
    This is an attempt at rewriting vp9_find_mv_refs_idx.   I believe that it gains
    about 1-2% decode [1;31mspeed[m
    
    Change-Id: Ia5359c94ce9bb43b32652890e605e9a385485c1b

[33mcommit 0d6808044506260f30cfb5f1158c77671a881e17[m
Merge: d91e9f4e3 7965a6ea3
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Aug 2 09:58:46 2013 -0700

    Merge "Comment out 2 unused [1;31mspeed[m features"

[33mcommit 56df76bf1b812055eefb1ef9285969ddd41f8940[m
Merge: ff4bfa726 9d67495f7
Author: Jingning Han <jingning@google.com>
Date:   Thu Aug 1 11:53:39 2013 -0700

    Merge "Optimize 32x32 2D inverse DCT for [1;31mspeed[m-up"

[33mcommit 7965a6ea34b128c22c91a87aa19a3b33062a6388[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Aug 1 11:03:34 2013 -0700

    Comment out 2 unused [1;31mspeed[m features
    
    use_min_partition_size and use_max_partition_size are not used
    currently, and could be added back if needed later.
    
    Change-Id: Ib22a9c06b064567a7c1d6d5445567ed77e0d3acc

[33mcommit 9d67495f72cc2c0067bacc594689de53cf6f29c1[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 31 16:50:34 2013 -0700

    Optimize 32x32 2D inverse DCT for [1;31mspeed[m-up
    
    This commit exploits the sparsity of quantized coefficient matrix.
    It detects each 32x8 array and skip the corresponding inverse
    transformation if all entries are zero.
    
    For ped1080p at 8000 kbps, this on average reduces the runtime of
    32x32 inverse 2D-DCT SSE2 function from 6256 cycles -> 5200
    cycles. It makes the overall encoding process about 2% faster at
    [1;31mspeed[m 0. The [1;31mspeed[m-up is more pronounceable for the decoding process.
    
    Change-Id: If20056c3566bd117642a76f8884c83e8bc8efbcf

[33mcommit 455f2de20b3f821a4b8bb9edb7e250192d7736a0[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 29 16:03:02 2013 -0700

    Tune tokenization/detokenization flow for [1;31mspeed[m-up
    
    This commit optimizes the tokenization and detokenization operational
    flow for [1;31mspeed[m-up. It makes the coding process about 0.3% faster at
    [1;31mspeed[m 0.
    
    Change-Id: I28008df7482874e4b5f237f2d418ff82a249dd56

[33mcommit b5323ed89a27dcf57dc62190cca128e8ae8366b4[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 29 14:54:31 2013 -0700

    Skip redundant tokenization in rd loop
    
    This commit makes the encoder skip the redundant tokenization process
    in the rate-distortion optimization search loop, while updating the
    entropy contexts accordingly. It makes the [1;31mspeed[m 0 encoding process
    about 0.5% faster at no performance change.
    
    Change-Id: I34a4155a0b5332afeb45c93a51c7f35a294d685c

[33mcommit 38fa4871647667b5c36c2482993887ad479f7c6d[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jul 26 17:01:51 2013 -0700

    Shortcut 8x8/16x16 inverse 2D-DCT
    
    This commit brought back the shortcut implementation of 8x8/16x16
    inverse 2D-DCT. When the eob <= 10, it skips the inverse transform
    operations on row 4:7/4:15 in the first round. For bus_cif at 1000
    kbps, this provides about 2% [1;31mspeed[m-up at [1;31mspeed[m 0.
    
    Change-Id: I453e2d72956467d75be4ad8c04b4482ab889d572

[33mcommit 325e0aa6505eb480f5a55e072e195cbc3db0aacf[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jul 26 14:11:37 2013 -0700

    Special handle on DC only inverse 8x8 2D-DCT
    
    This commit enables a special handle for the 8x8 inverse 2D-DCT,
    where only DC coefficient is quantized to be non-zero. For bus_cif
    at 2000 kbps, it provides about 1% [1;31mspeed[m-up at [1;31mspeed[m 0.
    
    Change-Id: I2523222359eec26b144cf8fd4c63a4ad63b1b011

[33mcommit fe5e2a91bb15241a97515708001c37deda514cdc[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Jul 24 14:07:37 2013 +0100

    Auto min and max partition size experiment.
    
    Speed feature experiment to set an upper and lower
    partition size limit based on what has been seen
    in spatial neighbors.
    
    This seems to gives quite reasonable [1;31mspeed[m gains in local
    (10-15%) and when used with [1;31mspeed[m 0 the losses are small
    (0.25% derf, 0.35% stdhd). However, for now I am only
    enabling it on [1;31mspeed[m 1 as there may be clashes with the existing
    temporal partition selection in [1;31mspeed[m 2.
    
    Using a tighter min / max around the range derived from the
    neighbors increases [1;31mspeed[m further but at the cost of a
    bigger quality loss. However,  I think this spatial method could
    be combined with data from either the last frame or a variance
    method (or both) to refine the range of minimum and maximum
    partition size. I.e. consider the min and max from spatial and
    temporal neighbors and the variance recommendation.
    
    Change-Id: I1b96bf8b84368d6aad0c7aa600fe141b4f07435f

[33mcommit 52256cdbcaf07e637c964f92671dfc82321f2125[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Jul 25 19:17:46 2013 -0700

    Modify static threshold calculation
    
    Used 3 * standard_deviation in internal threshold calculation
    instead of fit curve. This actually approached the algorithm
    better.
    For comparison, similar tests were done:
    The overall psnr loss is less than before.
    1. derf set:
    when static-thresh = 1, psnr loss is 0.329%;
    when static-thresh = 500, psnr loss is 0.970%;
    2. stdhd set:
    when static-thresh = 1, psnr loss is 0.922%;
    when static-thresh = 500, psnr loss is 1.307%;
    
    Similar [1;31mspeed[mup is achieved. For example,
    clip            bitrate  static-thresh psnr    time
    akiyo(cif)       500        0          48.952  5.077s(50f)
    akiyo            500        500        48.866  4.169s(50f)
    
    parkjoy(1080p)   4000       0          30.388  78.20s(30f)
    parkjoy          4000       500        30.367  70.85s(30f)
    
    sunflower(1080p) 4000       0          44.402  74.55s(30f)
    sunflower        4000       500        44.414  68.69s(30f)
    
    Change-Id: Ic78833642ce1911dbbd1cb6c899a2d7e2dfcc1f3

[33mcommit d36852b702e6726db57cabe19e47d9aaa18c3ecb[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Jul 11 11:15:00 2013 -0700

    Add encoding option --static-thresh
    
    This option exists in VP8, and it was rewritten in VP9 to support
    skipping on different partition levels. After prediction is done,
    we can check if the residuals in the partition block will be all
    quantized to 0. If this is true, the skip flag is set, and only
    prediction data are needed in reconstruction. Based on DCT's energy
    conservation property, the skipping check can be estimated in
    spatial domain.
    
    The prediction error is calculated and compared to a threshold.
    The threshold is determined by the dequant values, and also
    adjusted by partition sizes. To be precise, the DC and AC parts
    for Y, U, and V planes are checked to decide skipping or not.
    
    Test showed that
    1. derf set:
    when static-thresh = 1, psnr loss is 0.666%;
    when static-thresh = 500, psnr loss is 1.162%;
    2. stdhd set:
    when static-thresh = 1, psnr loss is 1.249%;
    when static-thresh = 500, psnr loss is 1.668%;
    
    For different clips, encoding [1;31mspeed[mup range is between several
    percentage and 20+% when static-thresh <= 500. For example,
    clip            bitrate  static-thresh psnr    time
    akiyo(cif)       500        0          48.923  5.635s(50f)
    akiyo            500        500        48.863  4.402s(50f)
    
    parkjoy(1080p)   4000       0          30.380  77.54s(30f)
    parkjoy          4000       500        30.384  69.59s(30f)
    
    sunflower(1080p) 4000       0          44.461  85.2s(30f)
    sunflower        4000       500        44.418  78.1s(30f)
    
    Higher static-thresh values give larger [1;31mspeed[mup with larger
    quality loss.
    
    Change-Id: I857031ceb466ff314ab580ac5ec5d18542203c53

[33mcommit 2f58faffa40036e0c8dfb8b4351a0ce0b11eb9ee[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 23 15:53:09 2013 -0700

    Make coeff_optimize initialized per-plane
    
    This commit makes the initialization of trellis coeff optimization
    a per-plane operation, thereby eliminating the redundant steps in
    encode_sby and encode_sbuv. It makes the encoder at [1;31mspeed[m 0 slightly
    faster.
    
    Change-Id: Iffe9faca6a109dafc0dd69dc7273cbdec19b17cd

[33mcommit 7817d3221ff3a33781d05984bd71bebfc3793259[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 22 15:39:43 2013 -0700

    Save pixels instead of coefficients in intra4x4 RD loop.
    
    Prevents doing duplicate IDCTs; encoding of first 50 frames of bus
    ([1;31mspeed[m 0) @ 1500kbps goes from 1min4.0 to 1min3.5, i.e. 0.87% faster
    overall.
    
    Change-Id: I2df39e29ed9d5ea5e7d2704a34940ba622832ddd

[33mcommit b72ecbb1b98be5cb24e6f68d8d2eeda6efc38cc0[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Jul 19 09:17:00 2013 -0700

    Add best_rd breakout in intra4x4 RD loop.
    
    Encoding time of first 50 frames of bus ([1;31mspeed[m 0) @ 1500kbps goes from
    1min5.4 to 1min4.0, i.e. 2.2% faster overall.
    
    Change-Id: I8c32f2aff9a649ce7dd49d910dc5ba16b99c3bc6

[33mcommit 0359ad7f9a8d8e78482b869d9c911df4d02f5dbf[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 23 10:02:43 2013 -0700

    Skip inverse transform when eob is zero
    
    When all the transform coefficients were quantized to zero, skip
    the inverse transform operation. For bus_cif at 1000 kbps, the
    runtime goes from 154967ms -> 149842ms, i.e., about 3% [1;31mspeed[m-up,
    at [1;31mspeed[m 0.
    
    Change-Id: Ic0a813fff5e28972d4888ee42d8747846a6c3cc6

[33mcommit 7c134bc0cdad93bf2b6037ca56e91a6af74eadba[m
Merge: e88db7789 302698fb1
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Jul 23 04:49:55 2013 -0700

    Merge "Reworked the auto_mv_step_size [1;31mspeed[m feature"

[33mcommit e20fcd9585295d3bae106548d79d501ac8668a6b[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 22 16:09:09 2013 -0700

    More optimizations for cost_coeffs().
    
    4x4:    163 ->  123 cycles (33% faster)
    8x8:    491 ->  399 cycles (23% faster)
    16x16: 1889 -> 1763 cycles (7% faster)
    32x32: 8311 -> 8180 cycles (1.6% faster)
    
    Overall encoding time of first 50 frames of bus ([1;31mspeed[m 0) @ 1500kbps
    goes from 1min4.33 to 1min3.00, i.e. 2.11% faster.
    
    Change-Id: Ib52d1dbb5649b14de769d3e7a74af67440b5284f

[33mcommit 409e77f2d4919c29861bdaab88241d23bba67230[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 17 17:07:32 2013 -0700

    Optimize operation flow in sub8x8 rd loop
    
    Stack the rate-distortion statistics in the sub8x8 rd loop. This allows
    the encoder to skip the forward transform, quantization, and coeff cost
    estimation, in the sub8x8 rd optimization search, if the motion
    vector(s) are of integer pixel value, and have been tested in the
    previous prediction filter type rd loops of the same block.
    
    This gives about 2% [1;31mspeed[m-up for bus_cif at 2000 kpbs, for [1;31mspeed[m 0.
    Its efficacy depends how frequently the motion search will select an
    integer motion vector.
    
    Change-Id: Iee15d4283ad4adea05522c1d40b198b127e6dd97

[33mcommit c725502bf32b0df223aaf179a828360433606a1c[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jul 19 15:18:05 2013 -0700

    Skip buffer update in sub8x8 rd loop
    
    This commit allows the encoder to skip a few buffer update steps in
    rd_pick_best_mbsegmentation, when early breakout has been triggered
    in the rd_check_segment_txsize. It provides about 1% [1;31mspeed[m-up for
    bus_cif at 2000 kbps, in the settings of [1;31mspeed[m 0.
    
    Change-Id: Ica034f10a24dec572b397d8389a2b81020ebc0b9

[33mcommit ea284d62814cedd59baa20a1db1f44b16abb431d[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Jul 19 17:38:55 2013 -0700

    added checks to prevent rate/distortion overflow
    
    At [1;31mspeed[m 2, due to the threshold scheme used, it is possible the rate
    and distortion assigned with INT_MAX value. The patch added checking
    to prevent the INT_MAX value is used in further calculation of RD
    scores. The patch also changed the assertion in rd_use_partition() to
    be mirror similar assertion in rd_pick_partition().
    
    Change-Id: Idb52c543cc1e10abdf6e6a5d6e9cb535a42214dc

[33mcommit 302698fb120477aedb1c6db199b19c9177e14828[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Jul 12 09:52:24 2013 -0700

    Reworked the auto_mv_step_size [1;31mspeed[m feature
    
    This patch modifies the auto_mv_step_size [1;31mspeed[m feature to
    use a combination of the maximum magnitude mv from the last
    inter frame, and the maximum magnitude mv for the two reference
    mvs with the same reference. For arf frames, the max mav step
    for the resolution is used.
    The bounds therefore are slightly tighter. The feature is made
    a [1;31mspeed[m 1 feature.
    
    Rebased.
    
    Results (when this feature is turned on over [1;31mspeed[m 0):
    derfraw300: -0.046% psnr, about 5+% [1;31mspeed[mup
    (tested on football: goes from 4m30.760s to 4m17.410s).
    
    Change-Id: If492797a61b0b4b3e58c0b8f86afb880165fc9f6

[33mcommit 73ff56b68e328c2368cb3d71a10e10d27016c0f7[m
Merge: b829a9d63 e4686c589
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jul 18 18:27:49 2013 -0700

    Merge "Fix slightly quality drop caused at [1;31mspeed[m 1."

[33mcommit e4686c589efa521f6f5f029151765287e28f207b[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jul 18 15:17:02 2013 -0700

    Fix slightly quality drop caused at [1;31mspeed[m 1.
    
    We would skip the rectangular blocks for sub8x8 partitions because
    we would conclude that PARTITION_NONE was better than PARTITION_SPLIT,
    however, that conclusion was made before we actually really tested
    PARTITION_SPLIT.
    
    Change-Id: I8fa91e59894badc1d8cee3ba8a49e40ae4c4a489

[33mcommit 5ebe503f0431b319e83be2158b8d43f38ccdd3f2[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 17 15:27:12 2013 -0700

    Merge scale_factors and scale_factors_uv.
    
    This prevents a duplicate memcpy of a 128-byte struct every time
    set_scale_factors() is called (which is a lot), thus leading to a
    decrease from 3.7 MB to 1.85 MB of struct copying per 64x64 block
    RD/partition loop.
    
    Overall, this decreases encoding time of the first 50 frames of bus
    @ 1500kbps ([1;31mspeed[m 0) from 1min5.9 to 1min4.9, i.e. about a 1.5%
    overall [1;31mspeed[mup. We can likely get more gains by removing the copy
    of the other struct (and replacing it with an indexing) as well.
    
    Change-Id: I3dceb7e79f71e6fe911b11cc994cf89a869dde7a

[33mcommit df4b4fab261da4e0067ac9f219d2d44bc1d88c4c[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jul 18 13:09:38 2013 -0700

    Do in-place UV intra mode selection.
    
    This means we only do UV intra mode selection if we find any intra
    mode to actually be useful at all; in addition, we only do UV intra
    mode selection for the transform sizes that were selected, rather
    than all sizes available in this partition.
    
    First 50 frames of bus @ 1500kbps ([1;31mspeed[m 0) gains about 5% with this
    change.
    
    Change-Id: I7b461eb8b803247f57896c5a9505f745b55502b3

[33mcommit 3798db88e13fa929da304913fa0edc0420995df0[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Jul 17 14:59:00 2013 -0700

    Remove unnecessary calling of vp9_init_quantizer()
    
    vp9_init_quantizer() is called in vp9_create_compressor(), and
    should not be called in vp9_set_[1;31mspeed[m_features().
    
    Change-Id: Ic2f1f4b0531b9d46bb841d7e1d8da9812207dad6

[33mcommit c6917528a570c13ac1870d9ec96d06db71e066c1[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 17 14:21:44 2013 -0700

    Add a best_yrd shortcut in splitmv mode search.
    
    Encoding of first 50 frames of bus ([1;31mspeed[m 0) @ 1500kbps goes from
    1min6.2 to 1min5.9, i.e. 0.5% faster overall.
    
    Change-Id: I59d8a3b2f0a75010fa041d5e2646c8caac5bd683

[33mcommit 161c99565809a44db2ebad9a87be2b03c2670c2c[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 17 13:53:35 2013 -0700

    Skip redundant nearest/near/zero encodes in splitmv.
    
    Encode of first 50 frames of bus @ 1500kbps ([1;31mspeed[m 0) goes from
    1min7.3 to 1min6.2, i.e. 1.7% faster overall.
    
    Change-Id: I19d2deacfbffadd61d32551cee9586757ab4a987

[33mcommit 8fea880b6f6c1337296a8701bae9249029d7b28a[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 17 11:33:15 2013 -0700

    Skip nearest/near/zero redundant encodes.
    
    Encode of first 50 frames of bus @ 1500kbps ([1;31mspeed[m 0) goes from 1min12.8
    to 1min7.3, i.e. 8% faster.
    
    Change-Id: Ia22d1c7b687316c553cc60eacae988b24e175b62

[33mcommit 10e83b07170d52cdb66ef740b67addcc38f7ef0c[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Jul 17 09:37:14 2013 -0700

    Enable disable_splitmv feature for other [1;31mspeed[ms
    
    Added disable_splitmv feature at other [1;31mspeed[m levels. For [1;31mspeed[m 3 or
    above, always turn it on.
    
    Change-Id: Ibb36f0a7ef12a34b4f8d0f9cb6193eab43b34360

[33mcommit 9f427bfe9883b07418f81b04bde977b7d50f3cd4[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 17 09:56:46 2013 -0700

    Best_rd breakout in rd partition search.
    
    About 15% faster for bus ([1;31mspeed[m 0) first 50 frames @ 1500kbps, which
    goes from 1min36 to 1min24. Results become slightly better (+0.2% on
    derf/yt, +0.4% on hd), probably because of a bugfix for skipmode in
    super_block_yrd(). Overall [1;31mspeed[m change (on derfraw300) is roughly
    -13%. This can probably be improved further by caching best_yrd
    between partition searches. Also, we might be able to get more
    [1;31mspeed[mups by always doing PARTITION_NONE before PARTITIONS_SPLIT, not
    just at the sb8x8 level.
    
    Change-Id: I83736949ebd5b4a3b400ee688d7661913fefc98b

[33mcommit df90d58f4fd13a486b6f3af6e8ce7669779b1e00[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Jul 3 14:43:23 2013 -0700

    Speed up motion estimation using small partitions' result(experiment)
    
    Current partition checking starts from small sizes, and then goes up
    to large sizes. This experiment uses the small partitions' motion
    estimation result, which is already available, to [1;31mspeed[m up the
    large partition's motion estimation. We can decide to skip some
    patition checkings if they are unlikely choices. We could use the
    motion vector(MV) result as current partition's prediction MV, limit
    the search range and reference frame.
    
    Current result at [1;31mspeed[m 1:
    psnr loss: 1.19% for stdhd, 0.287% for derf.
    [1;31mspeed[m gain: 14% for sunflower(hd), 11% for akiyo.
    
    Further improvement will be done later.
    
    Change-Id: I5abfd070e9cace2e91e2a0247d1325df313887ab

[33mcommit 59dc4e9cdd0263ca159697d8641b8b681d8042ae[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Tue Jul 16 10:13:06 2013 -0700

    vp9_convolve8_neon placeholder
    
    Call the individually optimized horizontal and vertical functions. This
    implementation abuses the temp buffer.
    
    This will be replaced with a custom optimized function.
    
    Over 2x [1;31mspeed[mup.
    
    Change-Id: I5b908d2a73d264e9810d6022bbff73207a3055dd

[33mcommit 2ee338ce3b9ab816270e6d413d4674fe9f2d45ca[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Jul 16 18:12:34 2013 +0100

    Move uv intra mode selection in rd loop.
    
    Use an estimate based on DC_PRED for intra uv cost
    within the rd loop then only do a full uv mode analysis
    if an intra mode is chosen.
    
    Significant [1;31mspeed[m gains in some cases. Currently only
    enabled for [1;31mspeed[m 2 pending [1;31mspeed[m/quality tests.
    
    Change-Id: Ie851a12400d5483bce47ec0e3ccb8516041e91c0

[33mcommit a142d6fc935cba1dc6ceb4d798b3aac68b34684b[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 16 12:04:07 2013 -0700

    Skip redundant motion search in 4x4 level rd loop
    
    This commit makes the encoder to perform motion search only once
    per reference frame type for each 4x4/4x8/8x4 block. For bus_cif
    at 2000 kbps, the runtime goes from 253812ms -> 217817ms
    (14% [1;31mspeed[m-up) for [1;31mspeed[m 0.
    
    Change-Id: I5f17599ccc8cfaf93ccb4f98fcb6008af6d79e92

[33mcommit d05f66aa109a19b233048b3d617555e2fd1a5d43[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 15 11:05:31 2013 -0700

    SSE2 16x16 inverse ADST/DCT hybrid transform
    
    This commit enables SSE2 implementation of 16x16 inverse ADST/DCT
    hybrid transform. The runtime goes from 5742 cycles -> 1821 cycles.
    This provides about 1% encoding [1;31mspeed[m-up at [1;31mspeed[m 0.
    
    Change-Id: I1678d0988bf30b9efd524877705bbb3645edb17b

[33mcommit 1ff94fea5639c1c7c4bc99a080aaa985d60d25b7[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jul 11 13:01:44 2013 -0700

    Inline vp9_quantize() in xform_quant().
    
    Cycle times:
    4x4:    151 to  131 cycles (15% faster)
    8x8:    334 to  306 cycles (9% faster)
    16x16: 1401 to 1368 cycles (2.5% faster)
    32x32: 7403 to 7367 cycles (0.5% faster)
    
    Total encode time of first 50 frames of bus @ 1500kbps ([1;31mspeed[m 0)
    goes from 1min39.2 to 1min38.6, i.e. a 0.67% overall [1;31mspeed[mup.
    
    Change-Id: I799a49460e5e3fcab01725564dd49c629bfe935f

[33mcommit 6fb418741faa990a61dbcae8d35a0959727ade57[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jul 11 11:35:13 2013 -0700

    Inline xform_quant() in encode_block_intra().
    
    Also inline some of the block calculations to assist the compiler to
    not do silly things like calculating the same offset (or converting
    between raster/transform block offset or block, mi and pixel unit)
    many, many, many times.
    
    Cycle times:
    4x4:     584 ->   505 cycles (16% faster)
    8x8:    1651 ->  1560 cycles (6% faster)
    16x16:  7897 ->  7704 cycles (2.5% faster)
    32x32: 16096 -> 15852 cycles (1.5% faster)
    
    Overall, this saves about 0.5 seconds (1min49.8 -> 1min49.3) on the
    first 50 frames of bus ([1;31mspeed[m 0) @ 1500kbps, i.e. 0.5% overall.
    
    Change-Id: If3dd62453f8e2ab9d4ee616bc4ea956fb8874b80

[33mcommit 043e0f9dad1106b60ba3e58dfc4075ed261080dc[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 15 11:28:46 2013 -0700

    Skip inter-coded block reconstruction in rd loop
    
    Skip the inverse transform and reconstruction of inter-mode coded
    blocks in the rate-distortion optimization loop, when skip_encode_sb
    feature is turned on. This provides about 1% [1;31mspeed[m-up at [1;31mspeed[m 0,
    and 1.5% [1;31mspeed[m-up at [1;31mspeed[m 1. No performance change in both settings.
    
    Change-Id: I2932718bf4d007163702b61b16b6ff100cf9d007

[33mcommit faff6ed0fbb01ece1331021b749ec2f9114332ff[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 8 16:48:47 2013 -0700

    Skip duplicate block encoding in the rd loop
    
    This [1;31mspeed[m feature allows the encoder to largely remove the spatial
    dependency between blocks inside a 64x64 superblock, thereby removing
    the need to repeatedly encode superblocks per partition type in the
    rate-distortion optimization loop.
    
    A major challenge lies in the intra modes tested in the rate-distortion
    optimization loop. The subsequent blocks do not have access to the
    reconstructed boundary pixels without the intermediate coding steps.
    This was resolved by using the original pixels for intra prediction
    in the rd loop, followed by an appropriately designed distortion
    modeling on the quantization parameters. Experiments also suggested
    that the performance impact is more discernible at lower bit-rate/psnr
    settings. Hence a quantizer dependent threshold is applied to deactivate
    skip of block coding.
    
    For bus_cif at 2000 kbps,
    [1;31mspeed[m 0: runtime 269854ms -> 237774ms (12% [1;31mspeed[m-up) at 0.05dB
             performance loss.
    
    [1;31mspeed[m 1: runtime 65312ms  -> 61536ms, (7% [1;31mspeed[m-up) at 0.04dB
             performance loss.
    
    This operation is currently turned on in settings of [1;31mspeed[m 1.
    
    Change-Id: Ib689741dfff8dd38365d8c1b92860a3e176f56ec

[33mcommit 91365addf8ddb59629d6cfe29abf22a97c73918d[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jul 12 20:54:14 2013 -0700

    SSE2 8x8 inverse ADST/DCT transform
    
    This commit enables SSE2 implementation of 8x8 inverse ADST/DCT
    transform. The runtime goes from 1216 cycles -> 266 cycles.
    For bus_cif at 2000 kbps, the overall runtime reduces from
    253707ms -> 248430ms, i.e., 2% [1;31mspeed[m-up at [1;31mspeed[m 0.
    
    Change-Id: Ib0372e17e9162d7b11a10d653b1c8be547c878fb

[33mcommit 94c481f9f17828db0d4b8b4f2549bc5ff1075cf8[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Jul 10 16:51:07 2013 -0700

    Some minor cleanups for efficiency
    
    Implements some of the helper functions more efficiently with
    lookups rathers than branches. Modeling function is consolidated
    to reduce some computations.
    
    Also merged the two enums BLOCK_SIZE_TYPES and BlockSize into
    one because there is no need to keep them separate (even though
    the semantics are a little different).
    
    No bitstream or output change.
    
    About 0.5% [1;31mspeed[mup
    
    Change-Id: I7d71a66e8031ddb340744dc493f22976052b8f9f

[33mcommit 5290eeab8806c8f1382adfad6bd42d8ffc8fb261[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Jul 3 17:54:06 2013 +0100

    Speed 2 feature adjustment.
    
    With sf->auto_mv_step_size on it is questionable
    whether sf->reduce_first_step_size is worthwhile.
    At [1;31mspeed[m 2 it was not having a big impact.
    
    Even at [1;31mspeed[m 2 sf->optimize_coefficients = 0 is not
    having a big [1;31mspeed[m imapct so for now I have moved it
    down into a higher [1;31mspeed[m setting.
    
    Change-Id: I8a54de76d486ad37aabce76474889da2768b14c1

[33mcommit 49b630204437f1169fb091a1d4df72ea285a20fb[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 10 12:11:09 2013 -0700

    SSE2 4x4 invserse ADST/DCT transform
    
    Enable SSE2 4x4 inverse ADST/DCT transform. The runtime goes from
    292 cycles down to 89 cycles. Running bus_cif at 2000 kbps, the
    overall runtime of [1;31mspeed[m 0 goes from 301s to 295s (2% [1;31mspeed[m-up).
    
    Change-Id: I24098136e7fee7ab2fbf1c11755bdf2ca37f3628

[33mcommit 53ff43adc341068945f0857bcf28846080e8f368[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Jul 8 16:01:01 2013 -0700

    Prunes out full-rd computation based on modeled rd
    
    Adds a [1;31mspeed[m feature to eliminate full-rd computation if the modeled
    rd or rd based on a different parameter in the same mode is already
    a lot larger than the best rd yet.
    
    Specifically, only search the sharp and smooth filters if the modeled
    rd cost based on the  regular filter is within a certain factor of the
    best rd cost so far. Also, skip full-rd computation of non splitmv
    inter modes if the modeled rd cost based on pred error is within the
    same factor of the best rd cost so far.
    
    Also adds some enhancements in the rd search for splitmv mode to
    [1;31mspeed[m things up by early breakouts. Negligible impact on performance.
    
    Resuts on derfraw300:
    psnr:    -0.013% with the splitmv enhancements, -0.24% with the rd
             breakout feature on.
    [1;31mspeed[mup: 6% with splitmv enhancements, 20% with also residual breakout
             (tested on football sequence at 600 Kbps)
    
    Change-Id: I37abc308ea9f110c1679ce649b6a7e73ab1ad5fc

[33mcommit b1df674a99c37ff8dea0609d1f6d7864fa6a05f4[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 10 09:26:32 2013 -0700

    Remove memcpy() in handle_inter_mode() filter selection.
    
    Encode time of first 50 frames of bus ([1;31mspeed[m 0) @ 1500kbps goes from
    2min4.9 to 2min3.1, i.e. a 1.4% [1;31mspeed[mup overall.
    
    Change-Id: I9b25e87974430cb942caa276410bb2eda815bd83

[33mcommit 6c8170af52b8d29f52e3e155300de1f4e8e27624[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Jul 10 07:19:09 2013 -0700

    b_width_log2 and b_height_log2 lookups
    
        Replace case statement with lookup.
        Small [1;31mspeed[m gain at low [1;31mspeed[m settings but at [1;31mspeed[m 2+ where the
        number of motion searches etc. falls the impact rises to ~3-4%.
    
        Change-Id: Idff639b7b302ee65e042b7bf836943ac0a06fad8
    
    Change-Id: I5940719a4a161f8c26ac9a6753f1678494cec644

[33mcommit c36d502e923d4225771e7ec61d2f276146886e29[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Jul 9 08:52:30 2013 -0700

    decoder [1;31mspeed[mup - get-segment-id only if segmentation enabled
    
    Change-Id: I9355f8446660aeb7dfdbc5ee56635c791ac35e95

[33mcommit a5062cc6356671da86ead502165f01b50b16b353[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 8 14:38:40 2013 -0700

    Don't call encode_sb() for the final of 4-split subpartitions.
    
    The resulting reconstruction is never used, thus it just wastes CPU
    cycles. Reduces encode time of first 50 frames of bus ([1;31mspeed[m 0) @
    1500kbps from 2min2.0 to 2min1.2, i.e. a 0.65% overall [1;31mspeed[mup.
    
    Change-Id: I74755ca3aadc21e2be220f486259060bd4088c45

[33mcommit bd867f16191a5ec2c2ebbd2e63bcb2721f0a0d78[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 3 12:04:30 2013 -0700

    Inline vp9_get_mv_joint().
    
    Encode time for first 50 frames of bus ([1;31mspeed[m 0) @ 1500kbps goes from
    2min10.9 to 2min10.5, i.e. 0.3% faster overall, basically because we
    prevent the call overhead.
    
    Change-Id: I1eab1a95dd3eae282f9b866f1f0b3dcadff073d5

[33mcommit 8fde07a3aeef421ed7b15c424e7fad2ede46f9bf[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 3 10:54:36 2013 -0700

    Don't recalculate mv_ref costs for each block/partition.
    
    Changes cost_mv_ref() into doing a LUT into pre-calculated cost
    arrays instead. Encode time of first 50 frames of bus ([1;31mspeed[m 0)
    @ 1500kbps goes from 2min11.6 to 2min10.9, i.e. 0.5% faster overall.
    
    Change-Id: If186e92c34c201b29cbbc058785a15c9c09e433a

[33mcommit 5a73254918b7f37582a606a6621a9eb0d05abb06[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Jul 3 10:09:15 2013 -0700

    Remove unnecessary memset(best_index, 0) from trellis/optimize.
    
    First 50 frames of bus @ 1500kbps ([1;31mspeed[m 0) goes from 2min12.6 to
    2min11.6, i.e. 0.75% overall [1;31mspeed[mup.
    
    Change-Id: I67054f8146e82a02b6457c51a1c8627a937e5e1e

[33mcommit fcf7998a47f7e1ec27fe93f99e488d345560a9be[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 8 14:49:48 2013 -0700

    Remove memcpy() in handle_inter_mode() filter selection.
    
    Encode time of first 50 frames of bus ([1;31mspeed[m 0) @ 1500kbps goes from
    2min4.9 to 2min3.1, i.e. a 1.4% [1;31mspeed[mup overall.
    
    Change-Id: Ibe8b08d159797504c5d0c5122de1b6da3b6595e0

[33mcommit d9b62160a0782ce99a62ede946390557bf22ddce[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Jul 3 14:47:54 2013 -0700

    Implements several heuristics to prune mode search
    
    Skips mode searches for intra and compound inter modes depending
    on the best mode so far and the reference frames. The various
    heuristics to be used are selected by bits from a flag. The
    previous direction based intra mode search pruning is also absorbed
    in this framework.
    
    Specifically the flags and their impact are:
    
    1) FLAG_SKIP_INTRA_BESTINTER (skip intra mode search for oblique
    directional modes and TM_PRED if the best so far is
    an inter mode)
    derfraw300: -0.15%, 10% [1;31mspeed[mup
    
    2) FLAG_SKIP_INTRA_DIRMISMATCH (skip D27, D63, D117 and D153
    mode search if the best so far is not one of the closest
    hor/vert/diagonal directions.
    derfraw300: -0.05%, about 9% [1;31mspeed[mup
    
    3) FLAG_SKIP_COMP_BESTINTRA (skip compound prediction mode
    search if the best so far is an intra mode)
    derfraw300: -0.06%, about 7-8% [1;31mspeed[mup
    
    4) FLAG_SKIP_COMP_REFMISMATCH (skip compound prediction search
    if the best single ref inter mode does not have the same ref
    as one of the two references being tested in the compound mode)
    derfraw300: -0.56%, about 10% [1;31mspeed[mup
    
    Change-Id: I1a736cd29b36325489e7af9f32698d6394b2c495

[33mcommit 2bd6fe08f8f6b84816e4369ae53725cf97a43c41[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 2 16:48:15 2013 -0700

    Enable early termination in rd search
    
    This commit allows encoder to detect the cumulative rate-distortion
    cost per transformed block inside a partition. If the cumulative
    rd cost is already above the best rd value, it terminates the rest
    operations and continue to next prediction mode test.
    
    It reduces the runtime of bus at target bit-rate 2000 from 308 second
    to 266 second, i.e., about 13% [1;31mspeed[m-up at no performance penalty.
    
    Change-Id: I5f15a3d8955d97031d5653006027866a00654e7a

[33mcommit 16147d4bcc8e47f7d59067f37e844e86f058ddc6[m
Merge: b0520b61e 0d7b7c09c
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Jul 2 17:16:11 2013 -0700

    Merge "Added a [1;31mspeed[m feature use_square_partition_only"

[33mcommit 0d7b7c09cb57d32b0f341379cc3c19e21910ea8d[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jun 27 12:07:07 2013 -0700

    Added a [1;31mspeed[m feature use_square_partition_only
    
    This commit adds a [1;31mspeed[m feature where only squared partition are
    evaluated in partition picking. Enable this feature in cpu-used 2
    reduces encoding time by ~30%.
    
    loss of compression:
    -0.9% on cif set
    -1.23% on stdhd
    
    Change-Id: Ia6fad11210f0b78365abb889f9245604513be5b9

[33mcommit b0520b61ed90062fd284caa800289503002cd59e[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Jul 2 14:14:16 2013 -0700

    new unit test for cpu-[1;31mspeed[m
    
    Tests q0 ( lossless),  very high bitrate and low bitrates at cpu [1;31mspeed[m
    0, 1 and 2.
    
    Change-Id: I0c5cdca00acd8d01e7b13f124b3b08d4b1ae9f6d

[33mcommit 37501d687c509c348bc2bdbe75aa050e2ab0437c[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Jul 2 11:18:00 2013 -0700

    Speed feature to binary search dir intramodes
    
    This [1;31mspeed[m feature will skip searching the directional intra prediction
    modes D63, D117, D27, D153 if the best intra mode so far is not one of
    the diagonal, horizontal or vertical directions closest to the respective
    directions being tested. In other words, this implements a sort of
    binary search in the angular domain.
    
    Speedup: about 9-10%
    Results: -0.05% only on derfraw300.
    
    Change-Id: I413584c41f2a3e8dabfbdeb40718c8fc4b1d63a2

[33mcommit 8d3d2b76f304f622a5e2d2e54416e1188a697f61[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Jun 21 16:31:12 2013 -0700

    Tx size selection enhancements
    
    (1) Refines the modeling function and uses that to add some [1;31mspeed[m
    features. Specifically, intead of using a flag use_largest_txfm as
    a [1;31mspeed[m feature, an enum tx_size_search_method is used, of which
    two of the types are USE_FULL_RD and USE_LARGESTALL. Two other
    new types are added:
    USE_LARGESTINTRA (use largest only for intra)
    USE_LARGESTINTRA_MODELINTER (use largest for intra, and model for
    inter)
    
    (2) Another change is that the framework for deciding transform type
    is simplified to use a heuristic count based method rather than
    an rd based method using txfm_cache. In practice the new method
    is found to work just as well - with derf only -0.01 down.
    The new method is more compatible with the new framework where
    certain rd costs are based on full rd and certain others are
    based on modeled rd or are not computed. In this patch the existing
    rd based method is still kept for use in the USE_FULL_RD mode.
    In the other modes, the count based method is used.
    However the recommendation is to remove it eventually since the
    benefit is limited, and will remove a lot of complications in
    the code
    
    (3) Finally a bug is fixed with the existing use_largest_txfm [1;31mspeed[m feature
    that causes mismatches when the lossless mode and 4x4 WH transform is
    forced.
    
    Results on derf:
    USE_FULL_RD: +0.03% (due to change in the tables), 0% encode time reduction
    USE_LARGESTINTRA: -0.21%, 15% encode time reduction (this one is a
    pretty good compromise)
    USE_LARGESTINTRA_MODELINTER: -0.98%, 22% encode time reduction
    (currently the benefit of modeling is limited for txfm size selection,
    but keeping this enum as a placeholder) .
    USE_LARGESTALL: -1.05%, 27% encode-time reduction (same as existing
    use_largest_txfm [1;31mspeed[m feature).
    
    Change-Id: I4d60a5f9ce78fbc90cddf2f97ed91d8bc0d4f936

[33mcommit f4bee75c2b03901d789b2d70d72db5802932656d[m
Merge: b91a1586a b12e060b5
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jul 2 10:54:22 2013 -0700

    Merge "Add [1;31mspeed[m feature to disable splitmv"

[33mcommit b12e060b559ef948e154b2ee21e86eb1fc9dcc1d[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Sat Jun 29 17:34:51 2013 -0700

    Add [1;31mspeed[m feature to disable splitmv
    
    Added a [1;31mspeed[m feature in [1;31mspeed[m 1 to disable splitmv for HD (>=720)
    clips. Test result on stdhd set: 0.3% psnr loss and 0.07% ssim
    loss. Encoding [1;31mspeed[mup is 36%.
    
    (For reference: The test result on derf set showed 2% psnr loss
    and 1.6% ssim loss. Encoding [1;31mspeed[mup is 34%. SPLITMV should be
    enabled for small resolution videos.)
    
    Change-Id: I54f72b94f506c6d404b47c42e71acaa5374d6ee6

[33mcommit 1319d9c077314a5bb7bf7a944fd978c29b20e622[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Jul 2 15:42:14 2013 +0100

    Adjust Speed 0 settings.
    
    Remove the use of sf->comp_inter_joint_search_thresh
    from the baseline [1;31mspeed[m 0. Approx +0.4% on derf.
    
    Change-Id: Icc14db98909830f40e5ac66130d40e78d2e55c71

[33mcommit b7cd01ed7375b1e5b6dc67f7427d07298f244471[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Jul 2 12:34:41 2013 +0100

    Revert "New motion threshold factor - [1;31mspeed[m feature."
    
    This reverts commit 13772781807ebff8b5c7d100e90d0eac6c61cbd4.
    Also fixes a spelling mistake.
    
    Change-Id: I5be8aa4d8d3c0323d4a6f41968a7b2c048949c3f

[33mcommit 26b6318de83761dd268a589f0b1324153e9d0923[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 1 10:40:00 2013 -0700

    Make get_coef_context() branchless.
    
    This should significantly [1;31mspeed[mup cost_coeffs(). Basically what the
    patch does is to make the neighbour arrays padded by one item to
    prevent an eob check in get_coef_context(), then it populates each
    col/row scan and left/top edge coefficient with two times the same
    neighbour - this prevents a single/double context branch in
    get_coef_context(). Lastly, it populates neighbour arrays in pixel
    order (rather than scan order), so we don't have to dereference the
    scantable to get the correct neighbours.
    
    Total encoding time of first 50 frames of bus ([1;31mspeed[m 0) at 1500kbps
    goes from 2min10.1 to 2min5.3, i.e. a 2.6% overall [1;31mspeed[m increase.
    
    Change-Id: I42bcd2210fd7bec03767ef0e2945a665b851df56

[33mcommit c8defcfdeea614a780af9a2405f59c60cab876ad[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 1 11:36:33 2013 -0700

    Update quantize SSSE3 SIMD to cover 32x32 transform case also.
    
    Encode time of bus ([1;31mspeed[m 0) 50 frames @ 1500kbps goes from 2min14.4 to
    2min10.1, i.e. a 2.3% overall [1;31mspeed[m increase.
    
    Change-Id: I3699580e74ec26c7d24e03681bc47ba25ee1ee87

[33mcommit 7353ceab9d6b5c9d1bbdae18e509207c5afb2b19[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Jul 1 11:36:07 2013 -0700

    Quantize (64-bit only, for now) SSSE3 SIMD.
    
    Total encoding time for first 50 frames of bus ([1;31mspeed[m 0) @ 1500kbps
    goes 2min34.8 to 2min14.4, i.e. a 10.4% overall [1;31mspeed[mup. The code is
    x86-64 only, it needs some minor modifications to be 32bit compatible,
    because it uses 15 xmm registers, whereas 32bit only has 8.
    
    Change-Id: I2df53770c2e850813ffa713e1a91b45b0082b904

[33mcommit 7bb436feee9eab8564299c8fe7a8b0eac16c9328[m
Merge: 632289b31 137727818
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Jul 1 09:39:02 2013 -0700

    Merge "New motion threshold factor - [1;31mspeed[m feature."

[33mcommit 13772781807ebff8b5c7d100e90d0eac6c61cbd4[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Jun 27 13:16:33 2013 +0100

    New motion threshold factor - [1;31mspeed[m feature.
    
    Added a [1;31mspeed[m feature that focuses only on thresholds
    for new motion modes.
    
    Moved sf->comp_inter_joint_search_thresh into [1;31mspeed[m
    1.  This has ~+0.4% impact on quality at [1;31mspeed[m 0 as
    our quality reference baseline.
    
    Slight adjustment to baseline thresholds.
    
    Change-Id: I7ebf104f1fe29af77ed4837b2e84be065621bbe5

[33mcommit 1109b6b888da9ba6bac50c82a87577c75ec43ab6[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jun 28 13:37:19 2013 -0700

    Enable SSE2 4x4 ADST/DCT transform
    
    This commit enables SSE2 4x4 foward hybrid transform. The runtime
    goes from 249 cycles down to 74 cycles. Overall around 2% [1;31mspeed[m-up
    at no compression performance change.
    
    Change-Id: Iad4d526346e05c7be896466c05500711bb763660

[33mcommit d00b8e5f82069a2ce819f1ee1588d52d04cbf65c[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Jun 28 10:40:21 2013 -0700

    Inline vp9_get_coef_context() (and remove vp9_ prefix).
    
    Makes cost_coeffs() a lot faster:
    4x4: 236 -> 181 cycles
    8x8: 888 -> 588 cycles
    16x16: 3550 -> 2483 cycles
    32x32: 17392 -> 12010 cycles
    
    Total encode time of first 50 frames of bus ([1;31mspeed[m 0) @ 1500kbps goes
    from 2min51.6 to 2min43.9, i.e. 4.7% overall [1;31mspeed[mup.
    
    Change-Id: I16b8d595946393c8dc661599550b3f37f5718896

[33mcommit 91d223bd5c3ece5edc28d048a866d1c0fb39bdc7[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jun 27 20:57:37 2013 -0700

    Some minor optimizations for cost_coeffs().
    
    Cycle timings for first 3 frames of bus ([1;31mspeed[m 0) at 1500kbps:
    4x4: 298 -> 234 cycles
    8x8: 1227 -> 878 cycles
    16x16: 23426 -> 18134 cycles
    32x32: 4906 -> 3664 cycles
    
    Total encode time of first 50 frames of bus @ 1500kbps ([1;31mspeed[m 0) goes
    from 3min0.7 to 2min51.6 seconds, i.e. 5.3% faster.
    
    Change-Id: I68a0e1b530b0563b84a67342cca4b45146077e95

[33mcommit 1374a06bd87e2e2c41e17738bf5215d53e5223a0[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jun 27 12:07:07 2013 -0700

    Optimize partition search order
    
    This commit change the partition search order to allow checking of
    rectangular partition to be done after square partitions. It also
    added a [1;31mspeed[m feature to skip rectangular partition check when
    NONE is better than SPLIT in RD sense.
    
    This feature roughly [1;31mspeed[m up encoder by 1.5X with loss on compression
    -0.91% on cif set
    -0.56% on stdhd set
    
    Change-Id: I0d2d06993041aa9ea9073fcc39c54f73a127dfa4

[33mcommit 7a049be6bf8273be4871555520f6bbbfb0a1cb4f[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Tue Jun 25 17:28:24 2013 -0700

    Inline quantize so idiv instruction gets removed from inner loop.
    
    Encoding time of first 50 frames of bus @ 1500kbps ([1;31mspeed[m 0) goes from
    3min15.0 to 3min10.9, i.e. 2.1% faster overall.
    
    Change-Id: If592ee99be09bcd34a7c8498347f44e7305e982c

[33mcommit 9f3ab83486e5259293b8074600019d4e38f3eae2[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Jun 26 17:06:25 2013 +0100

    Auto adapt step size feature.
    
    Also tweaks to other features and experiments with
    what is on and off at different [1;31mspeed[m settings.
    
    Change-Id: I3e1d0be0d195216bf17c2ac5df67f34ce0b306b2

[33mcommit a32a086d23c2061344af7653892456bde3fffd0d[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jun 20 09:00:23 2013 -0700

    Enable sse2 implmentation of 8x8 ADST/DCT
    
    This commit makes use of the butterfly structure to enable the sse2
    version implementation of 8x8 ADST/DCT hybrid transform coding.
    
    The runtime of hybrid transform module goes down from 1170 cycles
    to 245 cycles. Overall [1;31mspeed[m-up around 1.5%.
    
    Change-Id: Ic808ffd21ece8a9d0410d8c0243d7b6c28ac3b3f

[33mcommit e371cd73a346339d467ec9dcc0af59511f6c23cc[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Jun 24 16:43:26 2013 -0700

    change to enable use_largest_txform feature
    
    for all regular inter frames at [1;31mspeed[m 1
    
    Change-Id: I0a8b301273ecf2b8730ab1f6b7a05f89f4d498e0

[33mcommit 54b2a59623b42c517010e4be9b13a41c41d21d66[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Jun 21 12:54:52 2013 -0700

    Implement SSE2 block_error.
    
    Change vp9_block_error() to return a 64bit error variable, change all
    callers to expect a 64bit return value (this will prevent overflows,
    which we basically don't check for at all right now). Remove duplicate
    block_error() function, which fixed that through truncation. Remove
    old (incompatible) mmx/sse2 block_error SIMD versions and replace with
    a new one that returns a 64bit value.
    
    Encoding time of first 50 frames of bus @ 1500kbps goes from 3min29 to
    3min23, i.e. a 3% overall [1;31mspeed[mup.
    
    Change-Id: Ib71ac5508b5ee8a80f1753cd85d72df1629abe68

[33mcommit 869d770610d0b32216279e66cfb58f5817460df2[m
Merge: 61721181e 45e25a781
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jun 20 22:37:01 2013 -0700

    Merge "Get some [1;31mspeed[m back for cpuused 1"

[33mcommit 45e25a7814636379585e9983b72c83a386410541[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jun 20 15:23:37 2013 -0700

    Get some [1;31mspeed[m back for cpuused 1
    
    and remove unused code.
    
    Change-Id: If380440c4450294b5450b7a9eeb94a376846ec01

[33mcommit 1e6a32f1af8066fd0b718b11f00cb09104280f49[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jun 20 15:59:48 2013 -0700

    SSE2/SSSE3 optimizations and unit test for sub_pixel_avg_variance().
    
    Encoding of bus @ 1500kbps (first 50 frames) goes from 3min57 to
    3min35, i.e. approximately a 10.5% [1;31mspeed[mup. Note that the SIMD versions
    which use a bilinear filter (x_offset & 7 || y_offset & 7) aren't
    perfectly interleaved, and can probably be improved further in the
    future. I've marked this with a few TODOs/FIXMEs in the code.
    
    Change-Id: I5c9e900c0f0d32e431a50fecae213b510b2549f9

[33mcommit 9f2a1ae23e03e2a327e797286f4d02cbedb8e90d[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu Jun 20 09:24:04 2013 -0700

    adds force partitioning greater than or less than block size
    
    adds a new [1;31mspeed[m feature to force partitioning to be greater than
    or less than a certain size
    
    Change-Id: I8c048eeeef93700ae822eccf98f8751a45b2e7d0

[33mcommit 18bdf708e7f5bc473d8000ba4d17806ecaaa2ba5[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu Jun 20 07:46:51 2013 -0700

    adds a set partitioning to [1;31mspeed[m features
    
    this feature lets you set a partitioning size to be used by the entire
    frame.
    
    Change-Id: I208a4c8c701375cbb054418266f677768b6f8f06

[33mcommit 1f94b976947e573258fdcf6648bdef3498cbd662[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Jun 19 15:53:47 2013 -0700

    convert all [1;31mspeed[m things to [1;31mspeed[m features
    
    Change-Id: Ie24489a4d39f3e53e816eeebf75a1c9c7d94515a

[33mcommit 0fad6a9d99dbd88c87c5e621a18b9c18d9173dce[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Jun 19 12:16:45 2013 -0700

    fix to set up new [1;31mspeed[m feature
    
    This uses the [1;31mspeed[m feature functionality for code.
    
    Change-Id: I9cd16c0c5f98520ae27ebba81aa2c178546587f8

[33mcommit 8fb6c58191251792765c2910af3f9d6da22d6c11[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jun 20 09:34:25 2013 -0700

    Implement sse2 and ssse3 versions for all sub_pixel_variance sizes.
    
    Overall [1;31mspeed[mup around 5% (bus @ 1500kbps first 50 frames 4min10 ->
    3min58). Specific changes to timings for each function compared to
    original assembly-optimized versions (or just new version timings if
    no previous assembly-optimized version was available):
    
    sse2   4x4:    99 ->   82 cycles
    sse2   4x8:           128 cycles
    sse2   8x4:           121 cycles
    sse2   8x8:   149 ->  129 cycles
    sse2   8x16:  235 ->  245 cycles (?)
    sse2  16x8:   269 ->  203 cycles
    sse2  16x16:  441 ->  349 cycles
    sse2  16x32:          641 cycles
    sse2  32x16:          643 cycles
    sse2  32x32: 1733 -> 1154 cycles
    sse2  32x64:         2247 cycles
    sse2  64x32:         2323 cycles
    sse2  64x64: 6984 -> 4442 cycles
    
    ssse3  4x4:           100 cycles (?)
    ssse3  4x8:           103 cycles
    ssse3  8x4:            71 cycles
    ssse3  8x8:           147 cycles
    ssse3  8x16:          158 cycles
    ssse3 16x8:   188 ->  162 cycles
    ssse3 16x16:  316 ->  273 cycles
    ssse3 16x32:          535 cycles
    ssse3 32x16:          564 cycles
    ssse3 32x32:          973 cycles
    ssse3 32x64:         1930 cycles
    ssse3 64x32:         1922 cycles
    ssse3 64x64:         3760 cycles
    
    Change-Id: I81ff6fe51daf35a40d19785167004664d7e0c59d

[33mcommit f954490bbf24af9431f9c24744aef1476e11acef[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu Jun 20 09:28:11 2013 -0700

    disable [1;31mspeed[m > 1 [1;31mspeed[m corrections in firstpass
    
    need to rework these
    
    Change-Id: I17dc2c88d2faadd2f8fb117c52c25f04ea2e9856

[33mcommit b5bf7b13a83fc6fccafec1611410910eb78155a9[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jun 18 17:09:50 2013 -0700

    Add two-pass quantization
    
    Optimized the quantization function by making it a two-pass
    process. The first pass does a quick checking of the transform
    coefficients against the base ZBIN, and only keep the good
    enough set of coefficients for quantization. A skipping
    check is added. If all coefficients are within the base ZBIN, no
    quantization is needed. The second pass is the actual quantization
    pass, which only processes the coefficient subset determined
    in first pass. This reduces the computation. Furthermore, an
    alternitive method is used for large transform size, which often
    has sparse nonzero quantized coefficients.
    
    Overall, the encoder [1;31mspeed[mup is about 4%. The quantization function
    itself gets 20% faster.
    
    Change-Id: I3a9dd0da6db030260b6d9c314a9fa48ecae89f22

[33mcommit a41a4860c0b3be7815f37b4ec833e87218307c4f[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Jun 14 11:28:56 2013 -0700

    Make fdct32 computation flow within 16bit range
    
    This commit makes use of dual fdct32x32 versions for rate-distortion
    optimization loop and encoding process, respectively. The one for
    rd loop requires only 16 bits precision for intermediate steps.
    The original fdct32x32 that allows higher intermediate precision (18
    bits) was retained for the encoding process only.
    
    This allows [1;31mspeed[m-up for fdct32x32 in the rd loop. No performance
    loss observed.
    
    Change-Id: I3237770e39a8f87ed17ae5513c87228533397cc3

[33mcommit 9068bce4e795215b59d0145d560d27ef5bd79295[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jun 3 09:16:48 2013 -0700

    Put iterative motion search under [1;31mspeed[m control
    
    Enable iterative motion search for compound inter-inter prediction
    of block sizes 4x4/4x8/8x4 only when best coding quality is selected.
    The iterative motion search provides about 0.1% gains for derf and
    stdhd at this point, at the expense of longer runtime.
    
    Change-Id: Idc03e7f827e51f1bb8d269bc3752ee297a6bbfe5

[33mcommit 5da753bef9522fa042b8491240358a80e521a76d[m
Merge: 0835a3534 9e176494c
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri May 31 07:12:43 2013 -0700

    Merge "put back in lost [1;31mspeed[mups" into experimental

[33mcommit 9e176494c22da279c14457951c0ae1d3de749059[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri May 31 06:47:40 2013 -0700

    put back in lost [1;31mspeed[mups
    
    [1;31mspeed[m >1 can be spead up by turning these on - lost in a prior commit
    
    Change-Id: Iaef85e10ecfeec3aea5ab0e691edf02bb7f5190d

[33mcommit 21595f8e38771c283fae6b39fe4a7be3d19d72f3[m
Merge: 16482bddf ced21bd6a
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu May 30 20:36:05 2013 -0700

    Merge "Creates a new [1;31mspeed[m 1:" into experimental

[33mcommit ced21bd6a6c8427a69666f3c01ab2966ce845f32[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu May 30 15:13:08 2013 -0700

    Creates a new [1;31mspeed[m 1:
    
    This [1;31mspeed[m 1 - uses variance threshold stolen from static-thresh
    to determine split.  Any superblock with greater than the variance
    set by static thresh * quantizer index squared is split. In addition
    transform size is set to largest size less than or equal to partition
    size, sub pixel filter is set to normal,  and only 12 modes are used
    at all.
    
    Change-Id: If7a2858ee70f96d1eb989c04fd87a332b147abef

[33mcommit 80812829c2d45d9f5597e619b8759e9562d6f1c0[m
Author: Sami Pietilä <samipietila@google.com>
Date:   Mon May 27 10:14:53 2013 +0300

    Moving txfm_size bits before prediction mode bits.
    
    Hardware implementation needs to load coeff probs based on the
    transform size. For selectable transform size, moving these bits
    earlier in the bitstream adds some delay giving time to preload
    the probs and [1;31mspeed[ms up the decoding process.
    
    Change-Id: I3bfc1f662ae6f219c9286fe9ae6310c7d8a63ea7

[33mcommit 0b713f8c18f6695f882ad9a469ddba6842c3fa9e[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue May 21 13:57:29 2013 +0100

    Merge CONFIG_COMP_INTER_JOINT_SEARCH.
    
    Merge this experiment so that it is under a [1;31mspeed[m feature
    flag not a configuration flag.
    
    Change-Id: I536f7f125a4ff5149bb3a64f791e835c324535fd

[33mcommit f0911886f3d6e10cca268efa0441a7189c5b7752[m
Merge: 60dd610ec 4be190d9d
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed May 8 16:35:35 2013 -0700

    Merge "Renaming 'Speed' to '[1;31mspeed[m' inside VP9_COMP struct." into experimental

[33mcommit 4be190d9d03b976c4515e44d70ced8bb24a9d6ff[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed May 8 14:35:42 2013 -0700

    Renaming 'Speed' to '[1;31mspeed[m' inside VP9_COMP struct.
    
    Change-Id: I4374b5af40ee9082ddf7956a9756a15ad9ad5436

[33mcommit 366ff224ef0d49039b8f4bc090ad5addaa1463cc[m
Merge: 94fa3bcc0 e7bddba14
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Mon Apr 22 16:42:33 2013 -0700

    Merge "new version of [1;31mspeed[m 1" into experimental

[33mcommit e7bddba149787d0d2830998db9181239b5ee9bac[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Mon Apr 22 15:42:41 2013 -0700

    new version of [1;31mspeed[m 1
    
    This version of [1;31mspeed[m 1 only disables modes at higher resolution that
    had distortions >2x the best mode we found...
    
    The hope is that this could be a replacement for [1;31mspeed[m 0 ...
    
    Change-Id: I7421f1016b8958314469da84c4dccddf25390720

[33mcommit afb04eb2113932e4008111d27e2bb1bad324a026[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri Apr 19 09:48:56 2013 -0700

    catch all for new block sizes
    
    Just make sure we don't stop them from testing in [1;31mspeed[m 1.
    
    Change-Id: Iec9b3dba0a32616ff7a451207e0f54b81bb72575

[33mcommit 6d82fe219d898c876a33fbd3bf39db6588bc4115[m
Merge: aa76bf3d2 b6ef0823c
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri Apr 19 08:28:35 2013 -0700

    Merge "set up a new [1;31mspeed[m 1" into experimental

[33mcommit b6ef0823c575869b1d603f8f7076c1a96df65f48[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri Apr 19 08:04:57 2013 -0700

    set up a new [1;31mspeed[m 1
    
    slightly worse results for faster encodes
    
    Change-Id: I25ea82a18ce20635dbcd328808c1d05ac1f58fd7

[33mcommit 0c481f4d1824866527a82ab60f28d7c9d304679d[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Apr 17 10:31:59 2013 -0700

    Add SSE2 versions for rectangular sad and sad4d functions.
    
    About 11% overall encoder [1;31mspeed[mup with the sbsegment experiment enabled.
    
    Change-Id: Iffb1bdba6932d9f11a6c791cda8697ccf9327183

[33mcommit cb044e6d9a8b8b0263bd959117f5a6cd8b741bdf[m
Merge: 5b6d33f9a 94649bc0e
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Wed Apr 17 06:33:42 2013 -0700

    Merge "set up a [1;31mspeed[m 1"

[33mcommit 5b6d33f9afee6da7a370cdd94aae4ac85c8588c9[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Mon Mar 25 16:18:38 2013 -0700

    Faster vp9_short_fdct4x4 and vp9_short_fdct8x4.
    
    Scalar path is about 1.3x faster (2.1% overall encoder [1;31mspeed[mup).
    SSE2 path is about 5.0x faster (8.4% overall encoder [1;31mspeed[mup).
    
    Change-Id: I360d167b5ad6f387bba00406129323e2fe6e7dda

[33mcommit f13b69d07c337bf8f7165b01934ae8ad971694bd[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Mon Mar 25 16:18:38 2013 -0700

    Faster vp9_short_fdct4x4 and vp9_short_fdct8x4.
    
    Scalar path is about 1.3x faster (2.1% overall encoder [1;31mspeed[mup).
    SSE2 path is about 5.0x faster (8.4% overall encoder [1;31mspeed[mup).
    
    Change-Id: I360d167b5ad6f387bba00406129323e2fe6e7dda

[33mcommit 94649bc0ef85813dd42834a3df985753864b9be6[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Apr 16 14:49:30 2013 -0700

    set up a [1;31mspeed[m 1
    
    slightly worse results for faster encodes
    
    Change-Id: Ic5b38fcde7a2e334c4724e125b558bcb97783af6

[33mcommit 2da90fddc23a5df5ca6b241c720ef6f0c94d5e4c[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Apr 10 13:45:22 2013 -0700

    Remove obselete code
    
    The strategy to run fast loop filter picking for encoder [1;31mspeed[m-up
    should be revisited at a later stage.
    
    Change-Id: I3b75e06d767cff41be952a42e63b3292f4eab996

[33mcommit 2e23c74794cbbc467f801c6b883570625529d933[m
Merge: 3dca0d44d e79a3ff5f
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Apr 5 13:34:57 2013 -0700

    Merge "Removed a [1;31mspeed[m feature no longer used" into experimental

[33mcommit e79a3ff5f39479a186747c7b725882974c93a689[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Apr 5 10:43:20 2013 -0700

    Removed a [1;31mspeed[m feature no longer used
    
    Change-Id: Id0c2e44daa936f1d6fb76469fd1bd72a4d7c19fd

[33mcommit 4418b790a79342a0b89cac0c83e07bc4d8729262[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Fri Mar 15 15:50:55 2013 -0700

    Faster vp9_short_fdct16x16.
    
    Scalar path is about 1.5x faster (3.1% overall encoder [1;31mspeed[mup).
    SSE2 path is about 7.2x faster (7.8% overall encoder [1;31mspeed[mup).
    
    Change-Id: I06da5ad0cdae2488431eabf002b0d898d66d8289

[33mcommit c129203f7e5e20f5d67f92c27c65f7d5e362aa7a[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Wed Feb 27 12:29:06 2013 -0800

    Faster vp9_short_fdct8x8.
    
    Scalar path is about 1.4x faster (4% overall encoder [1;31mspeed[mup).
    SSE2 path is about 7x faster (13% overall encoder [1;31mspeed[mup).
    
    Change-Id: I7e85d8225a914a74c61ea370210414696560094d

[33mcommit 048f59370329c0ad78a1e81e0bb8484ed18c736b[m
Merge: 138ffb6ea 28b1db927
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Feb 21 09:23:49 2013 -0800

    Merge "Refactoring of switchable filter search for [1;31mspeed[m" into experimental

[33mcommit 28b1db92783bdb8919bcaefe174a715009c5e444[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Feb 11 17:08:52 2013 -0800

    Refactoring of switchable filter search for [1;31mspeed[m
    
    Refactors the switchable filter search in the rd loop to
    improve encode [1;31mspeed[m.
    
    Uses a piecewise approximation to a closed form expression to estimate
    rd cost for a Laplacian source with a given variance and quantization
    step-size.
    
    About 40% encode time reduction is achieved.
    
    Results (on a feb 12 baseline) show a slight drop:
    
    derf: -0.019%
    yt: +0.010%
    std-hd: -0.162%
    hd: -0.050%
    
    Change-Id: Ie861badf5bba1e3b1052e29a0ef1b7e256edbcd0

[33mcommit 0e4397f0cd8b8d6dc106a80d9e01b4ba63486b2b[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Mon Feb 11 17:43:27 2013 -0800

    Faster vp9_regular_quantize_b_8x8.
    
    A couple of scalar optimizations [1;31mspeed[ming up quantization by about 1.6x. Overall encoder [1;31mspeed[mup is around 3%.
    
    Change-Id: I19981d1ef0b33e4e5732739574f367fe82771a84

[33mcommit 094e2572df23fd849688c2f95380b184c071efec[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Mon Feb 11 15:34:08 2013 -0800

    Faster convolve8_avg.
    
    Implement convolve8_avg using common functions which are already optimized
    instead of using more obscure ones which have only C versions. Encoder
    overall [1;31mspeed[m-up of about 12%.
    
    Change-Id: I8c57aa76936c8a48f22b115f19f61d9f2ae1e4b6

[33mcommit aec5bed3db9ac188997109d3a1e81c6b0a028b96[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Feb 5 10:13:25 2013 +0000

    Change rd thresholds and add [1;31mspeed[m trade off flags.
    
    Experimental tweaks to various thresholds to measure
    quality / [1;31mspeed[m trade off.
    
    Add flag that allows static segmentation to be turned off
    and disables it unless in the second pass of a two pass
    encode.
    
    Change-Id: I219702ffe858412a83db801cbbbd869924b8c61b

[33mcommit 02ff360b333a88ca8866b191d8928e4b980911dd[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Feb 7 10:24:46 2013 -0800

    Add sad64x64 and sad32x32 SSE2 versions.
    
    Also port the 4x4, 16x16, 8x16 and 16x8 versions to x86inc.asm; this
    makes them all slightly faster, particularly on x86-64. Remove SSE3
    sad16x16 version, since the SSE2 version is now faster.
    
    About 1.5% overall encoding [1;31mspeed[mup.
    
    Change-Id: Id4011a78cce7839f554b301d0800d5ca021af797

[33mcommit 29731308c4667de4fe4f02f92f0c2b29af86bbc1[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Feb 5 12:54:09 2013 +0000

    Added skip switches for SB32 and SB64
    
    Added switches and code to skip/breakout from
    doing SB32 and SB64 tests based on whether
    the 16x16 MB tests used split modes. Also to
    optionally skip 64x64 if 16x16 was chosen over
    32x32.
    
    Impact varies depending on clip from a few %
    up to almost 50% on encode [1;31mspeed[m. Only the
    split mode breakout is currently enabled.
    
    Change-Id: Ib5836140b064b350ffa3057778ed2cadcc495cf8

[33mcommit 5cfd82bcaf666c1b9cacd8a4899fc703598aa5b0[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Wed Feb 6 14:13:05 2013 -0800

    Use fdct8x4 instead of fdct4x4 where the block size allows it.
    
    This allows for faster SIMD implementations in the future (currently
    there is no [1;31mspeed[m impact).
    
    Change-Id: I732647e9148b5dcb44e6bc8728138f0141218329

[33mcommit 1407bdc24385cc77874188d8f88e54caea66506c[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Feb 1 09:35:28 2013 -0800

    [WIP] Add column-based tiling.
    
    This patch adds column-based tiling. The idea is to make each tile
    independently decodable (after reading the common frame header) and
    also independendly encodable (minus within-frame cost adjustments in
    the RD loop) to [1;31mspeed[m-up hardware & software en/decoders if they used
    multi-threading. Column-based tiling has the added advantage (over
    other tiling methods) that it minimizes realtime use-case latency,
    since all threads can start encoding data as soon as the first SB-row
    worth of data is available to the encoder.
    
    There is some test code that does random tile ordering in the decoder,
    to confirm that each tile is indeed independently decodable from other
    tiles in the same frame. At tile edges, all contexts assume default
    values (i.e. 0, 0 motion vector, no coefficients, DC intra4x4 mode),
    and motion vector search and ordering do not cross tiles in the same
    frame.
    t log
    
    Tile independence is not maintained between frames ATM, i.e. tile 0 of
    frame 1 is free to use motion vectors that point into any tile of frame
    0. We support 1 (i.e. no tiling), 2 or 4 column-tiles.
    
    The loopfilter crosses tile boundaries. I discussed this briefly with Aki
    and he says that's OK. An in-loop loopfilter would need to do some sync
    between tile threads, but that shouldn't be a big issue.
    
    Resuls: with tiling disabled, we go up slightly because of improved edge
    use in the intra4x4 prediction. With 2 tiles, we lose about ~1% on derf,
    ~0.35% on HD and ~0.55% on STD/HD. With 4 tiles, we lose another ~1.5%
    on derf ~0.77% on HD and ~0.85% on STD/HD. Most of this loss is
    concentrated in the low-bitrate end of clips, and most of it is because
    of the loss of edges at tile boundaries and the resulting loss of intra
    predictors.
    
    TODO:
    - more tiles (perhaps allow row-based tiling also, and max. 8 tiles)?
    - maybe optionally (for EC purposes), motion vectors themselves
      should not cross tile edges, or we should emulate such borders as
      if they were off-frame, to limit error propagation to within one
      tile only. This doesn't have to be the default behaviour but could
      be an optional bitstream flag.
    
    Change-Id: I5951c3a0742a767b20bc9fb5af685d9892c2c96f

[33mcommit 3ab538767ccec9c088e51a733aa70b3fe7c612aa[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Feb 4 17:43:02 2013 +0000

    Re-factor code for rd thresholds.
    
    Separate out code to set the main encode [1;31mspeed[m
    related rd thresholds. Some values changed from
    the initial defaults for various new modes.
    
    Quality test results pending but even the addition
    of some further non-zero defaults helps encode [1;31mspeed[m
    somewhat in limited testing on derf clips.
    
    Adjustment of thresholds for quality / [1;31mspeed[m tradeoff
    to follow.
    
    Change-Id: I117ee473157e151a1b93193d5f393449328de20d

[33mcommit fcb4a25cd54396bb9ec646515820b47f79b22d75[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Jan 24 12:52:13 2013 +0000

    Mvref [1;31mspeed[mup
    
    Quality / decode [1;31mspeed[m trade off changes.
    Simpler insert method without sort. Quality impact small.
    
    Change-Id: Id0c0941bc508d985405abd06a13ffe7489170b62

[33mcommit 8d568312a2e6882a336eb3525fbe6b9e752163f3[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jan 8 10:44:19 2013 -0800

    vp9_sub_pixel_variance16x2 SSE2 optimization
    
    About 5% decoder [1;31mspeed[mup.
    
    Change-Id: Ib6687d337af758a536a0e7e289f400990f1f9794

[33mcommit 2669f42b0d50bcff236176584caf623585e487b7[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Nov 12 15:09:25 2012 +0000

    New inter mode context
    
    This change is a fix / extension of the newbestrefmv
    experiment. As such it is presented without IFDEF.
    
    The change creates a new context for coding inter modes
    in vp9_find_mv_refs(). This replaces the context that
    was previously calculated in vp9_find_near_mvs().
    The new context is unoptimized and not necessarily
    any better at this stage (results pending), but eliminates
    the need for a legacy call to vp9_find_near_mvs().
    Based on numbers from Scott, this could help decode
    [1;31mspeed[m by several %.
    
    In a later patch I will add support for forward update of
    context (assuming this helps) and refine the context as
    necessary.
    
    Change-Id: I1cd991b82c8df86cc02237a34185e6d67510698a

[33mcommit 6fb8953c190430bbc324b57efa0297f6a612d7c7[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Nov 5 12:32:49 2012 +0000

    Restrict ref mv search range.
    
    Experiment to test [1;31mspeed[m trade off of reducing the
    extent of the ref mv search.
    
    Reducing the maximum number of tested candidates to 9 had
    minimal net effect on quality in any of the tests sets.
    
    Reduction to 7 has a small negative impact (worst was STD-HD
    at about -0.2%).
    
    This change is in response to the apparently high number of
    decode cycles reported in regard to mv-ref selection.
    
    Change-Id: I0e92e92e324337689358495a1ec9ccdeb23dc774

[33mcommit 63ef9c40a443ffbf1a8ff6d016de472d067c297a[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Mon Aug 20 23:49:43 2012 -0700

    SSE2 version of vectorized 8-tap filtering.
    
    About 20% overall encoder [1;31mspeed[mup (vs. about 30% for sse4 version).
    
    Change-Id: Ibf608a6a1bc94b14ec47e8046d3206b275b5a8bd

[33mcommit ee59dd7e1513196a4f1b82cc98ca9c92bb9fd2e8[m
Merge: 60ed95453 525b18391
Author: Christian Duvivier <cduvivier@google.com>
Date:   Thu Aug 16 17:03:08 2012 -0700

    Merge "A few more optimizations, about 1% overall [1;31mspeed[mup." into experimental

[33mcommit 525b18391055627ac8fa9bc2998d49fbf4e553c0[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Wed Aug 15 22:41:32 2012 -0700

    A few more optimizations, about 1% overall [1;31mspeed[mup.
    
    Unroll horizontal pass, no more intermediate buffer, faster special transpose.
    
    Change-Id: I05df75be4e5f01420066cdf3c61a2edf35bedb64

[33mcommit 5a34e0eb89e16aafa2dafc73596078409fa40bbb[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Tue Aug 14 18:19:09 2012 -0700

    First partial snapshot of vectorized 8-tap filtering.
    
    About 3.5x faster, 30% overall encoder [1;31mspeed[mup. Rest of optimizations
    will come soon (see TODO section in filter_sse4.c).
    
    Change-Id: If18108048bfd5345fc942e8574e4c7f58e0e86e0

[33mcommit 1b8169bb5475dbc1889e016c5c2b32d61562e92a[m
Author: Daniel Kang <ddkang@google.com>
Date:   Fri Aug 10 15:34:31 2012 -0700

    Combine optimize_b and optimize_b_8x8
    
    The 16x16 has not been done yet for [1;31mspeed[m reasons.
    
    Change-Id: I066e369a065674d58986e937344c9303fed19450

[33mcommit 0b17ea6f689a2716f314d13000901c9107eb03af[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Aug 7 13:55:49 2012 -0700

    A bit of temporary relief on encoder slowness
    
    The commit replaces run-time initialization of cosine constants with
    static constant values, which provides ~30% relief on slow [1;31mspeed[m. The
    real solution, however will be to implement integer versions of those
    functions that current use float/double.
    
    Change-Id: Ie3ff1793509653d78dd1aeaf88cc6737da1bc55f

[33mcommit 5259744145fe4ff41d3c814514c0744444969ad3[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Jul 18 13:43:01 2012 -0700

    Adds support for switchable interpolation filters.
    
    Allows for swtiching/setting interpolation filters at the MB
    level. A frame level flag indicates whether to use a specifc
    filter for the entire frame or to signal the interpolation
    filter for each MB. When switchable filters are used, the
    encoder chooses between 8-tap and 8-tap sharp filters. The
    code currently has options to explore other variations as well,
    which will be cleaned up subsequently.
    
    One issue with the framework is that encoding is slow. I
    tried to do some tricks to [1;31mspeed[m things up but it is still slow.
    Decoding [1;31mspeed[m should not be affected since the number of
    filter taps remain unchanged.
    
    With the current version, we are up 0.5% on derf on average but
    some videos city/mobile improve by close to 4 and 2% respectively.
    If we did a full-search by turning the SEARCH_BEST_FILTER flag
    on, the results are somewhat better.
    
    The framework can be combined with filtered prediction, and I
    seek feedback regarding that.
    
    Rebased.
    
    Change-Id: I8f632cb2c111e76284140a2bd480945d6d42b77a

[33mcommit f63894f691316a7e8bc615c66b99466cf7e2aec3[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed May 16 14:49:30 2012 +0100

    Experimental change to two pass prediction decay calculation.
    
    Remove dependency on amount and [1;31mspeed[m of motion as this
    may not behave well across different image sizes.
    
    Tweak impact of % inter.
    
    Add in experimental adjustment based on relative quality of an
    older second reference frame.
    
    Cap range of decay values allowed.
    
    Some small + effect on derf but -ve on yt & hd at this stage.
    
    Change-Id: I390d6f6ebe67a2eb0b834980d0d4650124980d3e

[33mcommit b22cc559b6f3d17a5b230f239066158328bbfb9a[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed May 9 09:31:14 2012 -0700

    Changed to use integer 8x8 dct
    
    The commit added an integer version of 8x8 forward DCT, based on the
    orginal forward DCT from VP6. The constants, roundings, and shifts
    were adjusted to improve the accuracy. The latest patch has a very
    similar accuracy in term of round trip error against the floating
    point version.
    
    It should be noted here that the purpose of the patch is to help
    encoding [1;31mspeed[m and facilitate all other experiments. There will be
    futher review in combination with inverse DCT before finalization.
    
    configure with "--enable--int_8x8fdct" to use the integer version
    
    Change-Id: I5a4f80507429f0e07cf02a13768ec81cbfddc5bc

[33mcommit c0d595134edaccb7db1ff436ef3f09ebb69f9a6f[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Apr 30 12:24:22 2012 -0700

    Turning off filter search for now to improve encode [1;31mspeed[m.
    
    Change-Id: I87291fb40c745f34c36b067f47abdf69774a812f

[33mcommit acdda50a0d142c6c556956425370d8bcca1c35a3[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Apr 16 14:53:37 2012 -0700

    Adds search option for best interpolation filter.
    
    Adds a [1;31mspeed[m feature to conduct a brute force search among a set of
    available interpolation filters for the best one in an RD sense.
    
    There is a gain of 0.4% on derf, 1.0% on Std-HD.
    
    Patch 2: A macro added to determine if the encoder state is reset
    for each new filter tried.
    
    Patch 3: rebase, also fixes a bug (decodframe.c) introduced by a
    couple of missing function pointer assignements.
    
    Patch 4: rebase.
    
    Change-Id: Ic9ccca9d8c35c6af557449ae867391a2f996cc29

[33mcommit c88d335f7d204bd7529d386c8f30f77b6e81c0ad[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Mar 21 18:22:33 2012 +0000

    Only support improved quant
    
    Deprecate fast quant and strict_quant code.
    Small effect on quality as fast was used in first pass but the
    effect is basically neutral across the derf set.
    
    The rationale here is to reduce the number of code paths for
    now to make experimentation easier. Optimized and fast code
    options can be re-introduced later along with other  encode
    [1;31mspeed[m options.
    
    Change-Id: Ia30c5daf3dbc52e72c83b277a1d281e3c934cdad

[33mcommit 6035da5448392244936f1e1a9079e7f6cd857ffe[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Mar 9 17:32:50 2012 -0800

    WebM Experimental Codec Branch Snapshot
    
    This is a code snapshot of experimental work currently ongoing for a
    next-generation codec.
    
    The codebase has been cut down considerably from the libvpx baseline.
    For example, we are currently only supporting VBR 2-pass rate control
    and have removed most of the code relating to coding [1;31mspeed[m, threading,
    error resilience, partitions and various other features.  This is in
    part to make the codebase easier to work on and experiment with, but
    also because we want to have an open discussion about how the bitstream
    will be structured and partitioned and not have that conversation
    constrained by past work.
    
    Our basic working pattern has been to initially encapsulate experiments
    using configure options linked to #IF CONFIG_XXX statements in the
    code. Once experiments have matured and we are reasonably happy that
    they give benefit and can be merged without breaking other experiments,
    we remove the conditional compile statements and merge them in.
    
    Current changes include:
    * Temporal coding experiment for segments (though still only 4 max, it
      will likely be increased).
    * Segment feature experiment - to allow various bits of information to
      be coded at the segment level. Features tested so far include mode
      and reference frame information, limiting end of block offset and
      transform size, alongside Q and loop filter parameters, but this set
      is very fluid.
    * Support for 8x8 transform - 8x8 dct with 2nd order 2x2 haar is used
      in MBs using 16x16 prediction modes within inter frames.
    * Compound prediction (combination of signals from existing predictors
      to create a new predictor).
    * 8 tap interpolation filters and 1/8th pel motion vectors.
    * Loop filter modifications.
    * Various entropy modifications and changes to how entropy contexts and
      updates are handled.
    * Extended quantizer range matched to transform precision improvements.
    
    There are also ongoing further experiments that we hope to merge in the
    near future: For example, coding of motion and other aspects of the
    prediction signal to better support larger image formats, use of larger
    block sizes (e.g. 32x32 and up) and lossless non-transform based coding
    options (especially for key frames). It is our hope that we will be
    able to make regular updates and we will warmly welcome community
    contributions.
    
    Please be warned that, at this stage, the codebase is currently slower
    than VP8 stable branch as most new code has not been optimized, and
    even the 'C' has been deliberately written to be simple and obvious,
    not fast.
    
    The following graphs have the initial test results, numbers in the
    tables measure the compression improvement in terms of percentage. The
    build has  the following optional experiments configured:
    --enable-experimental --enable-enhanced_interp --enable-uvintra
    --enable-high_precision_mv --enable-sixteenth_subpel_uv
    
    CIF Size clips:
    http://getwebm.org/tmp/cif/
    HD size clips:
    http://getwebm.org/tmp/hd/
    (stable_20120309 represents encoding results of WebM master branch
    build as of commit#7a15907)
    
    They were encoded using the following encode parameters:
    --good --cpu-used=0 -t 0 --lag-in-frames=25 --min-q=0 --max-q=63
    --end-usage=0 --auto-alt-ref=1 -p 2 --pass=2 --kf-max-dist=9999
    --kf-min-dist=0 --drop-frame=0 --static-thresh=0 --bias-pct=50
    --minsection-pct=0 --maxsection-pct=800 --sharpness=0
    --arnr-maxframes=7 --arnr-strength=3(for HD,6 for CIF)
    --arnr-type=3
    
    Change-Id: I5c62ed09cfff5815a2bb34e7820d6a810c23183c

[33mcommit 79d330d7d5f948f66c38fc7a7bddb24134189ba8[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Feb 16 17:02:17 2012 +0000

    Code simplification
    
    Removal of the pickinter.c and .h files and calls to this
    code.
    
    Removal of some code relating to real time and one pass
    settings  though there is more to be done in this regard.
    
    However,  vp8_set_[1;31mspeed[m_features() now
    only supports modes 0 and 1 and [1;31mspeed[ms up to 3
    so rd should always be set.
    
    Change-Id: I62c0c1b6154ab499785baef310536080e87bc4d8

[33mcommit d8afecef715277a59841607dde01e8af79f7c7f2[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Nov 3 16:05:29 2011 -0700

    Added context reset when 2nd order coefficients are cleared
    
    As discovered in path 10 of Change Ia12acd2f, reset 2nd order coeffs
    without reset of above and left coding context may have introduced
    problem that causes encoder/decoder mismatching. This commit added
    update to coding context when the 2nd coefficients are cleared.
    
    In addition, this commit also introduced early breakout in the checks
    to [1;31mspeed[m up when coefficients are too significant to be cleared.
    
    Change-Id: I85322a432b11e8af85001525d1e9dc218f9a0bd6

[33mcommit 0867b8167899b9df7a0b40bbc416abd359ac0ac8[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Nov 1 14:04:01 2010 -0700

    remove low pass filtering from two 4x4 intra prediction
    
    In the process of developing new intra prediction modes, tests have
    shown removal of the low pass filtering from B_HE_PRED and B_VE_PRED
    has an overall minor positive impact in both PSNR and SSIM metric.
    Overall difference is about 0.1%. The change shall also have a small
    positive impact on [1;31mspeed[m. Intuitively, this change should also reduce
    some of the tendency of "flattening"
    
    Change-Id: I3c43b0daca833c6eff77d00f19c811f9ef9368a3
For keyword quality:
[33mcommit 704028d435d0e9ba445f961502e2083da8ed80f4[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Oct 7 19:20:10 2013 +0100

    Experimental rate control change.
    
    When the codec in VBR (or cq) mode hits its max q limits and is
    struggling to hit a target bandwidth, the bit target per frame collapses.
    
    In the first instance normal frames cap out at the maximum allowed
    Q and then the ARF and GFs do the same. This latter behavior is not
    generally desirable as GFs and ARFs are only effective from a [1;31mquality[m
    and data rate perspective if they have at lease some level of -Q delta
    compared to the surrounding frames.
    
    In this patch I define a separate max Q for GFs and ARFs that is
    derived from but somewhat lower than that defined for normal frames.
    In effect there is a minimum Q delta that will always be available for
    GFs and ARFs regardless of the target rate and MAXQ setting.
    
    This may of course mean that the absolute lowest rate obtainable for
    a given clip is somewhat higher.
    
    Change-Id: I268868b28401900d0cd87e51e609cd3b784ab54a

[33mcommit de6ecc5ac31e9344ebdd2a5a032c1a90107d57c3[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Oct 4 14:10:25 2013 +0100

    Selective masking of split modes.
    
    Allow selective masking of individual split modes rather than
    just a single on / off flag.
    
    For speed 2 recovers the large speed loss seen for some derf
    clips  in change Ie6bdfa0a370148dd60bd800961077f7e97e67dd4
    and a small [1;31mquality[m gain.
    
    For speed 1 10 % speed increase observed locally on some derf clips
    for minimal [1;31mquality[m change.
    
    Change-Id: If86191087b93cbc05351c26c60c7933e2149e485

[33mcommit 6253cc9279652fd7550bc103f85bb45525ff20f1[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Oct 1 16:57:18 2013 +0100

    Speed setting review.
    
    Substantial reworking of the speed vs [1;31mquality[m trade offs for
    speed 1 and 2.
    
    In this patch I am attempting to freeze the "[1;31mquality[m" meaning of
    speeds 1 and 2 relative to speed 0 so that in future we can
    better evaluate progress.
    
    I am targeting :
    Speed 1 [1;31mquality[m ~-5% vs speed 0.
    Speed 2 [1;31mquality[m ~-10% vs speed 0
    
    It is inevitable that [1;31mquality[m will still fluctuate a little as we adjust
    settings and add new features, but we will attempt to keep as
    close as possible to these values. Above speed 2 things will remain
    a bit more fluid for now.
    
    In this patch speed 1 is approximately 4-5x as fast as speed 0. This
    is similar to before but the [1;31mquality[m hit is a lot less. Likewise speed 2
    is approximately 2x as fast as speed 1 but is similar in [1;31mquality[m to the
    previous speed 1 configuration.
    
    Also slight change to behavior of FLAG_EARLY_TERMINATE to insure
    all reference frames get at least one rd test. Important for very low
    variance regions.
    
    WIP :- Added a new speed level with old speed 4 becoming speed 5.
    Speed 3 and 4 tradeoffs still WIP
    
    Change-Id: Ic7a38dd7b5b63ab1501f9352411972f480ac6264

[33mcommit 65b93c7e5289b3740b8518867170cdad2f5c95a9[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Sep 27 12:59:06 2013 +0100

    Improved auto_partition_range.
    
    The code now takes into account temporal and spatial
    information to determine the partition size range, but the
    frequency counts have been removed.
    
    The net effect is similar in [1;31mquality[m but about 10% faster.
    
    Change-Id: I39a513fb79cec9177b73b2a7218f0da70963ae95

[33mcommit a76caa7ff447dac52d9c705d5791b2314882f13a[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Sep 19 18:20:18 2013 +0100

    Alter Speed 3.
    
    This patch deletes the variance based speed three partitioning.
    Speed 3 now uses the same partitioning method as speed 2
    but with some stricter conditions.
    
    The speed and [1;31mquality[m are now somewhere between speeds 2 and 4
    whereas before it was worse in both than speed 4.
    
    Change-Id: Ia142e7007299d79db3ceee6ca8670540db6f7a41

[33mcommit f1a627e8a2654e5df4a127a08a5581f1bcb1d9e1[m
Merge: b6aa783d8 b7a93578e
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Sep 24 09:51:08 2013 -0700

    Merge "Small tweak in the constant [1;31mquality[m parameter"

[33mcommit b7a93578e5b548db9664533cbb8cf86010e977b0[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Sep 24 09:09:35 2013 -0700

    Small tweak in the constant [1;31mquality[m parameter
    
    Improves results a little.
    
    Change-Id: I7bcac02dbb65b43a993445cf557c520197114e5c

[33mcommit d11221f43387696e6ffe80186ab874fd9148cba3[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Sep 20 00:41:29 2013 -0700

    Improves constant qual, constrained qual turned on
    
    Adds modeled functions to decide the qp for altref frames in constant q
    mode similar to other functions in use in bitrate mode.
    
    Also turns on the constrained [1;31mquality[m mode (end-usage=2) option which
    was turned off before. Basic testing shows the mode works in principle,
    to cap bitrate to the target-bitrate specified, while allowing lower
    bitrate depending on the cq-level specified. The mode will need to be
    improved over time.
    
    Results for constant [1;31mquality[m vs bitrate control mode:
    derfraw300/fullderfraw: +3.0% at constant [1;31mquality[m over bitrate control.
    fullstdhdraw: +4.341%
    stdhdraw250: +5.361%
    
    Change-Id: If5027c9ec66c8e88d33e47062c6cb84a07b1cda9

[33mcommit 040ffb6326866c9cea3f10530007da511521ed57[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Sep 13 09:23:53 2013 -0700

    Minor adjustment in unit tests
    
    The CpuSpeedTest is extended to cover 2pass good [1;31mquality[m with CpuUsed
    from 0 to 4. The BordersTest is changed to use CpuUsed 1 for faster
    turn around.
    
    Change-Id: I005e89adee7fe63af4b1f2a76a3a13ea826feadf

[33mcommit 69fe840ec4588ef131b0927484a34efd8709f519[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Sep 10 16:13:15 2013 -0700

    Changes in speed 2 settings
    
    Propose some changes to the speed 2 settings to improve [1;31mquality[m.
    In particular, turns off the adjust_thresholds_by_speed feature
    which improves results by 6%. Also removes the code for
    adjust_thresholds_by_speed since it conflicts with the adaptive
    rd thresh feature.
    
    Overall, with this change speed 2 is -15.2% from speed 0 settings,
    on derf, which is significantly better than -21.6% down before.
    
    Change-Id: I6e90a563470979eb0c258ec32d6183ed7ce9a505

[33mcommit 3d22d3ae0c77dbb529040aa7674a3799e201ba81[m
Merge: 0607abc3d 09830aa0e
Author: Deb Mukherjee <debargha@google.com>
Date:   Tue Sep 10 11:16:47 2013 -0700

    Merge "Small tweaks on the constant [1;31mquality[m mode"

[33mcommit 09830aa0ea00b21abe38aafe1e05a5c7305fe763[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Sep 9 17:31:58 2013 -0700

    Small tweaks on the constant [1;31mquality[m mode
    
    Improves results a little.
    derf is now +1.078% over bitrate control.
    
    Change-Id: I4812136f3e67be21d14ec089419976a32a841785

[33mcommit d1268c592183db41d6586029a333eee155449d85[m
Merge: afffa3d9b e378a89bd
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Sep 6 11:22:54 2013 -0700

    Merge "Support a constant [1;31mquality[m mode in VP9"

[33mcommit e378a89bd662ded5ae6f550f820070db93f50a39[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Aug 29 16:21:44 2013 -0700

    Support a constant [1;31mquality[m mode in VP9
    
    Adds a new end-usage option for constant [1;31mquality[m encoding in vpx. This
    first version implemented for VP9, encodes all regular inter frames
    using the [1;31mquality[m specified in the --cq-level= option, while encoding
    all key frames and golden/altref frames at a [1;31mquality[m better than that.
    
    The current performance on derfraw300 is +0.910% up from bitrate control,
    but achieved without multiple recode loops per frame.
    
    The decision for qp for each altref/golden/key frame will be improved
    in subsequent patches based on better use of stats from the first pass.
    Further, the qp for regular inter frames may also be varied around the
    provided cq-level.
    
    Change-Id: I6c4a2a68563679d60e0616ebcb11698578615fb3

[33mcommit 8b810c7a78cbaac715cc516973de2bfdbf4067f9[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Aug 21 16:19:35 2013 -0700

    Fixes on feature disabling split based on variance
    
    Adds a couple of minor fixes, which may be absorbed in Jingning's
    patch. Thanks to Guillaume for pointing these out.
    Also adjusts the thresholds for speed 1 and 2 to 16 and 32
    respectively, to keep [1;31mquality[m drops small.
    
    Results:
    --------
    derfraw300:  threshold = 16, psnr -0.082%, speedup 2-3%
                 threshold = 32, psnr -0.218%, speedup 5-6%
    stdhdraw250: threshold = 16, psnr -0.031%, speedup 2-3%
                 threshold = 32, psnr -0.273%, speedup 5-6%
    
    Change-Id: I4b11ae8296cca6c2a9f644be7e40de7c423b8330

[33mcommit a2f7619860660c3245c3b725e41c4f41f7a99d79[m
Merge: ac12f3926 0d8723f8d
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Aug 21 13:58:49 2013 -0700

    Merge "Make "good" [1;31mquality[m 2-pass vpxenc encoding default"

[33mcommit 0d8723f8d5372eaaadfb5373a3b9d35e2c78c42d[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Aug 19 14:16:26 2013 -0700

    Make "good" [1;31mquality[m 2-pass vpxenc encoding default
    
    Currently, the best [1;31mquality[m mode in VP9 is not very well developed,
    and unnecessarily makes the encode too slow. Hence the command line
    default is changed to "good" [1;31mquality[m. Also, the number of passes
    default is changed to 2 passes as well, since 1-pass encoding is
    not very efficient in VP9.
    
    Besides, a number of VP9 defaults are set to the currently
    recommended settings. With these changes, vpxenc
    run with --codec=vp9 --kf-max-dist=9999 --cpu-used=0 should
    work about the same as our borg results.
    Note when the --cpu-used=0 option is dropped there will be a slight
    difference in the output, because of a difference in the cpu-used
    value for the first pass. Specifically, the default when unspecified
    is to use cpu_used=1 for the first pass and cpu_used=0 for the
    second pass. But when specified, both passes will use the cpu-used
    value specified.
    
    Note that this also changes the default for VP8 as being "good"
    but other options stay unchanged.
    
    Change-Id: Ib23c1a05ae2f36ee076c0e34403efbda518c5066

[33mcommit e8923fe49207640704e5538aae6dafd136f35e19[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Aug 16 16:54:12 2013 +0100

    Changes to auto partition size selection.
    
    Changes to code to auto select a partition size range
    based on data from spatial neighbors.
    
    Now looks at the sb_type in each 8x8 block of above
    and left SB64.
    
    The effect on speed 1 is now weaker giving better
    [1;31mquality[m but less speed gain. Now also used in speed 2.
    
    Change-Id: Iace33a97d5c3498dd2a9a8a4067351941abcbabc

[33mcommit 1ba91a84ad1e1d2486e2aa68822ed147084cd4c8[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Aug 7 17:01:43 2013 -0700

    Adds a new subpel motion function
    
    Adds a new subpel motion estimation function that uses a 2-level
    tree-structured decision tree to eliminate redundant computations.
    It searches fewer points than iterative search (which can search
    the same point multiple times) but has the same [1;31mquality[m roughly.
    
    This is made the default setting at speeds 0 and 1, while at
    speed 2 and above only a 1-level search is used.
    
    Also includes various cleanups for consistency and redundancy removal.
    
    Results:
    derf: +0.012% psnr
    stdhd: +0.09% psnr
    Speedup of about 2-3%
    
    Change-Id: Iedde4866f5475586dea0f0ba4cb7428fba24eee9

[33mcommit fe5e2a91bb15241a97515708001c37deda514cdc[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Jul 24 14:07:37 2013 +0100

    Auto min and max partition size experiment.
    
    Speed feature experiment to set an upper and lower
    partition size limit based on what has been seen
    in spatial neighbors.
    
    This seems to gives quite reasonable speed gains in local
    (10-15%) and when used with speed 0 the losses are small
    (0.25% derf, 0.35% stdhd). However, for now I am only
    enabling it on speed 1 as there may be clashes with the existing
    temporal partition selection in speed 2.
    
    Using a tighter min / max around the range derived from the
    neighbors increases speed further but at the cost of a
    bigger [1;31mquality[m loss. However,  I think this spatial method could
    be combined with data from either the last frame or a variance
    method (or both) to refine the range of minimum and maximum
    partition size. I.e. consider the min and max from spatial and
    temporal neighbors and the variance recommendation.
    
    Change-Id: I1b96bf8b84368d6aad0c7aa600fe141b4f07435f

[33mcommit d36852b702e6726db57cabe19e47d9aaa18c3ecb[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Jul 11 11:15:00 2013 -0700

    Add encoding option --static-thresh
    
    This option exists in VP8, and it was rewritten in VP9 to support
    skipping on different partition levels. After prediction is done,
    we can check if the residuals in the partition block will be all
    quantized to 0. If this is true, the skip flag is set, and only
    prediction data are needed in reconstruction. Based on DCT's energy
    conservation property, the skipping check can be estimated in
    spatial domain.
    
    The prediction error is calculated and compared to a threshold.
    The threshold is determined by the dequant values, and also
    adjusted by partition sizes. To be precise, the DC and AC parts
    for Y, U, and V planes are checked to decide skipping or not.
    
    Test showed that
    1. derf set:
    when static-thresh = 1, psnr loss is 0.666%;
    when static-thresh = 500, psnr loss is 1.162%;
    2. stdhd set:
    when static-thresh = 1, psnr loss is 1.249%;
    when static-thresh = 500, psnr loss is 1.668%;
    
    For different clips, encoding speedup range is between several
    percentage and 20+% when static-thresh <= 500. For example,
    clip            bitrate  static-thresh psnr    time
    akiyo(cif)       500        0          48.923  5.635s(50f)
    akiyo            500        500        48.863  4.402s(50f)
    
    parkjoy(1080p)   4000       0          30.380  77.54s(30f)
    parkjoy          4000       500        30.384  69.59s(30f)
    
    sunflower(1080p) 4000       0          44.461  85.2s(30f)
    sunflower        4000       500        44.418  78.1s(30f)
    
    Higher static-thresh values give larger speedup with larger
    [1;31mquality[m loss.
    
    Change-Id: I857031ceb466ff314ab580ac5ec5d18542203c53

[33mcommit 73ff56b68e328c2368cb3d71a10e10d27016c0f7[m
Merge: b829a9d63 e4686c589
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Jul 18 18:27:49 2013 -0700

    Merge "Fix slightly [1;31mquality[m drop caused at speed 1."

[33mcommit e4686c589efa521f6f5f029151765287e28f207b[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Jul 18 15:17:02 2013 -0700

    Fix slightly [1;31mquality[m drop caused at speed 1.
    
    We would skip the rectangular blocks for sub8x8 partitions because
    we would conclude that PARTITION_NONE was better than PARTITION_SPLIT,
    however, that conclusion was made before we actually really tested
    PARTITION_SPLIT.
    
    Change-Id: I8fa91e59894badc1d8cee3ba8a49e40ae4c4a489

[33mcommit 2ee338ce3b9ab816270e6d413d4674fe9f2d45ca[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Jul 16 18:12:34 2013 +0100

    Move uv intra mode selection in rd loop.
    
    Use an estimate based on DC_PRED for intra uv cost
    within the rd loop then only do a full uv mode analysis
    if an intra mode is chosen.
    
    Significant speed gains in some cases. Currently only
    enabled for speed 2 pending speed/[1;31mquality[m tests.
    
    Change-Id: Ie851a12400d5483bce47ec0e3ccb8516041e91c0

[33mcommit 13772781807ebff8b5c7d100e90d0eac6c61cbd4[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Jun 27 13:16:33 2013 +0100

    New motion threshold factor - speed feature.
    
    Added a speed feature that focuses only on thresholds
    for new motion modes.
    
    Moved sf->comp_inter_joint_search_thresh into speed
    1.  This has ~+0.4% impact on [1;31mquality[m at speed 0 as
    our [1;31mquality[m reference baseline.
    
    Slight adjustment to baseline thresholds.
    
    Change-Id: I7ebf104f1fe29af77ed4837b2e84be065621bbe5

[33mcommit 02590a5b1be96dcf52666051d1fa9376669678bd[m
Merge: b4c4f6486 c880e02f9
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Jun 6 09:27:31 2013 -0700

    Merge "Turn off compound inter search refinement for good [1;31mquality[m." into experimental

[33mcommit c880e02f97df6f7ccd3a99b66dfc97113d5a65fa[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Jun 4 15:58:53 2013 +0100

    Turn off compound inter search refinement for good [1;31mquality[m.
    
    Turn this feature off for some modes in  "good" [1;31mquality[m.
    
    Change-Id: I3f262d62cca8f01736b977af1465291e8be29f0a

[33mcommit 9068bce4e795215b59d0145d560d27ef5bd79295[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jun 3 09:16:48 2013 -0700

    Put iterative motion search under speed control
    
    Enable iterative motion search for compound inter-inter prediction
    of block sizes 4x4/4x8/8x4 only when best coding [1;31mquality[m is selected.
    The iterative motion search provides about 0.1% gains for derf and
    stdhd at this point, at the expense of longer runtime.
    
    Change-Id: Idc03e7f827e51f1bb8d269bc3752ee297a6bbfe5

[33mcommit 9fba03456d520955199d3298d796cae67a862efb[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue May 7 13:02:45 2013 -0700

    Partially disable error resilience test
    
    Disables the part of the error-resilient test that tests the
    [1;31mquality[m after dropping undroppable frames. It's not clear how
    to set the threshold for this correctly at the moment.
    
    Change-Id: I3ee4a0d475498f44711fdef05749f305e8d08591

[33mcommit e0df9b213dcaffc463e49f878e74c55c519726a2[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Apr 17 12:24:51 2013 -0700

    Removing rounding from UV MV calculation for SPLITMV
    
    Similar to the prior change that removed the rounding from non-SPLITMV
    modes. Improves [1;31mquality[m by a similar amount (Additional +0.087% on derf)
    
    Change-Id: I39d80b4a3037a3aa7e285eb2320346ddaf646f52

[33mcommit aeefa6e194b2e844372ef9892689121c50cf1111[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Apr 8 09:16:26 2013 -0700

    Fix typo which breaks 4x4 splitmv compound prediction RD code.
    
    0.15% [1;31mquality[m increase on derf, particularly noticeable on hard clips
    at the higher bitrate end.
    
    Change-Id: I02415a96eb9bbc361cba923069625fae71844bc9

[33mcommit fd18d5dffee14e986243932dd54b20e1f27f9cba[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Mar 13 11:03:17 2013 -0700

    Modeling default coef probs with distribution
    
    Replaces the default tables for single coefficient magnitudes with
    those obtained from an appropriate distribution. The EOB node
    is left unchanged. The model is represeted as a 256-size codebook
    where the index corresponds to the probability of the Zero or the
    One node. Two variations are implemented corresponding to whether
    the Zero node or the One-node is used as the peg. The main advantage
    is that the default prob tables will become considerably smaller and
    manageable. Besides there is substantially less risk of over-fitting
    for a training set.
    
    Various distributions are tried and the one that gives the best
    results is the family of Generalized Gaussian distributions with
    shape parameter 0.75. The results are within about 0.2% of fully
    trained tables for the Zero peg variant, and within 0.1% of the
    One peg variant.
    
    The forward updates are optionally (controlled by a macro)
    model-based, i.e. restricted to only convey probabilities from the
    codebook. Backward updates can also be optionally (controlled by
    another macro) model-based, but is turned off by default. Currently
    model-based forward updates work about the same as unconstrained
    updates, but there is a drop in performance with backward-updates
    being model based.
    
    The model based approach also allows the probabilities for the key
    frames to be adjusted from the defaults based on the base_qindex of
    the frame. Currently the adjustment function is a placeholder that
    adjusts the prob of EOB and Zero node from the nominal one at higher
    [1;31mquality[m (lower qindex) or lower [1;31mquality[m (higher qindex) ends of the
    range. The rest of the probabilities are then derived based on the
    model from the adjusted prob of zero.
    
    Change-Id: Iae050f3cbcc6d8b3f204e8dc395ae47b3b2192c9

[33mcommit 82fe8c9f367ebbe72c5bd8199c1971649f952afa[m
Merge: 5d9ba7938 374a17366
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Mar 14 19:05:17 2013 -0700

    Merge "force lossless coding at very high [1;31mquality[m end" into experimental

[33mcommit 374a17366e8bbac63c28db270781057273838c20[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Mar 14 12:31:27 2013 -0700

    force lossless coding at very high [1;31mquality[m end
    
    Change-Id: I75fc4eee10bee9efd419d248827290cce8e6d637

[33mcommit b683eecf6dfe9fc947394df6f0e047e2fcbea43e[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Thu Feb 21 10:38:27 2013 -0800

    Test upscaling as well as downscaling
    
    Fixes a bug in vp9_set_internal_size() that prevented returning to
    the unscaled state. Updated the ResizeInternalTest to scale both
    down and up. Added a check that all frames are within 2.5% of the
    [1;31mquality[m of the initial keyframe.
    
    Change-Id: I3b7ef17cdac144ed05b9148dce6badfa75cff5c8

[33mcommit eb939f45b8ffde47e160d545114d68ddd3606b90[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Sun Feb 24 20:55:14 2013 -0800

    Spatial resamping of ZEROMV predictors
    
    This patch allows coding frames using references of different
    resolution, in ZEROMV mode. For compound prediction, either
    reference may be scaled.
    
    To test, I use the resize_test and enable WRITE_RECON_BUFFER
    in vp9_onyxd_if.c. It's also useful to apply this patch to
    test/i420_video_source.h:
    
      --- a/test/i420_video_source.h
      +++ b/test/i420_video_source.h
      @@ -93,6 +93,7 @@ class I420VideoSource : public VideoSource {
    
         virtual void FillFrame() {
           // Read a frame from input_file.
      +    if (frame_ != 3)
           if (fread(img_->img_data, raw_sz_, 1, input_file_) == 0) {
             limit_ = frame_;
           }
    
    This forces the frame that the resolution changes on to be coded
    with no motion, only scaling, and improves the [1;31mquality[m of the
    result.
    
    Change-Id: I1ee75d19a437ff801192f767fd02a36bcbd1d496

[33mcommit 9255ad107f2e17685090c15555c0a80b6cd06854[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Feb 11 20:44:53 2013 +0000

    Abstract selection of coef band.
    
    This patch abstracts the selection of the coefficient band
    context into a function as a precursor to further experiments
    with the coefficient context.
    
    It also removes the large per TX size coefficient band structures
    and uses a single matrix for all block sizes within the test function.
    
    This may have an impact on [1;31mquality[m (results to follow) but is only an
    intermediate step in the process of redefining the context. Also the
    [1;31mquality[m impact will be larger initially because the default tables will
    be out of step with the new banding.
    
    In particular the 4x4 will in this case only use 7 bands. If needed we
    can add back block size dependency localized within the function, but
    this can follow on after the other changes to the definition of the
    context.
    
    Change-Id: Id7009c2f4f9bb1d02b861af85fd8223d4285bde5

[33mcommit aec5bed3db9ac188997109d3a1e81c6b0a028b96[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Feb 5 10:13:25 2013 +0000

    Change rd thresholds and add speed trade off flags.
    
    Experimental tweaks to various thresholds to measure
    [1;31mquality[m / speed trade off.
    
    Add flag that allows static segmentation to be turned off
    and disables it unless in the second pass of a two pass
    encode.
    
    Change-Id: I219702ffe858412a83db801cbbbd869924b8c61b

[33mcommit 7a07eea13fc94036f54cdb6f1233b9af8b094ced[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Mon Jan 28 16:59:03 2013 -0800

    Convert subpixel filters to use convolve framework
    
    Update the code to call the new convolution functions to do subpixel
    prediction rather than the existing functions. Remove the old C and
    assembly code, since it is unused. This causes a 50% performance
    reduction on the decoder, but that will be resolved when the asm for
    the new functions is available.
    
    There is no consensus for whether 6-tap or 2-tap predictors will be
    supported in the final codec, so these filters are implemented in
    terms of the 8-tap code, so that [1;31mquality[m testing of these modes
    can continue. Implementing the lower complexity algorithms is a
    simple exercise, should it be necessary.
    
    This code produces slightly better results in the EIGHTTAP_SMOOTH
    case, since the filter is now applied in only one direction when
    the subpel motion is only in one direction. Like the previous code,
    the filtering is skipped entirely on full-pel MVs. This combination
    seems to give the best [1;31mquality[m gains, but this may be indicative of a
    bug in the encoder's filter selection, since the encoder could
    achieve the result of skipping the filtering on full-pel by selecting
    one of the other filters. This should be revisited.
    
    Quality gains on derf positive on almost all clips. The only clip
    that seemed to be hurt at all datarates was football
    (-0.115% PSNR average, -0.587% min). Overall averages 0.375% PSNR,
    0.347% SSIM.
    
    Change-Id: I7d469716091b1d89b4b08adde5863999319d69ff

[33mcommit 3ab538767ccec9c088e51a733aa70b3fe7c612aa[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Feb 4 17:43:02 2013 +0000

    Re-factor code for rd thresholds.
    
    Separate out code to set the main encode speed
    related rd thresholds. Some values changed from
    the initial defaults for various new modes.
    
    Quality test results pending but even the addition
    of some further non-zero defaults helps encode speed
    somewhat in limited testing on derf clips.
    
    Adjustment of thresholds for [1;31mquality[m / speed tradeoff
    to follow.
    
    Change-Id: I117ee473157e151a1b93193d5f393449328de20d

[33mcommit 8e2c03fbfd7a1add56c03fc265600e714fcd0cd8[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Jan 24 18:28:33 2013 +0000

    Simplify Zero bin and zero bin run code.
    
    Simplification to eliminate a number of very large data
    data structures. All zero run, zbin boosts for different
    transform sizes are now limited to a maximum run length
    of 15 before they max out the boost.
    
    Some further work still needs be done to refactor, rationalize
    and optimize the multiple quantizer functions.
    
    The simplification coupled with tweaks to the 16 element array
    now used for all transform sizes, has minimal effect on [1;31mquality[m.
    
    Change-Id: I6f3948b8ca0418b60d4db9030ff19026a34ed423

[33mcommit 2f24ad9e85e4db0d9d5b265a6d4c1f4b7db6babb[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Fri Jan 18 14:35:20 2013 -0800

    Use alt-ref frame context for keyframes
    
    This matches the behavior prior to generalizing the frame context
    selection, and intuitively makes sense in that the first forward ref
    is immediately after the keyframe, so it's [1;31mquality[m is improved a bit
    by using the keyframe's entropy context rather than the default.
    
    Change-Id: Ia82cef79382b9d8cfafdc44ba0533d4dc3e44053

[33mcommit 26bd81b955c0f20edc9ffad0a03f99edf485d0be[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Jan 16 12:19:42 2013 -0800

    Preserve the previous golden frame on golden updates
    
    This commit restores the [1;31mquality[m lost when the buffer-to-buffer copy
    logic was removed. Note that this is specific to the current use of
    golden frames and will need rework when RTC functionality is added.
    
    Change-Id: I7324a75acd96eafd9e0f9b8633d782e390d5dc21

[33mcommit 6fb8953c190430bbc324b57efa0297f6a612d7c7[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Nov 5 12:32:49 2012 +0000

    Restrict ref mv search range.
    
    Experiment to test speed trade off of reducing the
    extent of the ref mv search.
    
    Reducing the maximum number of tested candidates to 9 had
    minimal net effect on [1;31mquality[m in any of the tests sets.
    
    Reduction to 7 has a small negative impact (worst was STD-HD
    at about -0.2%).
    
    This change is in response to the apparently high number of
    decode cycles reported in regard to mv-ref selection.
    
    Change-Id: I0e92e92e324337689358495a1ec9ccdeb23dc774

[33mcommit 074a38b1fd79c386104bb71547e0b9d7dd039056[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu May 24 12:02:12 2012 -0700

    changed to use a fixed number for update probabity
    
    This commit is to remove two arrays, which contain the probabilities
    of how likely each probability in coef_probs table is updated. The
    commit changed to use a fixed number "252".
    
    Surprisedly, the overall impact on [1;31mquality[m is close to zero, which
    basically says the two big static arrays are not helpful at all.
    derf: -0.016%, -0.020%
    std-hd: 0.000%, -0.013%
    yt: -0.022%, +0.007%
    yt-hd: -0.038%, +0.034%
    
    Change-Id: Ifee94d28a37dcab4f1d2b994bd5b07575be42b72

[33mcommit f63894f691316a7e8bc615c66b99466cf7e2aec3[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed May 16 14:49:30 2012 +0100

    Experimental change to two pass prediction decay calculation.
    
    Remove dependency on amount and speed of motion as this
    may not behave well across different image sizes.
    
    Tweak impact of % inter.
    
    Add in experimental adjustment based on relative [1;31mquality[m of an
    older second reference frame.
    
    Cap range of decay values allowed.
    
    Some small + effect on derf but -ve on yt & hd at this stage.
    
    Change-Id: I390d6f6ebe67a2eb0b834980d0d4650124980d3e

[33mcommit 0b8a95a0b2e3451b79cfbc6bc629c779d9915762[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon May 14 17:39:42 2012 -0700

    Rewrite reference frame costing in the RD loop.
    
    I now see I didn't write a very long description, so let's do it
    here then. We took a pretty big [1;31mquality[m hit (0.1-0.2%) from my
    recent fix of the inversion of arguments to vp8_cost_bit() in the
    RD reference frame costing. I looked into it and basically the
    costing prevented us from switching reference frames. This is of
    course silly, since each frame codes its own prob_intra_coded, so
    using last frame cost indications as a limiting factor can never
    be right.
    
    Here, I've rewritten that code to estimate costings based partially
    on statistics from progress on current frame encoding. Overall,
    this gives us a ~0.2%-0.3% improvement over what we had previously
    before my argument-inversion-fix, and thus about ~0.4% over current
    git (on derf-set), and a little more (0.5-1.0%) on HD/STD-HD/YT.
    
    Change-Id: I79ebd4ccec4d6edbf0e152d9590d103ba2747775

[33mcommit ade43d9125f809a5f920445f47838c5de7b0127e[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Apr 20 09:14:26 2012 -0700

    change to allow 8x8 transform always
    
    This commit changed to enable the usage 8x8 transform for all frame
    type, all resolution and all quantizer range. This has an overall
    benefit .2% to .3% in term of compression, but more importantly,
    the difficult clips benefits much more, up to 2% to 3% on clips
    like football, harbour and so on.
    
    We observed some weird humps on very high end on a couple of youtube
    clips, but have determined the underly cause was the aggressive zbin
    having an effect of lowering rate with lower [1;31mquality[m, which have
    an impact on slide show clips around 60DB.
    
    The commit does not change the association between prediction mode
    and transform size.
    
    Change-Id: I33043bdce6207528ae00b4a4b26d8ff63cfea1f4

[33mcommit d6ac213ce63ddaaffad3e788026e856bc17db398[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Apr 11 17:14:46 2012 +0100

    Delete unused function.
    
    Deleted check_gf_[1;31mquality[m().
    
    Change-Id: If75fbd84accb1f6471ad6ea6ff2b65ae99976f5d

[33mcommit c88d335f7d204bd7529d386c8f30f77b6e81c0ad[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Mar 21 18:22:33 2012 +0000

    Only support improved quant
    
    Deprecate fast quant and strict_quant code.
    Small effect on [1;31mquality[m as fast was used in first pass but the
    effect is basically neutral across the derf set.
    
    The rationale here is to reduce the number of code paths for
    now to make experimentation easier. Optimized and fast code
    options can be re-introduced later along with other  encode
    speed options.
    
    Change-Id: Ia30c5daf3dbc52e72c83b277a1d281e3c934cdad

[33mcommit 8cf28d346d697d5e09ac8955c0e70f07fd09b60a[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Mar 7 09:05:26 2012 -0800

    Changed MAX_PSNR to be consistent with internal stats
    
    The maximum psnr has a marginal impact on the overall output in high
    [1;31mquality[m encodings, the change will make sure the psnr output to be
    consistent with encoder internal stats.
    
    Change-Id: I35cf2f85008ec127a7d91c9eb69fa7811798ae32

[33mcommit 157f15e1d3f5343607e683844cfa57bee0dd8cce[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Tue Mar 6 09:31:51 2012 -0800

    Imported a change from stable branch
    
    https://gerrit.chromium.org/gerrit/#change,17319 fixes cost estimating
    to take skip_eob into account. No [1;31mquality[m difference seen on derf set
    tests, but about .4% gain on STD_HD set.
    
    Change-Id: Ic5fe6d35ee021e664a6fcd28037b8432a0e470ca

[33mcommit af5c774b5c8a4cdf6d6792e63ce09d2702909de5[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Feb 28 14:19:38 2012 -0800

    Correct zbinboost lookup for 8x8 quantizer
    
    The commit fixed a problem where 8x8 regular quantizer was using the
    4x4 zbinboost lookup table that only has 16 entries at each Q. The
    commit assigned a uniform zbin boost value for all cases that there
    are more than 16 consective zeros. The change only affects MBs using
    8x8 transform. The fix has a slightly positive impact on [1;31mquality[m.
    
    Test results:
    http://www.corp.google.com/~yaowu/no_crawl/hd_fixzbinb.html
    (avg psnr: .26% glb psnr: .21% ssim: .28%)
    
    Results on cif size clip are also positive even though gain is smaller
    http://www.corp.google.com/~yaowu/no_crawl/derf_fixzbinb.html
    
    Change-Id: Ibe8f6da181d1fb377fbd0d3b5feb15be0cfa2017

[33mcommit 737179f275cc4384f587af5f391de5968368c63a[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Feb 17 12:03:34 2012 -0800

    Reduced bias in picking loop filter level
    
    The bias in picklpf intended to bias toward less greedy in getting
    best frame level psnr while maximize overall [1;31mquality[m for a clip.
    This commit reduced the bias for frames using 8x8 transform to
    achieve better compression overall.
    
    The change improve compression by ~.15% consistently on most of the
    HD clips tested.
    
    http://www.corp.google.com/~yaowu/no_crawl/LPFBias_FixSkip.html
    
    Change-Id: Ic30932d2b8eaebd52339b0195f569edc48eed7bc

[33mcommit f64725a0097819edf124fc15d300c77b2b42f744[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Feb 9 16:12:23 2012 -0800

    Improved coding using 8x8 transform
    
    In summary, this commit encompasses a series of changes in attempt to
    improve the 8x8 transform based coding to help overall compression
    [1;31mquality[m, please refer to the detailed commit history below for what
    are the rationale underly the series of changes:
    
    a. A frame level flag to indicate if 8x8 transform is used at all.
    b. 8x8 transform is not used for key frames and small image size.
    c. On inter coded frame, macroblocks using modes B_PRED, SPLIT_MV
    and I8X8_PRED are forced to using 4x4 transform based coding, the
    rest uses 8x8 transform based coding.
    d. Encoder and decoder has the same assumption on the relationship
    between prediction modes and transform size, therefore no signaling
    is encoded in bitstream.
    e. Mode decision process now calculate the rate and distortion scores
    using their respective transforms.
    
    Overall test results:
    1. HD set
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/HD_t8x8_20120206.html
    (avg psnr: 3.09% glb psnr: 3.22%, ssim: 3.90%)
    2. Cif set:
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/cif_t8x8_20120206.html
    (avg psnr: -0.03%, glb psnr: -0.02%, ssim: -0.04%)
    It should be noted here, as 8x8 transform coding itself is disabled
    for cif size clips, the 0.03% loss is purely from the 1 bit/frame
    flag overhead on if 8x8 transform is used or not for the frame.
    
    ---patch history for future reference---
    Patch 1:
    this commit tries to select transform size based on macroblock
    prediction mode. If the size of a prediction mode is 16x16, then
    the macroblock is forced to use 8x8 transform. If the prediction
    mode is B_PRED, SPLITMV or I8X8_PRED, then the macroblock is forced
    to use 4x4 transform. Tests on the following HD clips showed mixed
    results: (all hd clips only used first 100 frames in the test)
    
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hdmodebased8x8.html
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hdmodebased8x8_log.html
    
    while the results are mixed and overall negative, it is interesting to
    see 8x8 helped a few of the clips.
    
    Patch 2:
    this patch tries to hard-wire selection of transform size based on
    prediction modes without using segmentation to signal the transform size.
    encoder and decoder both takes the same assumption that all macroblocks
    use 8x8 transform except when prediciton mode is B_PRED, I8X8_PRED or
    SPLITMV. Test results are as follows:
    
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/cifmodebase8x8_0125.html
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hdmodebased8x8_0125log.html
    
    Interestingly, by removing the overhead or coding the segmentation, the
    results on this limited HD set have turn positive on average.
    
    Patch 3:
    this patch disabled the usage of 8x8 transform on key frames, and kept the
    logic from patch 2 for inter frames only. test results on HD set turned
    decidedly positive with 8x8 transform enabled on inter frame with 16x16
    prediction modes: (avg psnr: .81% glb psnr: .82 ssim: .55%)
    
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hdintermode8x8_0125.html
    results on cif set still negative overall
    
    Patch 4:
    continued from last patch, but now in mode decision process, the rate and
    distortion estimates are computed based on 8x8 transform results for MBs
    with modes associated with 8x8 transform. This patch also fixed a problem
    related to segment based eob coding when 8x8 transform is used. The patch
    significantly improved the results on HD clips:
    
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hd8x8RDintermode.html
    (avg psnr: 2.70% glb psnr: 2.76% ssim: 3.34%)
    results on cif also improved, though they are still negative compared to
    baseline that uses 4x4 transform only:
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/cif8x8RDintermode.html
    (avg psnr: -.78% glb psnr: -.86% ssim: -.19%)
    
    Patch 5:
    This patch does 3 things:
    a. a bunch of decoder bug fixes, encodings and decodings were verified
    to have matched recon buffer on a number of encodes on cif size mobile and
    hd version of _pedestrian.
    b. the patch further improved the rate distortion calculation of MBS that
    use 8x8 transform. This provided some further gain on compression.
    c. the patch also got the experimental work SEG_LVL_EOB to work with 8x8
    transformed macroblock, test results indicates it improves the cif set
    but hurt the HD set slightly.
    
    Tests results on HD clips:
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/HD_t8x8_20120201.html
    (avg psnr: 3.19% glb psnr: 3.30% ssim: 3.93%)
    
    Test results on cif clips:
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/cif_t8x8_20120201.html
    (avg psnr: -.47% glb psnr: -.51% ssim: +.28%)
    
    Patch 6:
    Added a frame level flag to indicate if 8x8 transform is allowed at all.
    temporarily the decision is based on frame size, can be optimized later
    one. This get the cif results to basically unchanged, with one bit per
    frame overhead on both cif and hd clips.
    
    Patch 8:
    Rebase and Merge to head by PGW.
    Fixed some suspect 4s that look like hey should be 64s in regard
    to segmented EOB. Perhaps #defines would be bette.
    Bulit and tested without T8x8 enabled and produces unchanged
    output.
    
    Patch 9:
    Corrected misalligned code/decode of "txfm_mode" bit.
    Limited testing for correct encode and decode with
    T8x8 configured on derf clips.
    
    Change-Id: I156e1405d25f81579d579dff8ab9af53944ec49c

[33mcommit cf561bad1d027da0b28b4cd75036942e97d4fef7[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Jan 11 14:05:57 2012 +0000

    Rate control on static scenes plus Y2dc delta Q fix.
    
    A problem can arise on static clips with force key frames where
    attempts to avoid popping lead to a progressive reduction in key
    frame Q that ultimately may lead to unexpected overspend against
    the  rate target.
    
    The changes in this patch help to insure that in such clips the
    [1;31mquality[m of the key frames across the clip is more uniform (rather
    than starting bad and getting better - especially at low target rates).
    
    This patch also includes a fix that removes a delta on the Y2DC
    when the baseline q index < 4 as this is no longer needed.
    
    There is also a fix to try and prevent repeat single step Q adjustment in
    the recode loop leading to lots of recodes, especially where the use
    of forced skips as part of segmentation has made the impact of Q on
    the number of bits generated much smaller.
    
    Patch 2: Amend "last_boosted_qindex" calculation for arf overlay frames.
    
    Change-Id: Ia1feeb79ed8ed014e4239994fcf5e58e68fd9459

[33mcommit df4e79f7f7b1c5f62fdb80575bab6ce1b2be7928[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Dec 16 10:23:01 2011 +0000

    Extend to 256 Q steps.
    
    This commit extends the number of Q steps to 256 from 128.
    The q_trans[] array has been altered to distribute available Q index values
    (using the current 64 steps available as input parameters) evenly across the
    available range. This is coupled with the fact that each Q step where possible
    now equates to a fixed % change in the quantizer. This may want refinement
    later especially in terms of the granularity at the high [1;31mquality[m end but is a
    reasonable starting point.
    
    Change-Id: I2aaa6874fa10ce05c958dd182947ce39f6f1eecb

[33mcommit ebcc6605c1bd224fcb26494d74a1db81e981f3ab[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Dec 7 20:08:31 2011 -0800

    fixed a crash caused invalid Q choice
    
    The commit fixed a problem by capping cpi->active_best_[1;31mquality[m to be
    smaller than cpi->worst_[1;31mquality[m.  Also fixed a few line of code that
    was misplaced.
    
    Change-Id: Ie908264b72140c669122a0afde5d886619c33474

[33mcommit 5b42ae09aeecedfdff1dae9d59be9fbb2aba3392[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Dec 1 15:50:14 2010 -0800

    experiment extending the quantizer range
    
    Prior to this change, VP8 min quantizer is 4, which caps the
    highest [1;31mquality[m around 51DB. This experimental change extends
    the min quantizer to 1, removes the cap and allows the highest
    [1;31mquality[m to be around ~73DB, consistent with the fdct/idct round trip
    error. To test this change, at configure time use options:
    
    --enable-experimental --enable-extend_qrange
    
    The following is a brief log of changes in each of the patch sets
    
    patch set 1:
    In this commit, the quantization/dequantization constants are kept
    unchanged, instead scaling factor 4 is rolled into fdct/idct.
    Fixed Q0 encoding tests on mobile:
      Before:    9560.567kbps Overall PSNR:50.255DB VPXSSIM:98.288
      Now:   18035.774kbps Overall PSNR:73.022DB VPXSSIM:99.991
    
    patch set 2:
    regenerated dc/ac quantizer lookup tables based on the scaling
    factor rolled in the fdct/idct. Also slightly extended the range
    towards the high quantizer end.
    
    patch set 3:
    slightly tweaked the quantizer tables and generated bits_per_mb
    table based on Paul's suggestions.
    
    patch set 4:
    fix a typo in idct, re-calculated tables relating active max Q
    to active min Q
    
    patch set 5:
    added rdmult lookup table based on Q
    
    patch set 6:
    fix rdmult scale: dct coefficient has scaled up by 4
    
    patch set 7:
    make transform coefficients to be within 16bits
    
    patch set 8:
    normalize 2nd order quantizers
    
    patch set 9:
    fix mis-spellings
    
    patch set 10:
    change the configure script and macros to allow experimental code
    to be enabled at configure time with --enable-extend_qrange
    
    patch set 11:
    rebase for merge
    
    Change-Id: Ib50641ddd44aba2a52ed890222c309faa31cc59c
For keyword pass:
[33mcommit e72d49a97a1e4292ce8bfbc98b0d8855b40accf2[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Tue Nov 12 10:41:06 2013 -0800

    Use lowercase 'b' to branch
    
    iOS doesn't recognize B:
    bad instruction `B idct32_[1;31mpass[m_loop'
    
    Change-Id: I3cf6aede4639f1d9efa97f7962fa287ba6feaaef

[33mcommit b26ce8b1bead574613fa20212bd6f15cc9613e2e[m
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Oct 22 11:30:06 2013 -0700

    Updates to 1-[1;31mpass[m:
    
       -Don't reduce maxQ for gold/alt in CBR mode.
    
       -Fix to min/maxQ for first/initial key frame.
    
       -Add more speeds to datarate test and reduce the starting bitrate for test.
    
    Change-Id: Id2a333d76dd3f6a51b322ca984588e2a22159c58

[33mcommit 3ffa41aae32bdf2372b144cc7a1e65a921501551[m
Merge: ded951793 7b9ca3caa
Author: James Zern <jzern@google.com>
Date:   Mon Oct 28 12:45:11 2013 -0700

    Merge changes If9b16f7d,I75aab21c,I9cbb768c,If5cea3d3,I96940657,I025595d8,Ie0bc3935,I3ebb172d
    
    * changes:
      vp9: remove partition+entropy contexts from common
      vp9: add above/left_context to MACROBLOCKD
      vp9: add above/left_seg_context to MACROBLOCKD
      vp9: add above/left_context to encoder
      vp9: add above/left_seg_context to encoder
      vp9: [1;31mpass[m entropy context directly to set_skip_context
      vp9: [1;31mpass[m context directly to partition functions
      vp9/decode: add alloc_tile_storage()

[33mcommit d2bf696ee02893204e1f505384ea385ac49eb9a3[m
Author: James Zern <jzern@google.com>
Date:   Thu Oct 24 16:31:07 2013 +0200

    vp9: [1;31mpass[m entropy context directly to set_skip_context
    
    this will allow for separate storage to be used in tile decoding
    
    Change-Id: I025595d83118bdc82a545dae69bc6602e8d2a6e3

[33mcommit 88d79eabdc30c6325fbe5fd76dac029d24bf9949[m
Author: James Zern <jzern@google.com>
Date:   Thu Oct 24 16:31:07 2013 +0200

    vp9: [1;31mpass[m context directly to partition functions
    
    update_partition_context / partition_plane_context: this will allow for
    separate storage to be used in tile decoding
    
    Change-Id: Ie0bc393531ab7e9d2ce35c95111849b294aad4ed

[33mcommit 39b6ab6a29f4cacf5360d4edc3b9b8a95a255cbd[m
Merge: 35c4437bf 4e2732c3c
Author: Jingning Han <jingning@google.com>
Date:   Thu Oct 24 21:39:27 2013 -0700

    Merge "Separate encode_block for [1;31mpass[m 1 and 2"

[33mcommit 4e2732c3c3bdeca417008c361a2387399719b3a2[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 23 11:09:27 2013 -0700

    Separate encode_block for [1;31mpass[m 1 and 2
    
    The encode_block for [1;31mpass[m 1 takes simpler functionalities and can
    save a few branches. The main reason is to make encode_block only
    used after running rate-distortion optimization search in [1;31mpass[m 2,
    hence allowing dual buffer stack approach later.
    
    Change-Id: I9e549ffb758e554fe185e48a07d6e0e01e475bcf

[33mcommit eec3def7c5f8ae558e096615801d6afc7e779b29[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Oct 16 10:59:55 2013 +0100

    Modified no memory rate control.
    
    This 2-[1;31mpass[m rate control setting allocates bits based
    on first [1;31mpass[m stats to each kf group, gf group and individual
    frame but does not correct the bits left and allocation after
    each frame.
    
    In other words it recommends a bit allocation for each frame
    but does not try and correct any over or under spend on a
    frame over the remainder of the clip. This reduces the accuracy
    of rate control in terms of hitting an average bitrate but prevents
    problems that may arise because early frames either use to many
    or too few bits. This mode is currently more inclined to undershoot
    than overshoot (particularly at higher data rates).
    
    Also minor changes to rate of adaption when recode loop is not
    enabled.
    
    This mode is currently enabled by default for VBR.
    It gives the following % performance gains.
    
    derf +0.467, +1.072
    yt 2.962, 2.645
    stdhd 1.682, 1.595,
    yt-hd 2.3, 2.174
    
    Change-Id: I3c84a9bf8884e5b345698ff0e19187f792c2f3a0

[33mcommit 72033fcff8e1ce2e94f578910a1cfa77cd1bf533[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Oct 16 12:43:03 2013 -0700

    Make memory alloc in pick_mode_context bsize aware
    
    This commit makes the buffer allocation of zcoeff_blk array in
    pick_mode_context block size aware. It calculates the number of
    4x4 blocks in the partition and assigns the memory space accordingly.
    This process (and the uninitialization) is done once for each encoding
    [1;31mpass[m. It allows memory copy of smaller buffer when possible.
    
    For football at 600kbps, the runtimes improve by about 1%:
    speed 1, 45961ms -> 45472ms
    speed 2, 23863ms -> 23598ms
    
    Change-Id: Id2ca24906fa89f46fa5fe742ec4b8efc2a61f877

[33mcommit 518fc282f4f36f89f10e15a23dfc2ded5db294fa[m
Merge: 7fd2561d6 47e784eab
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Oct 17 09:01:14 2013 -0700

    Merge "Prevent first [1;31mpass[m from outputing invalid info"

[33mcommit 820201caa803e78c461e05128b87f4d7b24247a7[m
Author: James Zern <jzern@google.com>
Date:   Wed Oct 16 16:10:27 2013 +0200

    vp9_thread: add vp9_worker_execute()
    
    cherry-picked from:
    commit 988b70844e03efcfcc075a9bc25d846670494f36
    Author: Pascal Massimino <pascal.massimino@gmail.com>
    Date:   Fri Aug 2 11:15:16 2013 -0700
    
        add WebPWorkerExecute() for convenient by[1;31mpass[m
    
        This is mainly for re-using the worker structs without using the
        thread.
    
        Change-Id: I8e1be29e53874ef425b15c192fb68036b4c0a359
    
    Original source:
     http://git.chromium.org/webm/libwebp.git
     100644 blob c0d318aee628fdf9ba4876451a28aa978f1066b8 src/utils/thread.c
     100644 blob c2b92c9fe353f8e514f78922f3d237204a9cbc66 src/utils/thread.h
    
    Change-Id: I13fe92b1e94062bb99fdeeb7cb0b4b0575d27793

[33mcommit 47e784eab68f385b0f2bf85b1a495cd110850484[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Oct 16 16:29:28 2013 -0700

    Prevent first [1;31mpass[m from outputing invalid info
    
    First [1;31mpass[m does not produce compressed data, therefore encode/decode
    match check is not initialized.
    
    Change-Id: I1971a6747337872a850987cc70ba267bd0f1d564

[33mcommit e078c3d8546182cc2cc793053476a2e3caa50b4c[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Oct 2 17:13:59 2013 -0700

    Initial 1-[1;31mpass[m.
    
    Change-Id: I58c5436f5c95f6012fb2891cd2a02f76e4870b6a

[33mcommit 9d4c6fab44173def9462f46b55b62e321cda94ad[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Mon Oct 7 15:54:20 2013 -0700

    cpplint issue missed in first [1;31mpass[m for vp9_bitstream.c
    
    Change-Id: Ia725748acbc2a3f825f0d208f26522a0412301fa

[33mcommit 92519a005ade01571e208224903832ee5295051f[m
Merge: ccc5a483f 30dee8adf
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Mon Oct 7 09:16:46 2013 -0700

    Merge "cpplint problems resolved with vp9_first[1;31mpass[m.c"

[33mcommit 30dee8adfc2913daa2e0e22b5ea047b0d7b394a5[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Sat Oct 5 17:10:54 2013 -0700

    cpplint problems resolved with vp9_first[1;31mpass[m.c
    
    Change-Id: Ic7b7014a0d857585bfd4baaea1d5c27ffe355642

[33mcommit 014a2c17df2c175a3d6f991d3d004438fdb88008[m
Author: Guillaume Martres <gmartres@google.com>
Date:   Fri Oct 4 12:03:44 2013 -0700

    Fix first [1;31mpass[m for non-square blocks
    
    Change-Id: Ic049f0a6ce190f33859118e7b8cfcfe305979102

[33mcommit 5b1dc1515fb939f9d6f5bcbe9a6a71f421133969[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Wed Sep 25 18:07:10 2013 -0700

    Fix a bunch of TODO from vp9_short_idct32x32_add_neon.
    
    - full ASM version, no more C gateway file.
    - integrate combine-add with last step of 2nd [1;31mpass[m.
    - remove a few push/pop pairs.
    - some instruction reordering to hide latency.
    
    Change-Id: Ic9d9933c908b65d1bf7ba8fd47b524cda808c9c6

[33mcommit 0c02bfcc2ab9eb9ce2b95c7af9bbf491ddf37415[m
Merge: f9e2140ca 35c5d79e6
Author: Yaowu Xu <yaowu@google.com>
Date:   Wed Sep 25 17:21:13 2013 -0700

    Merge "Limit mv search range for first [1;31mpass[m and mbgraph"

[33mcommit 35c5d79e6bdbf7e2659e9c6359bf75ebbf533934[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue Sep 24 13:47:29 2013 -0700

    Limit mv search range for first [1;31mpass[m and mbgraph
    
    Both first [1;31mpass[m and mbgraph search use block size 16x16 for motion
    estimation. This commit put a limit of motion vector range. The
    effective range allows the entire 16x16 with required subpel
    interpolation input to be completely outside image border, but
    not any further away from image border.
    
    Change-Id: Id70a5ed08be49e70959f064859d72adc7d775d08

[33mcommit 040ffb6326866c9cea3f10530007da511521ed57[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Sep 13 09:23:53 2013 -0700

    Minor adjustment in unit tests
    
    The CpuSpeedTest is extended to cover 2[1;31mpass[m good quality with CpuUsed
    from 0 to 4. The BordersTest is changed to use CpuUsed 1 for faster
    turn around.
    
    Change-Id: I005e89adee7fe63af4b1f2a76a3a13ea826feadf

[33mcommit 939791a129819951bbdd187ba022d456efbc21d6[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Sep 5 17:10:58 2013 -0700

    Modify encode breakout for static frames
    
    Thank Paul for the suggestions. While turning on static-thresh
    for static-image videos, a big jump on bitrate was seen. In this
    patch, we detected static frames in the video using first-[1;31mpass[m
    stats. For different cases, disable encode breakout or reduce
    encode breakout threshold to limit the skipping.
    
    More modification need be done to break incorrect partition
    picking pattern for static frames while skipping happens.
    
    Change-Id: Ia25f47041af0f04e229c70a0185e12b0ffa6047f

[33mcommit e378a89bd662ded5ae6f550f820070db93f50a39[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Thu Aug 29 16:21:44 2013 -0700

    Support a constant quality mode in VP9
    
    Adds a new end-usage option for constant quality encoding in vpx. This
    first version implemented for VP9, encodes all regular inter frames
    using the quality specified in the --cq-level= option, while encoding
    all key frames and golden/altref frames at a quality better than that.
    
    The current performance on derfraw300 is +0.910% up from bitrate control,
    but achieved without multiple recode loops per frame.
    
    The decision for qp for each altref/golden/key frame will be improved
    in subsequent patches based on better use of stats from the first [1;31mpass[m.
    Further, the qp for regular inter frames may also be varied around the
    provided cq-level.
    
    Change-Id: I6c4a2a68563679d60e0616ebcb11698578615fb3

[33mcommit a2f7619860660c3245c3b725e41c4f41f7a99d79[m
Merge: ac12f3926 0d8723f8d
Author: Deb Mukherjee <debargha@google.com>
Date:   Wed Aug 21 13:58:49 2013 -0700

    Merge "Make "good" quality 2-[1;31mpass[m vpxenc encoding default"

[33mcommit 0d8723f8d5372eaaadfb5373a3b9d35e2c78c42d[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Aug 19 14:16:26 2013 -0700

    Make "good" quality 2-[1;31mpass[m vpxenc encoding default
    
    Currently, the best quality mode in VP9 is not very well developed,
    and unnecessarily makes the encode too slow. Hence the command line
    default is changed to "good" quality. Also, the number of [1;31mpass[mes
    default is changed to 2 [1;31mpass[mes as well, since 1-[1;31mpass[m encoding is
    not very efficient in VP9.
    
    Besides, a number of VP9 defaults are set to the currently
    recommended settings. With these changes, vpxenc
    run with --codec=vp9 --kf-max-dist=9999 --cpu-used=0 should
    work about the same as our borg results.
    Note when the --cpu-used=0 option is dropped there will be a slight
    difference in the output, because of a difference in the cpu-used
    value for the first [1;31mpass[m. Specifically, the default when unspecified
    is to use cpu_used=1 for the first [1;31mpass[m and cpu_used=0 for the
    second [1;31mpass[m. But when specified, both [1;31mpass[mes will use the cpu-used
    value specified.
    
    Note that this also changes the default for VP8 as being "good"
    but other options stay unchanged.
    
    Change-Id: Ib23c1a05ae2f36ee076c0e34403efbda518c5066

[33mcommit 2e3478a5933254256a2634dee427daf577cf3039[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon Aug 19 13:20:21 2013 -0700

    Using plane_bsize instead of bsize.
    
    This change set is intermediate. The next one will remove all repetitive
    plane_bsize calculations, because it will be [1;31mpass[med as argument to
    foreach_transformed_block_visitor.
    
    Change-Id: Ifc12e0b330e017c6851a28746b3a5460b9bf7f0b

[33mcommit cefaaa86c7fd7f4b2fae65216e854072dcde3aff[m
Merge: 4d7341609 8cb09719a
Author: James Zern <jzern@google.com>
Date:   Thu Aug 15 10:58:53 2013 -0700

    Merge "vpxenc: open output file after setting [1;31mpass[m #"

[33mcommit 8cb09719a35ab2285e68cdc5bed2ce58634806f1[m
Author: James Zern <jzern@google.com>
Date:   Wed Aug 14 18:28:42 2013 -0700

    vpxenc: open output file after setting [1;31mpass[m #
    
    write_ivf_file_header would incorrectly skip writing the file header in
    the 2nd [1;31mpass[m, causing the initial frame header to be overwritten on
    close potential causing an overly large frame header to be read and a
    crash.
    
    most likely broken since:
    9e50ed7 vpxenc: initial implementation of multistream support
    
    fixes issue #585
    
    Change-Id: I7e863e295dd6344c33b3e9c07f9f0394ec496e7b

[33mcommit 12f5762756f90b04a23d25c29cb9866904fbde56[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Jul 31 17:02:06 2013 -0700

    Remove unnecessary arguments in rd_pick_ref_frame
    
    This commit removes redundant arguments [1;31mpass[ming in the function of
    rd_pick_reference_frame. This resolves the clang warnings about
    potential use of uninitialized values.
    
    Change-Id: Ic68f949a9f8fcd0a583786b0c75321104ea44739

[33mcommit 64f7a4d8cb6a583417765336005703cdc308aa72[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Jun 12 14:37:01 2013 -0700

    Wide loopfilter 16 pix at a time
    
    Where possible, do the 16 pixel wide filter while doing the horizontal
    filtering [1;31mpass[m. The same approach can be taken for the mbloop_filter
    when that's implemented. Doing so on the vertical [1;31mpass[m is a little more
    involved, but possible.
    
    Change-Id: I010cb505e623464247ae8f67fa25a0cdac091320

[33mcommit f954490bbf24af9431f9c24744aef1476e11acef[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Thu Jun 20 09:28:11 2013 -0700

    disable speed > 1 speed corrections in first[1;31mpass[m
    
    need to rework these
    
    Change-Id: I17dc2c88d2faadd2f8fb117c52c25f04ea2e9856

[33mcommit 3656835771ad338ed22cebb19311274e90efc768[m
Merge: 12180c832 b5bf7b13a
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Jun 19 11:35:40 2013 -0700

    Merge "Add two-[1;31mpass[m quantization"

[33mcommit b5bf7b13a83fc6fccafec1611410910eb78155a9[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Jun 18 17:09:50 2013 -0700

    Add two-[1;31mpass[m quantization
    
    Optimized the quantization function by making it a two-[1;31mpass[m
    process. The first [1;31mpass[m does a quick checking of the transform
    coefficients against the base ZBIN, and only keep the good
    enough set of coefficients for quantization. A skipping
    check is added. If all coefficients are within the base ZBIN, no
    quantization is needed. The second [1;31mpass[m is the actual quantization
    [1;31mpass[m, which only processes the coefficient subset determined
    in first [1;31mpass[m. This reduces the computation. Furthermore, an
    alternitive method is used for large transform size, which often
    has sparse nonzero quantized coefficients.
    
    Overall, the encoder speedup is about 4%. The quantization function
    itself gets 20% faster.
    
    Change-Id: I3a9dd0da6db030260b6d9c314a9fa48ecae89f22

[33mcommit 717d744a017c828e1a56ba53731917d08cff038a[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Mon Jun 10 06:48:58 2013 -0700

    Fix use of get_uv_tx_size in loopfilter
    
    Change the argument of get_uv_tx_size() to be an MBMI pointer, so that the
    correct column's MBMI can be [1;31mpass[med to the function.
    
    Change-Id: Ied6b8ec33b77cdd353119e8fd2d157811815fc98

[33mcommit 86bb6df00515ab2263b41e506cdf55d90d76598f[m
Author: Tero Rintaluoma <teror@google.com>
Date:   Mon Jun 10 10:23:04 2013 +0300

    Fixed point reference picture scaling
    
    Fixed point scaling factors are calculated once for each
    reference frame by using integer division. Otherwise fixed point
    scaling routines are used in all scaling calculations. This makes it
    possible to calculate fixed point scaling factors on device driver
    software and [1;31mpass[m them to hardware and thus avoid division on hardware.
    
    TODO:
     - Missing check for maximum frame dimensions
       (currently scaling uses 14 bits)
     - Missing check for maximum scaling ratio
       (upscaling 16:1, downscaling 2:1)
    
    Problems:
     - Straightforward fixed point implementation can cause error +-1
       compared to integer division (i.e. in x_step_q4). Should only
       be an issue for frames larger than 16k.
    
    Change-Id: I3cf4dabd610a4dc18da3bdb31ae244ebaf5d579c

[33mcommit 3993d30922d7a90c6a4dae8798365e2d47c140d9[m
Merge: d30968c32 073c7d5ee
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Sat Jun 8 17:40:17 2013 -0700

    Merge "Fix first[1;31mpass[m if framesize is not a multiple of 16." into experimental

[33mcommit 073c7d5eec5454e1e082e33e1847bc1ed9176eb4[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Sat Jun 8 12:04:12 2013 -0700

    Fix first[1;31mpass[m if framesize is not a multiple of 16.
    
    Change-Id: Iec41736c2b6140715f90f40de5ae6cf52497a9b8

[33mcommit c971855697b7e6de5992c5f4d9e581e13c33f96f[m
Merge: b480d413e 1e733747e
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu May 30 21:52:41 2013 -0700

    Merge "Changed to use new intra coding calls for 1st [1;31mpass[m" into experimental

[33mcommit 1e733747eedb96ad62aafaac33069ad82e266183[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu May 30 17:08:14 2013 -0700

    Changed to use new intra coding calls for 1st [1;31mpass[m
    
    And removed 1st [1;31mpass[m specific version of intra coding funcitons
    
    Change-Id: Ia54e67c71d750957cb2efda8360bf2133468498a

[33mcommit de735929cf1b75caf845c996e09376635bdfc65a[m
Author: Jingning Han <jingning@google.com>
Date:   Mon May 27 07:55:25 2013 -0700

    Reduce bmi buffer length from 16 to 4
    
    This commit removes the use of bmi_ in the first-[1;31mpass[m encoding by
    forcing encode_intra4x4block_ to use DC_PRED, followed by DCT_DCT
    only, as John suggested. This makes the need for bmi buffer only
    up to 4 entries, instead of 16.
    
    Change-Id: I3410007dfae789ee46a09ae20c39d3ce3c7954aa

[33mcommit e9950b0768c55e94159f66545a0cd430acb7ef57[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon May 20 17:32:50 2013 -0700

    Unnecessary [1;31mpass[ming of prev_mi
    
    Passing prev_mi is not needed.
    
    Change-Id: I6453bb47514ddafd555864d190ecf6d1a6bdc136

[33mcommit 679e4abdd5f733ab544689ce210b42d37e7ce164[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed May 15 17:55:08 2013 -0700

    Initial version of alpha channel support
    
    This is a mostly-working implementation of an extra channel in the
    bitstream. Configure with --enable-alpha to test. Notable TODOs:
    
     - Add extra channel to all mismatch tests, PSNR, SSIM, etc
     - Configurable subsampling
     - Variable number of planes (currently always uses all 4)
     - Loop filtering
     - Per-plane lossless quantizer
     - ARNR support
    
    This implementation just uses the same contents as the Y channel
    for the A channel, due to lack of content and general pain in
    playing back 4 channel content. A later patch will use the actual
    alpha channel [1;31mpass[med in from outside the codec.
    
    Change-Id: Ibf81f023b1c570bd84b3064e9b4b8ae52e087592

[33mcommit 9bd59ad3edb77f6b29960da2c4ae77f8e1d5ae63[m
Merge: 54de08415 9e49ba05f
Author: Jingning Han <jingning@google.com>
Date:   Wed May 15 17:01:04 2013 -0700

    Merge "Fix first-[1;31mpass[m encoding test" into experimental

[33mcommit 9e49ba05f4a78fcaf61e01a108ca968b295b645a[m
Author: Jingning Han <jingning@google.com>
Date:   Wed May 15 14:12:33 2013 -0700

    Fix first-[1;31mpass[m encoding test
    
    Always initialize the mode_info with sb_type of BLOCK_SIZE_MB16X16
    for the first-[1;31mpass[m encoding test.
    
    Change-Id: Ic86393eeef981bdd523a5b44cfac3f0b24c068b7

[33mcommit 70977814679d84b314b2cf41d8e6b76c0868c21b[m
Author: Martin Storsjö <martin@martin.st>
Date:   Wed May 15 20:54:20 2013 +0300

    ads2gas: Use the correct perl string comparison operator
    
    Using == ended up matching no matter what string was [1;31mpass[med in
    (which so far only happened if when the -thumb parameter
    was set).
    
    Change-Id: Ifa7b611d016d984aec3b697b5a1a07839f7508dc

[33mcommit ce70ad59670dceeac89fe2adf2140c515d015c9d[m
Merge: 214985293 dc5418050
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Mon May 13 21:46:14 2013 -0700

    Merge "Code cleanup inside vp9_first[1;31mpass[m.c." into experimental

[33mcommit 8525c02e16988e9eb144f32090bc56042c702d7a[m
Merge: eb93893be 236ec08cd
Author: John Koleszar <jkoleszar@google.com>
Date:   Thu May 9 12:17:50 2013 -0700

    Merge "Make first[1;31mpass[m encode Y-only" into experimental

[33mcommit 236ec08cd052e01e1bccb13007546944c5464c90[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Thu May 9 10:40:59 2013 -0700

    Make first[1;31mpass[m encode Y-only
    
    The chroma planes are not used during the first [1;31mpass[m encode,
    but the vp9_encode_sb() function was operating on them anyway.
    This was causing the use of uninitialized memory.
    
    Change-Id: I5ebafcd3d5e34ed91a8336dad159b573995a939f

[33mcommit dc5418050ad5e60dd47d726107872c1803ac2a0a[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed May 8 18:13:46 2013 -0700

    Code cleanup inside vp9_first[1;31mpass[m.c.
    
    Change-Id: Ia2814402e3c2ec97c24c536c05f0f526fe1a431c

[33mcommit b05247df95cb46be8b51037d0c4b0aa81c4d9450[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Tue May 7 15:40:18 2013 -0700

    Removing vp9_swap_yv12_buffer function and corresponding files.
    
    Adding static swap_yv12 function to vp9_first[1;31mpass[m.c.
    
    Change-Id: I7da9caab9720498db4a74c627901bf37816ed06c

[33mcommit c0490a5cbb8d0f7054ba3e6d50b179c32ca03845[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue May 7 12:58:32 2013 -0700

    Revert "Adjust error resilience test data rate."
    
    This reverts commit b24735c622cefe3a03633edd69dff65d2a6ee0dd
    since the adjusted threshold doesn't allow the existing tests
    to [1;31mpass[m. Will disable the failing test in a separate commit.
    
    Change-Id: I26d41cf6175f300bbad493cecdc96e6b0dd6f2fe

[33mcommit b24735c622cefe3a03633edd69dff65d2a6ee0dd[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue May 7 18:50:39 2013 +0100

    Adjust error resilience test data rate.
    
    Note that the [1;31mpass[m fail criteria for this test seems a bit
    arbitrary to me.
    
    Change-Id: Idc695c39dd7542e851a7732b2810b45e0bdf91ae

[33mcommit 8dd8287e16d3afc037a4ad5a18863107868ff5ef[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Mon May 6 11:01:35 2013 -0700

    Y4M input support for 4:2:2, 4:4:4, 4:4:4:4
    
    Adds a new experiment CONFIG_NON420 that allows other chroma subsamplings
    to be [1;31mpass[med to the codec. This commit allows the data to be [1;31mpass[med from
    a y4m input file through vpxenc to the codec, where they're currently
    rejected. Later commits will finish support for this inside the codec.
    
    Change-Id: Ib3aac604d8cad9e24cef395fa1067f16ba7e8e43

[33mcommit f7fa367094250ecaad8b6463ab877ca6e59ce62d[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Sat May 4 15:49:41 2013 -0700

    Fix first-[1;31mpass[m intra4x4 for sb8x8 experiment.
    
    Change-Id: I1df17f45721c690d157800daa6a0b377e3d32bc2

[33mcommit a4c0b3531ef6dab7421efb87916fdeb8a5135895[m
Author: Adrian Grange <agrange@google.com>
Date:   Wed Apr 17 11:07:12 2013 -0700

    Make alt_extra_bits a local variable
    
    alt_extra_bits is now only used in a local context so
    remove it from the two[1;31mpass[m_rc structure.
    
    Change-Id: I5bbf0a3dba9712a3da45760f7bb865243705b53e

[33mcommit 15eac18c4eb037921a8b7e1f4f600a6edc4c722c[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Sat Apr 13 10:01:46 2013 -0700

    Make filter RD code and encode breakout variance size-independent.
    
    Static threshold results slightly up (+0.1% on derf), probably b/c
    we now take the filter (sharp/low[1;31mpass[m) into account for the breakout
    decision.
    
    Change-Id: I9f597601da434205142afd05f32690e7ba8fd690

[33mcommit 6189f2bcb1ab78caa3dcd09043a36f54c7fda51a[m
Author: Scott LaVarnway <slavarnway@google.com>
Date:   Wed Apr 10 19:46:52 2013 -0400

    WIP: removing predictor buffer usage from decoder
    
    This patch will use the dest buffer instead of the
    predictor buffer.  This will allow us in future commits
    to remove the extra mem copy that occurs in the dequant
    functions when eob == 0.  We should also be able to remove
    extra params that are [1;31mpass[med into the dequant functions.
    
    Change-Id: I7241bc1ab797a430418b1f3a95b5476db7455f6a

[33mcommit da0232fd59ad83bb9d8e6520d16baebc4708b6bd[m
Author: Dmitry Kovalev <dkovalev@google.com>
Date:   Wed Apr 3 12:21:47 2013 -0700

    Reimplementation of setup_frame_size.
    
    General code cleanup in loopfilter code. Modification of setup_frame_size,
    so now VP9_COMMON is modified in one place after all width/height checks
    [1;31mpass[med.
    
    Change-Id: Iedf32df43a912d7aae788ed276ac6c429973f6fe

[33mcommit 449f136886e96fcf448bf9b68952977da703c614[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Mon Mar 18 15:17:45 2013 -0700

    VP9/ResizeInternalTest: adjust [1;31mpass[ming threshold
    
    Update to +/- 1dB.
    
    Change-Id: Idada001f261b36945c9334e288a415ee2c79c415

[33mcommit 571fce6546c19e6d93ae2d373de733ce9e266705[m
Merge: bf7387f6b db5f2cb57
Author: John Koleszar <jkoleszar@google.com>
Date:   Mon Mar 18 08:36:18 2013 -0700

    Merge "Fix use of NaN in first[1;31mpass[m" into experimental

[33mcommit db5f2cb57b39545d01e623e04450ba21ae1371aa[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Fri Mar 15 17:26:24 2013 -0700

    Fix use of NaN in first[1;31mpass[m
    
    If the second reference is better than the first in the long term,
    it was possible to try to take the fractional exponent of a
    negative number, giving an undefined result.
    
    Change-Id: I1dd08286747ceae960eb03bb5d98a383cc9d253b

[33mcommit 08d2c3829ab47f2ef329f32773cfc2442852ca37[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Mar 6 11:33:43 2013 +0000

    Changes to maximum gf/arf interval.
    
    This patch puts in an adjustment to the maximum gf/arf
    interval based on the active q range.  It sets a fixed
    baseline maximum of 16 but can drop this down to 12 at
    lower q. This required some re-ordering in the first [1;31mpass[m
    code to insure we have a Q range estimate before defining
    the first gf sequence.
    
    The main gains seed are int he STD hd set on 50fps clips
    where previously the interval could rise as high as 25.
    On the std hd clip the gains are around 2.8% with limit set
    to 300 frames.
    
    When combined with the one shot rate control flags we get
    combined of:
    
    derf 1.55% (limit300), yt 7.25%, hd 5.17% std-hd 5.84% (limit300)
    
    Change-Id: Ib380d51354511f2ff0f171a8df4e74291c0421f9

[33mcommit 11ca81f8b64fe5af24a800ba2cfb0f0d37d56ed5[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Mar 8 10:54:30 2013 -0800

    Add vp9_idct4_1d_sse2
    
    Added SSE2 idct4_1d which is called by vp9_short_iht4x4. Also,
    modified the parameter type [1;31mpass[med to vp9_short_iht functions to
    make it work with rtcd prototype.
    
    Change-Id: I81ba7cb4db6738f1923383b52a06deb760923ffe

[33mcommit db6ad0138c811763d1fcf8e4082834dc92fa9071[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Feb 26 16:53:03 2013 +0000

    Added stricter Q control flag.
    
    Added a variant of the one shot maxQ flag
    for two [1;31mpass[m that forces a fixed Q for the
    normal inter frames. Disabled by default.
    Also small adjustment to the Bits per MB
    estimation.
    Change-Id: I87efdfb2d094fe1340ca9ddae37470d7b278c8b8

[33mcommit 93e10c8e87704e2e36aa3005995051dddea64911[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Tue Mar 5 13:44:56 2013 -0800

    Update ResizeInternalTest threshold
    
    Improved coding performance made this test fail. Adjust the threshold
    so that it [1;31mpass[mes again. A more stable metric is an open TODO.
    
    Change-Id: I56e18749ced48123ee2488888a3eed631759912b

[33mcommit 406ec6b62e84141739ecc0fd75456110dc1dd2ae[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Feb 27 11:14:23 2013 -0800

    Fix rollover and [1;31mpass[m 1 time estimate
    
    Fixes a rollover of the cx_time variable for encodes that take
    over ~4200 seconds. Also enable the time estimate in first [1;31mpass[m.
    
    Change-Id: Ib5a98ee71bccd79a804d709cec7260651d0b7141

[33mcommit e189edfeb11d3433c8ca3c35fe8d5610ef2444f3[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Mar 1 12:43:10 2013 -0800

    Initialize [1;31mpass[m variable in tile test.
    
    Change-Id: I7977694223521404fc69f29ae2cff03e36e87299

[33mcommit a07bed2b2b2ca84fdb145ee8e4f1ca100d39915e[m
Author: James Zern <jzern@google.com>
Date:   Thu Feb 28 15:45:29 2013 -0800

    first[1;31mpass[m.c: correct casting around gf_group_bits
    
    gf_group_bits is int64_t remove casts to int.
    
    Change-Id: I3b4225905041fac9af9fdfcbcb6f1c357ea4b593

[33mcommit d962bd530d119eb90ce48794da50203cc313592e[m
Merge: c6421433c ebf8b9fc6
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Feb 27 17:43:03 2013 -0800

    Merge "Fix rollover and [1;31mpass[m 1 time estimate" into experimental

[33mcommit ebf8b9fc6d4dce95afd41b43ca356b6a0c1ee6d4[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Feb 27 11:14:23 2013 -0800

    Fix rollover and [1;31mpass[m 1 time estimate
    
    Fixes a rollover of the cx_time variable for encodes that take
    over ~4200 seconds. Also enable the time estimate in first [1;31mpass[m.
    
    Change-Id: Ib5a98ee71bccd79a804d709cec7260651d0b7141

[33mcommit 04c24078748dc062b97bbb1b2cadb35c1a09703e[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Feb 20 16:32:02 2013 -0800

    convolve test: validate 1D filters are 1D
    
    Since the 8-tap low[1;31mpass[m filter is non-interpolating, the results are
    different between applying it at whole-pel values and not. This
    means that 1D-only versions are requried to be implemented, as
    opposed to being an optimization of the 2D case. Calling the 2D
    filter instead of the horizontal-only filter is not equivalent
    in this case. Update the test to [1;31mpass[m invalid filters to the
    unused stage of the 1D-only calls, to verify they're unused.
    
    Change-Id: Idc1c490f059adadd4cc80dbe770c1ccefe628b0a

[33mcommit 97da8b8c3395ba3de5e13b8d77a8432b9a462b78[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Feb 25 12:36:38 2013 +0000

    Minor rate control refactoring and experiments.
    
    Some minor refactoring code relating to estimates of
    bits per MB at a given Q and estimating the allowed Q range.
    
    Most of the changes here were included in a previous commit.
    This commit seeks to separate out the refactoring from more
    the material changes.
    
    Two #define control flags have been added for experimentation.
    
    ONE_SHOT_Q_ESTIMATE force the two [1;31mpass[m encoder to
    use its initial Q range estimate for the whole clip even if this results
    in a miss on the target data rate. In effect this tightens the Q range
    seen at the expense of rate control accuracy.
    
    DISABLE_RC_LONG_TERM_MEM is a related flag that disables the
    long term memory in the rate control. Local adjustments are still
    made to try and better hit the rate target on a per frame basis but
    the impact of rate control misses is not propagated to the remainder
    of the clip. This means that for example an overshoot early on will not
    cause frames later in the clip to be starved of bits. Again the result
    of this relaxation amy be less rate control accuracy especially on short
    clips.
    
    The flags are disabled by default for now.
    
    Change-Id: I7482f980146d8ea033b5d50cc689f772e4bd119e

[33mcommit 5e0724abad3acbf633961ef4299fd58afa0872d2[m
Merge: 6639b2578 fba9772dd
Author: James Zern <jzern@google.com>
Date:   Fri Feb 22 15:30:14 2013 -0800

    Merge "vp8_first_[1;31mpass[m(): avoid floating point div by 0"

[33mcommit fba9772dd2e1c2eb0b0ef506128e3723a3f069dc[m
Author: James Zern <jzern@google.com>
Date:   Fri Feb 22 11:42:09 2013 -0800

    vp8_first_[1;31mpass[m(): avoid floating point div by 0
    
    Change-Id: Id1e6a12db6b0c1d3f64ead8fd8834aadc30fbed2

[33mcommit 27bce6c5dca72f2686a7c0b9d4db2a4c582d75f0[m
Merge: f356b740f 540997afb
Author: James Zern <jzern@google.com>
Date:   Fri Feb 22 12:32:07 2013 -0800

    Merge "sixtap_predict_test: fix sizes [1;31mpass[med to memset"

[33mcommit 540997afba223a1b9368cbdc3e4e0ff1003d1e37[m
Author: James Zern <jzern@google.com>
Date:   Fri Feb 22 11:29:47 2013 -0800

    sixtap_predict_test: fix sizes [1;31mpass[med to memset
    
    src_/dst_/dst_c_ are heap allocated, use the allocation size rather than
    sizeof(var)
    
    Change-Id: I3335ad487dc9b154cdf212891d1d74c812eff060

[33mcommit aec5bed3db9ac188997109d3a1e81c6b0a028b96[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Feb 5 10:13:25 2013 +0000

    Change rd thresholds and add speed trade off flags.
    
    Experimental tweaks to various thresholds to measure
    quality / speed trade off.
    
    Add flag that allows static segmentation to be turned off
    and disables it unless in the second [1;31mpass[m of a two [1;31mpass[m
    encode.
    
    Change-Id: I219702ffe858412a83db801cbbbd869924b8c61b

[33mcommit c03d45def9ff03fd1ee35070f59928f702e7b8e9[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Feb 6 14:22:17 2013 -0800

    Avoid allocating memory when resizing frames
    
    As long as the new frame is smaller than the size that was originally
    allocated, we don't need to free and reallocate the memory allocated.
    Instead, do the allocation on the size of the first frame. We could
    make this [1;31mpass[med in from the application instead, if we wanted to
    support external upscaling.
    
    Change-Id: I204d17a130728bbd91155bb4bd863a99bb99b038

[33mcommit f8b9f11cb40effa62feba0e27d6a26a4dac0c496[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Fri Jan 25 17:48:18 2013 -0800

    Tweak DropFramesWithoutRecovery params
    
    The previous parameters did not [1;31mpass[m with VP8.
    
    Change-Id: I1505171fbd713d21029541828ebdbe4c7dea79b8

[33mcommit 259b800832bd8555d60895ee68ad108cd515ecb9[m
Author: Adrian Grange <agrange@google.com>
Date:   Thu Dec 20 14:56:19 2012 -0800

    New interpolation filter selection algorithm
    
    Old Scheme:
    When SWITCHABLE filter selection is enabled the encoder
    evaluates the use of each interpolation filter type and
    selects the best one to use at the MB level. A frame-
    level flag can be set to force the use of a particular
    filter type for all MBs in a frame if it is more efficient
    to encode that way. The logic here involved a Q dependent
    threshold that assumed that the second 8-tap filter was
    a high-[1;31mpass[m filter. However, this requires a trip around
    the recode loop. If the frame-level flag indicates use
    of a particular filter, the other filters are not
    evaluated in the pick_mode loop.
    
    New Scheme:
    Each filter type is evaluated at the MB level and a record
    of the best filter is kept, irrespective of what filter
    is signaled at the frame-level. Once all MBs have been
    encoded, a decision is made as to what frame-level mode
    to set for the *next* frame. If one filter is used by 80%
    or more of the MBs, then this filter is forced since it
    is assumed that this will be more efficient if the
    next frame has similar characteristics. i.e. there is a
    one-frame lag between measuring the filter selection and
    setting the frame-level mode to use.
    
    Change-Id: I6a7e7ced8f27e120fafb99db2dc9c6293f8d20f7

[33mcommit d1244659757ff64212f7beebc6c8e45909d5113c[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Dec 5 16:23:38 2012 +0000

    Further changes to mv reference code.
    
    Some further changes and refactoring of mv
    reference code and selection of center point for
    searches. Mainly relates to not [1;31mpass[ming so many
    different local copies of things around.
    
    Some place holder comments.
    
    Change-Id: I309f10ffe9a9cde7663e7eae19eb594371c8d055

[33mcommit 9f53661e8b8cfe288c8c8674810f2291de5cc1f2[m
Merge: 71b188540 88d703cd4
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Nov 9 09:14:06 2012 -0800

    Merge "Fix another crash in vpxenc with --[1;31mpass[m=1 and --test-decode." into experimental

[33mcommit 88d703cd4d7f091b9e5c053cd74170ca6bfcc8ad[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Fri Nov 9 09:07:50 2012 -0800

    Fix another crash in vpxenc with --[1;31mpass[m=1 and --test-decode.
    
    Change-Id: Id23917ce2555519d2e9172dd6ce3a283f2235d26

[33mcommit 7ab951d8cca15dcf7cb74748f9dec0e31c7ab74f[m
Merge: a186eb7f1 606c6479c
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Nov 8 16:30:53 2012 -0800

    Merge changes I18407622,I34057b87 into experimental
    
    * changes:
      fix a crash in 2-[1;31mpass[m encoding with test-decode on
      enable build on windows with msvc

[33mcommit 606c6479c51bba5bad1b50fdbe682aab4b36e2ae[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Nov 8 16:22:54 2012 -0800

    fix a crash in 2-[1;31mpass[m encoding with test-decode on
    
    only call decoding when encoder produce compressed data
    
    Change-Id: I1840762246afaaad76db6c6d29032ad15aa38afd

[33mcommit 982deebb5ed944b280fa4765c9cd6383c47c7ff2[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Tue Oct 30 17:53:32 2012 -0700

    Change name of common top-level structures from VP8 to VP9.
    
    This change encom[1;31mpass[mes VP8_PTR, VP8_COMP, VP8D_COMP, VP8_COMMON,
    VP8Decompressor and VP8Common.
    
    Change-Id: I514ef4ad4e682370f36d656af1c09ee20da216ad

[33mcommit 5acb622f428ff203aebf8310f6b35d2034dc58e6[m
Merge: 42d5e31ef 4c6a2d222
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Oct 30 08:18:39 2012 -0700

    Merge "first[1;31mpass[m: make local symbols static." into experimental

[33mcommit 4c6a2d2221afc49189bfd9ade40d61a820d0ad8b[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Mon Oct 29 21:26:53 2012 -0700

    first[1;31mpass[m: make local symbols static.
    
    Change-Id: Iee0f707abbfe427b10058f6cf3be21b89d6a6e65

[33mcommit 238ed517fdec0e375967e644c36199a21ac5170d[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Sat Oct 13 08:15:51 2012 -0700

    Remove duplicate or unused code in encoder/encodemb.c.
    
    Also make some minor stylistic changes to bring the code closer to
    the style guide. Remove distinction between inter and intra transform
    functions, since both do exactly the same thing except for the check
    against SPLITMV for the second-order transform. Remove some commented
    out debug code. Remove 8x8/16x16 transform code in encode_inter16x16y(),
    since the first-[1;31mpass[m only uses 4x4 anyway.
    
    Change-Id: Ife54816ff759825b9141f95dc2ba43c253c14dba

[33mcommit d6290c3b07301936a768f6e0a8455c20076eec17[m
Merge: 3f5d60b38 307541d9a
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Oct 3 08:28:51 2012 -0700

    Merge "all_builds.py: add ability to [1;31mpass[m extra configure flags" into experimental

[33mcommit 307541d9a94893f11dc84ef219e9b08e034f88d9[m
Author: John Koleszar <jkoleszar@google.com>
Date:   Wed Aug 22 10:48:20 2012 -0700

    all_builds.py: add ability to [1;31mpass[m extra configure flags
    
    Useful to [1;31mpass[m --target etc to this script on Jenkins.
    
    Change-Id: I9b22339a211df543077bcc84bdef4460f3ca5c9c

[33mcommit 525b18391055627ac8fa9bc2998d49fbf4e553c0[m
Author: Christian Duvivier <cduvivier@google.com>
Date:   Wed Aug 15 22:41:32 2012 -0700

    A few more optimizations, about 1% overall speedup.
    
    Unroll horizontal [1;31mpass[m, no more intermediate buffer, faster special transpose.
    
    Change-Id: I05df75be4e5f01420066cdf3c61a2edf35bedb64

[33mcommit 36fe9735a96855095a8dc1a298b6eaeb579783a2[m
Merge: 9b2c63e98 7eb66d82c
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Jun 12 16:29:46 2012 +0000

    Merge "Merge of further two [1;31mpass[m rc clean up and adjustments." into experimental

[33mcommit 7eb66d82ca46377f602b512df789fc21ac20c277[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed May 30 12:54:34 2012 +0100

    Merge of further two [1;31mpass[m rc clean up and adjustments.
    
    Changes to calculation of  sr_coded_error to include 0,0 case.
    
    Experimental use of sr_coded_error in calculating correction factor
    for estimating the allowable Q range.
    
    Reinstated some code needed for calculating section_intra_rating.
    
    Add flash detection in calculation of KF boost
    
    Increased tolerance in testing candidate key frames (needed with
    longer motion search as this tends to slightly increase inter %.
    
    Zbin changes for 8x8.
    
    Other minor adjustments, refactoring and bug fixes.
    
    Reinstated some motion break out clauses in boost loop
    as their removal hurt a few 50fps  clips badly in the std set.
    It may be possible to remove them again later if a better way
    can be found of preventing overly long gf intervals.
    
    Change-Id: Iee686d0c31072828bb1ccd2bc63f5f1c7c548ea2

[33mcommit 289be5211797837305f329074edccdd1490f4bf4[m
Merge: e9818bb69 f63894f69
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri May 25 09:15:27 2012 +0000

    Merge "Experimental change to two [1;31mpass[m prediction decay calculation." into experimental

[33mcommit 6c8fb82c14c8e8356f3ba76f7e55e5067e109966[m
Merge: a29a4e241 acf3c729d
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri May 18 15:43:58 2012 +0000

    Merge "Further first[1;31mpass[m.c changes." into experimental

[33mcommit f63894f691316a7e8bc615c66b99466cf7e2aec3[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed May 16 14:49:30 2012 +0100

    Experimental change to two [1;31mpass[m prediction decay calculation.
    
    Remove dependency on amount and speed of motion as this
    may not behave well across different image sizes.
    
    Tweak impact of % inter.
    
    Add in experimental adjustment based on relative quality of an
    older second reference frame.
    
    Cap range of decay values allowed.
    
    Some small + effect on derf but -ve on yt & hd at this stage.
    
    Change-Id: I390d6f6ebe67a2eb0b834980d0d4650124980d3e

[33mcommit acf3c729d848e2c97c560264578082f985a331ca[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue May 15 18:01:44 2012 +0100

    Further first[1;31mpass[m.c changes.
    
    base the static image test off a measure of 0,0 motion
    instead of the decay accumulator value.
    
    Change "transition to still detection" to compare the
    decay rate from successive frames.
    
    Minor tweak to the arf extra boost given based on the
    number of frames affected.
    
    Removed unused variable mod_err_per_mb_accumulator.
    
    Change-Id: Idd8360083ad409e45f133ce97dd2488259003e64

[33mcommit 520a7a259868756cc116a44759cbf7a4a05e2fd6[m
Merge: 545bc721f 0529320a9
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue May 15 15:04:48 2012 +0000

    Merge "First[1;31mpass[m.c refactoring" into experimental

[33mcommit 545bc721f337a49d3813949ef63ef642009cee25[m
Merge: a1680ad32 e237fd7c5
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue May 15 15:04:14 2012 +0000

    Merge "Two [1;31mpass[m refactoring continued." into experimental

[33mcommit a1680ad3242da554631ef448f79bfa5e04e21c72[m
Merge: b22cc559b 59a5c7d55
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue May 15 14:44:34 2012 +0000

    Merge "Two [1;31mpass[m rc refactoring." into experimental

[33mcommit 0529320a9e7082648f7cbec421103d80c38b67b2[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue May 15 14:58:13 2012 +0100

    First[1;31mpass[m.c refactoring
    
    Removed unused function.
    
    Added tentative code to take error score of an older frame
    into account when calculating Q range. However, for now
    it is disabled pending merging other changes and testing.
    
    Change-Id: Ie89955e70319dac31b79e3b833e3352712a061ec

[33mcommit 3536ad5bb9a630e58bd6503423023b16b40b201e[m
Merge: 023304e4f 35358320e
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue May 15 10:05:16 2012 +0000

    Merge "First [1;31mpass[m overhaul preparatory change." into experimental

[33mcommit e237fd7c5ad8c0caf341ca50a4ea65495edce74f[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon May 14 15:13:26 2012 +0100

    Two [1;31mpass[m refactoring continued.
    
    Remove testing of whether we estimate that it will be possible
    to code an arf at a lower Q than the ambient Q.  This adds quite
    a bit of extra code and complexity for marginal gain.
    
    Factored out some code relating to ARNR selection to a separate
    function as this is likely to be changed / simplified soon.
    
    Change-Id: Ia1cf060405637ef5bbf7018355437be21d12375f

[33mcommit 59a5c7d5506385b2a034ee2e0a871ea7703f09f1[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon May 14 14:54:54 2012 +0100

    Two [1;31mpass[m rc refactoring.
    
    Removed odd *100 >> 4 factor from boost calculations. Not all the
    calculations exactly match what was there before so there may be
    some minor impact on results.
    
    Some other minor tidying up in regard to coding conventions.
    
    The specific values of factors and thresholds will likely change as
    part of subsequent patches.
    
    Change-Id: Id976321484ac02ba50294cf54fafbc17dda85686

[33mcommit 35358320e33b6602c5dd728367cf3db77f1f9af9[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri May 11 18:07:33 2012 +0100

    First [1;31mpass[m overhaul preparatory change.
    
    This is the first patch in a series of changes to the first
    [1;31mpass[m code. (Broken down for ease of testing/merging/review).
    
    This patch introduces a new stats element "sr_coded_error".
    This is the coded error recorded vs the second reference
    frame (which is updated such that it lags by at least one frame).
    No use is made of the new structure in this change so this patch
    should have no material effect.
    
    Removed some ifdefs and deprecated code (#if NEW_BOOST).
    Removed two[1;31mpass[m.gf_decay_rate (not used any more)
    
    Change-Id: I1be672a73017f7c13fd50fb4f99236aa2ed30916

[33mcommit 13c6d1a8c80bea1eccf21bbd267afbb3825d2797[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Apr 11 15:44:14 2012 +0100

    Refactoring of encode loop and bitstream packing
    
    Some code re-factored / moved to allow the main
    pack operation inside the recode loop so  that the
    size estimate is accurate.
    
    Deletion of some redundant code relating to one [1;31mpass[m.
    
    Aproximate improvement over March 27 code base:
    Derf 0.0%, YT 0.5%, YThd 0.3% Std_hd 0.25%
    
    Change-Id: Id2d071794ab44f0b52935f6fcdb5733d09a6bb86

[33mcommit c88d335f7d204bd7529d386c8f30f77b6e81c0ad[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Mar 21 18:22:33 2012 +0000

    Only support improved quant
    
    Deprecate fast quant and strict_quant code.
    Small effect on quality as fast was used in first [1;31mpass[m but the
    effect is basically neutral across the derf set.
    
    The rationale here is to reduce the number of code paths for
    now to make experimentation easier. Optimized and fast code
    options can be re-introduced later along with other  encode
    speed options.
    
    Change-Id: Ia30c5daf3dbc52e72c83b277a1d281e3c934cdad

[33mcommit 6035da5448392244936f1e1a9079e7f6cd857ffe[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Fri Mar 9 17:32:50 2012 -0800

    WebM Experimental Codec Branch Snapshot
    
    This is a code snapshot of experimental work currently ongoing for a
    next-generation codec.
    
    The codebase has been cut down considerably from the libvpx baseline.
    For example, we are currently only supporting VBR 2-[1;31mpass[m rate control
    and have removed most of the code relating to coding speed, threading,
    error resilience, partitions and various other features.  This is in
    part to make the codebase easier to work on and experiment with, but
    also because we want to have an open discussion about how the bitstream
    will be structured and partitioned and not have that conversation
    constrained by past work.
    
    Our basic working pattern has been to initially encapsulate experiments
    using configure options linked to #IF CONFIG_XXX statements in the
    code. Once experiments have matured and we are reasonably happy that
    they give benefit and can be merged without breaking other experiments,
    we remove the conditional compile statements and merge them in.
    
    Current changes include:
    * Temporal coding experiment for segments (though still only 4 max, it
      will likely be increased).
    * Segment feature experiment - to allow various bits of information to
      be coded at the segment level. Features tested so far include mode
      and reference frame information, limiting end of block offset and
      transform size, alongside Q and loop filter parameters, but this set
      is very fluid.
    * Support for 8x8 transform - 8x8 dct with 2nd order 2x2 haar is used
      in MBs using 16x16 prediction modes within inter frames.
    * Compound prediction (combination of signals from existing predictors
      to create a new predictor).
    * 8 tap interpolation filters and 1/8th pel motion vectors.
    * Loop filter modifications.
    * Various entropy modifications and changes to how entropy contexts and
      updates are handled.
    * Extended quantizer range matched to transform precision improvements.
    
    There are also ongoing further experiments that we hope to merge in the
    near future: For example, coding of motion and other aspects of the
    prediction signal to better support larger image formats, use of larger
    block sizes (e.g. 32x32 and up) and lossless non-transform based coding
    options (especially for key frames). It is our hope that we will be
    able to make regular updates and we will warmly welcome community
    contributions.
    
    Please be warned that, at this stage, the codebase is currently slower
    than VP8 stable branch as most new code has not been optimized, and
    even the 'C' has been deliberately written to be simple and obvious,
    not fast.
    
    The following graphs have the initial test results, numbers in the
    tables measure the compression improvement in terms of percentage. The
    build has  the following optional experiments configured:
    --enable-experimental --enable-enhanced_interp --enable-uvintra
    --enable-high_precision_mv --enable-sixteenth_subpel_uv
    
    CIF Size clips:
    http://getwebm.org/tmp/cif/
    HD size clips:
    http://getwebm.org/tmp/hd/
    (stable_20120309 represents encoding results of WebM master branch
    build as of commit#7a15907)
    
    They were encoded using the following encode parameters:
    --good --cpu-used=0 -t 0 --lag-in-frames=25 --min-q=0 --max-q=63
    --end-usage=0 --auto-alt-ref=1 -p 2 --[1;31mpass[m=2 --kf-max-dist=9999
    --kf-min-dist=0 --drop-frame=0 --static-thresh=0 --bias-pct=50
    --minsection-pct=0 --maxsection-pct=800 --sharpness=0
    --arnr-maxframes=7 --arnr-strength=3(for HD,6 for CIF)
    --arnr-type=3
    
    Change-Id: I5c62ed09cfff5815a2bb34e7820d6a810c23183c

[33mcommit c64a27801c76593074aac18561175251ab897653[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Fri Feb 24 09:08:00 2012 -0800

    Changing default 8-tap filter to Langrangian interpolator.
    
    The Lagrangian interpolation filter is maximally flat in the
    [1;31mpass[mband. There is non-trivial improvement with the hd set, while
    for derf the results are virtually unchanged.
    See:
    http://www.corp.google.com/~debargha/vp8_results/enhinterpn.html (derf)
    http://www.corp.google.com/~debargha/vp8_results/enhinterpn_hd.html (HD)
    
    Patch 2: Updated the results for derf in the html above to use the
    new baseline. There is still about 4% improvement. Will update the
    hd baseline later (since it takes 9 hours to run on my machine)
    
    Patch 3: By mistake the default filter was left at 60 - should be 0
    to use the new interpolation filter.
    
    Change-Id: If5f64444976562415d68a2aeabb94fdfa0d47890

[33mcommit 4cfb8ed4c93a7ddcd3b93b8d588251f05e608245[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Feb 17 16:29:03 2012 +0000

    Code base simplification.
    
    Removal of most code to do with 1 [1;31mpass[m.
    Removal of cyclic refresh code.
    
    Change-Id: I74971082bc19dd76e795d4d2e781a0424cec5c8c

[33mcommit 79d330d7d5f948f66c38fc7a7bddb24134189ba8[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Feb 16 17:02:17 2012 +0000

    Code simplification
    
    Removal of the pickinter.c and .h files and calls to this
    code.
    
    Removal of some code relating to real time and one [1;31mpass[m
    settings  though there is more to be done in this regard.
    
    However,  vp8_set_speed_features() now
    only supports modes 0 and 1 and speeds up to 3
    so rd should always be set.
    
    Change-Id: I62c0c1b6154ab499785baef310536080e87bc4d8

[33mcommit f64725a0097819edf124fc15d300c77b2b42f744[m
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Thu Feb 9 16:12:23 2012 -0800

    Improved coding using 8x8 transform
    
    In summary, this commit encom[1;31mpass[mes a series of changes in attempt to
    improve the 8x8 transform based coding to help overall compression
    quality, please refer to the detailed commit history below for what
    are the rationale underly the series of changes:
    
    a. A frame level flag to indicate if 8x8 transform is used at all.
    b. 8x8 transform is not used for key frames and small image size.
    c. On inter coded frame, macroblocks using modes B_PRED, SPLIT_MV
    and I8X8_PRED are forced to using 4x4 transform based coding, the
    rest uses 8x8 transform based coding.
    d. Encoder and decoder has the same assumption on the relationship
    between prediction modes and transform size, therefore no signaling
    is encoded in bitstream.
    e. Mode decision process now calculate the rate and distortion scores
    using their respective transforms.
    
    Overall test results:
    1. HD set
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/HD_t8x8_20120206.html
    (avg psnr: 3.09% glb psnr: 3.22%, ssim: 3.90%)
    2. Cif set:
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/cif_t8x8_20120206.html
    (avg psnr: -0.03%, glb psnr: -0.02%, ssim: -0.04%)
    It should be noted here, as 8x8 transform coding itself is disabled
    for cif size clips, the 0.03% loss is purely from the 1 bit/frame
    flag overhead on if 8x8 transform is used or not for the frame.
    
    ---patch history for future reference---
    Patch 1:
    this commit tries to select transform size based on macroblock
    prediction mode. If the size of a prediction mode is 16x16, then
    the macroblock is forced to use 8x8 transform. If the prediction
    mode is B_PRED, SPLITMV or I8X8_PRED, then the macroblock is forced
    to use 4x4 transform. Tests on the following HD clips showed mixed
    results: (all hd clips only used first 100 frames in the test)
    
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hdmodebased8x8.html
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hdmodebased8x8_log.html
    
    while the results are mixed and overall negative, it is interesting to
    see 8x8 helped a few of the clips.
    
    Patch 2:
    this patch tries to hard-wire selection of transform size based on
    prediction modes without using segmentation to signal the transform size.
    encoder and decoder both takes the same assumption that all macroblocks
    use 8x8 transform except when prediciton mode is B_PRED, I8X8_PRED or
    SPLITMV. Test results are as follows:
    
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/cifmodebase8x8_0125.html
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hdmodebased8x8_0125log.html
    
    Interestingly, by removing the overhead or coding the segmentation, the
    results on this limited HD set have turn positive on average.
    
    Patch 3:
    this patch disabled the usage of 8x8 transform on key frames, and kept the
    logic from patch 2 for inter frames only. test results on HD set turned
    decidedly positive with 8x8 transform enabled on inter frame with 16x16
    prediction modes: (avg psnr: .81% glb psnr: .82 ssim: .55%)
    
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hdintermode8x8_0125.html
    results on cif set still negative overall
    
    Patch 4:
    continued from last patch, but now in mode decision process, the rate and
    distortion estimates are computed based on 8x8 transform results for MBs
    with modes associated with 8x8 transform. This patch also fixed a problem
    related to segment based eob coding when 8x8 transform is used. The patch
    significantly improved the results on HD clips:
    
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/hd8x8RDintermode.html
    (avg psnr: 2.70% glb psnr: 2.76% ssim: 3.34%)
    results on cif also improved, though they are still negative compared to
    baseline that uses 4x4 transform only:
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/cif8x8RDintermode.html
    (avg psnr: -.78% glb psnr: -.86% ssim: -.19%)
    
    Patch 5:
    This patch does 3 things:
    a. a bunch of decoder bug fixes, encodings and decodings were verified
    to have matched recon buffer on a number of encodes on cif size mobile and
    hd version of _pedestrian.
    b. the patch further improved the rate distortion calculation of MBS that
    use 8x8 transform. This provided some further gain on compression.
    c. the patch also got the experimental work SEG_LVL_EOB to work with 8x8
    transformed macroblock, test results indicates it improves the cif set
    but hurt the HD set slightly.
    
    Tests results on HD clips:
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/HD_t8x8_20120201.html
    (avg psnr: 3.19% glb psnr: 3.30% ssim: 3.93%)
    
    Test results on cif clips:
    http://www.corp.google.com/~yaowu/no_crawl/t8x8/cif_t8x8_20120201.html
    (avg psnr: -.47% glb psnr: -.51% ssim: +.28%)
    
    Patch 6:
    Added a frame level flag to indicate if 8x8 transform is allowed at all.
    temporarily the decision is based on frame size, can be optimized later
    one. This get the cif results to basically unchanged, with one bit per
    frame overhead on both cif and hd clips.
    
    Patch 8:
    Rebase and Merge to head by PGW.
    Fixed some suspect 4s that look like hey should be 64s in regard
    to segmented EOB. Perhaps #defines would be bette.
    Bulit and tested without T8x8 enabled and produces unchanged
    output.
    
    Patch 9:
    Corrected misalligned code/decode of "txfm_mode" bit.
    Limited testing for correct encode and decode with
    T8x8 configured on derf clips.
    
    Change-Id: I156e1405d25f81579d579dff8ab9af53944ec49c

[33mcommit 6fa47a5f16cb5631713ccc03d9b11f5345564abe[m
Author: Deb Mukherjee <debargha@google.com>
Date:   Mon Jan 16 11:21:12 2012 -0800

    Adds support for enhanced interpolation for subpel motion
    using an 8-tap filter.
    
    The results with 3 different 8-tap filters on the derf set are in:
    http://www.corp.google.com/~debargha/vp8_results/enhinterp.html
    The one that gives the most gain achieves an overall gain of about
    0.6%. The results for a set of 12 hd (720p) videos are in:
    http://www.corp.google.com/~debargha/vp8_results/enhinterp_hd.html
    with max gain of 0.55% with the same filter. The best filter apparently
    achieves the best trade-off between [1;31mpass[m band ripple and stop band
    attenuation.
    
    Change-Id: I919e28ae245c0493147fa0864f8c9d048a9dd530

[33mcommit 8487a68baf32fc86af55c39cc7fd06c3444523d5[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Dec 2 14:57:21 2011 +0000

    Further work on extended Q range.
    
    Fixed some further QIndex related issues and replaced some tables
    (eg zbin and rounding)
    
    Also Added function (currently disabled by default) to populate the
    main AC and DC quantizer tables. Using the original AC range the
    resulting computed DC values give behavior broadly comparable
    on the DERF set. That is not to say that the equations will hold good
    over a more extended range. The purpose of this code is to make it
    easier to experiment with further alterations to the Q range and distribution
    of Q values plus the relative weights given to AC and DC.
    
    The function find_fp_qindex() ensures that changes to the Q tables
    are reflected in the value [1;31mpass[med in to the first [1;31mpass[m code.
    
    Slight experimental adjustment to static segment Q offset.
    
    Change-Id: I36186267d55dfc2a3d565d0cff7218ef300d1cd5

[33mcommit 99df6bb62959bfda82c0d636105d8239f147715a[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Nov 24 18:25:03 2011 +0000

    Further work on extended Q range.
    
    Fixed bug in firs[1;31mpass[m.c call to vp8_initialize_rd_consts()
    
    This was [1;31mpass[ming in vp8_dc_quant(cm->base_qindex, cm->y1dc_delta_q)
     instead of (cm->base_qindex + cm->y1dc_delta_q).
    
    It just so happens that for the value 26 used for cm->base_qindex in the
    unextended Q case,  the two give similar results. However, when using
    the extended Q range the two are very different.
    
    Also added more stats output and partly disabled another broken feature.
    
    Change-Id: Iddf6cf5ea8467c44b7c133f38e629f6ba6f2581e

[33mcommit ee2051f6500cf2a576a50f966c5e43df42430f86[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Nov 23 17:18:31 2011 +0000

    Two [1;31mpass[m rate control code changes.
    
    This comitt brings accross changes from the public branch
    commit number Icf74d13af77437c08602571dc7a97e747cce5066.
    
    The main puurpose of this comit relates to CQ mode but it
    also includes some refactoring of the two [1;31mpass[m code which
    I hope will make tuning the experimental branch for the new
    quantizer range a little less painfull.
    
    Change-Id: I278e989436a928fc1fe7761068960048f9d7a376

[33mcommit 9bac509ac505910a316bf3879ab57a2283920057[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Nov 21 14:18:11 2011 +0000

    Extended Q range Experiment.
    
    Corrected dc lookup table to maintain ac/dc balance
    close to what it was previously.
    
    First[1;31mpass[m not being [1;31mpass[med the adjusted Q index for
    the extended range.
    
    Change-Id: Ic0200dabda445fea03bf81067999cb2670e99b77

[33mcommit 0867b8167899b9df7a0b40bbc416abd359ac0ac8[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon Nov 1 14:04:01 2010 -0700

    remove low [1;31mpass[m filtering from two 4x4 intra prediction
    
    In the process of developing new intra prediction modes, tests have
    shown removal of the low [1;31mpass[m filtering from B_HE_PRED and B_VE_PRED
    has an overall minor positive impact in both PSNR and SSIM metric.
    Overall difference is about 0.1%. The change shall also have a small
    positive impact on speed. Intuitively, this change should also reduce
    some of the tendency of "flattening"
    
    Change-Id: I3c43b0daca833c6eff77d00f19c811f9ef9368a3
