Searching between v1.7.0 and v1.8.0
Keywords: slow, fast, time, perf(ormance), optim(ize), regression
Additional keywords: quality,bitrate
Keywords: slow fast time perf optim regression speed quality bitrate
For keyword slow:
[33mcommit 5fbc7a286b4d72883392fdbb10ec52bace662f66[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Fri Nov 30 15:42:57 2018 -0800

    quantize 32x32: saturate dqcoeff on x86
    
    This [1;31mslow[ms down low bitdepth builds but is necessary to obtain correct
    values.
    
    BUG=webm:1448
    
    Change-Id: I4ca9145f576089bb8496fcfeedeb556dc8fe6574

[33mcommit c176e6490403076105faa2a07f275d31ec61d2a3[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Oct 25 13:37:50 2018 -0700

    vpx postproc: rewrite in intrinsics
    
    About ~10% faster on 64bit but ~10% [1;31mslow[mer on 32
    
    Removes the assembly usage of vpx_rv.
    
    Change-Id: I214698fb5677f615dee0a8f5f5bb8f64daf2565e

[33mcommit 2a17bb071791ffb75a08d65586b433465e9e4698[m
Author: Jerome Jiang <jianj@google.com>
Date:   Mon Aug 13 11:28:28 2018 -0700

    vp9: Remove good mode and speed 0-4 from some datarate tests.
    
    Low speeds in good mode are too [1;31mslow[m.
    
    Move CBR large tests to non-'Large' ones such that they can run in
    Jenkins per commit.
    
    Change-Id: I1da73ca96ee89abcf3566d51ff52f1f2e904a048

[33mcommit b1284dffdb16b82e940e39b226b656801c83289b[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jul 12 09:02:01 2018 -0700

    Reland "Enable tpl model for speed 0"
    
    This is a reland of 9c2c234a0b8f9c08719ac1fa286988a0a3626fd0
    
    Threaded mismatch has been addressed.
    
    Original change's description:
    > Enable tpl model for speed 0
    >
    > Enable adaptive Lagrangian multiplier for arf in speed 0, AQ mode 0,
    > and low bit-depth settings. This improves the peak compression
    > performance:
    >
    >           avg PSNR       overall PSNR       SSIM
    > low       -0.462%         -0.535%          -0.358%
    > mid       -0.780%         -0.857%          -0.868%
    > hd        -0.914%         -1.017%          -0.471%
    > 720p      -0.624%         -0.671%          -1.553%
    > nflx2k    -0.764%         -0.784%          -0.908%
    >
    > The encoding time at speed 0 is slightly changed to be faster or
    > [1;31mslow[mer:
    >
    > city_cif 1000 kbps
    > 78.2 seconds -> 78.1 seconds
    >
    > bus_cif 1000 kbps
    > 98.6 seconds -> 98.8 seconds.
    >
    > Change-Id: I18e7337bb61d985cbd3cf29e56439a6cdf675389
    
    BUG=webm:1547
    
    Change-Id: I025a21683ceed23d5f7147e200555b58b791315c

[33mcommit 9c2c234a0b8f9c08719ac1fa286988a0a3626fd0[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jul 12 09:02:01 2018 -0700

    Enable tpl model for speed 0
    
    Enable adaptive Lagrangian multiplier for arf in speed 0, AQ mode 0,
    and low bit-depth settings. This improves the peak compression
    performance:
    
              avg PSNR       overall PSNR       SSIM
    low       -0.462%         -0.535%          -0.358%
    mid       -0.780%         -0.857%          -0.868%
    hd        -0.914%         -1.017%          -0.471%
    720p      -0.624%         -0.671%          -1.553%
    nflx2k    -0.764%         -0.784%          -0.908%
    
    The encoding time at speed 0 is slightly changed to be faster or
    [1;31mslow[mer:
    
    city_cif 1000 kbps
    78.2 seconds -> 78.1 seconds
    
    bus_cif 1000 kbps
    98.6 seconds -> 98.8 seconds.
    
    Change-Id: I18e7337bb61d985cbd3cf29e56439a6cdf675389

[33mcommit 5ef063ed275a61afc467e4f48350e7c0f29af3c0[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jun 14 10:04:03 2018 -0700

    Add temporal model control as a speed feature
    
    The model construction would incur 15% [1;31mslow[mdown for speed 2. The
    speed change on speed 0 is unnoticeable.
    
    The current speed features set up would DISABLE temporal dependency
    model for all speed settings.
    
    Change-Id: Ic45dd962f3a54a8f5f0452502dc05e352dc09ca1

[33mcommit 14b21b84e3a396d8548c863c0105a2bc4485c39d[m
Author: James Zern <jzern@google.com>
Date:   Wed Jan 31 23:38:47 2018 -0800

    vp9_scale_test: parameterize filter type
    
    this allows the test to be sharded more efficiently and speeds up the
    run when built with [1;31mslow[mer configs, e.g., asan.
    
    Change-Id: If6d863b76871e3934704a1079bbf17f4886932c7
For keyword fast:
[33mcommit 43a30d3a1a6b627fa05ba63f4c51414ced781ccb[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Nov 12 11:30:03 2018 -0800

    quantize: use aarch64 vmaxv
    
    Simplify max value calculation on aarch64 by using vmaxv. Much
    [1;31mfast[mer for 4x4 but diminishing returns as the block size grows.
    
    Only the vp9 quantize has a speed test hooked up. Anticipate
    similar results for the other quantize versions.
    
    Before:
    [ RUN      ] NEON/VP9QuantizeTest.DISABLED_Speed/2
    [    BENCH ]      Bypass calculations       4x4  31.6 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations       4x4  31.6 ms ( Â±0.0 ms )
    [    BENCH ]      Bypass calculations       8x8  17.7 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations       8x8  17.7 ms ( Â±0.0 ms )
    [    BENCH ]      Bypass calculations     16x16  14.2 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations     16x16  14.2 ms ( Â±0.0 ms )
    [       OK ] NEON/VP9QuantizeTest.DISABLED_Speed/2 (1906 ms)
    [ RUN      ] NEON/VP9QuantizeTest.DISABLED_Speed/3
    [    BENCH ]      Bypass calculations     32x32  18.6 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations     32x32  18.6 ms ( Â±0.0 ms )
    
    After:
    [ RUN      ] NEON/VP9QuantizeTest.DISABLED_Speed/2
    [    BENCH ]      Bypass calculations       4x4  29.1 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations       4x4  29.1 ms ( Â±0.0 ms )
    [    BENCH ]      Bypass calculations       8x8  16.9 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations       8x8  16.9 ms ( Â±0.0 ms )
    [    BENCH ]      Bypass calculations     16x16  14.1 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations     16x16  14.1 ms ( Â±0.0 ms )
    [       OK ] NEON/VP9QuantizeTest.DISABLED_Speed/2 (1803 ms)
    [ RUN      ] NEON/VP9QuantizeTest.DISABLED_Speed/3
    [    BENCH ]      Bypass calculations     32x32  18.6 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations     32x32  18.6 ms ( Â±0.0 ms )
    
    Change-Id: Ic95812b3fdbd4e47b4dcb8ed46c68a9617de38d2

[33mcommit c176e6490403076105faa2a07f275d31ec61d2a3[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Oct 25 13:37:50 2018 -0700

    vpx postproc: rewrite in intrinsics
    
    About ~10% [1;31mfast[mer on 64bit but ~10% slower on 32
    
    Removes the assembly usage of vpx_rv.
    
    Change-Id: I214698fb5677f615dee0a8f5f5bb8f64daf2565e

[33mcommit 5caec339bea5e37ae8707f9d783feb2aa51cd111[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Oct 25 12:23:03 2018 -0700

    vp8 bilinear: rewrite 4x4
    
    ~20% [1;31mfast[mer than the MMX. Removes the last usage of
    vp8_bilinear_filters_x86_[48].
    
    Change-Id: Iee976fab9655d0020440f26c4403ce50103af913

[33mcommit ad0ed535a702ebe4164c0bf5fd5f3211269f1fad[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Wed Oct 24 15:48:32 2018 -0700

    vp8 bilinear: rewrite 16x16
    
    Marginally [1;31mfast[mer. Most importantly it drops a dependency on an
    external symbol (vp8_bilinear_filters_x86_8).
    
    Change-Id: Iff022e718720f1f0eeced6201a1ad69a9c9c4f45

[33mcommit 6f35ac956b8315b466c7f66af1172fbc473f1464[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Wed Oct 24 12:22:35 2018 -0700

    vp8 bilinear: rewrite in intrinsics
    
    8x8 is 15% [1;31mfast[mer than the assembly. 8x4 is 200% [1;31mfast[mer than MMX.
    
    Remove MMX version.
    
    Change-Id: I55642ebd276db265911f2c79616177a3a9a7e04f

[33mcommit 0bedb351ff8e3a323b9950b72dfed7cb8154e73d[m
Author: Hui Su <huisu@google.com>
Date:   Mon Oct 15 20:45:07 2018 -0700

    ML_VAR_PARTITION: enable at speed 5
    
    When the ML_VAR_PARTITION experiment is turned on, replace
    REFERENCE_PARTITION with ML_BASED_PARTITION at speed 5.
    
    Coding gains(avg_psnr) compared to baseline:
    ytlivehr  1.63%
    ytlivelr  0.07%
    
    Tested encoding speed with several clips from ytlivehr and ytlivelr
    on linux desktop(rt, vbr, 4 threads). Encoder speed is on average
    [1;31mfast[mer than baseline:
    360p:   14% [1;31mfast[mer
    720p:    7% [1;31mfast[mer
    1080p: 1.5% [1;31mfast[mer
    
    Change-Id: I39b00078176ff516f7306818f33ba2b1ea53dfa1

[33mcommit af4cd92629d039e06a68cf3fc6cdbbf4cfcfd05a[m
Author: Chi Yo Tsai <chiyotsai@google.com>
Date:   Thu Oct 18 09:34:20 2018 -0700

    Changes 4-tap SSSE3 filter to 8-tap AVX2 filter.
    
    AVX2's 8-tap filter is slightly [1;31mfast[mer than 4-tap SSSE3 filter.
    
    Change-Id: I5fc37c431670780108706b206b32c791828555c9

[33mcommit 272f46212ed96ee8c28056752c8da392229b8e17[m
Author: Chi Yo Tsai <chiyotsai@google.com>
Date:   Tue Oct 16 17:50:37 2018 -0700

    Add SSE2 support for 4-tap interpolation filter for width 16.
    
    Horizontal filter on 64x64 block: 1.59 times as [1;31mfast[m as baseline.
    Vertical filter on 64x64 block: 2.5 times as [1;31mfast[m as baseline.
    2D filter on 64x64 block: 1.96 times as [1;31mfast[m as baseline.
    
    Change-Id: I12e46679f3108616d5b3475319dd38b514c6cb3c

[33mcommit 545bd0ca0e0c92383c159dfbfda300d28fb4ca05[m
Author: Hui Su <huisu@google.com>
Date:   Mon Aug 27 17:32:05 2018 -0700

    Skip unnecessary motion search
    
    If a ref frame is masked out, we do not need to do motion search for it.
    It makes speed 0 a little [1;31mfast[mer.
    
    Change-Id: I68f71255b2798b24fd1d5b28ed24a2ef87251413

[33mcommit 2b2a757199a9ea84528102778bcdccc54fa6ee54[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Jul 30 09:25:14 2018 -0700

    vp9: Add flatness metric to cyclic refresh setup.
    
    For screen-content with aq-mode = 3: identify spatial
    flat superblocks in the setup stage and don't mark them as
    candidates for refresh. Spatially flat blocks are already
    removed from refresh at a later stage in the encoding (in pick_mode),
    but doing this at the setup stage of cyclic refresh (before encoding)
    allows refresh to more quickly hit the text areas. Only drawback is
    an extra source variance calculation for a set of superblocks on
    each frame.
    
    Adjust the refresh rate: lower it to reduce overshoot since
    more texture areas are hit [1;31mfast[mer with this change.
    
    Change-Id: I88fa20e52fdbf1a938ae814f9b48c887f1f909d2

[33mcommit 25d6542251a535e48c4067f05013057b77d73801[m
Author: Hui Su <huisu@google.com>
Date:   Wed Aug 1 15:43:05 2018 -0700

    Handle partition cost better in RD search
    
    Take partition cost into consideration during rectangular partition
    mode search.
    
    Compression change is neutral. Encoding speed can be a little [1;31mfast[mer
    at low quality settings. With QP=55 at speed 0, average speed up over
    15 midres sequences is about 2.7%.
    
    Change-Id: I6d423459675b5f1e4e1475dbbf6f67ab970a4832

[33mcommit b1284dffdb16b82e940e39b226b656801c83289b[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jul 12 09:02:01 2018 -0700

    Reland "Enable tpl model for speed 0"
    
    This is a reland of 9c2c234a0b8f9c08719ac1fa286988a0a3626fd0
    
    Threaded mismatch has been addressed.
    
    Original change's description:
    > Enable tpl model for speed 0
    >
    > Enable adaptive Lagrangian multiplier for arf in speed 0, AQ mode 0,
    > and low bit-depth settings. This improves the peak compression
    > performance:
    >
    >           avg PSNR       overall PSNR       SSIM
    > low       -0.462%         -0.535%          -0.358%
    > mid       -0.780%         -0.857%          -0.868%
    > hd        -0.914%         -1.017%          -0.471%
    > 720p      -0.624%         -0.671%          -1.553%
    > nflx2k    -0.764%         -0.784%          -0.908%
    >
    > The encoding time at speed 0 is slightly changed to be [1;31mfast[mer or
    > slower:
    >
    > city_cif 1000 kbps
    > 78.2 seconds -> 78.1 seconds
    >
    > bus_cif 1000 kbps
    > 98.6 seconds -> 98.8 seconds.
    >
    > Change-Id: I18e7337bb61d985cbd3cf29e56439a6cdf675389
    
    BUG=webm:1547
    
    Change-Id: I025a21683ceed23d5f7147e200555b58b791315c

[33mcommit 9c2c234a0b8f9c08719ac1fa286988a0a3626fd0[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jul 12 09:02:01 2018 -0700

    Enable tpl model for speed 0
    
    Enable adaptive Lagrangian multiplier for arf in speed 0, AQ mode 0,
    and low bit-depth settings. This improves the peak compression
    performance:
    
              avg PSNR       overall PSNR       SSIM
    low       -0.462%         -0.535%          -0.358%
    mid       -0.780%         -0.857%          -0.868%
    hd        -0.914%         -1.017%          -0.471%
    720p      -0.624%         -0.671%          -1.553%
    nflx2k    -0.764%         -0.784%          -0.908%
    
    The encoding time at speed 0 is slightly changed to be [1;31mfast[mer or
    slower:
    
    city_cif 1000 kbps
    78.2 seconds -> 78.1 seconds
    
    bus_cif 1000 kbps
    98.6 seconds -> 98.8 seconds.
    
    Change-Id: I18e7337bb61d985cbd3cf29e56439a6cdf675389

[33mcommit 740782f8cd899bb35782a0527c688de8127eee76[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Apr 18 17:15:16 2018 -0700

    vp9: Rate control fix for CBR mode.
    
    For CBR mode: modify the qp clamping to allow q to respond
    [1;31mfast[mer to overshoot. Can reduce some suprious overshoot events
    observed in screen content coding.
    
    Change-Id: I0b3f54b0d1b4086182f834e557a4121950b176d4

[33mcommit 55db4f033f637e3e5ef326da5cf27e708b1336c0[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Jan 4 14:20:59 2018 -0800

    vp9: Increase convergence speed of noise estimation.
    
    Increase the recursive average factor from 15/16 to 3/4
    to make the noise estimation respond [1;31mfast[mer.
    
    Small/neglible change on low noise content, but better
    denoising for noisy content.
    Also encoder speedup of ~2-3% observed on some noisy clips.
    
    Change-Id: I9dd02fe961ca24b411fe4c2732f814bf1e9a7f9f
For keyword time:
[33mcommit 06983668cf41f66765528db044419f954e5a5d64[m
Author: James Zern <jzern@google.com>
Date:   Sat Dec 22 09:26:29 2018 -0500

    Revert "Add Tile-SB-Row based Multi-threading in Decoder"
    
    This reverts commit 02b3ef7faee5be5ee519856fbb3523d3ab49f6e7.
    
    Reason for revert: fails to build under visual studio
    
    Original change's description:
    > Add Tile-SB-Row based Multi-threading in Decoder
    >
    > Add the multi-thread function that decodes a video row by row instead
    > of a tile at a [1;31mtime[m. Create a job queue for queueing all parse and recon jobs.
    > Each SB row of a tile is a job.
    >
    > Performance Improvement:
    >
    > Platform        Resolution      3 Threads       4 Threads
    > ARM             720p            36.81%          18.37%
    >                 1080p           32.27%          14.76%
    >
    > ARM Improvement measured on Nexus 6 Snapdragon 805 Quad-core  @ 2.65 GHz
    >
    > Change-Id: I3d4dd7a932fc2904c90d9546b2de99c809afd29e
    
    BUG=webm:1587
    
    Change-Id: Ia4c8f5128922a205cd9fd83aaef8a2e73764d4a7

[33mcommit 02b3ef7faee5be5ee519856fbb3523d3ab49f6e7[m
Author: Ritu Baldwa <ritu.baldwa@ittiam.com>
Date:   Tue Dec 18 17:39:38 2018 +0530

    Add Tile-SB-Row based Multi-threading in Decoder
    
    Add the multi-thread function that decodes a video row by row instead
    of a tile at a [1;31mtime[m. Create a job queue for queueing all parse and recon jobs.
    Each SB row of a tile is a job.
    
    Performance Improvement:
    
    Platform        Resolution      3 Threads       4 Threads
    ARM             720p            36.81%          18.37%
                    1080p           32.27%          14.76%
    
    ARM Improvement measured on Nexus 6 Snapdragon 805 Quad-core  @ 2.65 GHz
    
    Change-Id: I3d4dd7a932fc2904c90d9546b2de99c809afd29e

[33mcommit 368200a80758234b96bf61776bc79133d21f4317[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Dec 17 18:39:22 2018 -0800

    vp9-svc: Fix condition in real-[1;31mtime[m speed setting
    
    Remove the "spatial_layer_id == 0" condition in
    the speed features for setting the motion search
    for screen content.
    
    Change-Id: Ib47aea3af5f3b2e04226694b4126b2ae2f458f13

[33mcommit db41138a09f4fdfe6bb4382e3ec9717ea315635d[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Dec 17 15:12:04 2018 -0800

    vp9-svc: Adjust search step param for spatial layers
    
    For non-base spatial layer in screen-content mode:
    use nstep but with larger step_param value than sl0,
    to avoid increase in encode_[1;31mtime[m.
    Some improvement on scrolling slides content.
    
    Change-Id: Ica918ac01664431d1fabb3c674d857cf6ad87414

[33mcommit f6a002f2a67579cce9d53a4314f0676228517c12[m
Author: Sai Deng <sdeng@google.com>
Date:   Tue Oct 30 14:08:07 2018 -0700

    Add satd avx2 implementation
    
    Speed Test:
    C/SatdHighbdTest
    blocksize:   16 [1;31mtime[m:  138 us
    blocksize:   64 [1;31mtime[m:  315 us
    blocksize:  256 [1;31mtime[m: 1120 us
    blocksize: 1024 [1;31mtime[m: 3955 us
    
    AVX2/SatdHighbdTest
    blocksize:   16 [1;31mtime[m:   89 us
    blocksize:   64 [1;31mtime[m:  189 us
    blocksize:  256 [1;31mtime[m:  590 us
    blocksize: 1024 [1;31mtime[m: 1912 us
    
    Change-Id: I6357174462fccd589a475b13d8114b853cab5383

[33mcommit 84b19ab5acb9f7104441c2c3c5a8157a95e417e1[m
Author: Marco Paniconi <marpan@google.com>
Date:   Sun Nov 11 22:09:31 2018 -0800

    vp9: Reorganize the buffer level for cbr mode
    
    Refactor the code with some changes.
    
    Split update into two parts: move the fillup
    (with per-frame-bandwidth) before the encoding, and
    keep the leaking part (with encoded_frame_size) after
    the encoding (postencode).
    
    For SVC with ref_frame_config usage: allow usage of [1;31mtime[mstamp
    delta for the fillup part of buffer, instead of the (average)
    framerate passed in via the duration.
    
    Moving the buffer fillup (+per-frame-bandwidth) part to the
    pre-encode causes some difference in performance
    (since buffer level affects active_worst/QPand frame-dropping),
    but the change is observed to be small.
    Made small adjustment to active_worst_quality to compensate.
    
    Adjust some thresholds in datarate tests.
    
    Change-Id: I81a5562367034f318cffd451304bc4a34bf02a1d

[33mcommit a18946fbed5798f7f1cda5857669a9861afae960[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Nov 2 11:31:38 2018 -0700

    Skip ACL recode loop for intermediate ARF layers
    
    Speed up the encoding [1;31mtime[m by ~20% for multi-layer ARF system.
    
    Change-Id: I16de1cfed7cd1815cf0269eb4f90ad74fdf087ee

[33mcommit 17004c71bcd7ae7e6a65bd5b8e756fb2311accdc[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Fri Oct 26 14:55:26 2018 -0700

    remove "register" keyword
    
    This has been deprecated for a long [1;31mtime[m. c++17 is trying to recover the name.
    
    Change-Id: Iade6bebce03a50b76061695f9e634a107cd989cd

[33mcommit 6657ab8571b0a363f0e3ffd46348794651c92d44[m
Author: Chi Yo Tsai <chiyotsai@google.com>
Date:   Tue Oct 23 12:42:21 2018 -0700

    Add AVX2 support for 4-tap interpolation filter.
    
    Performance:
         | 4X4 | 8X8 |16X16|64X64|
    2 DIM|1.491|1.902|1.772|1.479|
     HORZ|1.145|1.521|1.757|1.497|
     VERT|1.176|1.614|1.707|1.467|
    
    Each number in the chart above is 8-tap function [1;31mtime[m / 4-tap function [1;31mtime[m.
    
    The framerate tested on jets.y4m for 100 frames on speed 1 increased from 3.72
    fps to 3.91 fps (about 5% increase).
    
    Change-Id: Ic0ad275cf32fafeefd0a89811badd8adff2134a0

[33mcommit bb071af390bc60c0d540dac441c7f519404b81cf[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Oct 23 12:30:13 2018 -0700

    Use 8-tap interp filter in temporal filtering
    
    Used 8-tap interp filter in temporal filtering to achieve more accurate
    motion search result. Using 8-tap sharp gave slight better result than
    using 8-tap regular.
    
    Speed 0 borg test showed that
            avg_psnr:  ovr_psnr:    ssim:
    hdres:  -0.160      -0.157     -0.173
    midres: -0.083      -0.061     -0.183
    lowres: -0.077      -0.099     -0.204
    
    Speed test didn't see noticeable encoder [1;31mtime[m changes.
    
    Change-Id: I97dc3c4864b5a5675a6c1e3952799b81eedd7d93

[33mcommit 01df00ec0f4db0ec633811e38452d601a7c8174c[m
Author: Chi Yo Tsai <chiyotsai@google.com>
Date:   Wed Oct 17 14:52:26 2018 -0700

    Add SSSE3 support for 4-tap interpolation filter
    
    Performance:
         | 4X4 | 8X8 |16X16|64X64|
    2 DIM|1.526|1.827|1.844|1.906|
     HORZ|1.336|1.795|1.886|1.654|
     VERT|1.443|1.539|2.139|2.190|
    
    The ratio is SSSE3 8-tap [1;31mtime[m / SSSE3 4-tap [1;31mtime[m.
    
    Change-Id: I01ed2ab494428256e918875774a459afecc5ec6a

[33mcommit 71b4e0bdedefea29dd27ebaae20ffb8703ee4703[m
Author: Chi Yo Tsai <chiyotsai@google.com>
Date:   Tue Oct 16 15:45:05 2018 -0700

    Adds SSE2 support for interpolation filter for width 4 and 8
    
    Performance:
    The chart below shows the speed relative to baseline
    (baseline_[1;31mtime[m/new_[1;31mtime[m)
    _____| 4X4 | 8X8 |16X16|64X64|
    2 DIM|1.889|1.780|1.811|1.963|
     HORZ|2.266|1.834|1.617|1.595|
     VERI|2.043|2.190|2.373|2.485|
    
    Change-Id: Ic4262222db78f013b94a8c61b46efb8520722927

[33mcommit 272f46212ed96ee8c28056752c8da392229b8e17[m
Author: Chi Yo Tsai <chiyotsai@google.com>
Date:   Tue Oct 16 17:50:37 2018 -0700

    Add SSE2 support for 4-tap interpolation filter for width 16.
    
    Horizontal filter on 64x64 block: 1.59 [1;31mtime[ms as fast as baseline.
    Vertical filter on 64x64 block: 2.5 [1;31mtime[ms as fast as baseline.
    2D filter on 64x64 block: 1.96 [1;31mtime[ms as fast as baseline.
    
    Change-Id: I12e46679f3108616d5b3475319dd38b514c6cb3c

[33mcommit fc1679863b5d86a4f3f0dcb14ef37dae7c8cb94a[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Oct 12 12:25:36 2018 -0700

    Optimize apply_temporal_filter function
    
    This patch optimized apply_temporal_filter function. The diff^2 for each
    pixel in the 16x16 block is calculated once beforehand, so that we don't
    calculate it multiple [1;31mtime[ms while evaluating a pixel's neighbors. This
    would speed up the function.
    
    Change-Id: Ibdb8b041f317fd6df198950e2acf9cfcde26860d

[33mcommit 50b91aff52579ef7f46b47aef0d657a731a2f84f[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Oct 8 16:21:54 2018 -0700

    Use 4-tap interp filter in speed 1 sub-pel motion search
    
    Added the 4-tap interp filter, and used it for speed 1 sub-pel motion
    search. Speed 2 motion search still used bilinear filter as before.
    
    Speed 1 borg test showed good bit savings.
            avg_psnr:  ovr_psnr:    ssim:
    lowres:  -1.125    -1.179      -1.021
    midres:  -0.717    -0.710      -0.543
    hdres:   -0.357    -0.370      -0.342
    Speed test at speed 1 showed ~10% encoder [1;31mtime[m increase, which was
    partially because of no SIMD version of 4-tap filter.
    
    Change-Id: Ic9b48cdc6a964538c20144108526682d64348301

[33mcommit afa4b9780ae0c10f22995ee96ba40b2cc15b29f9[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Oct 8 15:10:12 2018 -0700

    Add accurate sub-pel motion search
    
    Added the accurate sub-pel motion search. In this patch, used the 8-tap
    filter in sub-pel motion search, and this was enabled at speed 0.
    
    Speed 0 borg test showed that
            avg_psnr:  ovr_psnr:    ssim:
    lowres:  -1.363     -1.403     -1.282
    midres:  -0.842     -0.849     -0.720
    hdres:   -0.480     -0.488     -0.503
    Speed test at speed 0 showed ~8% encoder [1;31mtime[m increase.
    
    Change-Id: I194ca709681ea588f3f6381093940e22d03c4d7b

[33mcommit a2cd0170163b58cb151e19e26b7cb0b23f1783c4[m
Author: Hui Su <huisu@google.com>
Date:   Tue Sep 25 12:19:53 2018 -0700

    Add ml_var_partition experiment
    
    Make partition decisions using machine learning models. The goal is to
    achieve better coding quality than the variance-based parititioning
    without much encoding speed loss.
    
    To enable this experiment, use --enable-ml-var-partition for config.
    
    When eanbled, the variance-based partitioning is replaced by this ML
    based partitioing for speed 6 and above in real [1;31mtime[m mode(except low
    resolution or high bit-depth).
    
    Current coding gains(average PSNR):
                    speed 6      speed 7      speed 8
    rtc              2.04%        2.65%        3.90%
    ytlivehr         3.11%        4.53%       11.57%
    hdres(rtc mode)  5.10%
    
    Further testing and tuning is needed to see if the speed and quality
    tradeoff is reasonable.
    
    Change-Id: I0da5a2fbc22c3261832b32920ee36d9b19d417af

[33mcommit d2641ff1df06ce974f2a1fac4336843c358acecd[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Fri Sep 28 13:17:31 2018 +0100

    Revert "Merge "Adapt GOP size threshold to the allowed layer depth""
    
    This reverts commit 5efde3914f1a85061e51bc8d96984216e976e90c, reversing
    changes made to 3a291593726a3f0eff5e59983e84de20d0bf294c.
    
    This is badly broken and may help somewhat for multi-layer but is hurting
    massively in single layer encodes.
    
    I ran this through this morning and while it often helps in SSIM it is badly down
    for global PSNR and PSNR-HVS with some clips down by 35-40%. This is in line
    with previous experiments where I have found that a bigger boost helps SSIM
    but hurts PSNR and PSNR HVS.
    
    I was also working on changes to the I factor that gave some improvements
    in single layer though these were based upon the active Q mostly. I also have
    looked at a bug for the first group where int_lbq is not properly defined and
    will submit an interim patch for this while I look for a better solution.
    
    In the mean[1;31mtime[m I think we should revert this.
    
    The (Global PSNR, SSIM, PSNR-HVS) for the patch as is in my runs for
    single layer vs a couple of days ago seem to be (-ve is better).
    
    Low res 0.346, -1.475, 0.239
    mid res  1.581, -1.300, 1.731 (worst result down by 30-40% in psnr)
    hdres 0.665, -0.712, 1.043 (worst result down by 17-19% in psnr)
    NF2k 0.927, 0.111, 1.3220 (Worst result down by 5-7% in psnr)
    
    Change-Id: I55952b71b8cfc5a84484b3b659c5f8a530f3a755

[33mcommit a439b3c97709604a61fa9ff5d8d02aeae633a69c[m
Author: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
Date:   Thu Sep 20 19:57:25 2018 +0200

    better-hw-compatibility: fix out of bounds access
    
    With --enable-better-hw-compatibility an access to array element -1
    can be observed for VP9/ActiveMapTest.Test/0
    ../vp9/encoder/vp9_rdopt.c:3938:53: run[1;31mtime[m error:
      index -1 out of bounds for type 'RefBuffer [3]'
    
    There doesn't seem anything that would prevent ref_frame from being 0.
    If there is no reference frame it can probably be assumed that it
    isn't scaled.
    
    Signed-off-by: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
    Change-Id: I0a29cd0ffc9a19742e5e72203d5ec5d0a16eac7a

[33mcommit a93705f7f9c15cdc2a1e62f6142e99f794923826[m
Author: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
Date:   Thu Sep 20 20:20:39 2018 +0200

    sanitizer: fix unaligned load/stores
    
    When built with -fsanitizer=address,undefined a number of tests,
    such as ByteAlignmentTest.SwitchByteAlignment or
    ByteAlignmentTest.SwitchByteAlignment produce run[1;31mtime[m errors about
    unaligned 4-byte loads/stores. While normally not really a problem,
    this does technically violate the language and it is eays to fix in
    a standard conforming way using memcpy which does not produce
    inferior code.
    
    Signed-off-by: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
    Change-Id: Ie1e97ab25fe874f864df48b473569f00563181ae

[33mcommit ad228021b3caa4924dd854c8f193d1219095c80f[m
Author: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
Date:   Wed Sep 19 09:47:27 2018 +0200

    fix UB  when initializing parameterized tests
    
    When running tests built with
    -fsanitize=undefined and--disable-optimizations
    the sanitizer will emit errors of the following general form:
    
    run[1;31mtime[m error: member call on address 0xxxxxxxxx which does not
    point to an object of type 'WithParamInterface'
    0xxxxxxxxx: note: object has invalid vptr
     00 00 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  00 ...
                  ^~~~~~~~~~~~~~~~~~~~~~~
                  invalid vptr
    
    This can be traced to calls to WithParamInterface<T>::GetParam before
    the object argument has been initialized. Although GetParam only
    accesses static data it is a non-static member function. This causes
    that call to have undefined behaviour.
    The patch makes GetParam a static member function.
    
    upstream pull request:
    https://github.com/google/googletest/pull/1830
    
    The alternative - if the pull request is denied - would be to
    modify all parameterized tests to have them derive from
    ::libvpx_test::CodecTestWith*Params as the first base class.
    
    Signed-off-by: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
    Change-Id: I8e91a4fba5438c9b3e93fa398f789115ab86b521

[33mcommit c87895b14495d199738bc2368f15a2cff6bb6463[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Aug 21 11:12:48 2018 -0700

    Safely swap the show frame buffer pointer in show_existing mode
    
    Point the current frame buffer towards the existing reference frame.
    In the mean[1;31mtime[m, release the original new_fb pointer.
    
    Change-Id: Ic83a698cac5cdaaabdf61acffb936ec130a84d1c

[33mcommit 25ca4edf74151dcd871c4012ac9748831526f49f[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Aug 13 09:20:21 2018 -0700

    vp9: Small refactor on overshoot detection, for cbr real-[1;31mtime[m.
    
    Change-Id: I70997d35a2371bb4614d716ef0c587fa12ea0f4a

[33mcommit 97848890a99af6604df13ec38c094a01aea40f0e[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Aug 8 14:01:26 2018 -0700

    vp9: Allow for overshoot detection for non-screen CBR mode.
    
    For CBR real-[1;31mtime[m mode: refactor usage of speed feature to
    handle overshoot on slide/scene change. Add 2 modes to indicate
    how slide/scene change is processed for re-setting Q/rate control.
    Keep the speed setting to 1 for speed >= 5, otherwise set to 0.
    
    Video content and screen content are now handled in similar way,
    though with different thresholds.
    
    Some fixes to thresholds and reset: correct the reset of the buffer
    level to optimal level for each temporal layer, if scene change
    frame will be encoded at max_q.
    
    Also increase the min_thresh for video mode (non-screen content):
    this is to avoid scene change detection on cases like large
    lighting changes, cameras focus. And increase in min_thresh
    makes it more robust to sudden increase in noise level.
    
    Change-Id: I256d350da6e92d2ddc09f100fc06ac147cbc1e49

[33mcommit 763c9e08dd9fd7aa3acca3bf3a89a7c36d640050[m
Author: Hui Su <huisu@google.com>
Date:   Mon Aug 6 18:01:25 2018 -0700

    Add enhanced_full_pixel_motion_search feature
    
    Do some extra full pixel search to improve motion vector quality.
    Currently it is enabled for speed 1 only; disabled for real [1;31mtime[m mode.
    
    Coding gain for speed 1:
             avg_psnr   ovr_psnr   ssim
    lowres   -0.23%     -0.23%    -0.35%
    midres   -0.33%     -0.35%    -0.38%
    hdres    -0.28%     -0.29%    -0.28%
    
    Tested encoding [1;31mtime[m over 10 HD sequences. Overall speed overhead is
    1.5% for QP=30; 0.6 % for QP=40.
    
    Change-Id: Ic2ea4d78c4979de9d5090c9d7c702944f155f8af

[33mcommit d619f02861964e3b4c4cc0d766eb98f3b0bbed38[m
Merge: 89b1c0734 52829e79a
Author: Jerome Jiang <jianj@google.com>
Date:   Tue Aug 7 18:06:56 2018 +0000

    Merge "vp9 test: Enable aq 3 and error resilient in real[1;31mtime[m for layers."

[33mcommit 52829e79accdccb970cf8138eb5e8f566445798d[m
Author: Jerome Jiang <jianj@google.com>
Date:   Mon Aug 6 10:46:09 2018 -0700

    vp9 test: Enable aq 3 and error resilient in real[1;31mtime[m for layers.
    
    aq mode 3 is never properly tested in non real[1;31mtime[m mode.
    
    BUG=webm:1553
    
    Change-Id: I0663c9724ee57ba5c528a20b31ef8b6df0e03f6c

[33mcommit 6fd9d0244c7d8941ce0004bcd2efce5d6676bef5[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Aug 3 10:45:41 2018 -0700

    vp9: Add screen-content mode to overshoot detection.
    
    For real-[1;31mtime[m 1 pass mode: overshoot detection and max_Q
    reset should only be for screen-content mode.
    This fixes some failures in the 1 pass VBR tests, from
    the commit: 2fae9991
    
    Change-Id: I70cbe4e6fd83cfe0c7662f13b779551bf4f319cb

[33mcommit 89d23138d2a67a3e518d1026f87cdd5a9e1bee78[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Aug 3 09:20:55 2018 -0700

    vp9: Adjust qp_thresh on slide change overshoot detection
    
    For real-[1;31mtime[m screen-content mode: increase the
    qp_thresh for max_Q setting on slide changes.
    This will make bitrate spikes less likely on slide changes.
    
    Change-Id: Ie13524a06490214456b1c9c042a864ea0d0750c5

[33mcommit 5f914dd902b8414d7d4d8c21d0be96059f2c5103[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Aug 2 20:48:17 2018 -0700

    vp9: Add zero_temp_sad count to scene detection.
    
    For real-[1;31mtime[m screen-content mode: makes the
    scene/slide change detection more robust.
    
    Change-Id: I28d8d28b42bb92d527811f814bf14bbbbb53ab25

[33mcommit bea5c7e48ea5976f5807feb2ae27c3f0b3794f67[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Aug 2 15:58:12 2018 -0700

    vp9: Increase min_thresh for slide change detection
    
    For real-[1;31mtime[m screen-content mode: increase min_thresh
    to avoid some false detection.
    
    Change-Id: I3e93dea63cbd65e3ad5d0af7eabf0d3686fe9943

[33mcommit 2fae99911e7deff3759a9fbd9d00f4975fceb1d9[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Aug 2 09:22:58 2018 -0700

    vp9: Disable re_encode_overshoot feature for speed >= 6.
    
    For real-[1;31mtime[m screen content mode: for speed >= 6 disable
    the re_encode_overshoot feature. This means for speed >= 6
    the Q and rate control is reset on slide changes based on
    the scene/slide detection and the current Q (and not on a
    first pass encoded frame at current Q).
    
    This reduces encode [1;31mtime[m on slide changes, but may be less
    accurate in deciding when to reset/max-out the Q.
    
    Change-Id: Id0fdcafd55bc43bd8b3afee211e524f37c8ddce6

[33mcommit 7b5553e139887a4b11e293aafe9efa3da3a53121[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 31 09:43:17 2018 -0700

    Use mesh full pixel motion search to build the source ARF
    
    Append mesh search to the diamond shape search to refine
    the full pixel motion estimation for source ARF generation.
    It improves the average compression performance.
    
    Speed 0
            avg PSNR     overall PSNR     SSIM
    mid      -0.18%        -0.18%        -0.22%
    hd       -0.25%        -0.23%        -0.36%
    nflx2k   -0.22%        -0.23%        -0.37%
    
    Speed 1
           avg PSNR     overall PSNR      SSIM
    mid     -0.10%         -0.08%        -0.11%
    hd      -0.25%         -0.27%        -0.38%
    nflx2k  -0.20%         -0.20%        -0.34%
    
    The additional encoding [1;31mtime[m is close to the sample noise
    range. For bus_cif at 1000 kbps, the speed 0 encoding [1;31mtime[m
    goes from 83.0 s -> 83.6 s.
    
    Change-Id: I48647f50ec3e8f7ae4550a4bde831f569f46ecf3

[33mcommit d22ea1d3f6f7c4ca97e07c5637696ece3db11d54[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Jul 26 14:06:42 2018 -0700

    vp9: 4x4 tx_size for nonrd-pickmode for screen content
    
    Force 4x4 transform size under some conditions for real-[1;31mtime[m
    screen-content mode. Improvemet on text in some screen clips.
    
    Change-Id: I77cafa23ea1060ef4334dc07eac53189bf80e0ec

[33mcommit 16b03220227637b52f7e702da8db1eda9664c3ae[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jul 25 17:51:35 2018 -0700

    vp9: Modify condition for force test of intra
    
    For real-[1;31mtime[m/nonrd_pickmode: under some conditions
    force check of intra modes for flat blocks with motion.
    Reduces artifacts for screen-content mode.
    
    Change-Id: If320f41a90982b14c48d91150f59f048a62982b1

[33mcommit 23fc20e363f883a15ca0824d16fae0164e0d5f77[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jul 25 17:27:24 2018 -0700

    vp9: Avoid early breakout on slide change
    
    For real-[1;31mtime[m screen content: don't allow early
    breakout in nonrd-pickmode on slide change.
    Avoid artifacts.
    
    Change-Id: I09c6927a5d85b46ce059ea5954a3719a7362fb99

[33mcommit a365f3fc2b73b185bb1ad04c172472763efb027a[m
Merge: 125f2f062 904589ba9
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jul 25 21:19:41 2018 +0000

    Merge "Revert "vp9: Adjust reset segment for real-[1;31mtime[m screen-content""

[33mcommit 904589ba93f88140bec280f4c7dbffa4bade3ad4[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jul 25 18:23:25 2018 +0000

    Revert "vp9: Adjust reset segment for real-[1;31mtime[m screen-content"
    
    This reverts commit d72cd51d83947064ef6354f02b1df59d2d3f1317.
    
    Reason for revert: <INSERT REASONING HERE>
    Doesn't seem to really remove the artifact that was the cause for this change. Reverting for now.
    
    Original change's description:
    > vp9: Adjust reset segment for real-[1;31mtime[m screen-content
    >
    > For real-[1;31mtime[m screen content mode when the short_circuit
    > flat_blocks feauture is enabled: reset segment to 0 for
    > coding block if its flat, regardless of temporal source_sad.
    > Reduces some artifacts on flat areas.
    >
    > Change-Id: I9620e424bedc5a13f87cc4f66af7c0e86043c89c
    
    TBR=marpan@google.com,builds@webmproject.org,jianj@google.com
    
    # Not skipping CQ checks because original CL landed > 1 day ago.
    
    Change-Id: I83ee9fd75bfb621a4f3e9afbcc07e7c6ca5c51d6

[33mcommit af6d8456a337db0361aae0952447490200d0d3b9[m
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Jul 24 11:34:42 2018 -0700

    vp9: Modify logic for flat blocks in nonrd-pickmode.
    
    For real-[1;31mtime[m screen content mode: when slide change
    is detected, for spatially flat blocks (source_variance = 0) on
    the re-encoded frame, skip inter modes (so force intra) if
    non-zero temporal variance is detected for the coding block.
    Add flag to keep track of re-encoded frame at max Q.
    Reduces artifacts on slide change.
    
    Change-Id: I28151f412aba6ab8cb03f30087c7ce16d443654b

[33mcommit 49434a1201f821c67f8602328470df441cc67353[m
Merge: 8991d1c18 d72cd51d8
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Jul 24 06:47:54 2018 +0000

    Merge "vp9: Adjust reset segment for real-[1;31mtime[m screen-content"

[33mcommit d72cd51d83947064ef6354f02b1df59d2d3f1317[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Jul 23 16:24:15 2018 -0700

    vp9: Adjust reset segment for real-[1;31mtime[m screen-content
    
    For real-[1;31mtime[m screen content mode when the short_circuit
    flat_blocks feauture is enabled: reset segment to 0 for
    coding block if its flat, regardless of temporal source_sad.
    Reduces some artifacts on flat areas.
    
    Change-Id: I9620e424bedc5a13f87cc4f66af7c0e86043c89c

[33mcommit fba011507b1ee160caa82488cfeb4c7ad9471341[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jul 18 14:36:17 2018 -0700

    vp9: Screen-content after slide-change: increase refresh rate
    
    For screen-content real-[1;31mtime[m CBR mode: on a detected slide change
    that is encoded at max Q (to prevent excessive overshoot), increase
    the perc_refresh in the cyclic refresh following the slide change.
    Use counter to increase refresh up to some #frames from slide change.
    
    This is attempt to increase quality ramp-up after slide change without
    causing too much excess overshoot.
    
    Change-Id: Ie4ec4361082803a522f4a8794b3bb0178c9cf307

[33mcommit b1284dffdb16b82e940e39b226b656801c83289b[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jul 12 09:02:01 2018 -0700

    Reland "Enable tpl model for speed 0"
    
    This is a reland of 9c2c234a0b8f9c08719ac1fa286988a0a3626fd0
    
    Threaded mismatch has been addressed.
    
    Original change's description:
    > Enable tpl model for speed 0
    >
    > Enable adaptive Lagrangian multiplier for arf in speed 0, AQ mode 0,
    > and low bit-depth settings. This improves the peak compression
    > performance:
    >
    >           avg PSNR       overall PSNR       SSIM
    > low       -0.462%         -0.535%          -0.358%
    > mid       -0.780%         -0.857%          -0.868%
    > hd        -0.914%         -1.017%          -0.471%
    > 720p      -0.624%         -0.671%          -1.553%
    > nflx2k    -0.764%         -0.784%          -0.908%
    >
    > The encoding [1;31mtime[m at speed 0 is slightly changed to be faster or
    > slower:
    >
    > city_cif 1000 kbps
    > 78.2 seconds -> 78.1 seconds
    >
    > bus_cif 1000 kbps
    > 98.6 seconds -> 98.8 seconds.
    >
    > Change-Id: I18e7337bb61d985cbd3cf29e56439a6cdf675389
    
    BUG=webm:1547
    
    Change-Id: I025a21683ceed23d5f7147e200555b58b791315c

[33mcommit 3e09814a027cba6c2824ca98859da8c9ab947acc[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jul 11 19:38:44 2018 -0700

    vp9: Force hybrid_intra on scene change
    
    For real-[1;31mtime[m screen content mode: when scene/slide change
    is detected and re-encode is decided, force hybrid_intra
    mode search if slide change is big and alot of Intra modes
    were used. hybrid_intra mode will use rd-based intra mode
    search for small blocks.
    
    Overall better PSNR on clip with slide changes, with similar
    encoded frame size. Encode [1;31mtime[m lightly higher on average with
    this change.
    
    Change-Id: I503835253b777b9f98d74e75a52a8000b76c310c

[33mcommit 7ccf953b694e19e220230ee7f9b688e445c75cc1[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Jul 12 15:28:36 2018 -0700

    vp9: Enforce intra search on scene_change
    
    For real-[1;31mtime[m non-rd pickmode: force check of
    intra modes on INTER frames for scene changes.
    Reduces artifacts on scene changes.
    
    Change-Id: I5ae80869072db156791ace554c0a470f3785e9c6

[33mcommit 9c2c234a0b8f9c08719ac1fa286988a0a3626fd0[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jul 12 09:02:01 2018 -0700

    Enable tpl model for speed 0
    
    Enable adaptive Lagrangian multiplier for arf in speed 0, AQ mode 0,
    and low bit-depth settings. This improves the peak compression
    performance:
    
              avg PSNR       overall PSNR       SSIM
    low       -0.462%         -0.535%          -0.358%
    mid       -0.780%         -0.857%          -0.868%
    hd        -0.914%         -1.017%          -0.471%
    720p      -0.624%         -0.671%          -1.553%
    nflx2k    -0.764%         -0.784%          -0.908%
    
    The encoding [1;31mtime[m at speed 0 is slightly changed to be faster or
    slower:
    
    city_cif 1000 kbps
    78.2 seconds -> 78.1 seconds
    
    bus_cif 1000 kbps
    98.6 seconds -> 98.8 seconds.
    
    Change-Id: I18e7337bb61d985cbd3cf29e56439a6cdf675389

[33mcommit 1d5380787a30e8d37b3c925babaffd2d996ddea4[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Jul 9 11:07:52 2018 -0700

    Add 32x32 Hadamard transform
    
    Add 32x32 Hadamard transform in C implementation. Replace the
    forward 32x32 2D-DCT in tpl model with Hadamard transform. This
    would reduce the overhead encoding [1;31mtime[m due to running tpl model
    by ~3x.
    
    Change-Id: I1c743dab786b818d89f14928cc3998d056830aa9

[33mcommit de5a4fbb10e93e7a119ec1d5baffbc24897291a1[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Apr 11 10:59:34 2018 -0700

    vp9-svc: Intra-only frame for spatial layers.
    
    Use case is for layered (SVC) coding to allow higher
    resolution layers to continue decoding with temporal references,
    while base spatial layer is intra-only frame.
    
    Made encoder changes to real-[1;31mtime[m path for encoding intra-only
    frame. The intra-only frame will be followed by the overlay/copy
    frame (with both packed in the same superframe).
    
    Use existing control to enable intra_only frame.
    Intra only is only applied to base spatial layer, and only
    allowed under fixed/non-flexible SVC mode, and only for
    1 < number_spatial_layers < 4.
    
    Added svc datarate unittest for inserting intra_only frame
    as sync frame. Added svc end to end tests to check mismatch.
    
    Change-Id: I2f4f0106b2c4f51ce77aa2c1c6823ba83ff2f7a0
    Signed-off-by: Marco Paniconi <marpan@google.com>

[33mcommit 24b16ce7c9da42b23484174a41d1c5ff2ea4929a[m
Author: Marco Paniconi <marpan@google.com>
Date:   Sun Jul 1 17:26:38 2018 -0700

    vp9: Fix to screen content artifact for real-[1;31mtime[m.
    
    Reset segment to base (segment#0) on spatially flat
    stationary blocks (source_variance = 0). Also increase
    dc_skip threshold for these blocks.
    
    Reduces artifacts on flat areas in screen content mode.
    
    Change-Id: I7ee0c80d37536db7896fa74a83f75799f1dcf73d

[33mcommit 914d5abb5cb1f5944247ad06e042f96966ac5ffc[m
Merge: 8e01faee0 e92a68c22
Author: Marco Paniconi <marpan@google.com>
Date:   Sat Jun 30 00:04:39 2018 +0000

    Merge "vp9: Reduce quality artifact for real-[1;31mtime[m scene-content."

[33mcommit e92a68c226f6de7a87d3e9d992651f799b0b117c[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Jun 29 11:15:00 2018 -0700

    vp9: Reduce quality artifact for real-[1;31mtime[m scene-content.
    
    Add scene detection flag to choose_partitioning to force split
    of 64x64 block partition. This reduces artifacts on slide changes.
    
    Bug:b/110978869
    
    Change-Id: I9cc79a7c03f3aa2edeb28656b09a2177b72d59a8

[33mcommit 2899a9d438ce5243936428baf4b6f4f1e63faae8[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jun 27 12:26:09 2018 -0700

    vp9-svc: Fix to early golden exit nonrd-pickmode
    
    For SVC: apply the sse_zeromv early exit also to
    the case where golden is second temporal reference.
    Set the thresh_svc_golden threshold for this case.
    
    This is reduce the encode [1;31mtime[m for case where golden
    is second temporal reference for SVC.
    Change-Id: I8c0c87dd746579d3c4f5e983c7f9dd0a1e1476e0

[33mcommit b0adbb6c22f514ac66ef32ee1265983a52eb2934[m
Author: Luc Trudeau <luc@trud.ca>
Date:   Tue Jun 26 17:06:52 2018 -0400

    [VSX] Replace vec_pack and vec_perm with single vec_perm
    
    vpx_quantize_b:
    VP9QuantizeTest Speed Test (POWER8 Model 2.1)
    32x32 Old VSX [1;31mtime[m = 8.1 ms, new VSX [1;31mtime[m = 7.9 ms
    
    vp9_quantize_fp:
    VP9QuantizeTest Speed Test (POWER8 Model 2.1)
    32x32 Old VSX [1;31mtime[m = 6.5 ms, new VSX [1;31mtime[m = 6.2 ms
    
    Change-Id: Ic2183e8bd721bb69eaeb4865b542b656255a0870

[33mcommit dc93b6298b77a8e68c80175f2f7f5fb211be358a[m
Author: Luc Trudeau <luc@trud.ca>
Date:   Wed Jun 20 21:55:49 2018 -0400

    VSX Version of fdct32x32_rd
    
    Low bit depth version only. Passes the Trans32x32Test test suite.
    
    Trans32x32Test Speed Test (POWER9 Model 2.2)
    32x32 C [1;31mtime[m = 212.7 ms (Â±0.1 ms), VSX [1;31mtime[m = 82.3 ms (Â±0.0 ms) [2.6x]
    
    Change-Id: If906ec9b56ce3818cae0cc462c7277284ab29859

[33mcommit 583859d7395ca70c3b1ca0acc1258a720470a807[m
Merge: 74c890b98 60f9cf292
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Jun 25 18:30:18 2018 +0000

    Merge "vp9: Fixes for lossless mode for real-[1;31mtime[m mode."

[33mcommit 60f9cf29204bb798654939ae497d16c5376e5fb9[m
Author: Marco Paniconi <marpan@google.com>
Date:   Sun Jun 24 22:00:58 2018 -0700

    vp9: Fixes for lossless mode for real-[1;31mtime[m mode.
    
    Fixes to nonrd coding mode for lossless mode: keep
    skip_txfm to 0 (no skip) and disable the encoder breakout.
    This makes the encoding lossless when that mode is selected
    for real-[1;31mtime[m (nonrd pickmode).
    
    Also the disable the cyclic refresh for lossless mode.
    
    Change-Id: I20a11ef6df08accec472d26fabebd14d51f4d337

[33mcommit a3ccca3e0c82c9b4c41cd6d795d654ff9cdc9560[m
Merge: 649d37278 59c41b781
Author: Jerome Jiang <jianj@google.com>
Date:   Tue Jun 19 02:37:32 2018 +0000

    Merge "vp9: Enable cyclic refresh for HBD in real-[1;31mtime[m."

[33mcommit 59c41b7814f1a5a4ba63392313de03ae6c9cf802[m
Author: Jerome Jiang <jianj@google.com>
Date:   Thu Jun 7 18:05:23 2018 -0700

    vp9: Enable cyclic refresh for HBD in real-[1;31mtime[m.
    
    Keep denoiser and skin detection disabled since some key functions don't
    work with >8 bits source.
    
    Add test for HBD with denoiser and cyclic refresh enabled to make sure
    nothing crashes.
    
    BUG=webm:1534
    
    Change-Id: Id61fe1e38ed1768f273870a6bdd5f163aa769fe4

[33mcommit f9dc411d89eed99d7def7de1e9dddba782c1212c[m
Author: Luc Trudeau <luc@trud.ca>
Date:   Wed Jun 13 15:24:54 2018 -0400

    [VSX] Optimize PROCESS16 macro
    
    The PROCESS16 macro now uses 8-bit lanes instead of 16-bit lanes.
    
    SADTest Speed Test (POWER8 Model 2.1)
    16x8  Old VSX [1;31mtime[m = 16.7 ms, new VSX [1;31mtime[m = 9.1 ms [1.8x]
    16x16 Old VSX [1;31mtime[m = 15.7 ms, new VSX [1;31mtime[m = 7.9 ms [2.0x]
    16x32 Old VSX [1;31mtime[m = 14.4 ms, new VSX [1;31mtime[m = 7.2 ms [2.0x]
    32x16 Old VSX [1;31mtime[m = 14.0 ms, new VSX [1;31mtime[m = 7.4 ms [1.9x]
    32x32 Old VSX [1;31mtime[m = 13.4 ms, new VSX [1;31mtime[m = 6.5 ms [2.0x]
    32x64 Old VSX [1;31mtime[m = 12.7 ms, new VSX [1;31mtime[m = 6.3 ms [2.0x]
    64x32 Old VSX [1;31mtime[m = 12.6 ms, new VSX [1;31mtime[m = 6.3 ms [2.0x]
    64x64 Old VSX [1;31mtime[m = 12.7 ms, new VSX [1;31mtime[m = 6.2 ms [2.0x]
    
    Change-Id: I51776f0e428162e78edde8eac47f30ffd2379873

[33mcommit e3ce12cfc1c2d2cc245e1a6d49eaf3ff18538547[m
Author: Luc Trudeau <luc@trud.ca>
Date:   Wed Jun 13 13:39:04 2018 -0400

    VSX Version of SAD8xN
    
    VSX versions of the SAD functions of width 8.
    
    SADTest Speed Test (POWER8 Model 2.1)
    8x4  C [1;31mtime[m = 68.7 ms (Â±0.3 ms), VSX [1;31mtime[m = 31.8 ms (Â±0.1 ms) [2.2x]
    8x8  C [1;31mtime[m = 55.6 ms (Â±0.3 ms), VSX [1;31mtime[m = 18.3 ms (Â±0.1 ms) [3.0x]
    8x16 C [1;31mtime[m = 46.5 ms (Â±0.1 ms), VSX [1;31mtime[m = 15.6 ms (Â±0.1 ms) [3.0x]
    
    Change-Id: I843f3b34e103b72deeade4a939193d8b53cee460

[33mcommit f950248b9b357b21e974e3ace94359d7ee8c7b29[m
Author: Luc Trudeau <luc@trud.ca>
Date:   Wed Jun 13 13:36:17 2018 -0400

    Add Speed Tests for the SADTest test suite.
    
    Speed tests are added for the SADTest test suite. These test use the
    AbstractBench and print the median run [1;31mtime[m of SAD operations. Speed
    tests are disabled by default.
    
    Change-Id: I5d0957248f9b5b307ae2d757d5f8d4761a1dd712

[33mcommit 74a0b04f5733f4b8c816225752417ef3ce146cd4[m
Author: Luc Trudeau <luc@trud.ca>
Date:   Fri Jun 8 22:53:30 2018 -0400

    VSX Version of vp9_quantize_fp_32x32
    
    Low bit depth version only. Passes the VP9QuantizeTest test suite.
    
    VP9QuantizeTest Speed Test (POWER8 Model 2.1)
    32x32 C [1;31mtime[m = 93.1 ms (Â±0.4 ms), VSX [1;31mtime[m = 6.5 ms (Â±0.2 ms) [14.4x]
    
    Change-Id: I7f1fd0fc987af86baf2b74147a25aee811289112

[33mcommit b1434f31255c6857bb0f06abc942bbf07bb156d5[m
Author: Luc Trudeau <luc@trud.ca>
Date:   Thu Jun 7 15:30:23 2018 -0400

    VSX Version of vp9_quantize_fp
    
    Low bit depth version only. Passes the VP9QuantizeTest test suite.
    
    VP9QuantizeTest Speed Test (POWER8 Model 2.1)
     4x4  C [1;31mtime[m = 86.3 ms (Â±0.7 ms), VSX [1;31mtime[m = 18.2 ms (Â±0.0 ms) [ 4.7x]
     8x8  C [1;31mtime[m = 57.7 ms (Â±0.3 ms), VSX [1;31mtime[m =  7.6 ms (Â±0.0 ms) [ 7.6x]
    16x16 C [1;31mtime[m = 50.7 ms (Â±0.1 ms), VSX [1;31mtime[m =  4.9 ms (Â±0.0 ms) [10.3x]
    
    Change-Id: Ic09bc786c57cc89bba14624064216b52996075eb

[33mcommit 7d97790438b796620a48dd2cfa6f2c6fe1f16871[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Jun 7 16:35:44 2018 -0700

    vp9-svc: Fix to frames_since_golden update for SVC.
    
    When the second (gf) temporal reference is used in SVC:
    the reference is refreshed on base TL superframes, and so
    the rc->frames_since_golden counter was also only updated on
    base TL frames. But this was disabling the golden reference
    from being used as a temporal reference for TL > 0 frames
    (since frames_since_golden was 0/not updated on TL > 0 frames).
    
    Fix is to copy the update of rc->frames_since_golden to all
    upper temporal layers. This allows TL > 0 frames to test the
    golden inter mode.
    
    Gain on RTC set: ~2%, ~8% on desktop_vga clip.
    Encode [1;31mtime[m increase ~5-8% on linux, 3SL-3TL run with 1 thread.
    
    For now keep this off for TL > 0 frames in speed features, so
    this change does not change current behavior for speed >= 7.
    
    Change-Id: I405708f3f80039ae47bd64ec53e66f92160acd9e

[33mcommit 71e13f76619934446238d1d301244ac30bc314cd[m
Merge: 0a72b0666 bfe85191d
Author: Marco Paniconi <marpan@google.com>
Date:   Thu May 31 22:22:57 2018 +0000

    Merge "vp9-svc: Fix to some frame metrics for real-[1;31mtime[m mode."

[33mcommit bfe85191dda47ce90f655864bf848c71ff6eed22[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu May 31 09:59:15 2018 -0700

    vp9-svc: Fix to some frame metrics for real-[1;31mtime[m mode.
    
    Add condition of LAST frame to the consec_zeromv and
    avg_frame_low_motion metrics. This is needed for SVC as
    the golden reference is a spatial reference and should
    not be included in the metric computation.
    
    Small/negligible change in metrics on RTC set.
    
    Change-Id: I6ea16298fae566bb288c34cf50d120b509146eee

[33mcommit 656e8ac61e76525bdffcbe03e0a18746ecd74b72[m
Author: Luc Trudeau <luc@trud.ca>
Date:   Tue May 29 22:08:18 2018 -0400

    VSX version of vpx_post_proc_down_and_across_mb_row
    
    Low bit depth version only. Passes the VpxPostProcDownAndAcrossMbRowTest
    
    VpxMbPostProcAcrossIpTest Speed Test (POWER8 Model 2.1)
    C [1;31mtime[m = 121.3 ms (Â±4.0 ms), VSX [1;31mtime[m = 9.4 ms (Â±0.3 ms) [12.9x]
    
    Change-Id: I28300779e197ea3855cf30867d17a2805388b447

[33mcommit 766d875b9da5c088d62fa50c37194c6e0dc0861a[m
Author: Luc Trudeau <luc@trud.ca>
Date:   Mon May 28 15:04:57 2018 -0400

    VSX version of vpx_mbpost_proc_ip
    
    Low bit depth version only. Passes the VpxMbPostProcAcrossIpTest.
    
    VpxMbPostProcAcrossIpTest Speed Test (POWER8 Model 2.1)
    C [1;31mtime[m = 188.5ms (Â±0.2ms), VSX [1;31mtime[m = 65.2ms (Â±0.1ms) [2.9x]
    
    Change-Id: I1cf72365d94a9d7f1e9323925a87a30e3bd5cfe2

[33mcommit 35e98a70ba65d82f0b94df3f5e453a3a9f0d6365[m
Author: Luc Trudeau <luc@trud.ca>
Date:   Fri May 18 13:38:48 2018 -0400

    VSX version of vpx_mbpost_proc_down
    
    Low bit depth version only. Passes the VpxMbPostProcDownTest.
    
    VpxMbPostProcDownTest Speed Test (POWER8 Model 2.1)
    Full calculations:
    C [1;31mtime[m = 195.4 ms, VSX [1;31mtime[m = 33.7 ms (5.8x)
    
    Change-Id: If1aca7c135de036a1ab7923c0d1e6733bfe27ef7

[33mcommit b2898a9ade42f623cdc6ab526de657fd078660d9[m
Author: Luc Trudeau <luc@trud.ca>
Date:   Tue May 22 14:16:15 2018 -0400

    Bench Class For More Robust Speed Tests
    
    To make speed testing more robust, the AbstractBench runs the
    desired code multiple [1;31mtime[ms and report the median run [1;31mtime[m with
    mean absolute deviation around the median.
    
    To use the AbstractBench, simply add it as a parent to your test
    class, and implement the run() method (with the code you want to
    benchmark).
    
    Sample output for VP9QuantizeTest
    
      [    BENCH ]      Bypass calculations       4x4  165.8 ms ( Â±1.0 ms )
      [    BENCH ]        Full calculations       4x4  165.8 ms ( Â±0.9 ms )
      [    BENCH ]      Bypass calculations       8x8  129.7 ms ( Â±0.9 ms )
      [    BENCH ]        Full calculations       8x8  130.3 ms ( Â±1.4 ms )
      [    BENCH ]      Bypass calculations     16x16  110.3 ms ( Â±1.4 ms )
      [    BENCH ]        Full calculations     16x16  110.1 ms ( Â±0.9 ms )
    
    Change-Id: I1dd649754cb8c4c621eee2728198ea6a555f38b3

[33mcommit 2b08f89076d1e93339fbbcc10e3298a0eec66bd6[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri May 25 21:51:33 2018 -0700

    vp9-real[1;31mtime[m: Move frame dropper to after scene detection.
    
    Move frame dropper to after scene detection and noise estimation.
    Scene detection and noise estimation operate on source data and
    update metrics along sequence, so they should be moved before
    the frame dropper.
    
    Also we don't want to drop on scene change, as the scene detection
    and (possible) re-encode step will be missed.
    
    Change-Id: I3d9e16d785bd5ace6707db2abce77ddc110bfef4

[33mcommit 36825590ba676d54765c6c31482cacb4fe661b43[m
Merge: fc1c5d1c9 8502a95a0
Author: Marco Paniconi <marpan@google.com>
Date:   Fri May 25 15:50:19 2018 +0000

    Merge "VP9: Fix issues with high bitdepth in real-[1;31mtime[m."

[33mcommit 8502a95a0de1bc06fa790759511cfcf3f7049b19[m
Author: Jerome Jiang <jianj@google.com>
Date:   Thu May 24 14:03:43 2018 -0700

    VP9: Fix issues with high bitdepth in real-[1;31mtime[m.
    
    Disable denoiser, skin detection and aq-mode for high bitdepth for now.
    
    BUG=webm:1534
    
    Change-Id: I361a4e20b2319041148af497bf7043bfd5c5f589

[33mcommit d665731ed0c5456cc3ae33099405c224ef9aaae4[m
Merge: c73907a09 fd554ec71
Author: Yaowu Xu <yaowu@google.com>
Date:   Tue May 15 01:14:46 2018 +0000

    Merge "Make a config [1;31mtime[m flag"

[33mcommit c73907a09b5d26010b7b4da960748664ff6bbd2c[m
Merge: e6859b04a 9ebc8605d
Author: Marco Paniconi <marpan@google.com>
Date:   Mon May 14 22:44:52 2018 +0000

    Merge "vp9-real[1;31mtime[m: Enable alt_ref at speed 5, for live."

[33mcommit fd554ec7144032ec24bab639cb314d5b1b63f684[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Mon May 14 14:32:34 2018 -0700

    Make a config [1;31mtime[m flag
    
    This commit replace a hard coded macro with a macro defined by
    a configure command.
    
    Change-Id: Ib31354d61865314ed43e2c429c72b4ef2c8fa2a7

[33mcommit d1aede92ec35f6adceb0c148dedcccc594fce166[m
Author: Luc Trudeau <luc@trud.ca>
Date:   Fri May 11 13:31:59 2018 -0400

    VSX version of vpx_quantize_b_32x32_vsx
    
    Low bit depth version only. Passes the VP9QuantizeTest.
    
    VP9QuantizeTest Speed Test (POWER8 Model 2.1)
    Full calculations:
    C [1;31mtime[m = 1456 ms, VSX [1;31mtime[m = 80 ms (18x)
    
    Change-Id: I1b1d6d03b1aeff63640efbdeb222cab857ddd95e

[33mcommit 9ebc8605dbb493d25247cf106b8760c6fccbd11d[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Apr 27 10:38:15 2018 -0700

    vp9-real[1;31mtime[m: Enable alt_ref at speed 5, for live.
    
    Enable alt_ref and compound prediction at speed 5.
    
    For 1 pass VBR mode, when lag > 0.
    Gain for Live set: ~3% gain on average, several
    clips have gains ~5-15%.
    
    Encoder fps decrease ~5-10%, on desktop with 4 threads.
    
    For now enable it only for resolutions <= 1280x720.
    
    Change-Id: I25e3d61a2244a3a01962624052c5adf4837965c7

[33mcommit 007971470b36b081110241b04d565f00850babb9[m
Author: James Zern <jzern@google.com>
Date:   Thu Aug 4 11:54:02 2016 -0700

    configure: check for arm_neon.h w/neon builds
    
    fails at configure [1;31mtime[m rather than compile [1;31mtime[m unless using
    --enable-external-build
    
    Change-Id: I966ee1000e28fdcc3f4a29759789b056faee0010

[33mcommit 401c8965310a917ca77f5450816f23eb21559b68[m
Author: Jerome Jiang <jianj@google.com>
Date:   Thu May 10 14:41:10 2018 -0700

    Remove extra line in warnings in ivfdec.c
    
    The warnings give an extra line which is confusing some[1;31mtime[ms.
    
    E.g.
    
    Warning: Read invalid frame size (308164564) // This is for frame 5
    
    Warning: Failed to decode frame 5: Invalid parameter
    Warning: Read invalid frame size (1936229463) // This is for frame 6
    
    Warning: Failed to decode frame 6: Invalid parameter
    Warning: Read invalid frame size (2282536257)
    
    Change-Id: I1753fa32079deca5c8b534c6ca9a527cc9e491e9

[33mcommit f4091bc30eef0fcacb5d5bd74ab7cfbc3c8aab5f[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Apr 12 09:14:25 2018 -0700

    Improved slide show coding
    
    This patch improves coding of slide shows with fade or other
    complex transitions.
    
    Previously, fades and other complex transitions between static "slides"
    were some[1;31mtime[ms being incorrectly marked such that they were coded
    as a single static slide rather than two slides with a transition.
    
    As the initial key frame for the first slide is not necessarily a good
    predictor of the second slide and ARFs were turned off, this led to a
    poor visual and metrics outcome in some such cases.
    
    This patch allows for long GF groups in static sections before and after
    a complex transition (instead of just with  simple slide transitions) with
    one or more normal ARF groups during the transition. It also enforces a
    single "normal" length GF group after the transition before any extended
    group is allowed. The reason for this is that the ARF that spans the
    transition my not have a very high quality and hence may not act as a
    good GF for the long static section that follows.
    
    Change-Id: Ica1f979e27d8a0625f3cebf7b7cf6d69edccaba9

[33mcommit 3a0f25ea3afa5a492507a36b4187ec5c03167c63[m
Author: Linfeng Zhang <linfengz@google.com>
Date:   Mon May 7 12:46:14 2018 -0700

    Add vpx_sum_squares_2d_i16_neon()
    
    Perf shows CPU [1;31mtime[m of this function dropped from 0.81% to 0.15%.
    
    Change-Id: I8a7649ca5c15af2fc65cfb848f5befa0cc5e64f2

[33mcommit 11880f6a3d7e8a801a956d79c70421776523f532[m
Author: Hui Su <huisu@google.com>
Date:   Mon Apr 30 21:11:31 2018 -0700

    Don't use transform domain distortion when eob is 0
    
    When eob is 0, pixel domain distortion is more accurate and efficient.
    
    This mainly affects speed >= 2. Speed 0 always use pixel domain
    distortion; speed 1 use it most of the [1;31mtime[m.
    
    Compression impact(negative means gain):
            speed 2   speed 3   speed 4
    lowres   -0.04%   -0.06%    -0.06%
    midres   -0.10%   -0.10%    -0.20%
    hdres    -0.01%   -0.03%    -0.06%
    
    Encoding speed is about neutral.
    
    Change-Id: I77b957658deeaad57381fd13afc11bacdec8c08f

[33mcommit 9cf725a4f482344d137247a9d09d7a499bbc80bf[m
Author: Jerome Jiang <jianj@google.com>
Date:   Wed Apr 25 11:33:24 2018 -0700

    VP9 SVC: Add new level to constrain inter-layer pred.
    
    Add another level (INTER_LAYER_PRED_ON_CONSTRAINED) to the
    inter-layer prediction control. This new level enforces the
    condition that a given spatial layer S can only do inter-layer
    prediction from the previous spatial layer (S - 1) from the same
    [1;31mtime[m/superframe.
    
    BUG=webm:1526
    
    Change-Id: I0a1ec95b2c220c7b13a9a425d5fb0a8814c23c70

[33mcommit 581b6b826e1b157fc38606e4755d5fb56a51bbdb[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Apr 18 17:46:16 2018 -0700

    vp9: Add condition of real-[1;31mtime[m mode to scene detection.
    
    This was removed by error from the change: ce11afb, and
    made some datarate tests fail.
    
    Change-Id: I0c29e1f5aede8f56ce835b25fed0528722350241

[33mcommit 78ba83bb917484336ee782f03adde4a6e5afb626[m
Author: Linfeng Zhang <linfengz@google.com>
Date:   Tue Apr 17 13:43:16 2018 -0700

    Update variance avx2 functions
    
    Old vs New
    Variance 64x64 [1;31mtime[m:  1145 ms           797 ms
    Variance 64x32 [1;31mtime[m:  1200 ms           831 ms
    Variance 32x32 [1;31mtime[m:  1228 ms          1135 ms
    Variance 32x16 [1;31mtime[m:  1374 ms          1491 ms
    Variance 16x16 [1;31mtime[m:  1688 ms          1571 ms
    
    sse2 vs avx2
    Variance 32x64 [1;31mtime[m:  1645 ms           957 ms
    Variance 16x32 [1;31mtime[m:  2031 ms          1243 ms
    Variance 16x8  [1;31mtime[m:  3071 ms          2275 ms
    
    Change-Id: I0202a556e4629977d647e219c2e897e1ab6accb2

[33mcommit 55ca875e6bc2da9539fac2839611b3945f262e49[m
Author: Linfeng Zhang <linfengz@google.com>
Date:   Mon Apr 16 14:44:00 2018 -0700

    Update variance sse2 functions
    
    Old vs New
    Variance 64x64 [1;31mtime[m:   197 ms   143 ms
    Variance 64x32 [1;31mtime[m:   200 ms   146 ms
    Variance 32x64 [1;31mtime[m:   203 ms   140 ms
    Variance 32x32 [1;31mtime[m:   214 ms   152 ms
    Variance 32x16 [1;31mtime[m:   243 ms   153 ms
    Variance 16x32 [1;31mtime[m:   234 ms   197 ms
    Variance 16x16 [1;31mtime[m:   205 ms   205 ms
    Variance 16x8  [1;31mtime[m:   228 ms   222 ms
    Variance 8x16  [1;31mtime[m:   228 ms   232 ms
    Variance 8x8   [1;31mtime[m:   282 ms   240 ms
    Variance 8x4   [1;31mtime[m:   506 ms   341 ms
    Variance 4x8   [1;31mtime[m:   518 ms   415 ms
    Variance 4x4   [1;31mtime[m:   604 ms   628 ms
    
    Observed vp9 encoder speed up when encoding a 720p video.
    
    Change-Id: Iebb98f3b3d8adbc11a733a529d8427ce3d2a5314

[33mcommit 266d495f22715d469dbb1892fa86d1ffce49c675[m
Author: Jerome Jiang <jianj@google.com>
Date:   Fri Apr 13 13:56:45 2018 -0700

    Clean up svc comment in vp9_bitstream.c
    
    SVC related conditions were removed long [1;31mtime[m ago and comments should be
    removed too.
    
    Change-Id: Iff3f3b6815d85ae5a69994932a4893cd1f831ce3

[33mcommit 99e1784525d940ec9975261e352252f89f0694db[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Fri Mar 23 18:04:35 2018 +0000

    Revert "remove fldcw/fstcw from Win64 builds"
    
    This reverts commit 60a3cb9ad840377d46286bfd703c30a4a4ee56e2.
    
    Reason for revert: x87 instruction usage might not be as
    clear cut as I would like. At the very least, llvm mingw
    builds appear to having issues with emms.
    
    Original change's description:
    > remove fldcw/fstcw from Win64 builds
    >
    > _MCW_PC (Precision control) is not supported on x64:
    > https://docs.microsoft.com/en-us/cpp/c-run[1;31mtime[m-library/reference/control87-controlfp-control87-2
    >
    > The x87 FPU is not used on Win64 or ARM so setting the x87 control word
    > is not necessary. The SSE/SSE2 and ARM FPUs don't have a precision
    > control - the precision is embedded in each instruction - so the need to
    > set the control word is also gone.
    
    BUG=webm:1500
    
    Change-Id: I25bcfa96bc9c860f6c7e03315d75fa6fd1d88ec5

[33mcommit 60a3cb9ad840377d46286bfd703c30a4a4ee56e2[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Mar 5 13:48:35 2018 -0800

    remove fldcw/fstcw from Win64 builds
    
    _MCW_PC (Precision control) is not supported on x64:
    https://docs.microsoft.com/en-us/cpp/c-run[1;31mtime[m-library/reference/control87-controlfp-control87-2
    
    The x87 FPU is not used on Win64 or ARM so setting the x87 control word
    is not necessary. The SSE/SSE2 and ARM FPUs don't have a precision
    control - the precision is embedded in each instruction - so the need to
    set the control word is also gone.
    
    BUG=webm:1500
    
    Change-Id: I014513282a7dc320d1cdeaec48249d98a66bf09f

[33mcommit 8b263798d0ac04a7858fb1e52de80ca2bf09ece2[m
Merge: c5630b9e6 fc1302cd8
Author: Johann Koenig <johannkoenig@google.com>
Date:   Tue Mar 20 17:06:18 2018 +0000

    Merge "x86 android: default on real[1;31mtime[m-only"

[33mcommit fc1302cd8b590b8e7e5365476f485c15d40dd287[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Mar 12 15:20:28 2018 -0700

    x86 android: default on real[1;31mtime[m-only
    
    Like the arm-based target, set real[1;31mtime[m-only on by default.
    
    BUG=webm:873
    
    Change-Id: I2e04cfc43390953435e985716a25f32b8d4fadda

[33mcommit 46adbc4af8d670d16f89b403709173484dd50971[m
Author: Jerome Jiang <jianj@google.com>
Date:   Mon Jan 29 10:14:40 2018 -0800

    Reland "Add ROI support for VP9."
    
    Extended ROI struct suitable for VP9.
    ROI input from user is passed into internal struct and applied on every frame
    (except key frame).
    
    Enabled usage of all 4 VP9 segment features (delta_qp, delta_lf, skip,
    ref_frame) via the ROI map input.
    Made changes to nonrd_pickmode for the ref_frame feature.
    
    Only works for real[1;31mtime[m speed >= 5.
    AQ_MODE needs to be turned off for ROI to take effect.
    
    Change example in the sample encoder: vpx_temporal_svc_encoder.c to be suitable
    for VP9.
    Add datarate test.
    
    Bump up ABI version.
    
    BUG=webm:1470
    
    Change-Id: I663b8c89862328646f4cc6119752b66efc5dc9ac

[33mcommit 62b013abe8b1134f291b9e94775a81fbbe9e6d38[m
Author: Jerome Jiang <jianj@google.com>
Date:   Fri Feb 9 18:53:54 2018 +0000

    Revert "Add ROI support for VP9."
    
    This reverts commit 4e5b4b58483e1f38e37acd49b809d725b4f66c26.
    
    Reason for revert: Commit message inaccurate.
    
    Original change's description:
    > Add ROI support for VP9.
    >
    > Extended ROI struct suitable for VP9.
    > ROI input from user is passed into internal struct and applied on every frame
    > (except key frame).
    >
    > Enabled usage of all 4 VP9 segment features (delta_qp, delta_lf, skip,
    > ref_frame) via the ROI map input.
    > Made changes to nonrd_pickmode for the ref_frame feature.
    >
    > Only works for real[1;31mtime[m speed >= 5.
    > AQ_MODE needs to be turned off for ROI to take effect.
    >
    > Change example in the sample encoder: vpx_temporal_svc_encoder.c to be suitable
    > for VP9.
    > Add datarate test.
    >
    > Bump up ABI version.
    >
    > BUG=webm:1470
    >
    > Change-Id: I7e0cf6890649adb98a5fda2efb6ae1fa511c7fc9
    
    TBR=yaowu@google.com,jzern@google.com,marpan@google.com,builds@webmproject.org,jianj@google.com
    
    Change-Id: I000dbd81e0c67cb8a0dcde4013ee9bf7afb038f0
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Bug: webm:1470

[33mcommit 4e5b4b58483e1f38e37acd49b809d725b4f66c26[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Jan 29 10:14:40 2018 -0800

    Add ROI support for VP9.
    
    Extended ROI struct suitable for VP9.
    ROI input from user is passed into internal struct and applied on every frame
    (except key frame).
    
    Enabled usage of all 4 VP9 segment features (delta_qp, delta_lf, skip,
    ref_frame) via the ROI map input.
    Made changes to nonrd_pickmode for the ref_frame feature.
    
    Only works for real[1;31mtime[m speed >= 5.
    AQ_MODE needs to be turned off for ROI to take effect.
    
    Change example in the sample encoder: vpx_temporal_svc_encoder.c to be suitable
    for VP9.
    Add datarate test.
    
    Bump up ABI version.
    
    BUG=webm:1470
    
    Change-Id: I7e0cf6890649adb98a5fda2efb6ae1fa511c7fc9

[33mcommit b78dad3ffad819cb79f0430ed5dc176656110b34[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Feb 7 15:05:20 2018 +0000

    Adjust MAXRATE_1080P.
    
    This value was originally set in response to requests from the hardware
    team before levels were properly defined for VP9.
    
    Even if a level is not specified for an encode, it imposes a maximum
    frame size for videos of dimensions <= 1080P.  For larger formats the
    limit was set at 250 bits per MB.
    
    This patch modifies the limit to be more in line with the requirements
    specified for level 4 (max rate for a 4 frame group of 16 Mbits).  If a lower
    level is specified at encode [1;31mtime[m and this mandates a smaller maximum frame
    size then the level requirement will still take precedence.
    
    Increasing this value allows for some slide shows or very low motion clips
    to code a better quality key frame.
    
    Change-Id: Ic08e0e09c8a918077152190c59732b9a1c049787

[33mcommit a9bbff1049ea774ed07286d979dbda7e7f2fe430[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Jan 25 19:00:31 2018 -0800

    vp9-svc: Adjust logic on intra mode search.
    
    For SVC, on spatial enhancement layer, intra
    search was disabled unless best reference frame
    is golden (i.e., spatial/inter-layer prediction),
    except for some other conditions (lower layer is key
    or golden is not an allowed reference).
    
    Fix is to add the base temporal layer condition,
    so intra search will not be force-disabled for base
    temporal layer frames.
    
    This improves metrics (-1-2%) for SVC 3 and 2 layer config.
    Some small encode [1;31mtime[m is expected, but since condition
    only affect base temporal layers (i.e., every 4 frames
    for 3 layers), increase is small.
    
    Change-Id: I10b824faef99560dfdeeb02ba8bf8e3e1eea6255

[33mcommit 067457339bc6dce72cc07cb0ebf9f549f452250a[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jan 24 17:12:43 2018 -0800

    vp9-svc: Add QP dependency to thresh_svc_skip_golden.
    
    In nonrd-pickmode: the golden/spatial reference for inter-layer
    prediction may be skipped in the mode testing. Add QP dependency
    to reduce the threshold for skipping (i.e., check it more often)
    at high QP, if the lower layer was encoded at lower QP relative
    to the current layer.
    
    At high QP, a better quality lower resolution is more likely to
    provide good spatial (inter-layer) prediction.
    
    avgPSNR/SSIM metrics up by ~1% (all clips positive gain or neutral).
    Some decrease in encode [1;31mtime[m (~1-2%) expected at lower bitrates,
    for 3 layer SVC.
    
    Change-Id: I9ee0f62d4b10d4ebd30165d378ecfa4399ae5ef1

[33mcommit 321f295632b1a66ac4de576f2f9fc99e150ac953[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Jan 5 09:33:27 2018 -0800

    vp9-svc: Use eightap_smooth for downsampling at low resol.
    
    Switch from bilinear to eighttap_smooth for frame-level
    downsampling at low resolutions (<= 320x240).
    
    avgPSNR/SSIM metrics increase from ~0.5-2% (all clips positive gain),
    for 2 and 3 spatial layer SVC, with 3 temporal layers.
    Small/negligible increase in encoding [1;31mtime[m (< 1%).
    
    Change-Id: I758472fc4fddd51d87f13c9d1a1cd4986ef5d41f
For keyword perf:
[33mcommit 95ac0cc9f77e8b42edc8db1c38c557fc5c9b60fd[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Dec 21 14:46:52 2018 -0800

    Adaptively choose block sizes in temporal filtering
    
    Use variable block sizes in temporal filtering. Based on prediction
    errors of 32x32 or 16x16 blocks, choose the block size adaptively.
    This improves the coding [1;31mperf[mormance, especially for HD resolutions.
    
    Speed 1 borg test result:
            avg_psnr:  ovr_psnr:    ssim:
    lowres:  -0.090     -0.075      -0.112
    midres:  -0.120     -0.107      -0.168
    hdres:   -0.506     -0.512      -0.547
    
    Change-Id: I8f774e29ecb2e0dd372b32b60c32d8fa30c013a8

[33mcommit 3035d5c547029d4df1266d89f5ef57fc0dc60e71[m
Author: James Zern <jzern@google.com>
Date:   Thu Dec 20 00:10:47 2018 -0800

    vp9: limit lpf workers to min(threads,tiles,sb_rows)
    
    this implementation does not scale well beyond that. this restores the
    [1;31mperf[mormance in v1.7.0.
    
    BUG=webm:1574
    
    Change-Id: I8f3464cfe871988fa06ebefe9954811fd002584e

[33mcommit 581eed2bc0565f3ddd169c5084cb2afbde188597[m
Merge: b5b1a7753 e3e770dbf
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Dec 17 23:09:22 2018 +0000

    Merge "vp9-svc: Define rc scene change flag per su[1;31mperf[mrame"

[33mcommit e3e770dbf7fb49c7199b6d0378cf80d62e0666c8[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Dec 17 13:23:01 2018 -0800

    vp9-svc: Define rc scene change flag per su[1;31mperf[mrame
    
    Define the rc->high_num_blocks_with_motion, set in the
    scene change analysis, to be defined per su[1;31mperf[mrame.
    This is used for increasing motion search area on
    some (super)frames, e.g., for scrolling.
    
    Also some code cleanup in rt_speed_feature_.
    
    No change in behavior.
    
    Change-Id: I1a5c04b9cd4aef1723ce42f82e981a2ca15c8b9d

[33mcommit 1081ca3774fc813db386598e1bde90d9aaad68d7[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Dec 3 14:21:04 2018 -0800

    vp9-svc: Fix to postencode drop for layers.
    
    Postencode drop is only checked on base spatial
    layers, and if set, whole su[1;31mperf[mrame is dropped and
    and next su[1;31mperf[mrame is encoded at max-q.
    
    Fix here is to make sure all layers are encoded at
    max-q on a postencode dropped frame.
    
    Change-Id: I2313d83ee29a382465bcec1085d8c73c37ce26d6

[33mcommit b2f37bac65457d327002130a58d98ae2d2dcab7f[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Dec 3 10:49:41 2018 -0800

    vp9: Overshoot detection for skipped base layer.
    
    If scene/slide change is detected on current
    su[1;31mperf[mrame and max-q set because of high overshoot:
    then if the lower/base spatial layer are skipped on
    the current su[1;31mperf[mrame, max-q is forced on the
    next encoded base/lower spatial layers.
    
    Change-Id: Id61efda86ee545395012e19476d19845e3932678

[33mcommit 7ca417f66547dc5e9e3ad36c45e147f05e66522a[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Nov 30 10:23:33 2018 -0800

    Simplify constant q mode qp selection
    
    Decouple the constant q mode qp selection from vbr/cbr/cq modes.
    Skip vp9_frame_type_qdelta() adjustment for non-ARF inter frames,
    instead keep using the cq-level. It improves the compresson
    [1;31mperf[mormance:
    
             avg PSNR       overall PSNR     SSIM
    lowres   -0.17%         -0.20%           -0.1%
    midres   -0.21%         -0.24%           -0.08%
    hdres    -0.15%         -0.19%           -0.04%
    
    Change-Id: I52fd5f8edbd3fdcbeda31ee3a6d6eb016091a7e3

[33mcommit 80519937e30eb3c81c4a91581db72785270aca9c[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Nov 28 22:08:08 2018 -0800

    vp9: Fix condition for disabling noise estimation
    
    Fix condition for turning off denoiser due to high
    motion: use proper su[1;31mperf[mrame counter and
    frames_since_key counter so this condition won't
    take effect on key (super)frame.
    
    Change-Id: Ic502bf5ebfa32a921f611a78e8e963eb62b5bc79

[33mcommit 09ed15d255d96e87ef388ddda7c276dd14042c37[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Nov 26 13:58:28 2018 -0800

    vp9-svc: Fix to skip enhancement layer setting
    
    If in constrained layer drop mode, avoid setting
    skip flag if base layer is dropped, as whole su[1;31mperf[mrame
    will be dropped in this case. This avoids an assert trigger
    in the svc su[1;31mperf[mrame packing.
    
    Change-Id: I51c953c7fee979790c65c798bac9bd3d805dc66f

[33mcommit 8d9b1a7d82f691cc4f0afca6bfaadcc8d818ac26[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Nov 26 09:43:07 2018 -0800

    Fix ARF rate allocation for cq mode
    
    In the limited test set, it improves the cq mode compression
    [1;31mperf[mormance by 1.9% in PSNR and 6% in SSIM as compared to use
    same quantization parameter for all ARFs.
    
    Change-Id: I35c4d7097b5838ab0b92d7f9937520721e3bb84b

[33mcommit 3a56c238ee82604b2d420d858f4edfa28af4e6eb[m
Author: Jon Kunkee <jkunkee@microsoft.com>
Date:   Thu Nov 15 01:27:42 2018 -0800

    Work around ARM64 Windows SDK arm_neon.h quirk
    
    Since the Windows SDK has an ARM32-only arm_neon.h, files including it
    during ARM64 Windows builds need to be redirected to arm64_neon.h.
    
    Instead of editing many files to include ARM64-Windows-specific ifdef
    logic, this commit introduces an ARM64-Windows-specific version of
    arm_neon.h that [1;31mperf[morms the needed redirection and lands earlier in
    the header search path than the ARM32-only arm_neon.h.
    
    Change-Id: Idc63947a238ca1bd0c479d8f4ad68950487947c6

[33mcommit 84b19ab5acb9f7104441c2c3c5a8157a95e417e1[m
Author: Marco Paniconi <marpan@google.com>
Date:   Sun Nov 11 22:09:31 2018 -0800

    vp9: Reorganize the buffer level for cbr mode
    
    Refactor the code with some changes.
    
    Split update into two parts: move the fillup
    (with per-frame-bandwidth) before the encoding, and
    keep the leaking part (with encoded_frame_size) after
    the encoding (postencode).
    
    For SVC with ref_frame_config usage: allow usage of timestamp
    delta for the fillup part of buffer, instead of the (average)
    framerate passed in via the duration.
    
    Moving the buffer fillup (+per-frame-bandwidth) part to the
    pre-encode causes some difference in [1;31mperf[mormance
    (since buffer level affects active_worst/QPand frame-dropping),
    but the change is observed to be small.
    Made small adjustment to active_worst_quality to compensate.
    
    Adjust some thresholds in datarate tests.
    
    Change-Id: I81a5562367034f318cffd451304bc4a34bf02a1d

[33mcommit a03b04a55fded9dea0ebbb423381a93ea39b866e[m
Author: Jerome Jiang <jianj@google.com>
Date:   Tue Aug 28 14:24:53 2018 -0700

    vp9: postencode drop frame for screen content in CBR.
    
    Encode the next frame at max q.
    
    For layers: post_encode_drop is only check on base
    spatial layer, and if base is post-encoded-dropped,
    then whole su[1;31mperf[mrame is dropped.
    
    Added API to guard postencode dropping. Turned off by default.
    
    Added unittest.
    
    BUG=b/112990050
    Change-Id: I42fee279014aca616f7a4d9b582cb2bf5da2f2e7

[33mcommit 5a51d961f2432e13ac2dc97ab75f5e56cab6c6ae[m
Author: Chi Yo Tsai <chiyotsai@google.com>
Date:   Mon Oct 29 16:12:05 2018 -0700

    Add SSE2 support for hbd 4-tap interpolation filter.
    
    Unit test [1;31mperf[mormance on bitdepth 10:
        | 4X4 | 8X8 |16X16|64X64|
     2D |1.582|1.461|1.425|1.572|
    HORZ|1.643|1.247|1.346|1.345|
    VERT|1.378|1.695|2.020|1.763|
    
    Unit test [1;31mperf[mormance on bitdepth 12:
    
        | 4X4 | 8X8 |16X16|64X64|
     2D |1.578|1.409|1.426|1.497|
    HORZ|1.625|1.153|1.323|1.259|
    VERT|1.392|1.707|2.030|1.787|
    
    Change-Id: I6df85330ac33fcb17d46e4302b41415dda1219f5

[33mcommit 50a90744407be7b88c47737d1bba79e7ffb5c2d3[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Oct 29 14:08:20 2018 -0700

    Properly space qp in q mode for multi-layer ARF
    
    Space the quantization parameter distribution according to the
    layer depth for multi-layer ARF coding structure. This allows
    lower layers to have relatively smaller quantization parameters
    than higher layers. It improves the compression [1;31mperf[mormance
    in constant q mode for multi-layer ARF system:
    
            avg PSNR      overall PSNR      SSIM
    lowres  -0.33%         -0.31%          -1.44%
    midres  -0.29%         -0.38%          -1.14%
    hdres   -0.27%         -0.49%          -1.02%
    
    Change-Id: I9cfe2f27e6c0029c30614970a46de3045840264e

[33mcommit 47922cc140b6293194f4b26a5aa25d31f03bc1a0[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Oct 23 20:30:35 2018 -0700

    Enable tpl model to support multi-layer ARF
    
    Enable temporal dependency model for the base layer ARF. It
    improves the multi-layer ARF compression [1;31mperf[mormance (results
    are tested in speed 0 vbr mode):
    
             avg PSNR    overall PSNR     SSIM
    lowres   -0.40%       -0.46%         -0.32%
    midres   -0.59%       -0.68%         -0.45%
    720p     -0.55%       -0.59%         -1.07%
    
    Change-Id: I7790b89ccfb6e61f9b7965f34d348c7440220dd0

[33mcommit 79ef532489271c7ef744a16ba71e23ac6b6810af[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Oct 22 09:28:04 2018 -0700

    Use the proper gfu_boost factor to compute rd_mult
    
    Update the Lagrangian multiplier according to the gfu_boost factor
    assigned per frame. It improves the multi-layer ARF compression
    [1;31mperf[mormance (results below shown for speed 0):
    
             avg PSNR      overall PSNR      SSIM
    lowres    -0.08%          0.02%         -0.28%
    midres    -0.08%          0.03%         -0.22%
    hdres     -0.19%         -0.10%         -0.39%
    nflx2k    -0.29%         -0.18%         -0.85%
    
    Change-Id: Ifeb4b14918f880ba011ea41c1454ab00504f8855

[33mcommit 043d9cfe6cd06401640e0664fcb2a944ef9016bc[m
Author: Angie Chiang <angiebird@google.com>
Date:   Wed Oct 17 13:56:42 2018 -0700

    Preserve code of doing mv search in raster order
    
    With this change, there will be three version of mv search scheme
    on the codebase simultaneously.
    We will do further experiment to evaluate which version is better
    in terms of visual quality and coding [1;31mperf[mormance.
    
    Change-Id: I6bf504b4551316ef10b8a341ab3ba14d0ec977ce

[33mcommit 62830c53a644f5feaa49431b39c85093d2e387fc[m
Author: Chi Yo Tsai <chiyotsai@google.com>
Date:   Tue Oct 16 12:26:34 2018 -0700

    Refactor SSE2 Code for 4-tap interpolation filter on width 16.
    
    Some repeated codes are refactored as inline functions. No [1;31mperf[mormance
    degradation is observed. These inline functions can be used for width 8
    and width 4.
    
    Change-Id: Ibf08cc9ebd2dd47bd2a6c2bcc1616f9d4c252d4d

[33mcommit e4f030be87735114f5e70ba45e006c1afbdd0872[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Oct 11 15:13:47 2018 -0700

    Make 4-tap interp filter coefficients even numbers
    
    This CL modified 4-tap interp filter coefficients to be even numbers,
    which would help in writing 4-tap filter SIMD optimizations. The coding
    [1;31mperf[mormance change was negligible. Speed 1 borg test showed:
            avg_psnr:  ovr_psnr:    ssim:
    lowres:  -0.003    -0.012      -0.017
    midres:  0.029     0.018        0.043
    hdres:   0.024     0.044        0.033
    
    Change-Id: Id7c54bb9a9c1aee19c41bc6f1dc3b9682d158bba

[33mcommit e188b5435de71bcd602c378f1ac0441111f0f915[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Oct 11 10:24:16 2018 +0000

    Revert "vp8: Increase rate threshold for overshoot-drop"
    
    This reverts commit bc066684ca4deff24d02ee56071d731b431bf438.
    
    Reason for revert: <INSERT REASONING HERE>
    Regression in webrtc [1;31mperf[m test
    
    Original change's description:
    > vp8: Increase rate threshold for overshoot-drop
    >
    > Increase the rate threshold for the dropping when
    > overshoot is detected during encoding. This helps
    > to prevent some unneccessary drops for hard content.
    >
    > Change-Id: I258bf33883d46347efd44e1e192cb25c444d05fe
    
    TBR=sprang@chromium.org,marpan@google.com,builds@webmproject.org
    
    # Not skipping CQ checks because original CL landed > 1 day ago.
    
    Change-Id: Ib0e84747430ba6d04e479f9efd86d628b80a1e67

[33mcommit 59993f16611a67b3d74c3f5babee5009e3669392[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Sep 26 16:34:16 2018 -0700

    Adapt GOP size threshold to the allowed layer depth
    
    Increase the total prediction error budget linearly with the
    allowed ARF layer depth. This in general improves the compression
    [1;31mperf[mormance, but does hit corner cases on a few clips at very
    low bit-rate range (corresponding to 26 - 28 dB range). To mitigate
    such problem, we temporarily work around this problem by limiting
    the first GOP size to be ~8 so as to not drain up the bit resource.
    
    The overall compression [1;31mperf[mormance improvements over the current
    multi-layer ARF system in speed 0 are:
    
               overall PSNR      avg PSNR        SSIM
    lowres     -0.47%            -0.13%         -1.51%
    midres     -1.30%            -1.16%         -2.80%
    hdres      -0.91%            -0.84%         -2.15%
    
    Change-Id: Ia4880ab63e98e15a9db99aea6eabfd3d1da9270d

[33mcommit f6ddb92a33aac1081348df1e2f899b3c1f55028d[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Sep 24 13:53:53 2018 -0700

    Use layer dependent gfu_boost factor
    
    When multi-layer ARF is enabled, use the corresponding gfu_boost
    factor assigned to each ARF to compute the best_quality_index
    adjustment. This on average improves the coding [1;31mperf[mormance by
    0.2% for lowres and hdres, 0.4% for ntflx2k. It seems this change
    will only affect a small group of clips, e.g., pamphlet, bowing,
    mobcal_720p, etc., which tend to gain 4-5%, whereas the rest
    clips remain largely identical coding statistics.
    
    Change-Id: Ie19636a6cf32214aefd73e21ead2aea647ddbca8

[33mcommit a07707125f84cab52dc6b4d3f09ed911712198f2[m
Author: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
Date:   Thu Sep 6 18:29:16 2018 +0200

    Fix buffer overrun of postproc_state.limits
    
    Always allocate cpi->common.postproc_state.limits using unscaled width.
    
    With ./configure --enable-pic --enable-decode-[1;31mperf[m-tests
    --enable-encode-[1;31mperf[m-tests --enable-encode-[1;31mperf[m-tests
    --enable-vp9-highbitdepth --enable-better-hw-compatibility
    --enable-internal-stats --enable-postproc --enable-vp9-postproc
    --enable-error-concealment --enable-coefficient-range-checking
    --enable-postproc-visualizer --enable-multi-res-encodin
    --enable-vp9-temporal-denoising --enable-webm-io --enable-libyuv
    segfaults tend to occur in VP9/DatarateOnePassCbrSvcSingleBR.* tests.
    
    This is an analogue to issue
    https://bugs.chromium.org/p/webm/issues/detail?id=1374
    where a buffer allocated using a scaled width is reused after scaling
    back to the original size. Unfortunately, in this case the unscaled
    width doesn't appear to be known in the immediated context of the
    allocation, so the the signature of vp9_post_proc_frame needs to be
    changed to provide that information in order to provide a similar fix
    as in #1374.
    
    Signed-off-by: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
    Change-Id: I6f943aafbb3484ee94c5b38d7fcdd9d53fce3e5f

[33mcommit 9868499e4b6a2f986017c62a5adc6f1933fe992f[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Sep 10 11:55:10 2018 -0700

    Rework two_pass_first_group_inter()
    
    This function is used to in part decide if to trigger recode loop
    for the first normal P frame in a GOP. Rework its design logic to
    support the GOP with multi-layer ARF. Allow recode when there is
    a transition from ARF/OVERLAY/USE_BUF to normal P frame.
    
    The overall coding [1;31mperf[mormance for multi-ARF gets slightly better
    (less than 0.1% for show_existing_frame case). Tested on a few
    clips, the encoding speed remains similar too. This change primarily
    serves to help integration of multi-layer ARF and dual-ARF systems.
    
    Change-Id: Ia44e44526b05029b1546985b3eb649e767d5444f

[33mcommit 740083a97bb3ef0a11e45977611402a047099cfb[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Sep 7 16:37:42 2018 -0700

    Separate frame context index for GOP layers
    
    Use separate frame context index to code frames at different layers.
    The maximum index cap is set as 3. This improves the compression
    [1;31mperf[mormance of multi-layer ARF by 0.15% across the test sets.
    
    The overall coding gains from multi-layer ARF are
    
             avg PSNR       ovarall PSNR        SSIM
    lowres   -3.9%            -3.7%            -3.2%
    midres   -3.5%            -3.2%            -2.3%
    nflx2k   -4.3%            -4.6%            -3.0%
    
    Change-Id: I8a0b345fdd47823c018544a6b4748753faf89dc1

[33mcommit bf3f26a93548b37c186d9be7ac2108f4dbcd60c1[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Aug 31 15:54:10 2018 -0700

    Adaptive ARF factor decision
    
    Re-count the factors to decide bit boost factor for the
    intermediate layer ARFs. Make the gfu_boost factor assigned to
    each ARF adapt to its local factors.
    
    This and the recursive change 5bfe9eb together improves the
    multi-layer ARF compression [1;31mperf[mormance:
    
              avg_psnr      ovr_psnr     ssim
    lowres    -0.39%        -0.54%       -1.6%
    midres    -0.98%        -1.26%       -2.3%
    hdres     -0.95%        -1.13%       -2.3%
    
    Change-Id: I5fec3ea75cae58825787dc88dadc7e8697a041ea

[33mcommit d748cfdad2378fc488fb5df4411adf5f2d5b99c9[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Aug 31 15:42:19 2018 -0700

    vp9-svc: Add first_spatial_layer_to_encode per su[1;31mperf[mrame
    
    VP9E_SET_SVC_LAYER_ID sets the first spatial layer to
    encoder per su[1;31mperf[mrame, so add this parameter to svc encoder.
    This is needed, for example, to properly set is_key_frame for
    spatial layers when base spatial layer is skipped encoded.
    
    Change-Id: Ifd4ac77f539197ec021e62f4c624a6cc79d64f43

[33mcommit 2713dba538406c10dd9684f2df877aef014583d8[m
Author: Hui Su <huisu@google.com>
Date:   Mon Jul 16 22:05:19 2018 -0700

    ML based rectangular partition search pruning
    
    Add a ML model to predict if rectangular partition search can be skipped
    without much coding loss. This model is enabled for speed 0 low bitdepth
    only.
    
    Impact on coding [1;31mperf[mormance is minor:
                 avg_psnr     ovr_psnr     ssim
    lowres       -0.005%       0.005%     0.017%
    midres        0.100%       0.114%     0.134%
    hdres         0.048%       0.083%     0.074%
    jvet480p      0.035%       0.027%     0.044%
    jvet720p      0.094%       0.090%     0.174%
    
    Tested encoding speed over 20 midres and hdres clips, average speed
    gain is about 8%; maximum speed gain is 23%.
    
    Change-Id: I5d4029dec7134c53ac68ab6cf0c8077dc0b767ed

[33mcommit dafe064289a917977439ab6f4f002b9946496084[m
Author: Supradeep T R <supradeep.tr@ittiam.com>
Date:   Tue Jun 12 13:57:39 2018 +0530

    Loopfilter MultiThread Optimization
    
    Adding LPF within the tileworker hook. This means that LPF will be done
    immediately after decode, without waiting for all threads to sync.
    
    Performance Improvement -
    
    Platform        Resolution      2 Threads       4 Threads
    X86             720p            7.24%           22.04%
                    1080p           5.29%           17.02%
    ARM             720p            4.61%           8.75%
                    1080p           5.55%           12.03%
    
    x86 Improvement measured on Intel Core i7-6700 CPU @ 2.10GHz set
    in [1;31mperf[mormance with turbo mode off
    ARM Improvement measured on Nexus 6 Snapdragon 805 Quad-core  @ 2.65 GHz
    
    Change-Id: Ifa73c71b40db3fa7fa16f54f4e3aa06d1258caae

[33mcommit daa8482fa71fc744e2153cec3c6ef337064ef882[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Aug 10 17:01:08 2018 -0700

    Use YUV components to build the temporal filter
    
    Use both luma and chroma components simultaneously to estimate the
    non-local mean kernel and build the temporal filter. It improves
    the compression [1;31mperf[mormance primarily for chroma components. Tested
    in speed 0 and vbr mode, the coding gains are:
    
              Overall PSNR   SSIM     PSNR_U      PSNR_V
    low        -0.10%       -0.12%    -0.48%      -0.49%
    mid        -0.13%       -0.16%    -0.58%      -0.88%
    720p       -0.31%       -0.24%    -0.75%      -0.72%
    hd         -0.09%       -0.10%    -0.59%      -0.79%
    nefl2k     -0.30%       -0.13%    -0.53%      -0.50%
    
    Change-Id: I24d39997818322b0d69bd9dbeda02c60cd2b2e1b

[33mcommit 45ce790711d0b3bdcc1dc60589731939c3d1b749[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Aug 9 09:34:05 2018 -0700

    vp9-svc: Fix for scene detection for SVC
    
    For spatial layers: use the correct mi_cols/rows in the
    scene detection. The scene detection for spatial layers
    is only called once per su[1;31mperf[mrame, but we were using wrong
    mi_cols/rows (those for base spatial were being used).
    
    Also increase frame_since_key threshold to account for spatial
    layers.
    
    Change-Id: I2731da49684a798c4718693a0468eda7db82d2bd

[33mcommit bc37fc0fec0390357a50bf4d05b29d6982d0b680[m
Author: Hui Su <huisu@google.com>
Date:   Fri Aug 3 12:49:29 2018 -0700

    Remove unnecessary calls to load_pred_mv()
    
    This improves compression [1;31mperf[mormance slightly:
    Speed 1:
             avg_psnr   ovr_psnr   ssim
    lowres   -0.03%     -0.03%    -0.05%
    midres   -0.16%     -0.20%    -0.30%
    hdres    -0.13%     -0.13%    -0.16%
    
    Speed 2:
             avg_psnr   ovr_psnr   ssim
    lowres   -0.02%     -0.02%    -0.03%
    midres   -0.08%     -0.06%    -0.10%
    hdres    -0.08%     -0.08%    -0.10%
    
    Change-Id: Id357c1f98042f3c7af56f99e534bc81ea9a7cf36

[33mcommit 7b5553e139887a4b11e293aafe9efa3da3a53121[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 31 09:43:17 2018 -0700

    Use mesh full pixel motion search to build the source ARF
    
    Append mesh search to the diamond shape search to refine
    the full pixel motion estimation for source ARF generation.
    It improves the average compression [1;31mperf[mormance.
    
    Speed 0
            avg PSNR     overall PSNR     SSIM
    mid      -0.18%        -0.18%        -0.22%
    hd       -0.25%        -0.23%        -0.36%
    nflx2k   -0.22%        -0.23%        -0.37%
    
    Speed 1
           avg PSNR     overall PSNR      SSIM
    mid     -0.10%         -0.08%        -0.11%
    hd      -0.25%         -0.27%        -0.38%
    nflx2k  -0.20%         -0.20%        -0.34%
    
    The additional encoding time is close to the sample noise
    range. For bus_cif at 1000 kbps, the speed 0 encoding time
    goes from 83.0 s -> 83.6 s.
    
    Change-Id: I48647f50ec3e8f7ae4550a4bde831f569f46ecf3

[33mcommit dbe4d9c4ebac47ba39678a3f4e3953dd26891be5[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jul 26 16:41:55 2018 -0700

    Use diamond search to build tpl model and arf frames
    
    Use diamond search for full pixel motion estimation to build
    the temporal dependency model and the source arf frame. This gives
    better full pixel motion estimation accuracy. It improves the
    compression [1;31mperf[mormance.
    
    In speed 0,
             avg PSNR     overall PSNR     SSIM
    midres    -0.32%        -0.30%        -0.65%
    hdres     -0.88%        -0.91%        -1.31%
    nflx2k    -0.47%        -0.48%        -0.81%
    
    In speed 1,
            avg PSNR      overall PSNR     SSIM
    midres    -0.24%        -0.28%        -0.50%
    hdres     -0.82%        -0.83%        -1.18%
    nflx2k    -0.58%        -0.60%        -0.89%
    
    The encoding speed change is minor due to the fact that such motion
    estimation is triggered once at the beginning of each group of
    picture coding.
    
    Change-Id: Ib25c0ff4f7450c85fd7a38d24319bd7ae1b9dac8

[33mcommit 46c0cc11b6cbf31fdc0d7b40a8a5e93fefbbd261[m
Author: Angie Chiang <angiebird@google.com>
Date:   Thu Jul 26 14:14:19 2018 -0700

    Remove an extra vp9_encode_frame call
    
    The coding [1;31mperf[mormances drop slightly in speed 0
    lowres 0.021%
    midres 0.043%
    hdres 0.087%
    
    The speedups in speed 0 are observed as follow
    city_cif.y4m 4.5% speedup
    pamphlet.y4m 6.9% speedup
    
    Change-Id: I2f6209964ffdf7a93919b79033d8e6f9bc44d824

[33mcommit b1284dffdb16b82e940e39b226b656801c83289b[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jul 12 09:02:01 2018 -0700

    Reland "Enable tpl model for speed 0"
    
    This is a reland of 9c2c234a0b8f9c08719ac1fa286988a0a3626fd0
    
    Threaded mismatch has been addressed.
    
    Original change's description:
    > Enable tpl model for speed 0
    >
    > Enable adaptive Lagrangian multiplier for arf in speed 0, AQ mode 0,
    > and low bit-depth settings. This improves the peak compression
    > [1;31mperf[mormance:
    >
    >           avg PSNR       overall PSNR       SSIM
    > low       -0.462%         -0.535%          -0.358%
    > mid       -0.780%         -0.857%          -0.868%
    > hd        -0.914%         -1.017%          -0.471%
    > 720p      -0.624%         -0.671%          -1.553%
    > nflx2k    -0.764%         -0.784%          -0.908%
    >
    > The encoding time at speed 0 is slightly changed to be faster or
    > slower:
    >
    > city_cif 1000 kbps
    > 78.2 seconds -> 78.1 seconds
    >
    > bus_cif 1000 kbps
    > 98.6 seconds -> 98.8 seconds.
    >
    > Change-Id: I18e7337bb61d985cbd3cf29e56439a6cdf675389
    
    BUG=webm:1547
    
    Change-Id: I025a21683ceed23d5f7147e200555b58b791315c

[33mcommit 9c2c234a0b8f9c08719ac1fa286988a0a3626fd0[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jul 12 09:02:01 2018 -0700

    Enable tpl model for speed 0
    
    Enable adaptive Lagrangian multiplier for arf in speed 0, AQ mode 0,
    and low bit-depth settings. This improves the peak compression
    [1;31mperf[mormance:
    
              avg PSNR       overall PSNR       SSIM
    low       -0.462%         -0.535%          -0.358%
    mid       -0.780%         -0.857%          -0.868%
    hd        -0.914%         -1.017%          -0.471%
    720p      -0.624%         -0.671%          -1.553%
    nflx2k    -0.764%         -0.784%          -0.908%
    
    The encoding time at speed 0 is slightly changed to be faster or
    slower:
    
    city_cif 1000 kbps
    78.2 seconds -> 78.1 seconds
    
    bus_cif 1000 kbps
    98.6 seconds -> 98.8 seconds.
    
    Change-Id: I18e7337bb61d985cbd3cf29e56439a6cdf675389

[33mcommit 8dbf0dcc67caaed0042ca97988a1fd61afb2e724[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jul 12 08:50:31 2018 -0700

    Use regular filter type for tpl model motion compensation
    
    This slightly improves the compression [1;31mperf[mormance by 0.05%.
    
    Change-Id: Ice0b1f5e1f24a77008b093f7830e51fcd6cbfa8e

[33mcommit de5a4fbb10e93e7a119ec1d5baffbc24897291a1[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Apr 11 10:59:34 2018 -0700

    vp9-svc: Intra-only frame for spatial layers.
    
    Use case is for layered (SVC) coding to allow higher
    resolution layers to continue decoding with temporal references,
    while base spatial layer is intra-only frame.
    
    Made encoder changes to real-time path for encoding intra-only
    frame. The intra-only frame will be followed by the overlay/copy
    frame (with both packed in the same su[1;31mperf[mrame).
    
    Use existing control to enable intra_only frame.
    Intra only is only applied to base spatial layer, and only
    allowed under fixed/non-flexible SVC mode, and only for
    1 < number_spatial_layers < 4.
    
    Added svc datarate unittest for inserting intra_only frame
    as sync frame. Added svc end to end tests to check mismatch.
    
    Change-Id: I2f4f0106b2c4f51ce77aa2c1c6823ba83ff2f7a0
    Signed-off-by: Marco Paniconi <marpan@google.com>

[33mcommit e51daf90fd83d4cf0afcb402a5f6382ce817e5d2[m
Author: Hui Su <huisu@google.com>
Date:   Sun Jun 24 17:00:54 2018 -0700

    Add partition breakout models for 720p resolution
    
    Add partition search breakout models for 720p resolution,
    currently enabled only for speed 0.
    
    Compression [1;31mperf[mormance change is neutral.
    Tested encoding speed over 20 720p clips:
    
    Speed gain(%)   QP=55   QP=45   QP=35
      max           22.1    20.3    29.8
    average         10.3     9.1    11.4
    
    Change-Id: I07499728bbc5b80035fc66fad882ea556c8d07f2

[33mcommit c398d5a77046ced168bfb7e37443852c5cb58b3b[m
Author: Hui Su <huisu@google.com>
Date:   Mon Jun 25 10:58:33 2018 -0700

    Turn on ML partition search breakout on speed 0
    
    Enable ML based partition search breakout on speed 0 when frame
    resolution is less then 720p and bitdepth is 8.
    
    Compression [1;31mperf[mormance change is neutral.
    Tested encoding speed over 20 480p sequences:
    
    Speed gain(%)   QP=30   QP=40   QP=50   QP=60
      max           14.4    18.6    17.8    24.4
    average          4.6     9.0     8.0    13.2
    
    Change-Id: Ia0d2947030ac774dc1533eb27ffc57f5b788a6ce

[33mcommit bb226f61ddbea5fad0e192fb6ba259962c1f2617[m
Author: Hui Su <huisu@google.com>
Date:   Thu Jun 21 21:03:37 2018 -0700

    Add a partition search breakout model
    
    for q-index between 100 and 150.
    
    This only affects speed 1 and 2, resolution under 720p, q-index between
    100 and 150, low bit-depth.
    
    Compression [1;31mperf[mormane change is neutral.
    Encoding speed gain is up to 16% for speed 1;
                           up to  6% for speed 2.
    
    Results from encoding city_4cif_30fps:
    speed 1, QP=36
    before:  37.964 dB, 45581b/f, 2.73 fps
    after:   37.958 dB, 45510b/f, 3.16 fps
    
    speed 1, QP=28
    before:  39.297 dB, 82452b/f, 2.14 fps
    after:   39.297 dB, 82310b/f, 2.25 fps
    
    speed 2, QP=36
    before:  37.903 dB, 45586b/f, 4.08 fps
    after:   37.895 dB, 45492b/f, 4.34 fps
    
    speed 2, QP=28
    before:  39.224 dB, 82272b/f, 3.03 fps
    after:   39.223 dB, 82152b/f, 3.17 fps
    
    Change-Id: Ieaefedad902df80aa9699545fa06294601955803

[33mcommit e86670a2af279917397271d6cfe4db2e30fe4693[m
Author: Zoe Liu <zoeliu@google.com>
Date:   Thu Jun 21 16:28:15 2018 -0700

    Add extra altref option for hierarchical structure
    
    This CL is to hook up the implemented hierarchical structure
    construction as well as its corresponding bitrate allocation
    functionality with the defining of a GF group.
    
    Currently the hierarchical structure is off by default. Hence this CL
    has no impact on coding [1;31mperf[mormance.
    
    Change-Id: I9e1ddfd877559e99072c23970f7fe103b64ed9ee

[33mcommit 960582af7607afb695e99f61c0e7f6e806a9f0b3[m
Author: Hui Su <huisu@google.com>
Date:   Mon Jun 18 16:07:41 2018 -0700

    Add a partition search breakout model
    
    for q-index between 150 and 200.
    
    Previously the ML based breakout feature is only supported for q-index
    larger than 200.
    
    This only affects speed 1 and 2, resolution under 720p, q-index between
    150 and 200, low bit-depth.
    
    Compression [1;31mperf[mormane change is neutral.
    Encoding speed gain is up to 30% for speed 1;
                           up to 20% for speed 2.
    
    Results from encoding city_4cif_30fps:
    speed 1, QP=38
    before:  37.689 dB, 41007b/f, 2.91 fps
    after:   37.687 dB, 40998b/f, 3.46 fps
    
    speed 1, QP=48
    before:  35.959 dB, 22106b/f, 3.66 fps
    after:   35.950 dB, 22118b/f, 4.83 fps
    
    speed 2, QP=38
    before:  37.630 dB, 40999b/f, 4.42 fps
    after:   37.633 dB, 41063b/f, 4.63 fps
    
    speed 2, QP=48
    before:  35.905 dB, 22177b/f, 4.90 fps
    after:   35.889 dB, 22145b/f, 5.92 fps
    
    Change-Id: Ibd4a2f4d7093fb248ab94ddd388cbaa8de2c5ef7

[33mcommit d99ba0399e0ef3f78a701e01df41707d66dafb4e[m
Author: Jingning Han <jingning@google.com>
Date:   Wed May 30 13:31:08 2018 -0700

    Refactor partition mode cost calculation
    
    Compute the coding block partition mode cost as additional rdcost
    to the cumulative rate-distortion cost from each coding block. This
    changes the coding [1;31mperf[mormance slightly due to the rounding error.
    The compression [1;31mperf[mormance change is neutral.
    
    Change-Id: Ibdccae0e79263a0e70af7592a8cb11458d795f8d

[33mcommit 238cf66eb5e376062ee13198ef537e848866b8aa[m
Author: Hui Su <huisu@google.com>
Date:   Tue Jun 12 11:56:09 2018 -0700

    Improve the partition search breakout speed feature
    
    Use a linear model to make partition search breakout decisions.
    Currently the model is tuned for large quantizers and small resolutions.
    So it is only used when q-index is larger than 200 and frame
    width/height is smaller than 720. Also it's not yet supported for high
    bit depth.
    
    Tested speed 1 and 2 on lowres and midres. Compression [1;31mperf[mormance is
    neutral. At low bitrates, encoding speedup is up to 50% for speed 1;
    up to 30% for speed 2.
    Some sample numbers:
    
    into_tree_480p, speed 1
    QP=60 before:  35.228 dB, 3488b/f, 7.78 fps
          now:     35.217 dB, 3475b/f, 11.57 fps
    QP=50 before:  37.492 dB, 7983b/f, 6.24 fps
          now:     37.491 dB, 7974b/f, 7.55 fps
    
    PartyScene_832x480_50, speed 1
    QP=60 before:  30.104 dB, 22426b/f, 3.28 fps
          now:     30.109 dB, 22410b/f, 4.43 fps
    QP=50 before:  33.016 dB, 46984b/f, 2.78 fps
          now:     33.018 dB, 46998b/f, 3.35 fps
    
    into_tree_480p, speed 2
    QP=60 before:  35.175 dB, 3506b/f, 10.96 fps
          now:     35.185 dB, 3510b/f, 13.47 fps
    QP=50 before:  37.448 dB, 8016b/f, 9.04 fps
          now:     37.459 dB, 8048b/f, 9.81 fps
    
    PartyScene_832x480_50, speed 2
    QP=60 before:  30.060 dB, 22537b/f, 4.42 fps
          now:     30.061 dB, 22541b/f, 5.38 fps
    QP=50 before:  32.923 dB, 47134b/f, 3.85 fps
          now:     32.920 dB, 47073b/f, 4.31 fps
    
    Change-Id: I674cba4f027c4c65f7837d5ec9179d6201e6ba86

[33mcommit 2459ce88815bfdf2e5268a3fffed26258e63c743[m
Author: Zoe Liu <zoeliu@google.com>
Date:   Thu Jun 14 11:09:41 2018 -0700

    Separate GF structure defining from bit allocation
    
    This CL separates the defining of the GF group structure from the
    handling of its bitrate allocation. The encoder [1;31mperf[mormance should stay
    unchanged.
    
    Change-Id: Ib77967757702bb4b284034e429d4c41ae86d0838

[33mcommit 7d97790438b796620a48dd2cfa6f2c6fe1f16871[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Jun 7 16:35:44 2018 -0700

    vp9-svc: Fix to frames_since_golden update for SVC.
    
    When the second (gf) temporal reference is used in SVC:
    the reference is refreshed on base TL su[1;31mperf[mrames, and so
    the rc->frames_since_golden counter was also only updated on
    base TL frames. But this was disabling the golden reference
    from being used as a temporal reference for TL > 0 frames
    (since frames_since_golden was 0/not updated on TL > 0 frames).
    
    Fix is to copy the update of rc->frames_since_golden to all
    upper temporal layers. This allows TL > 0 frames to test the
    golden inter mode.
    
    Gain on RTC set: ~2%, ~8% on desktop_vga clip.
    Encode time increase ~5-8% on linux, 3SL-3TL run with 1 thread.
    
    For now keep this off for TL > 0 frames in speed features, so
    this change does not change current behavior for speed >= 7.
    
    Change-Id: I405708f3f80039ae47bd64ec53e66f92160acd9e

[33mcommit f058688eaa8b9fb2ff1f4d92eb02cf888fd28ec0[m
Author: Jerome Jiang <jianj@google.com>
Date:   Fri Jun 1 14:27:34 2018 -0700

    vp9-svc: Allow usage of second (long term) temporal reference.
    
    Allow for second temporal reference for top spatial layer in SVC,
    when inter-layer prediction is disabled on INTER frames.
    The second temporal reference is labelled as the golden reference
    and the update/refresh of this reference buffer is only on base
    temporal layer su[1;31mperf[mrames. For now the period of refresh is
    fixed at every 20 TL0 su[1;31mperf[mrames.
    
    Average gain is ~4% on RTC set, several clips up
    by ~8-12%. Speed loss is about ~2% on mac.
    
    Feature is disabled as default for now.
    
    Change-Id: I2e5db5052c62dbe958a3b14be97d043823b7a529

[33mcommit 8446af7e9a12c5725e845564f40272dd9185c1cc[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed May 23 14:51:00 2018 -0700

    vp9: Rate control adjustments for screen content.
    
    For screen content mode: changes to reduce occurence of
    significant QP decrease (from one frame to next),
    which can cause large frames (overshoot/delay).
    -cap the buffer increase to optimal level for frame drop
    mode where full su[1;31mperf[mrame can drop
    -reduce the max_adjustment_down due to buffer overflow
    -reduce qp threshold to trigger re-encode on large frame
    
    Change-Id: I3e30e4814192b5f728abff3f7359eb64f561b8f0

[33mcommit b2004fdda6423fc6e8f3afb2afc7df03d0a19f53[m
Author: Marco Paniconi <marpan@google.com>
Date:   Tue May 22 15:02:45 2018 -0700

    vp9-svc: Add full su[1;31mperf[mrame drop mode.
    
    This will check for dropping full su[1;31mperf[mrame if any
    spatial layer is overshooting.
    
    Change-Id: Ic656807028ebef5552301b6d10399fbe3a6c890c

[33mcommit a2d5a4a9566874aea4f32303f74cad7ca408933a[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri May 18 14:50:46 2018 -0700

    vp9-svc: Fix issue with reseting lst_fb_idx.
    
    When encoding a given spatial layer and the same spatial layer
    on previous su[1;31mperf[mrame was dropped (or disabled due to 0 bitrate),
    the lst_fb_idx for current layer is set to the buffer index that
    was last updated on TL0 frame (for the same spatial layer).
    
    This condition was to maintain proper temporal prediction pattern
    under frame drops, and it should only apply to INTER frames.
    
    But the condition was causing an assert to be triggered on spatial
    layers whose base are key frames. Fix is to condition this reset of
    lst_fb_idx on the "is_key_frame" flag. Also initialize the
    fb_idx_upd_tl0 to -1 and only use it for a given spatial layer
    if its been set.
    
    These issues can happen when su[1;31mperf[mrame drop happens just before
    a key frame, or when stream starts with lower layers and dynamically
    enabled higher spatial layers.
    
    Added datarate unittest the inserts key frame after su[1;31mperf[mrame drop,
    and verified that this fix is needed for test to pass.
    Also modified the existing DisableEnable spatial layer test to trigger
    the issue of using fb_idx_upd_tl0 when it hasn't been set for a
    spatial layer.
    
    Change-Id: I059d1135736aca17e1326b9b4a2b16371eb4634e

[33mcommit bbca74d4129ce13be9c9dd10fbe6ab96ca63240a[m
Author: Jingning Han <jingning@google.com>
Date:   Tue May 15 13:04:49 2018 -0700

    Use the updated best rd cost for transform block search
    
    The compression [1;31mperf[mormance change is +/-0.01% for both speed 0/1.
    Locally tested the encoding speed:
    
    ped_1080p 150 frames speed 0
    79544 b/f 41.339 dB 503072 ms ->
    79566 b/f 41.338 dB 493009 ms.
    
    speed 1
    79789 b/f 41.152 dB 104583 ms ->
    79770 b/f 41.153 dB 102607 ms
    
    Change-Id: Ief200b613608643e5708cebe979982eb4a84831b

[33mcommit 7b3ee0dfa7d2e9060b5d5adcb8ac9b978a4ae07e[m
Merge: 8355eed28 f362bf981
Author: Marco Paniconi <marpan@google.com>
Date:   Fri May 11 17:45:11 2018 +0000

    Merge "vp9-svc: Fix when whole su[1;31mperf[mrame is dropped."

[33mcommit f362bf981c4648b426aa2a0735d4fb6bda4136c0[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon May 7 22:54:48 2018 -0700

    vp9-svc: Fix when whole su[1;31mperf[mrame is dropped.
    
    When the whole su[1;31mperf[mrame is dropped (due to rate control),
    don't increment the temporal layer counter.
    
    This is a temporary fix to prevent an issue where temporal
    prediction pattern is possibly broken.
    
    Updated svc_datarate tests to handle this case.
    
    Change-Id: Icac44fdc9d0f08a957776c937584db4b2c7927c7

[33mcommit 9cf725a4f482344d137247a9d09d7a499bbc80bf[m
Author: Jerome Jiang <jianj@google.com>
Date:   Wed Apr 25 11:33:24 2018 -0700

    VP9 SVC: Add new level to constrain inter-layer pred.
    
    Add another level (INTER_LAYER_PRED_ON_CONSTRAINED) to the
    inter-layer prediction control. This new level enforces the
    condition that a given spatial layer S can only do inter-layer
    prediction from the previous spatial layer (S - 1) from the same
    time/su[1;31mperf[mrame.
    
    BUG=webm:1526
    
    Change-Id: I0a1ec95b2c220c7b13a9a425d5fb0a8814c23c70

[33mcommit ce11afb0e02a81a1e0e38ea9f3c3e13920439b1f[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Apr 16 16:15:05 2018 -0700

    vp9: Changes for scene detection overshoot and SVC.
    
    Refactor the scene detection for 1 pass cbr to allow the
    scene detection to be checked once per su[1;31mperf[mrame (on the base layer),
    using the full resolution sources.
    
    If scene change is detected: check for re-encoding due to
    large overshoot for all spatial layers withing the su[1;31mperf[mrame.
    
    Add speed feature to control the re-encode step.
    Keep the re-encode step on for now.
    
    Small change in nonrd_pickmode to remove the possible skip of golden
    reference for SVC, when the high_source_sad is set for the su[1;31mperf[mrame.
    
    Change only affects SVC encoding with screen-content mode enabled.
    
    Change-Id: If4cfb52cb0dd0f0fce1c4214fa8b413f8f803d56

[33mcommit 4934e52e437686dae73fa5549e6ef1c7213d251d[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Apr 6 05:41:56 2018 +0000

    Revert "vp9-svc: Fix to first su[1;31mperf[mrame when inter_layer is off."
    
    This reverts commit 5cc8df5bcfe49fbfca21ee57401c7807c048751b.
    
    Reason for revert: <INSERT REASONING HERE>
    We need to do this on all key frames in the stream (not just the first one). Will make another cleaner change for this.
    
    Original change's description:
    > vp9-svc: Fix to first su[1;31mperf[mrame when inter_layer is off.
    >
    > When the application selects the setting INTER_LAYER_PRED_OFF
    > each spatial stream should be decodeable separately.
    > For this we need to force key frames on all spatial layers
    > on the first su[1;31mperf[mrame.
    >
    > In order to maintain the quality at the beginning of the stream
    > the active_worst for spatial layer of the second su[1;31mperf[mrame is set
    > to the last_QP of the correspondng spatial layer of the first su[1;31mperf[mrame.
    > Also make sure nonrd_keyframe is set for non-base spatial layers.
    >
    > Change only affects SVC mode wit number_spatial_layers > 1 and
    > svc->disable_inter_layer_pred == INTER_LAYER_PRED_OFF.
    > And only affects first and second frame of sequence.
    >
    > Change-Id: I8ee9a0873ab1d3a02515774571f719617771ad41
    
    TBR=marpan@google.com,builds@webmproject.org,jianj@google.com
    
    Change-Id: If73d9f3932224fc6751e773763adf7e8ee67d17f
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true

[33mcommit 5cc8df5bcfe49fbfca21ee57401c7807c048751b[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Apr 4 16:24:39 2018 -0700

    vp9-svc: Fix to first su[1;31mperf[mrame when inter_layer is off.
    
    When the application selects the setting INTER_LAYER_PRED_OFF
    each spatial stream should be decodeable separately.
    For this we need to force key frames on all spatial layers
    on the first su[1;31mperf[mrame.
    
    In order to maintain the quality at the beginning of the stream
    the active_worst for spatial layer of the second su[1;31mperf[mrame is set
    to the last_QP of the correspondng spatial layer of the first su[1;31mperf[mrame.
    Also make sure nonrd_keyframe is set for non-base spatial layers.
    
    Change only affects SVC mode wit number_spatial_layers > 1 and
    svc->disable_inter_layer_pred == INTER_LAYER_PRED_OFF.
    And only affects first and second frame of sequence.
    
    Change-Id: I8ee9a0873ab1d3a02515774571f719617771ad41

[33mcommit a4e453f668a8d98645c034b9aa9f979bfa5af4a9[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Apr 5 15:54:17 2018 -0700

    vp9-svc: Fix to disable cyclic refresh on key su[1;31mperf[mrames.
    
    Cyclic refresh is disabled on key frames, but we did not
    disable it for for spatial layers whose base is a key frame
    (i.e., on a key-su[1;31mperf[mrame).
    
    This fix means generally somewhat lower frame-level QP will be
    used for those spatial layers whose base is a key frame,
    which will generally mean little better quality for the
    key-su[1;31mperf[mrames.
    
    Change-Id: Idf090651aa2f5856fb6696c89198a9f6d5d50280

[33mcommit f0a39790630dc842d86ea1b49e948859757371ad[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Tue Mar 13 18:22:40 2018 -0700

    spatial svc: zero sizes
    
    This should be taken care of by parse_su[1;31mperf[mrame_index but
    the static analysis is not recognizing it because it depends
    on 'marker' which is read from the bitstream.
    
    Clears a static analysis warning:
    The right operand of '*' is a garbage value
    rc.layer_encoding_bitrate[layer] += 8.0 * sizes[sl];
    
    Change-Id: I8ee48a98f907bc7b46869fd27a351f33e2e7de71

[33mcommit 811b2e412e610b5c09dac79be984e66768b6e59f[m
Author: Kyle Siefring <kylesiefring@gmail.com>
Date:   Mon Feb 5 00:15:29 2018 -0500

    Fold adds in 16->32-bit converts in SSE2/AVX2 fDCT
    
    Changes in the function size in bytes (in lieu of [1;31mperf[mormance metrics)
                       Before    After    Diff
    vpx_fdct32x32_avx2  29564 -> 28334   -1230
    vpx_fdct32x32_sse2  38053 -> 36309   -1744
    
    Change-Id: Ie0b3e6ed7c3f2e9ea45f9d6a1ce1e27d068cee6b

[33mcommit f8639b1554c190333f2a16f3f5d93854d7479df1[m
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Jan 9 16:35:29 2018 -0800

    vp9: Skip encoding of enhancement layers on the fly.
    
    For SVC: if an enhancement layer (spatial_layer > 0)
    has 0 bandwidth, skip/drop the encoding of the layer.
    This allows the application to dynamically disable
    higher layers for SVC.
    
    Add flag to signal the skip encoding, this is needed
    to modify the packing of the su[1;31mperf[mrame when the top
    layer is skipped/dropped.
    
    Also moved some updates (current_video_frame counter and
    the last_avg_frame_bandwidth) to the postencode_update_drop_frame().
    
    Added datarate unittest for dynamically going from 3 to 2
    and then back to 3 spatial layers.
    
    Change-Id: Idaccdb4aca25ba1d822ed1b4219f94e2e8640d43
For keyword optim:
[33mcommit 6efdd9ad483f7d86e503ab16e986202feed8b105[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Jan 7 09:53:18 2019 -0800

    fix vp9 fdct_quant
    
    Values in [q]coeff1 were not correctly stored. This caused a segfault
    in the sse2 libvpx__nightly_[1;31moptim[mization jobs.
    
    Broken in:
    commit 85032bac388917916f7a149173db8b34e93e8f6e
    Author: Johann <johannkoenig@google.com>
    Date:   Fri Dec 21 00:27:00 2018 +0000
    
        fdct_quant: resolve missing declarations
    
    BUG=webm:1584
    
    Change-Id: I5f5fad34ec5e32023f5b40ff3691125754c11ced

[33mcommit 22c2bd3e06135a97622059052ed68ebe0a9d90eb[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Dec 20 19:56:45 2018 +0000

    highbd variance: resolve missing declarations
    
    The [1;31moptim[mizations were accidentally disabled during the move from vp9
    
    commit  c3bdffb0a508ad08d5dfa613c029f368d4293d4c
    author  Johann <johannkoenig@google.com>        Fri May 15 18:52:03 2015
    Move variance functions to vpx_dsp
    
    subpel functions will be moved in another patch.
    
    BUG=webm:1584
    
    Change-Id: Ia7899ee0cfad13a0e1516b89756552064846e81c

[33mcommit 93488acda641c74bdc0f606cd4086b021e733f84[m
Author: Yaowu Xu <yaowu@google.com>
Date:   Thu Nov 29 09:44:16 2018 -0800

    Optimize RDMult
    
    This commit introduces the [1;31moptim[mized RDMult values for both key
    and non-key frames. For key frames, the commit gets values back
    from commit#b13f6154df9c0834d74f7e3d41e41c4208f56d18. For impact
    on key frame only encodings, see commit message for that commit.
    
    For inter frames, the values get [1;31moptim[mzied by running encoding tests
    in Q mode with the following range using 150 frames:
    2 6 10 14 18 22 26 30 34 38 42 46 50 54 58 62
    
    The impact of current set of RDMULT values:
               PSNR     SSIM     PSNR-HVS
    lowres:  -0.325%   0.422%    -0.228%
    midres:  -0.377%   0.158%    -0.376%
    hdres:   -0.309%   0.522%    -0.322%
    
    Test baseline is on commit#35617458
    
    Overall, the values help PSNR based metrics, but hurt SSIM metric
    slightly.
    
    Change-Id: I7eba37a6524cb36b8498a1d104d2667781bc2089

[33mcommit 3fb6f75feb973a6c59a627c9375b431618fd5ee8[m
Author: Venkatarama NG. Avadhani <venkatarama.avadhani@ittiam.com>
Date:   Wed Oct 24 17:17:58 2018 +0530

    Fix DoS in Error Streams
    
    This fixes an issue where, in very rare error cases, one row of LPF
    could be waiting infinitely for its previous row's LPF to complete.
    
    With LPF [1;31moptim[mization, the second row's LPF could be triggered before
    the first row's LPF. In this case, the second row's LPF will wait for
    LPF of n-sync number of SBs of the first row to finish. In error
    streams, depending on when the error was detected, the LPF job of the
    first row may then never be triggered. This puts the thread doing the
    second row's LPF in an infinite wait.
    
    The issue is reproduceable once in approximately 500 runs of the clip in
    bug 1562.
    
    BUG=webm:1562
    
    Change-Id: I265d7df5ceeff0410334f5b9a4181f895bb54cab

[33mcommit e56b1db67a7c9a58943f25f85a04289d8e3bf096[m
Merge: ff99ab36d bcd17e32c
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Oct 16 17:55:37 2018 +0000

    Merge "Fix the filter tap calculation in mips [1;31moptim[mizations"

[33mcommit bcd17e32c9498cb7a2375999226a60c500cc29da[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Tue Oct 16 09:24:18 2018 -0700

    Fix the filter tap calculation in mips [1;31moptim[mizations
    
    The interp filter tap calculation was not accurate to tell the
    difference between 2 taps and 4 taps. This patch fixed the bug, and
    resolved Jenkins test failures in mips sub-pel filter [1;31moptim[mizations.
    
    BUG=webm:1568
    
    Change-Id: I51eb8adb7ed194ef2ea7dd4aa57aa9870ee38cfc

[33mcommit be51a7731d009be79cbc4cdd0a3009fc4c287291[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Oct 15 15:27:49 2018 -0700

    A temporary fix to mips sub-pel filters
    
    There are Jenkins test failures in mips sub-pel filter [1;31moptim[mizations.
    [ RUN      ] MSA/ConvolveTest.MatchesReferenceSubpixelFilter/5
    ../libvpx/test/convolve_test.cc:889: Failure
    Expected equality of these values:
      lookup(ref, y * kOutputStride + x)
        Which is: 255
      lookup(out, y * kOutputStride + x)
        Which is: 11
    mismatch at (1,0), filters (4,0,1)
    
    This relates to the 4-tap kernel added recently. This CL is a temporary
    fix, while we investigate the issue.
    
    BUG=webm:1568
    
    Change-Id: If64c552b794425687cca4fbed893d8ccb73c89a5

[33mcommit 227deb503e381b86fccae3fd92ee92baacec0948[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Oct 15 10:11:57 2018 -0700

    Add encoder side frame buffer for tpl model
    
    Add an encoder side reference frame buffer pool to store the
    reference frames for tpl model. This servces as an intermediate
    step to support multi-layer ARF system. The buffer memory size will
    be [1;31moptim[mized afterwards.
    
    Change-Id: If2d2f095d4911a4996f6c2a0b0a8e3d235ceadb2

[33mcommit fc1679863b5d86a4f3f0dcb14ef37dae7c8cb94a[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Oct 12 12:25:36 2018 -0700

    Optimize apply_temporal_filter function
    
    This patch [1;31moptim[mized apply_temporal_filter function. The diff^2 for each
    pixel in the 16x16 block is calculated once beforehand, so that we don't
    calculate it multiple times while evaluating a pixel's neighbors. This
    would speed up the function.
    
    Change-Id: Ibdb8b041f317fd6df198950e2acf9cfcde26860d

[33mcommit e4f030be87735114f5e70ba45e006c1afbdd0872[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Thu Oct 11 15:13:47 2018 -0700

    Make 4-tap interp filter coefficients even numbers
    
    This CL modified 4-tap interp filter coefficients to be even numbers,
    which would help in writing 4-tap filter SIMD [1;31moptim[mizations. The coding
    performance change was negligible. Speed 1 borg test showed:
            avg_psnr:  ovr_psnr:    ssim:
    lowres:  -0.003    -0.012      -0.017
    midres:  0.029     0.018        0.043
    hdres:   0.024     0.044        0.033
    
    Change-Id: Id7c54bb9a9c1aee19c41bc6f1dc3b9682d158bba

[33mcommit 4da98b0cc3a539d1be028d0c4c87d7cd3d718781[m
Author: Supradeep T R <supradeep.tr@ittiam.com>
Date:   Tue Jun 12 13:57:39 2018 +0530

    Loopfilter Multi-Thread Optimization
    
    Take the original loopfilter multi-thread [1;31moptim[mization
    (dafe064289a917977439ab6f4f002b9946496084) along with the fixes for bugs
    1558 and 1562.
    
    BUG=webm:1558
    BUG=webm:1562
    
    Change-Id: Ibbf6bd13f4ffff0e79184ccfd6b85a49e067a6d8

[33mcommit ad228021b3caa4924dd854c8f193d1219095c80f[m
Author: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
Date:   Wed Sep 19 09:47:27 2018 +0200

    fix UB  when initializing parameterized tests
    
    When running tests built with
    -fsanitize=undefined and--disable-[1;31moptim[mizations
    the sanitizer will emit errors of the following general form:
    
    runtime error: member call on address 0xxxxxxxxx which does not
    point to an object of type 'WithParamInterface'
    0xxxxxxxxx: note: object has invalid vptr
     00 00 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  00 ...
                  ^~~~~~~~~~~~~~~~~~~~~~~
                  invalid vptr
    
    This can be traced to calls to WithParamInterface<T>::GetParam before
    the object argument has been initialized. Although GetParam only
    accesses static data it is a non-static member function. This causes
    that call to have undefined behaviour.
    The patch makes GetParam a static member function.
    
    upstream pull request:
    https://github.com/google/googletest/pull/1830
    
    The alternative - if the pull request is denied - would be to
    modify all parameterized tests to have them derive from
    ::libvpx_test::CodecTestWith*Params as the first base class.
    
    Signed-off-by: Matthias RÃ¤ncker <theonetruecamper@gmx.de>
    Change-Id: I8e91a4fba5438c9b3e93fa398f789115ab86b521

[33mcommit d7ed861ce3b1751d666d0cd942582eff48d310bf[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Sep 18 15:08:53 2018 -0700

    Skip RD check for compound modes that have same sign bias
    
    The compound mode can only be run between two reference frames
    with different sign bias flags. Skip the search over same sign
    bias reference frames in the rate-distortion [1;31moptim[mization.
    
    Change-Id: I4a57feedea880883cf87200de51862beac108310

[33mcommit 944ede0285215f6dbdc4d47a1c896e7f7e3e212c[m
Author: Jim Bankoski <jimbankoski@google.com>
Date:   Fri Jul 6 15:45:34 2018 -0700

    Make Sharpness parameter affect visual sharpness
    
    1: Lower rdmult used in trellis [1;31moptim[mization
    
    2: Shut off the end of block [1;31moptim[mization that tries end of block
    at every sub position if any of the coefficients are > 1.
    
    3: Change the rounding and zbin factor according to sharpness.
    
    4: Disable the skip block check that calculates RD using SSE from
    predictor.
    
    Change-Id: I247b61a26fa22f12f8b684e7cd6d4e368de7c3e4

[33mcommit 97848890a99af6604df13ec38c094a01aea40f0e[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Aug 8 14:01:26 2018 -0700

    vp9: Allow for overshoot detection for non-screen CBR mode.
    
    For CBR real-time mode: refactor usage of speed feature to
    handle overshoot on slide/scene change. Add 2 modes to indicate
    how slide/scene change is processed for re-setting Q/rate control.
    Keep the speed setting to 1 for speed >= 5, otherwise set to 0.
    
    Video content and screen content are now handled in similar way,
    though with different thresholds.
    
    Some fixes to thresholds and reset: correct the reset of the buffer
    level to [1;31moptim[mal level for each temporal layer, if scene change
    frame will be encoded at max_q.
    
    Also increase the min_thresh for video mode (non-screen content):
    this is to avoid scene change detection on cases like large
    lighting changes, cameras focus. And increase in min_thresh
    makes it more robust to sudden increase in noise level.
    
    Change-Id: I256d350da6e92d2ddc09f100fc06ac147cbc1e49

[33mcommit 42c7213960bb0a263cbfaf5b220fbbc06d236757[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Wed Apr 4 11:50:39 2018 -0700

    third_party/libyuv: update to a37e7bfe
    
    Fix mingw builds for x86_32 by updating past:
    https://chromium.googlesource.com/libyuv/libyuv/+/8fa02df3c0591754958a50
    
    Pick up upstream fixes for clang 5 builds with --disable-[1;31moptim[mizations.
    
    Disable libyuv by default when building for msa. We have not been able
    to update libyuv because of build issues with mips. This can be
    revisited when we update the mips compiler used in Jenkins.
    
    BUG=webm:1509,libyuv:793,webm:1514,webm:1518
    
    Change-Id: Id0b9947cb5e0aa74f2f74746524ab6ff2d48796f

[33mcommit bbf2160c0b2c1fabbde42d6616c528e38388dd63[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Wed Jun 20 13:10:54 2018 -0700

    libyuv: remove problematic functions
    
    These fail to build with clang on 32 bit with
    --disable-[1;31moptim[mizations
    
    Upstream libyuv has addressed these and we will get updated
    versions on the next roll. At the moment, we don't use
    libyuv for copying alpha data and so this is a quick fix.
    
    BUG=webm:1514
    
    Change-Id: I0040c3ae048f8d896c2082deeb2e32070a32c453

[33mcommit 8446af7e9a12c5725e845564f40272dd9185c1cc[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed May 23 14:51:00 2018 -0700

    vp9: Rate control adjustments for screen content.
    
    For screen content mode: changes to reduce occurence of
    significant QP decrease (from one frame to next),
    which can cause large frames (overshoot/delay).
    -cap the buffer increase to [1;31moptim[mal level for frame drop
    mode where full superframe can drop
    -reduce the max_adjustment_down due to buffer overflow
    -reduce qp threshold to trigger re-encode on large frame
    
    Change-Id: I3e30e4814192b5f728abff3f7359eb64f561b8f0

[33mcommit 767d23f36117b7eaa36d35e627e200c4a36b0934[m
Merge: e4408a07b 15dad6bcb
Author: xiwei gu <guxiwei-hf@loongson.cn>
Date:   Wed May 2 08:54:24 2018 +0000

    Merge "vp9: [loongson] [1;31moptim[mize vpx_convolve8 with mmi"

[33mcommit 15dad6bcbceaf4b40e878daede0b2d57c6ffbaf8[m
Author: xiwei gu <guxiwei-hf@loongson.cn>
Date:   Wed Apr 25 09:55:05 2018 +0800

    vp9: [loongson] [1;31moptim[mize vpx_convolve8 with mmi
    
    1. vpx_convolve_avg_mmi
    2. vpx_convolve8_avg_horiz_mmi
    
    Change-Id: Ie544aac45b4b1c0a0e51b44b650189ae5e88aee1

[33mcommit 5476ab095ffe828dee6fb69e74dba2997c76620f[m
Merge: 382afcab9 25d9adb74
Author: xiwei gu <guxiwei-hf@loongson.cn>
Date:   Thu Mar 29 01:05:33 2018 +0000

    Merge "vp9: [loongson] [1;31moptim[mize vpx_convolve8 with mmi."

[33mcommit 25d9adb74b3a6fd44786ecb2ea6b963dec0a6783[m
Author: xiwei gu <guxiwei-hf@loongson.cn>
Date:   Thu Jan 25 09:38:28 2018 +0800

    vp9: [loongson] [1;31moptim[mize vpx_convolve8 with mmi.
    
    1. vpx_convolve8_vert_mmi
    2. vpx_convolve8_horiz_mmi
    3. vpx_convolve8_mmi
    4. vpx_convolve8_avg_mmi
    5. vpx_convolve8_avg_vert_mmi
    
    Change-Id: I41a6b3b4f327d6b67d282e0163cfa0aee8648abe
For keyword regression:
[33mcommit 1f46c31844b9162557e12de73352075f6b8d9379[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Sep 3 16:48:02 2018 +0100

    Fix short first kf bug.
    
    This change is in response to quality issue in b/112953058
    
    The quality [1;31mregression[m observed is a result of a bug that manifested
    because of a very short key frame group at the start of a chunk.
    The group was so short that it was less than the minimum allowed
    length of an ARF group, so the initial group was coded as a GF only
    group. However, group length was not set correctly and the result
    was a frame coded with a target of 0 bits.
    
    This causes two problems:
    
    Firstly one very poor frame that caused the issue to be raised.
    
    Secondly that one  frame obviously overshoots its 0 target very heavily
    and this has the effect moving the needle significantly in terms of the
    adaptive rate control (specifically the estimate of bits per macro block
    used to estimate the active Q range). Consequently there is undershoot
    for most of the rest of the chunk and the overall rate ends up much lower
    than the target (14Mb/s vs a target of 22Mb/s). (The sharp drop in the
    overall rate is also noted in the issue.
    
    BUG=b/112953058
    
    Change-Id: Ide9cce57acd3dee0f9496b752902e7b4735f2c7f

[33mcommit ce29b592822563a4e691d8793bdf5d4f87b27926[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Sep 3 16:12:22 2018 +0100

    Revert "Revert "Prevent double application of min rate in two pass.""
    
    This rate control bug in the original patch is not the underlying cause
    of the quality [1;31mregression[m but simply unmasked a problem which stems
    from applying 0 bits to the last frame in a short KF group at the start
    of a chunk.
    
    This reverts commit d10b1f233657054b1465d40f0b409c20029a540b.
    
    Change-Id: I32c91a24a14d013853bb8e5587aa69600e6a0063

[33mcommit 0681cff1ad36b3ef8ec242f59b5a6c4234ccfb88[m
Author: James Zern <jzern@google.com>
Date:   Tue Jul 24 21:36:50 2018 -0700

    vp9: fix OOB read in decoder_peek_si_internal
    
    Profile 1 or 3 bitstreams may require 11 bytes for the header in the
    intra-only case.
    
    Additionally add a check on the bit reader's error handler callback to
    ensure it's non-NULL before calling to avoid future [1;31mregression[ms.
    
    This has existed since at least (pre-1.4.0):
    09bf1d61c Changes hdr for profiles > 1 for intraonly frames
    
    BUG=webm:1543
    
    Change-Id: I23901e6e3a219170e8ea9efecc42af0be2e5c378
For keyword speed:
[33mcommit 368200a80758234b96bf61776bc79133d21f4317[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Dec 17 18:39:22 2018 -0800

    vp9-svc: Fix condition in real-time [1;31mspeed[m setting
    
    Remove the "spatial_layer_id == 0" condition in
    the [1;31mspeed[m features for setting the motion search
    for screen content.
    
    Change-Id: Ib47aea3af5f3b2e04226694b4126b2ae2f458f13

[33mcommit 181aa3d7fd6687f7b80d3a3e83239d11332a2347[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Dec 17 16:49:09 2018 -0800

    Localize x->encode_breakout setup to non-rd mode search
    
    The breakout [1;31mspeed[m feature is currently only used by the non-rd
    mode search path. Localize it to simplify set_offset() logic.
    
    Change-Id: I27e7519c987a7caac2e4bd6be0ede1b9c8320e55

[33mcommit e3e770dbf7fb49c7199b6d0378cf80d62e0666c8[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Dec 17 13:23:01 2018 -0800

    vp9-svc: Define rc scene change flag per superframe
    
    Define the rc->high_num_blocks_with_motion, set in the
    scene change analysis, to be defined per superframe.
    This is used for increasing motion search area on
    some (super)frames, e.g., for scrolling.
    
    Also some code cleanup in rt_[1;31mspeed[m_feature_.
    
    No change in behavior.
    
    Change-Id: I1a5c04b9cd4aef1723ce42f82e981a2ca15c8b9d

[33mcommit 97875fa840ffdcefb88fc804f1997b86bc523dd4[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Dec 13 09:21:28 2018 -0800

    Make the use of tpl model controlled by the encoder params
    
    The control has been exposed to the vpxenc input parameter. Remove
    the internal hard coded control that disables it at [1;31mspeed[m 1 and
    above settings.
    
    Change-Id: Ib17772cb895f24da5a7d0487e748cc1a9c6740b3

[33mcommit 715c30f034fda8d005935308567ec0efb8f2ab2c[m
Author: Jerome Jiang <jianj@google.com>
Date:   Tue Dec 4 18:37:02 2018 -0800

    vp9 screen: Update motion search offset when set to NSTEP.
    
    Search method and step parameter might be changed in [1;31mspeed[m settings.
    In this case, we should update the search area offset due to the change
    of search method.
    
    Change-Id: I51dc584bbf35e998757da326355dd4b8a4d0093f

[33mcommit 43a30d3a1a6b627fa05ba63f4c51414ced781ccb[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Nov 12 11:30:03 2018 -0800

    quantize: use aarch64 vmaxv
    
    Simplify max value calculation on aarch64 by using vmaxv. Much
    faster for 4x4 but diminishing returns as the block size grows.
    
    Only the vp9 quantize has a [1;31mspeed[m test hooked up. Anticipate
    similar results for the other quantize versions.
    
    Before:
    [ RUN      ] NEON/VP9QuantizeTest.DISABLED_Speed/2
    [    BENCH ]      Bypass calculations       4x4  31.6 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations       4x4  31.6 ms ( Â±0.0 ms )
    [    BENCH ]      Bypass calculations       8x8  17.7 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations       8x8  17.7 ms ( Â±0.0 ms )
    [    BENCH ]      Bypass calculations     16x16  14.2 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations     16x16  14.2 ms ( Â±0.0 ms )
    [       OK ] NEON/VP9QuantizeTest.DISABLED_Speed/2 (1906 ms)
    [ RUN      ] NEON/VP9QuantizeTest.DISABLED_Speed/3
    [    BENCH ]      Bypass calculations     32x32  18.6 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations     32x32  18.6 ms ( Â±0.0 ms )
    
    After:
    [ RUN      ] NEON/VP9QuantizeTest.DISABLED_Speed/2
    [    BENCH ]      Bypass calculations       4x4  29.1 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations       4x4  29.1 ms ( Â±0.0 ms )
    [    BENCH ]      Bypass calculations       8x8  16.9 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations       8x8  16.9 ms ( Â±0.0 ms )
    [    BENCH ]      Bypass calculations     16x16  14.1 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations     16x16  14.1 ms ( Â±0.0 ms )
    [       OK ] NEON/VP9QuantizeTest.DISABLED_Speed/2 (1803 ms)
    [ RUN      ] NEON/VP9QuantizeTest.DISABLED_Speed/3
    [    BENCH ]      Bypass calculations     32x32  18.6 ms ( Â±0.0 ms )
    [    BENCH ]        Full calculations     32x32  18.6 ms ( Â±0.0 ms )
    
    Change-Id: Ic95812b3fdbd4e47b4dcb8ed46c68a9617de38d2

[33mcommit 505f2ed7fc3090b2fc33d11cca571acdd4825d4c[m
Author: Chi Yo Tsai <chiyotsai@google.com>
Date:   Fri Oct 26 14:14:28 2018 -0700

    Add AVX2 support for hbd 4-tap interpolation filter.
    
    Speed gain:
    
    BIT DEPTH | 8TAP FPS | 4TAP FPS | PCT INC |
        10    |   1.69   |   1.85   |  9.46%  |
        12    |   1.64   |   1.78   |  8.54%  |
    
    Speed test is done on jet.y4m on [1;31mspeed[m 1 profile 2 over 100 frame with
    br=500.
    
    Change-Id: I411e122553e2c466be7a26e64b4dd144efb884a9

[33mcommit 47922cc140b6293194f4b26a5aa25d31f03bc1a0[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Oct 23 20:30:35 2018 -0700

    Enable tpl model to support multi-layer ARF
    
    Enable temporal dependency model for the base layer ARF. It
    improves the multi-layer ARF compression performance (results
    are tested in [1;31mspeed[m 0 vbr mode):
    
             avg PSNR    overall PSNR     SSIM
    lowres   -0.40%       -0.46%         -0.32%
    midres   -0.59%       -0.68%         -0.45%
    720p     -0.55%       -0.59%         -1.07%
    
    Change-Id: I7790b89ccfb6e61f9b7965f34d348c7440220dd0

[33mcommit 6657ab8571b0a363f0e3ffd46348794651c92d44[m
Author: Chi Yo Tsai <chiyotsai@google.com>
Date:   Tue Oct 23 12:42:21 2018 -0700

    Add AVX2 support for 4-tap interpolation filter.
    
    Performance:
         | 4X4 | 8X8 |16X16|64X64|
    2 DIM|1.491|1.902|1.772|1.479|
     HORZ|1.145|1.521|1.757|1.497|
     VERT|1.176|1.614|1.707|1.467|
    
    Each number in the chart above is 8-tap function time / 4-tap function time.
    
    The framerate tested on jets.y4m for 100 frames on [1;31mspeed[m 1 increased from 3.72
    fps to 3.91 fps (about 5% increase).
    
    Change-Id: Ic0ad275cf32fafeefd0a89811badd8adff2134a0

[33mcommit 79ef532489271c7ef744a16ba71e23ac6b6810af[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Oct 22 09:28:04 2018 -0700

    Use the proper gfu_boost factor to compute rd_mult
    
    Update the Lagrangian multiplier according to the gfu_boost factor
    assigned per frame. It improves the multi-layer ARF compression
    performance (results below shown for [1;31mspeed[m 0):
    
             avg PSNR      overall PSNR      SSIM
    lowres    -0.08%          0.02%         -0.28%
    midres    -0.08%          0.03%         -0.22%
    hdres     -0.19%         -0.10%         -0.39%
    nflx2k    -0.29%         -0.18%         -0.85%
    
    Change-Id: Ifeb4b14918f880ba011ea41c1454ab00504f8855

[33mcommit 137d99c91fc7f03b6b886e5ac342ee4ef7f875ec[m
Merge: af4cd9262 0bedb351f
Author: Hui Su <huisu@google.com>
Date:   Fri Oct 19 16:48:40 2018 +0000

    Merge "ML_VAR_PARTITION: enable at [1;31mspeed[m 5"

[33mcommit 0bedb351ff8e3a323b9950b72dfed7cb8154e73d[m
Author: Hui Su <huisu@google.com>
Date:   Mon Oct 15 20:45:07 2018 -0700

    ML_VAR_PARTITION: enable at [1;31mspeed[m 5
    
    When the ML_VAR_PARTITION experiment is turned on, replace
    REFERENCE_PARTITION with ML_BASED_PARTITION at [1;31mspeed[m 5.
    
    Coding gains(avg_psnr) compared to baseline:
    ytlivehr  1.63%
    ytlivelr  0.07%
    
    Tested encoding [1;31mspeed[m with several clips from ytlivehr and ytlivelr
    on linux desktop(rt, vbr, 4 threads). Encoder [1;31mspeed[m is on average
    faster than baseline:
    360p:   14% faster
    720p:    7% faster
    1080p: 1.5% faster
    
    Change-Id: I39b00078176ff516f7306818f33ba2b1ea53dfa1

[33mcommit 9e29417962ce15075f380a9b5b5203d57c08a30a[m
Merge: b1f789cf1 8d5461eb0
Author: Hui Su <huisu@google.com>
Date:   Thu Oct 18 16:46:15 2018 +0000

    Merge "Enable rect partition search for HBD at [1;31mspeed[m 1"

[33mcommit 8d5461eb0aaeca4c5e51b8f142cf7f4d281d8afe[m
Author: Hui Su <huisu@google.com>
Date:   Wed Oct 17 08:40:26 2018 -0700

    Enable rect partition search for HBD at [1;31mspeed[m 1
    
    This patch enables rectangular partition search on [1;31mspeed[m 1 for high
    bit depth encoding. The encoding [1;31mspeed[m loss is reduced thanks to
    recently added [1;31mspeed[m features.
    
    This only affects [1;31mspeed[m 1 high bit-depth encoding.
    
    Coding gains:
                          avg_psnr     ovr_psnr
    lowres_bd10(480p)      1.34%        1.40%
    midres_bd10(720p)      1.28%        1.33%
    
    Average [1;31mspeed[m loss:
            QP=30    QP=40    QP=50    average
    480p     2.5%     2.3%     2.6%     2.5%
    720p     4.0%     3.9%     3.2%     3.7%
    
    Change-Id: Id9cac4eea0769d94e093c9d170194659b3342d89

[33mcommit 71b4e0bdedefea29dd27ebaae20ffb8703ee4703[m
Author: Chi Yo Tsai <chiyotsai@google.com>
Date:   Tue Oct 16 15:45:05 2018 -0700

    Adds SSE2 support for interpolation filter for width 4 and 8
    
    Performance:
    The chart below shows the [1;31mspeed[m relative to baseline
    (baseline_time/new_time)
    _____| 4X4 | 8X8 |16X16|64X64|
    2 DIM|1.889|1.780|1.811|1.963|
     HORZ|2.266|1.834|1.617|1.595|
     VERI|2.043|2.190|2.373|2.485|
    
    Change-Id: Ic4262222db78f013b94a8c61b46efb8520722927

[33mcommit 2bc3d47dd1fb65bd718116b4afb607c961a06872[m
Author: Hui Su <huisu@google.com>
Date:   Tue Oct 16 09:50:13 2018 -0700

    Fix a bug in ml_prune_rect_partition()
    
    The quantization step size should be scaled properly for high bit depth
    settings.
    
    This only affects [1;31mspeed[m 0.
    Encoder [1;31mspeed[m change is almost neutral.
    There is a small coding gain of 0.09%.
    
    Change-Id: I96b2bae03a53ce8ccd6428e3a050cfe18e06a024

[33mcommit 540d373d59df5739fc826cdd4430fa4a0d61cf87[m
Author: Hui Su <huisu@google.com>
Date:   Mon Oct 15 10:41:21 2018 -0700

    Enable ML based partition search breakout for HBD
    
    For [1;31mspeed[m 0:
    coding loss 0.045%; encoder [1;31mspeed[mup 6%.
    
    For [1;31mspeed[m 1(only affects videos smaller than 720p):
    coding loss 0.11%; encoder [1;31mspeed[mup 6.5%.
    
    Change-Id: Ie441c9bad2021503e86fefd2f1fa3e1a42070bec

[33mcommit fc1679863b5d86a4f3f0dcb14ef37dae7c8cb94a[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Fri Oct 12 12:25:36 2018 -0700

    Optimize apply_temporal_filter function
    
    This patch optimized apply_temporal_filter function. The diff^2 for each
    pixel in the 16x16 block is calculated once beforehand, so that we don't
    calculate it multiple times while evaluating a pixel's neighbors. This
    would [1;31mspeed[m up the function.
    
    Change-Id: Ibdb8b041f317fd6df198950e2acf9cfcde26860d

[33mcommit d4666ac7d2e30d18de740d5801765b3833f23f90[m
Author: Hui Su <huisu@google.com>
Date:   Fri Oct 12 10:59:48 2018 -0700

    Turn on ml_var_partition_pruning for HBD
    
    This affects [1;31mspeed[m 0 and 1 only.
    
    Tested on lowres_bd10(480p) and midres_bd10(720p),
                       [1;31mspeed[m 0       [1;31mspeed[m 1
    coding loss:        0.07%         0.10%
    encoder [1;31mspeed[mup:     14%          6.5%
    
    Change-Id: I5812400d8c7393321b7284d3fca06026842390b5

[33mcommit bb82c4997fc8313deaedaea37bdd32be9f271d88[m
Author: Hui Su <huisu@google.com>
Date:   Thu Oct 11 14:33:40 2018 -0700

    Enable ML based rect partition pruning for HBD
    
    Tested on lowres_bd10(480p) and midres_bd10(720p), average coding
    loss is 0.09%; average encoding [1;31mspeed[mup is 9%.
    
    Only [1;31mspeed[m 0 is affected.
    
    Change-Id: Ia8d48c1c6d1669745f0e956b172572a37e42f0c7

[33mcommit 71ff94d3d378996a1a3be1042db3a3edf97180ee[m
Merge: af1fb84dd 50b91aff5
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Wed Oct 10 21:05:44 2018 +0000

    Merge "Use 4-tap interp filter in [1;31mspeed[m 1 sub-pel motion search"

[33mcommit 50b91aff52579ef7f46b47aef0d657a731a2f84f[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Oct 8 16:21:54 2018 -0700

    Use 4-tap interp filter in [1;31mspeed[m 1 sub-pel motion search
    
    Added the 4-tap interp filter, and used it for [1;31mspeed[m 1 sub-pel motion
    search. Speed 2 motion search still used bilinear filter as before.
    
    Speed 1 borg test showed good bit savings.
            avg_psnr:  ovr_psnr:    ssim:
    lowres:  -1.125    -1.179      -1.021
    midres:  -0.717    -0.710      -0.543
    hdres:   -0.357    -0.370      -0.342
    Speed test at [1;31mspeed[m 1 showed ~10% encoder time increase, which was
    partially because of no SIMD version of 4-tap filter.
    
    Change-Id: Ic9b48cdc6a964538c20144108526682d64348301

[33mcommit afa4b9780ae0c10f22995ee96ba40b2cc15b29f9[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Oct 8 15:10:12 2018 -0700

    Add accurate sub-pel motion search
    
    Added the accurate sub-pel motion search. In this patch, used the 8-tap
    filter in sub-pel motion search, and this was enabled at [1;31mspeed[m 0.
    
    Speed 0 borg test showed that
            avg_psnr:  ovr_psnr:    ssim:
    lowres:  -1.363     -1.403     -1.282
    midres:  -0.842     -0.849     -0.720
    hdres:   -0.480     -0.488     -0.503
    Speed test at [1;31mspeed[m 0 showed ~8% encoder time increase.
    
    Change-Id: I194ca709681ea588f3f6381093940e22d03c4d7b

[33mcommit 51b4601dd22b9e2086180d096fba463df1ed70a6[m
Merge: ecc31d287 b25c7515a
Author: Hui Su <huisu@google.com>
Date:   Mon Oct 8 17:25:23 2018 +0000

    Merge "Turn on ml_var_partition_pruning for [1;31mspeed[m 1"

[33mcommit b25c7515a02d34d7e8a34c2982cd4da9ccdfc33a[m
Author: Hui Su <huisu@google.com>
Date:   Tue Oct 2 14:40:27 2018 -0700

    Turn on ml_var_partition_pruning for [1;31mspeed[m 1
    
    Coding loss:
    lowres 0.08%; midres 0.11%; hdres 0.07%
    
    Average encoding [1;31mspeed[mup is about 6%.
    
    Change-Id: I950291cf0f1d610bcdedeb150bcbefea2f5579bc

[33mcommit 49b7e8cda4420d9a4ee307c49dfa74e5e978dab3[m
Author: Hui Su <huisu@google.com>
Date:   Wed Oct 3 09:07:07 2018 -0700

    ML_VAR_PARTITION: adjust model threshold
    
    Make decisions more aggressively to improve encoding [1;31mspeed[m.
    
    Coding gains(avg-psnr) after this change over baseline:
    rtc       1.55% for [1;31mspeed[m 7;  2.89% for [1;31mspeed[m 8.
    ytlivehr  2.20% for [1;31mspeed[m 6.
    
    Change-Id: If6ac4a942a5b4708bcc6b0a49bd92fbc4d67c3f8

[33mcommit 6b7848d4c9016efbfbc9529df008ffde0e15b7cc[m
Author: Hui Su <huisu@google.com>
Date:   Sat Sep 29 14:48:56 2018 -0700

    Introduce the ml_var_partition_pruning feature
    
    Add the ml_var_partition_pruning encoder [1;31mspeed[m feature that
    uses a neural net model to prune partition-none and partition-split
    search. The model uses prediction residue variance and quantization
    step size as input features.
    
    Encoding [1;31mspeed[m gain for [1;31mspeed[m 0(tested over 20 hdres clips):
                QP=30    QP=40
    average     17.7%    18.3%
    max        24.46%    26.6%
    
    Coding loss:
    lowres 0.071%;  midres 0.098%;  hdres 0.163%
    
    Currently it is enabled for [1;31mspeed[m 0 low-bit depth only. It needs to be
    tuned for other settings.
    
    Change-Id: Ifb7417daa6bb6e7c97bb676269ce54ab0dc7b8c8

[33mcommit a2cd0170163b58cb151e19e26b7cb0b23f1783c4[m
Author: Hui Su <huisu@google.com>
Date:   Tue Sep 25 12:19:53 2018 -0700

    Add ml_var_partition experiment
    
    Make partition decisions using machine learning models. The goal is to
    achieve better coding quality than the variance-based parititioning
    without much encoding [1;31mspeed[m loss.
    
    To enable this experiment, use --enable-ml-var-partition for config.
    
    When eanbled, the variance-based partitioning is replaced by this ML
    based partitioing for [1;31mspeed[m 6 and above in real time mode(except low
    resolution or high bit-depth).
    
    Current coding gains(average PSNR):
                    [1;31mspeed[m 6      [1;31mspeed[m 7      [1;31mspeed[m 8
    rtc              2.04%        2.65%        3.90%
    ytlivehr         3.11%        4.53%       11.57%
    hdres(rtc mode)  5.10%
    
    Further testing and tuning is needed to see if the [1;31mspeed[m and quality
    tradeoff is reasonable.
    
    Change-Id: I0da5a2fbc22c3261832b32920ee36d9b19d417af

[33mcommit 2176d88fc343c8ffa6f29fafc3cffb5ec043f1d2[m
Author: Hui Su <huisu@google.com>
Date:   Thu Sep 27 10:12:55 2018 -0700

    Fix a loophole in nonrd_pick_partition()
    
    In some rare cases, all possible paritions may be skipped during RD
    search. The patch makes the encoder do rectangular partition search if
    both partition-none and partition-split are not allowed.
    
    Tested on the rtc and ytlivehr testsets with [1;31mspeed[m 5 and 7, no coding
    stats changes were observed.
    
    Change-Id: I8b6d8b62b6d2431be8e73317d113311c98f631d5

[33mcommit 59993f16611a67b3d74c3f5babee5009e3669392[m
Author: Jingning Han <jingning@google.com>
Date:   Wed Sep 26 16:34:16 2018 -0700

    Adapt GOP size threshold to the allowed layer depth
    
    Increase the total prediction error budget linearly with the
    allowed ARF layer depth. This in general improves the compression
    performance, but does hit corner cases on a few clips at very
    low bit-rate range (corresponding to 26 - 28 dB range). To mitigate
    such problem, we temporarily work around this problem by limiting
    the first GOP size to be ~8 so as to not drain up the bit resource.
    
    The overall compression performance improvements over the current
    multi-layer ARF system in [1;31mspeed[m 0 are:
    
               overall PSNR      avg PSNR        SSIM
    lowres     -0.47%            -0.13%         -1.51%
    midres     -1.30%            -1.16%         -2.80%
    hdres      -0.91%            -0.84%         -2.15%
    
    Change-Id: Ia4880ab63e98e15a9db99aea6eabfd3d1da9270d

[33mcommit 626ca102f3c5777471c29412aec3dac05a9566ef[m
Author: Hui Su <huisu@google.com>
Date:   Mon Sep 24 11:27:54 2018 -0700

    Remove redundant code
    
    in set_rt_[1;31mspeed[m_feature_framesize_independent().
    
    use_nonrd_pick_mode is already set for [1;31mspeed[m >= 5, so need to set again
    for [1;31mspeed[m >= 6.
    
    Change-Id: Idb0a4b36d21e305bd63f19e98a70f615ad76f514

[33mcommit 4b8cb2e66be17eea579b48fccc3d05f8cad40514[m
Merge: 3448987ab 1b14cb4e9
Author: Hui Su <huisu@google.com>
Date:   Mon Sep 24 18:15:49 2018 +0000

    Merge "Improve subpel MV search for [1;31mspeed[m 1"

[33mcommit 1b14cb4e942189db7401c7e0542280fb96672648[m
Author: Hui Su <huisu@google.com>
Date:   Tue Sep 18 10:33:23 2018 -0700

    Improve subpel MV search for [1;31mspeed[m 1
    
    Do one more subpel MV search each round. This improves coding
    efficiency slightly:
    
    lowres 0.12%
    midres 0.11%
    hdres  0.13%
    
    Also renames the control flag for subpel MV search quality.
    
    Encoding [1;31mspeed[m loss is less than 1%.
    
    This only affects [1;31mspeed[m 1.
    
    Change-Id: I3aecd25342f2dcacea6c143db494f7db6282cb92

[33mcommit 80997347ba68104f3a7a309d32e12544961377ea[m
Merge: 3da4d03dd 9bd2bde10
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Sep 12 11:03:50 2018 +0000

    Merge "Enable rectangular partition search for [1;31mspeed[m 1"

[33mcommit 9868499e4b6a2f986017c62a5adc6f1933fe992f[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Sep 10 11:55:10 2018 -0700

    Rework two_pass_first_group_inter()
    
    This function is used to in part decide if to trigger recode loop
    for the first normal P frame in a GOP. Rework its design logic to
    support the GOP with multi-layer ARF. Allow recode when there is
    a transition from ARF/OVERLAY/USE_BUF to normal P frame.
    
    The overall coding performance for multi-ARF gets slightly better
    (less than 0.1% for show_existing_frame case). Tested on a few
    clips, the encoding [1;31mspeed[m remains similar too. This change primarily
    serves to help integration of multi-layer ARF and dual-ARF systems.
    
    Change-Id: Ia44e44526b05029b1546985b3eb649e767d5444f

[33mcommit 9bd2bde10dfbe65224a73fd422a49a6c8e6ba078[m
Author: Hui Su <huisu@google.com>
Date:   Tue Sep 4 14:44:02 2018 -0700

    Enable rectangular partition search for [1;31mspeed[m 1
    
    This patch enables rectangular partition search on [1;31mspeed[m 1. The encoding
    [1;31mspeed[m loss is reduced thanks to recently added [1;31mspeed[m features.
    
    This only affects [1;31mspeed[m 1 low bit-depth encoding.
    
    Coding gains:
               avg_psnr     ovr_psnr    ssim
    lowres      0.577%       0.621%    0.665%
    midres      1.147%       1.215%    1.148%
    hdres       0.758%       0.790%    0.769%
    
    Tested encoding [1;31mspeed[m on 15 midres and 15 hdres clips, average [1;31mspeed[m
    loss:
               QP=30       QP=40        QP=50
    midres     4.43%       3.72%       -1.05%
    hdres      4.41%       5.65%        3.77%
    
    Change-Id: Ifc0712becccc69f7498796359ff12dbfa63fd7b3

[33mcommit 2713dba538406c10dd9684f2df877aef014583d8[m
Author: Hui Su <huisu@google.com>
Date:   Mon Jul 16 22:05:19 2018 -0700

    ML based rectangular partition search pruning
    
    Add a ML model to predict if rectangular partition search can be skipped
    without much coding loss. This model is enabled for [1;31mspeed[m 0 low bitdepth
    only.
    
    Impact on coding performance is minor:
                 avg_psnr     ovr_psnr     ssim
    lowres       -0.005%       0.005%     0.017%
    midres        0.100%       0.114%     0.134%
    hdres         0.048%       0.083%     0.074%
    jvet480p      0.035%       0.027%     0.044%
    jvet720p      0.094%       0.090%     0.174%
    
    Tested encoding [1;31mspeed[m over 20 midres and hdres clips, average [1;31mspeed[m
    gain is about 8%; maximum [1;31mspeed[m gain is 23%.
    
    Change-Id: I5d4029dec7134c53ac68ab6cf0c8077dc0b767ed

[33mcommit 545bd0ca0e0c92383c159dfbfda300d28fb4ca05[m
Author: Hui Su <huisu@google.com>
Date:   Mon Aug 27 17:32:05 2018 -0700

    Skip unnecessary motion search
    
    If a ref frame is masked out, we do not need to do motion search for it.
    It makes [1;31mspeed[m 0 a little faster.
    
    Change-Id: I68f71255b2798b24fd1d5b28ed24a2ef87251413

[33mcommit fa37ac13b593fe86869f7c0c14828d0d56219a50[m
Author: Hui Su <huisu@google.com>
Date:   Tue Aug 21 22:02:42 2018 -0700

    Rework the ref_frame_skip_mask feature in RDO
    
    Previously we often skip all compound inter prediction modes,
    causing large coding loss. This patch modifies how we set the
    ref_frame_skip_mask so that compound modes are considered in RDO.
    
    This affects [1;31mspeed[m>=1.
    
    Coding gains(overall psnr):
              lowres       midres     hdres     average
    [1;31mspeed[m 1    0.54%       0.43%      0.64%      0.53%
    [1;31mspeed[m 2    0.59%       0.48%      0.60%      0.56%
    
    Tested encoding [1;31mspeed[m on 10 HD sequences, average [1;31mspeed[m loss is
    5% for [1;31mspeed[m 1; 2% for [1;31mspeed[m 2.
    
    Change-Id: Ib8758af7ee7c9812022bd21c5fe61631e2bb8e5c

[33mcommit ba2cd73376c676d48b0bee5ccd8363aa74489608[m
Author: Hui Su <huisu@google.com>
Date:   Tue Aug 14 14:37:11 2018 -0700

    Improve enhanced_full_pixel_motion_search
    
    Do full pixel MV search around all 3 MV candidates.
    
    Coding gains for [1;31mspeed[m 0:
             avg_psnr   ovr_psnr   ssim
    lowres   -0.088%    -0.095%   -0.117%
    midres   -0.175%    -0.177%   -0.148%
    hdres    -0.115%    -0.146%   -0.146%
    
    Coding gains for [1;31mspeed[m 1:
             avg_psnr   ovr_psnr   ssim
    lowres   -0.089%    -0.104%   -0.124%
    midres   -0.151%    -0.171%   -0.195%
    hdres    -0.110%    -0.105%   -0.132%
    
    Tested encoding [1;31mspeed[m with [1;31mspeed[m 1 QP=30,40 over 10 midres sequences,
    average [1;31mspeed[m loss is about 1%.
    
    Change-Id: I9e6de035f4ed2e814e6494aefc2f84aae333a6b4

[33mcommit daa8482fa71fc744e2153cec3c6ef337064ef882[m
Author: Jingning Han <jingning@google.com>
Date:   Fri Aug 10 17:01:08 2018 -0700

    Use YUV components to build the temporal filter
    
    Use both luma and chroma components simultaneously to estimate the
    non-local mean kernel and build the temporal filter. It improves
    the compression performance primarily for chroma components. Tested
    in [1;31mspeed[m 0 and vbr mode, the coding gains are:
    
              Overall PSNR   SSIM     PSNR_U      PSNR_V
    low        -0.10%       -0.12%    -0.48%      -0.49%
    mid        -0.13%       -0.16%    -0.58%      -0.88%
    720p       -0.31%       -0.24%    -0.75%      -0.72%
    hd         -0.09%       -0.10%    -0.59%      -0.79%
    nefl2k     -0.30%       -0.13%    -0.53%      -0.50%
    
    Change-Id: I24d39997818322b0d69bd9dbeda02c60cd2b2e1b

[33mcommit 47808645a8572dc799795aab45a6be7ee78a84fc[m
Merge: 557fab367 2a17bb071
Author: Jerome Jiang <jianj@google.com>
Date:   Wed Aug 15 23:15:57 2018 +0000

    Merge "vp9: Remove good mode and [1;31mspeed[m 0-4 from some datarate tests."

[33mcommit b4e783da577bc3631a48e071b67931b7833ec651[m
Author: Jerome Jiang <jianj@google.com>
Date:   Mon Aug 13 11:01:31 2018 -0700

    vp9: fix memory alloc for adaptive_rd_thresh_row_mt.
    
    When the feature is enabled and the memory is not available, allocate
    it. There was a case where [1;31mspeed[m feature changed in the middle of stream
    but the number of tiles stayed the same, memory was not re-allocated.
    
    Another case is where [1;31mspeed[m for base layer is different than that of
    higher quality layers (same resolution). Removed the [1;31mspeed[m constraints
    forcing base layer using same [1;31mspeed[m setting.
    
    Thus the memory for adaptive_rd_thresh_row_mt stayed NULL but the
    feature was enabled.
    
    Add an end to end test to cover this case.
    
    Change-Id: I2f1f802ef98a554571b30094d3600b9439228457

[33mcommit d20d9259a5e8c9367d7b5cd988465007f635d2d5[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Aug 13 14:47:54 2018 -0700

    Add vpxenc control to turn on/off tpl model
    
    The default is set to turn on the temporal dependency model at
    [1;31mspeed[m 0. Use --enable-tpl to control turning it on/off when calling
    vpxenc.
    
    Change-Id: I61614cd8100ae57dc01fd46b2a69c5b67287f18a

[33mcommit 2a17bb071791ffb75a08d65586b433465e9e4698[m
Author: Jerome Jiang <jianj@google.com>
Date:   Mon Aug 13 11:28:28 2018 -0700

    vp9: Remove good mode and [1;31mspeed[m 0-4 from some datarate tests.
    
    Low [1;31mspeed[ms in good mode are too slow.
    
    Move CBR large tests to non-'Large' ones such that they can run in
    Jenkins per commit.
    
    Change-Id: I1da73ca96ee89abcf3566d51ff52f1f2e904a048

[33mcommit 6cd224f3589afb452e2d385bcdcc753d33565bee[m
Merge: ada6a428f f7148bbdd
Author: Hui Su <huisu@google.com>
Date:   Fri Aug 10 16:08:09 2018 +0000

    Merge "Use the pred_mv feature for [1;31mspeed[m 0"

[33mcommit 97848890a99af6604df13ec38c094a01aea40f0e[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Aug 8 14:01:26 2018 -0700

    vp9: Allow for overshoot detection for non-screen CBR mode.
    
    For CBR real-time mode: refactor usage of [1;31mspeed[m feature to
    handle overshoot on slide/scene change. Add 2 modes to indicate
    how slide/scene change is processed for re-setting Q/rate control.
    Keep the [1;31mspeed[m setting to 1 for [1;31mspeed[m >= 5, otherwise set to 0.
    
    Video content and screen content are now handled in similar way,
    though with different thresholds.
    
    Some fixes to thresholds and reset: correct the reset of the buffer
    level to optimal level for each temporal layer, if scene change
    frame will be encoded at max_q.
    
    Also increase the min_thresh for video mode (non-screen content):
    this is to avoid scene change detection on cases like large
    lighting changes, cameras focus. And increase in min_thresh
    makes it more robust to sudden increase in noise level.
    
    Change-Id: I256d350da6e92d2ddc09f100fc06ac147cbc1e49

[33mcommit f7148bbddec6a68f5240a99a24ae9cc16ee70fba[m
Author: Hui Su <huisu@google.com>
Date:   Wed Aug 8 12:11:36 2018 -0700

    Use the pred_mv feature for [1;31mspeed[m 0
    
    Before this patch, pred_mv is used only when the
    adaptive_motion_search [1;31mspeed[m feature is on([1;31mspeed[m>=1).
    This patch enables pred_mv for [1;31mspeed[m 0 as well.
    
    Coding gains:
             avg_psnr   ovr_psnr   ssim
    lowres   -0.31%     -0.32%    -0.38%
    midres   -0.37%     -0.41%    -0.42%
    hdres    -0.30%     -0.31%    -0.29%
    
    Tested encoding [1;31mspeed[m over 18 midres sequences with QP=40. The
    overall [1;31mspeed[m loss is about 0.6%.
    
    Change-Id: I8987e9efb5a70d2bf8779fc2a43838009f9bbd8a

[33mcommit 763c9e08dd9fd7aa3acca3bf3a89a7c36d640050[m
Author: Hui Su <huisu@google.com>
Date:   Mon Aug 6 18:01:25 2018 -0700

    Add enhanced_full_pixel_motion_search feature
    
    Do some extra full pixel search to improve motion vector quality.
    Currently it is enabled for [1;31mspeed[m 1 only; disabled for real time mode.
    
    Coding gain for [1;31mspeed[m 1:
             avg_psnr   ovr_psnr   ssim
    lowres   -0.23%     -0.23%    -0.35%
    midres   -0.33%     -0.35%    -0.38%
    hdres    -0.28%     -0.29%    -0.28%
    
    Tested encoding time over 10 HD sequences. Overall [1;31mspeed[m overhead is
    1.5% for QP=30; 0.6 % for QP=40.
    
    Change-Id: Ic2ea4d78c4979de9d5090c9d7c702944f155f8af

[33mcommit d22b1d69575bb4852555e3636dedb0ee6e635250[m
Merge: bea5c7e48 2fae99911
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Aug 3 03:21:12 2018 +0000

    Merge "vp9: Disable re_encode_overshoot feature for [1;31mspeed[m >= 6."

[33mcommit 2fae99911e7deff3759a9fbd9d00f4975fceb1d9[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Aug 2 09:22:58 2018 -0700

    vp9: Disable re_encode_overshoot feature for [1;31mspeed[m >= 6.
    
    For real-time screen content mode: for [1;31mspeed[m >= 6 disable
    the re_encode_overshoot feature. This means for [1;31mspeed[m >= 6
    the Q and rate control is reset on slide changes based on
    the scene/slide detection and the current Q (and not on a
    first pass encoded frame at current Q).
    
    This reduces encode time on slide changes, but may be less
    accurate in deciding when to reset/max-out the Q.
    
    Change-Id: Id0fdcafd55bc43bd8b3afee211e524f37c8ddce6

[33mcommit 25d6542251a535e48c4067f05013057b77d73801[m
Author: Hui Su <huisu@google.com>
Date:   Wed Aug 1 15:43:05 2018 -0700

    Handle partition cost better in RD search
    
    Take partition cost into consideration during rectangular partition
    mode search.
    
    Compression change is neutral. Encoding [1;31mspeed[m can be a little faster
    at low quality settings. With QP=55 at [1;31mspeed[m 0, average [1;31mspeed[m up over
    15 midres sequences is about 2.7%.
    
    Change-Id: I6d423459675b5f1e4e1475dbbf6f67ab970a4832

[33mcommit 7b5553e139887a4b11e293aafe9efa3da3a53121[m
Author: Jingning Han <jingning@google.com>
Date:   Tue Jul 31 09:43:17 2018 -0700

    Use mesh full pixel motion search to build the source ARF
    
    Append mesh search to the diamond shape search to refine
    the full pixel motion estimation for source ARF generation.
    It improves the average compression performance.
    
    Speed 0
            avg PSNR     overall PSNR     SSIM
    mid      -0.18%        -0.18%        -0.22%
    hd       -0.25%        -0.23%        -0.36%
    nflx2k   -0.22%        -0.23%        -0.37%
    
    Speed 1
           avg PSNR     overall PSNR      SSIM
    mid     -0.10%         -0.08%        -0.11%
    hd      -0.25%         -0.27%        -0.38%
    nflx2k  -0.20%         -0.20%        -0.34%
    
    The additional encoding time is close to the sample noise
    range. For bus_cif at 1000 kbps, the [1;31mspeed[m 0 encoding time
    goes from 83.0 s -> 83.6 s.
    
    Change-Id: I48647f50ec3e8f7ae4550a4bde831f569f46ecf3

[33mcommit dbe4d9c4ebac47ba39678a3f4e3953dd26891be5[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jul 26 16:41:55 2018 -0700

    Use diamond search to build tpl model and arf frames
    
    Use diamond search for full pixel motion estimation to build
    the temporal dependency model and the source arf frame. This gives
    better full pixel motion estimation accuracy. It improves the
    compression performance.
    
    In [1;31mspeed[m 0,
             avg PSNR     overall PSNR     SSIM
    midres    -0.32%        -0.30%        -0.65%
    hdres     -0.88%        -0.91%        -1.31%
    nflx2k    -0.47%        -0.48%        -0.81%
    
    In [1;31mspeed[m 1,
            avg PSNR      overall PSNR     SSIM
    midres    -0.24%        -0.28%        -0.50%
    hdres     -0.82%        -0.83%        -1.18%
    nflx2k    -0.58%        -0.60%        -0.89%
    
    The encoding [1;31mspeed[m change is minor due to the fact that such motion
    estimation is triggered once at the beginning of each group of
    picture coding.
    
    Change-Id: Ib25c0ff4f7450c85fd7a38d24319bd7ae1b9dac8

[33mcommit 46c0cc11b6cbf31fdc0d7b40a8a5e93fefbbd261[m
Author: Angie Chiang <angiebird@google.com>
Date:   Thu Jul 26 14:14:19 2018 -0700

    Remove an extra vp9_encode_frame call
    
    The coding performances drop slightly in [1;31mspeed[m 0
    lowres 0.021%
    midres 0.043%
    hdres 0.087%
    
    The [1;31mspeed[mups in [1;31mspeed[m 0 are observed as follow
    city_cif.y4m 4.5% [1;31mspeed[mup
    pamphlet.y4m 6.9% [1;31mspeed[mup
    
    Change-Id: I2f6209964ffdf7a93919b79033d8e6f9bc44d824

[33mcommit 9775236ca1ca5046027da1ca031c911898b0eb4a[m
Author: Hui Su <huisu@google.com>
Date:   Thu Jul 26 16:10:08 2018 -0700

    Fix multi-thread encoder result test
    
    Fix multi-thread encoder result test induced by
    the prune_ref_frame_for_rect_partitions [1;31mspeed[m feature.
    
    BUG=webm:1552
    
    Change-Id: Idc3b3759651f76285ffd90059c6a2846c4d91a00

[33mcommit b54cdcc3de62390dc438a36425665a89958aefea[m
Author: Hui Su <huisu@google.com>
Date:   Fri Jul 20 15:29:14 2018 -0700

    Add prune_ref_frame_for_rect_partitions feature
    
    Add a [1;31mspeed[m feature to prune reference frames for rectangular
    partitions. Rectangular partition RD search happens after square
    partition RD search. With this feature, we keep record of the ref
    frames picked by square partitions, and only consider those ref
    frames during rect partition RD search.
    
    With this feature on, the computation cost of rect partition RD
    search is greatly reduced, so we can afford to skip rect partition
    RD search less aggressively.
    
    Overall, both compression and encoding [1;31mspeed[m are improved. Only
    [1;31mspeed[m 0 is affected.
    
    Coding gains:
                  lowres    midres    hdres
    ovr psnr      0.00%    -0.36%    -0.37%
    avg psnr      0.00%    -0.36%    -0.36%
    
    Tested encoding [1;31mspeed[m with QP=40 on about 30 sequences.
    Speed gains:
                  lowres    midres    hdres
    average       13.4%      7.1%     6.1%
    max           28.0%     12.0%     9.8%
    
    Change-Id: Id5f36dd2ac75028ae98550d67b0a524aa251b692

[33mcommit b1284dffdb16b82e940e39b226b656801c83289b[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jul 12 09:02:01 2018 -0700

    Reland "Enable tpl model for [1;31mspeed[m 0"
    
    This is a reland of 9c2c234a0b8f9c08719ac1fa286988a0a3626fd0
    
    Threaded mismatch has been addressed.
    
    Original change's description:
    > Enable tpl model for [1;31mspeed[m 0
    >
    > Enable adaptive Lagrangian multiplier for arf in [1;31mspeed[m 0, AQ mode 0,
    > and low bit-depth settings. This improves the peak compression
    > performance:
    >
    >           avg PSNR       overall PSNR       SSIM
    > low       -0.462%         -0.535%          -0.358%
    > mid       -0.780%         -0.857%          -0.868%
    > hd        -0.914%         -1.017%          -0.471%
    > 720p      -0.624%         -0.671%          -1.553%
    > nflx2k    -0.764%         -0.784%          -0.908%
    >
    > The encoding time at [1;31mspeed[m 0 is slightly changed to be faster or
    > slower:
    >
    > city_cif 1000 kbps
    > 78.2 seconds -> 78.1 seconds
    >
    > bus_cif 1000 kbps
    > 98.6 seconds -> 98.8 seconds.
    >
    > Change-Id: I18e7337bb61d985cbd3cf29e56439a6cdf675389
    
    BUG=webm:1547
    
    Change-Id: I025a21683ceed23d5f7147e200555b58b791315c

[33mcommit bc7c99e7eca8d30d005e7d5db8b0aada2459fb15[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Mon Jul 16 12:25:15 2018 -0700

    Revert "Enable tpl model for [1;31mspeed[m 0"
    
    This reverts commit 9c2c234a0b8f9c08719ac1fa286988a0a3626fd0.
    
    Causes multithreading test failures in 32 bit configurations.
    
    BUG=webm:1547
    
    Change-Id: Idb480b206a87b7cd6affbafffde8d8e1b6aee621

[33mcommit 2718de54ca7863777c45a74f3e7285bdd6000573[m
Merge: b2bedbda4 9c2c234a0
Author: Jingning Han <jingning@google.com>
Date:   Fri Jul 13 18:59:25 2018 +0000

    Merge "Enable tpl model for [1;31mspeed[m 0"

[33mcommit 9c2c234a0b8f9c08719ac1fa286988a0a3626fd0[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jul 12 09:02:01 2018 -0700

    Enable tpl model for [1;31mspeed[m 0
    
    Enable adaptive Lagrangian multiplier for arf in [1;31mspeed[m 0, AQ mode 0,
    and low bit-depth settings. This improves the peak compression
    performance:
    
              avg PSNR       overall PSNR       SSIM
    low       -0.462%         -0.535%          -0.358%
    mid       -0.780%         -0.857%          -0.868%
    hd        -0.914%         -1.017%          -0.471%
    720p      -0.624%         -0.671%          -1.553%
    nflx2k    -0.764%         -0.784%          -0.908%
    
    The encoding time at [1;31mspeed[m 0 is slightly changed to be faster or
    slower:
    
    city_cif 1000 kbps
    78.2 seconds -> 78.1 seconds
    
    bus_cif 1000 kbps
    98.6 seconds -> 98.8 seconds.
    
    Change-Id: I18e7337bb61d985cbd3cf29e56439a6cdf675389

[33mcommit 51f4f9257d74659392acd735e6a1eb073e858bf9[m
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Jul 10 10:02:21 2018 -0700

    vp9: Initialize source variance in nonrd-pickmode.
    
    It is already initialized at superblock level, but since
    it is computed per coding block, based on some [1;31mspeed[m features,
    better to initialize it in pick_inter.
    
    No change in behavior, as currently the [1;31mspeed[m features
    that enable use of source_variance in pick_inter are fixed
    at the frame-level.
    
    Change-Id: Ic787ac2f389ba1bced98716096e7b5cffba856a7

[33mcommit a01896354d3845bce18899cb31d1871e985c8483[m
Author: James Zern <jzern@google.com>
Date:   Mon Jul 9 22:56:54 2018 -0700

    vp9_encoder: only alloc tpl stats if enabled
    
    defer the allocation to post [1;31mspeed[m feature setup
    
    Change-Id: I20713a2b1856fd5479c883d50772a2b54bcbb3bc

[33mcommit e51daf90fd83d4cf0afcb402a5f6382ce817e5d2[m
Author: Hui Su <huisu@google.com>
Date:   Sun Jun 24 17:00:54 2018 -0700

    Add partition breakout models for 720p resolution
    
    Add partition search breakout models for 720p resolution,
    currently enabled only for [1;31mspeed[m 0.
    
    Compression performance change is neutral.
    Tested encoding [1;31mspeed[m over 20 720p clips:
    
    Speed gain(%)   QP=55   QP=45   QP=35
      max           22.1    20.3    29.8
    average         10.3     9.1    11.4
    
    Change-Id: I07499728bbc5b80035fc66fad882ea556c8d07f2

[33mcommit 4d2ec89de0b9915bc93bcb5199855506e055b437[m
Merge: d26b6b5b9 112652fb0
Author: Jingning Han <jingning@google.com>
Date:   Fri Jun 29 05:02:40 2018 +0000

    Merge "Skip temporal dependency build when the [1;31mspeed[m feature is off"

[33mcommit 112652fb0913f53a6c6fbfc2003d7857416ed7e2[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jun 28 15:26:27 2018 -0700

    Skip temporal dependency build when the [1;31mspeed[m feature is off
    
    Change-Id: I888761193882cc92720e0efaea5229a04a6ed67f

[33mcommit b99749b540f865cf5b8b32604d918c0760a3071a[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Jun 26 15:57:51 2018 +0100

    Enhanced partition experiment.
    
    This patch relates to motion artifacts as described in Issue 73484098
    
    The aim of this patch is to promote the use of smaller partition
    sizes in places where some of the sub blocks have very low
    spatial complexity and some have much higher complexity.
    The patch can have a small impact on encode [1;31mspeed[m, but much
    less than alternative approaches such as lowering the rd thresholds
    that limit the partition search when distortion is low.
    
    The patch also applies a similar sub block strategy for AQ1.
    
    Metrics results for our standard sets over typical YT rates.
    (Overall PSNR, SSIM, PSNR HVS) % -ve better.
    
    Low Res -0.274, -0.303, -0.330
    Mid Res 0.001, - 0.128, -0.100
    Hd Res -0.236, -0.371, -0.349
    N 2K -0.663, -0.798, -0.708
    N 4K -0.488, -0.588, -0.517
    
    Change-Id: Ice1fc977c1d29fd5e401f9c7c8e8ff7a5f410717

[33mcommit f7b368dc5a41d5be020d6b738142256b8725c786[m
Merge: 95e2c8399 c398d5a77
Author: Hui Su <huisu@google.com>
Date:   Wed Jun 27 15:38:45 2018 +0000

    Merge "Turn on ML partition search breakout on [1;31mspeed[m 0"

[33mcommit c398d5a77046ced168bfb7e37443852c5cb58b3b[m
Author: Hui Su <huisu@google.com>
Date:   Mon Jun 25 10:58:33 2018 -0700

    Turn on ML partition search breakout on [1;31mspeed[m 0
    
    Enable ML based partition search breakout on [1;31mspeed[m 0 when frame
    resolution is less then 720p and bitdepth is 8.
    
    Compression performance change is neutral.
    Tested encoding [1;31mspeed[m over 20 480p sequences:
    
    Speed gain(%)   QP=30   QP=40   QP=50   QP=60
      max           14.4    18.6    17.8    24.4
    average          4.6     9.0     8.0    13.2
    
    Change-Id: Ia0d2947030ac774dc1533eb27ffc57f5b788a6ce

[33mcommit bb226f61ddbea5fad0e192fb6ba259962c1f2617[m
Author: Hui Su <huisu@google.com>
Date:   Thu Jun 21 21:03:37 2018 -0700

    Add a partition search breakout model
    
    for q-index between 100 and 150.
    
    This only affects [1;31mspeed[m 1 and 2, resolution under 720p, q-index between
    100 and 150, low bit-depth.
    
    Compression performane change is neutral.
    Encoding [1;31mspeed[m gain is up to 16% for [1;31mspeed[m 1;
                           up to  6% for [1;31mspeed[m 2.
    
    Results from encoding city_4cif_30fps:
    [1;31mspeed[m 1, QP=36
    before:  37.964 dB, 45581b/f, 2.73 fps
    after:   37.958 dB, 45510b/f, 3.16 fps
    
    [1;31mspeed[m 1, QP=28
    before:  39.297 dB, 82452b/f, 2.14 fps
    after:   39.297 dB, 82310b/f, 2.25 fps
    
    [1;31mspeed[m 2, QP=36
    before:  37.903 dB, 45586b/f, 4.08 fps
    after:   37.895 dB, 45492b/f, 4.34 fps
    
    [1;31mspeed[m 2, QP=28
    before:  39.224 dB, 82272b/f, 3.03 fps
    after:   39.223 dB, 82152b/f, 3.17 fps
    
    Change-Id: Ieaefedad902df80aa9699545fa06294601955803

[33mcommit 960582af7607afb695e99f61c0e7f6e806a9f0b3[m
Author: Hui Su <huisu@google.com>
Date:   Mon Jun 18 16:07:41 2018 -0700

    Add a partition search breakout model
    
    for q-index between 150 and 200.
    
    Previously the ML based breakout feature is only supported for q-index
    larger than 200.
    
    This only affects [1;31mspeed[m 1 and 2, resolution under 720p, q-index between
    150 and 200, low bit-depth.
    
    Compression performane change is neutral.
    Encoding [1;31mspeed[m gain is up to 30% for [1;31mspeed[m 1;
                           up to 20% for [1;31mspeed[m 2.
    
    Results from encoding city_4cif_30fps:
    [1;31mspeed[m 1, QP=38
    before:  37.689 dB, 41007b/f, 2.91 fps
    after:   37.687 dB, 40998b/f, 3.46 fps
    
    [1;31mspeed[m 1, QP=48
    before:  35.959 dB, 22106b/f, 3.66 fps
    after:   35.950 dB, 22118b/f, 4.83 fps
    
    [1;31mspeed[m 2, QP=38
    before:  37.630 dB, 40999b/f, 4.42 fps
    after:   37.633 dB, 41063b/f, 4.63 fps
    
    [1;31mspeed[m 2, QP=48
    before:  35.905 dB, 22177b/f, 4.90 fps
    after:   35.889 dB, 22145b/f, 5.92 fps
    
    Change-Id: Ibd4a2f4d7093fb248ab94ddd388cbaa8de2c5ef7

[33mcommit 649d372788bafdb6fe3cf4dcff0ba5f80a1db839[m
Merge: 54dfdf28c 238cf66eb
Author: Hui Su <huisu@google.com>
Date:   Tue Jun 19 00:04:02 2018 +0000

    Merge "Improve the partition search breakout [1;31mspeed[m feature"

[33mcommit 238cf66eb5e376062ee13198ef537e848866b8aa[m
Author: Hui Su <huisu@google.com>
Date:   Tue Jun 12 11:56:09 2018 -0700

    Improve the partition search breakout [1;31mspeed[m feature
    
    Use a linear model to make partition search breakout decisions.
    Currently the model is tuned for large quantizers and small resolutions.
    So it is only used when q-index is larger than 200 and frame
    width/height is smaller than 720. Also it's not yet supported for high
    bit depth.
    
    Tested [1;31mspeed[m 1 and 2 on lowres and midres. Compression performance is
    neutral. At low bitrates, encoding [1;31mspeed[mup is up to 50% for [1;31mspeed[m 1;
    up to 30% for [1;31mspeed[m 2.
    Some sample numbers:
    
    into_tree_480p, [1;31mspeed[m 1
    QP=60 before:  35.228 dB, 3488b/f, 7.78 fps
          now:     35.217 dB, 3475b/f, 11.57 fps
    QP=50 before:  37.492 dB, 7983b/f, 6.24 fps
          now:     37.491 dB, 7974b/f, 7.55 fps
    
    PartyScene_832x480_50, [1;31mspeed[m 1
    QP=60 before:  30.104 dB, 22426b/f, 3.28 fps
          now:     30.109 dB, 22410b/f, 4.43 fps
    QP=50 before:  33.016 dB, 46984b/f, 2.78 fps
          now:     33.018 dB, 46998b/f, 3.35 fps
    
    into_tree_480p, [1;31mspeed[m 2
    QP=60 before:  35.175 dB, 3506b/f, 10.96 fps
          now:     35.185 dB, 3510b/f, 13.47 fps
    QP=50 before:  37.448 dB, 8016b/f, 9.04 fps
          now:     37.459 dB, 8048b/f, 9.81 fps
    
    PartyScene_832x480_50, [1;31mspeed[m 2
    QP=60 before:  30.060 dB, 22537b/f, 4.42 fps
          now:     30.061 dB, 22541b/f, 5.38 fps
    QP=50 before:  32.923 dB, 47134b/f, 3.85 fps
          now:     32.920 dB, 47073b/f, 4.31 fps
    
    Change-Id: I674cba4f027c4c65f7837d5ec9179d6201e6ba86

[33mcommit 239ccadd5a7811885b6c4c0cfd1ba012ba247c46[m
Merge: ea7830625 5ef063ed2
Author: Jingning Han <jingning@google.com>
Date:   Thu Jun 14 23:06:14 2018 +0000

    Merge "Add temporal model control as a [1;31mspeed[m feature"

[33mcommit 5ef063ed275a61afc467e4f48350e7c0f29af3c0[m
Author: Jingning Han <jingning@google.com>
Date:   Thu Jun 14 10:04:03 2018 -0700

    Add temporal model control as a [1;31mspeed[m feature
    
    The model construction would incur 15% slowdown for [1;31mspeed[m 2. The
    [1;31mspeed[m change on [1;31mspeed[m 0 is unnoticeable.
    
    The current [1;31mspeed[m features set up would DISABLE temporal dependency
    model for all [1;31mspeed[m settings.
    
    Change-Id: Ic45dd962f3a54a8f5f0452502dc05e352dc09ca1

[33mcommit 55a2abfe31b82af13a77c3dc89913774f667b898[m
Merge: 8fd4b1543 693c9a70f
Author: Hui Su <huisu@google.com>
Date:   Mon Jun 11 18:07:18 2018 +0000

    Merge "Small [1;31mspeed[mup of ml_pruning_partition()"

[33mcommit 7d97790438b796620a48dd2cfa6f2c6fe1f16871[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Jun 7 16:35:44 2018 -0700

    vp9-svc: Fix to frames_since_golden update for SVC.
    
    When the second (gf) temporal reference is used in SVC:
    the reference is refreshed on base TL superframes, and so
    the rc->frames_since_golden counter was also only updated on
    base TL frames. But this was disabling the golden reference
    from being used as a temporal reference for TL > 0 frames
    (since frames_since_golden was 0/not updated on TL > 0 frames).
    
    Fix is to copy the update of rc->frames_since_golden to all
    upper temporal layers. This allows TL > 0 frames to test the
    golden inter mode.
    
    Gain on RTC set: ~2%, ~8% on desktop_vga clip.
    Encode time increase ~5-8% on linux, 3SL-3TL run with 1 thread.
    
    For now keep this off for TL > 0 frames in [1;31mspeed[m features, so
    this change does not change current behavior for [1;31mspeed[m >= 7.
    
    Change-Id: I405708f3f80039ae47bd64ec53e66f92160acd9e

[33mcommit 693c9a70f056289aa56fda3fa59576fbdb836519[m
Author: Hui Su <huisu@google.com>
Date:   Fri Jun 8 13:41:05 2018 -0700

    Small [1;31mspeed[mup of ml_pruning_partition()
    
    Terminate early and skip neural net model when linear score is already
    high enough, which indicates that we should not skip split and
    rectangular partitions.
    
    No changes on compression; encoding [1;31mspeed[m improves slightly.
    
    Change-Id: I4e0995090200eb4889344da905d2f7048673af5f

[33mcommit d468fd90e05ba7f5173d849c63f6a50115c9769b[m
Author: Luca Barbato <lu_zero@gentoo.org>
Date:   Wed Jun 6 21:10:18 2018 +0000

    Implement subtract_block for VSX
    
    ~2x [1;31mspeed[mup or better.
    
    [ RUN      ] C/VP9SubtractBlockTest.Speed/0
    [    BENCH ]      4x4  365.1 ms ( Â±2.2 ms )
    [    BENCH ]      8x4  258.5 ms ( Â±0.3 ms )
    [    BENCH ]      4x8  202.7 ms ( Â±0.2 ms )
    [    BENCH ]      8x8  162.2 ms ( Â±0.5 ms )
    [    BENCH ]     16x8  138.8 ms ( Â±0.3 ms )
    [    BENCH ]     8x16  121.5 ms ( Â±0.4 ms )
    [    BENCH ]    16x16  110.2 ms ( Â±0.5 ms )
    [    BENCH ]    32x16  104.8 ms ( Â±0.1 ms )
    [    BENCH ]    16x32  32.7 ms ( Â±0.1 ms )
    [    BENCH ]    32x32  30.0 ms ( Â±0.0 ms )
    [    BENCH ]    64x32  28.7 ms ( Â±0.0 ms )
    [    BENCH ]    32x64  20.1 ms ( Â±0.0 ms )
    [    BENCH ]    64x64  19.3 ms ( Â±0.0 ms )
    
    [ RUN      ] VSX/VP9SubtractBlockTest.Speed/0
    [    BENCH ]      4x4  155.3 ms ( Â±0.9 ms )
    [    BENCH ]      8x4  99.3 ms ( Â±0.4 ms )
    [    BENCH ]      4x8  77.2 ms ( Â±0.1 ms )
    [    BENCH ]      8x8  45.7 ms ( Â±0.0 ms )
    [    BENCH ]     16x8  34.1 ms ( Â±0.0 ms )
    [    BENCH ]     8x16  29.5 ms ( Â±0.0 ms )
    [    BENCH ]    16x16  19.9 ms ( Â±0.0 ms )
    [    BENCH ]    32x16  15.1 ms ( Â±0.0 ms )
    [    BENCH ]    16x32  16.7 ms ( Â±0.0 ms )
    [    BENCH ]    32x32  14.1 ms ( Â±0.0 ms )
    [    BENCH ]    64x32  12.6 ms ( Â±0.0 ms )
    [    BENCH ]    32x64  12.0 ms ( Â±0.0 ms )
    [    BENCH ]    64x64  11.2 ms ( Â±0.0 ms )
    
    Change-Id: I89ce12b6475871dc9e8fde84d0b6fe5c420c28c7

[33mcommit 1ff7438463ef79a5850cbfd3e37b70a7b3a13256[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jun 6 22:42:38 2018 -0700

    vp9-svc: Modify choose_partitioning for second temporal ref
    
    For mode where second temporal reference is used in SVC: allow
    for using/testing this reference (golden ref) in the variance
    partition scheme (choose_partitioning).
    
    Small positive gain (~0.25%) on metrics for 3 layer SVC,
    negligible change in [1;31mspeed[m.
    
    Change-Id: I29b8315da530e60db3d6c90faa8fb178d9f2de26

[33mcommit 4640c2f58346160a1aedafc323b3d1f322f71e5d[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jun 6 15:16:14 2018 -0700

    vp9-svc: Enable use of second temporal reference for SVC.
    
    When inter-layer is disabled on INTER frames, this will allow
    use of a second (longer term) temporal reference for SVC.
    
    Only enabled on highest resolution spatial layer.
    
    Average gains of ~4% on RTC set, [1;31mspeed[m decrease of about ~2%.
    
    Change-Id: I3c2d415653c448eb7269c828e120fe8bb2ef3f97

[33mcommit 3f7e6cc020446ee29439f1cd7d3d5c39adaf64c0[m
Merge: 19222548a 76342f7a6
Author: Jerome Jiang <jianj@google.com>
Date:   Fri Jun 1 23:04:35 2018 +0000

    Merge "VP9: exclude [1;31mspeed[m 9 from VBR datarate tests."

[33mcommit 76342f7a68b4eb03b0f168e60f7b95619b42a796[m
Author: Jerome Jiang <jianj@google.com>
Date:   Fri Jun 1 11:36:39 2018 -0700

    VP9: exclude [1;31mspeed[m 9 from VBR datarate tests.
    
    Change-Id: I4c4d31d013cb45e20918f4ef83ce32811d76e02b

[33mcommit 19222548a1d0ab0c0822060463dff18e2103666b[m
Merge: 71e13f766 3b4425c2c
Author: Jerome Jiang <jianj@google.com>
Date:   Thu May 31 23:00:32 2018 +0000

    Merge "VP9: Allow for bilinear subpel interp at [1;31mspeed[m 9 for high motion."

[33mcommit 3b4425c2ca9b5f7e736f2bbdab492648364fb550[m
Author: Jerome Jiang <jianj@google.com>
Date:   Wed May 23 11:52:37 2018 -0700

    VP9: Allow for bilinear subpel interp at [1;31mspeed[m 9 for high motion.
    
    Fixed some settings in nonrd pick mode to allow for frame-level bilinear
    to be set.
    On Galaxy S8+ it has 4% [1;31mspeed[m up on high motion clips. Almost the same
    for low motion.
    
    0.17% quality loss on RTC.
    
    Change-Id: I044a7de020183754ba08bb6c96c5a78ba5c7fea2

[33mcommit efc195cbb9c50925a9479f0a76c594543d22a66e[m
Author: Hui Su <huisu@google.com>
Date:   Mon May 14 14:35:25 2018 -0700

    Improve the ML based partition pruning
    
    Add a neural net model that uses the same features as the existing
    linear model. Make the pruning decision based on both the linear
    and the neural net model. It provides more accurate predictions,
    and may improve compression and/or encoding [1;31mspeed[m.
    
    This only affects [1;31mspeed[m 0.
    
    Coding gain:
    0.37% on midres
    0.34% on hdres
    0.50% on jvet8b720p
    
    Encoding [1;31mspeed[m impact(average over locally tested 20 clips from midres
    and hdres):
    QP=20: down by 2.5%.
    QP=30: down by 3.9%.
    QP=40: donw by 4.5%.
    QP=50:   up by 5.2%.
    
    Change-Id: I402ec799745ad3b74abf0789fa5e124fe64e704d

[33mcommit b2898a9ade42f623cdc6ab526de657fd078660d9[m
Author: Luc Trudeau <luc@trud.ca>
Date:   Tue May 22 14:16:15 2018 -0400

    Bench Class For More Robust Speed Tests
    
    To make [1;31mspeed[m testing more robust, the AbstractBench runs the
    desired code multiple times and report the median run time with
    mean absolute deviation around the median.
    
    To use the AbstractBench, simply add it as a parent to your test
    class, and implement the run() method (with the code you want to
    benchmark).
    
    Sample output for VP9QuantizeTest
    
      [    BENCH ]      Bypass calculations       4x4  165.8 ms ( Â±1.0 ms )
      [    BENCH ]        Full calculations       4x4  165.8 ms ( Â±0.9 ms )
      [    BENCH ]      Bypass calculations       8x8  129.7 ms ( Â±0.9 ms )
      [    BENCH ]        Full calculations       8x8  130.3 ms ( Â±1.4 ms )
      [    BENCH ]      Bypass calculations     16x16  110.3 ms ( Â±1.4 ms )
      [    BENCH ]        Full calculations     16x16  110.1 ms ( Â±0.9 ms )
    
    Change-Id: I1dd649754cb8c4c621eee2728198ea6a555f38b3

[33mcommit d7b140487829ec81bd55774d22be6c8eba9073c0[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed May 16 14:52:17 2018 -0700

    vp9-svc: Skip find_predictors based on ref_frame_flags.
    
    Has some effect for SVC on base spatial layers (which only
    reference LAST) or on upper spatial layers when inter_layer
    prediction is disabled.
    
    Small [1;31mspeed[mup on Mac of ~1%, for 3 layer SVC with inter-layer
    prediction disabled.
    
    Change-Id: I05be5da8843e0d32e9d85f6eb951cf1894e781d8

[33mcommit bbca74d4129ce13be9c9dd10fbe6ab96ca63240a[m
Author: Jingning Han <jingning@google.com>
Date:   Tue May 15 13:04:49 2018 -0700

    Use the updated best rd cost for transform block search
    
    The compression performance change is +/-0.01% for both [1;31mspeed[m 0/1.
    Locally tested the encoding [1;31mspeed[m:
    
    ped_1080p 150 frames [1;31mspeed[m 0
    79544 b/f 41.339 dB 503072 ms ->
    79566 b/f 41.338 dB 493009 ms.
    
    [1;31mspeed[m 1
    79789 b/f 41.152 dB 104583 ms ->
    79770 b/f 41.153 dB 102607 ms
    
    Change-Id: Ief200b613608643e5708cebe979982eb4a84831b

[33mcommit d99abe9a9ad78b765386d0ee62559de184ba581e[m
Merge: 689ac4133 25b7b6e20
Author: Marco Paniconi <marpan@google.com>
Date:   Tue May 15 17:45:29 2018 +0000

    Merge "vp9: Some [1;31mspeed[m feature settings for [1;31mspeed[m 9."

[33mcommit 25b7b6e20fed47e73b66c3b0c59c602bf19b76d8[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon May 14 20:52:20 2018 -0700

    vp9: Some [1;31mspeed[m feature settings for [1;31mspeed[m 9.
    
    Disable 8x8 blocks for higher resolutions,
    reduce mv_thresh for 1/2 subpel motion, and
    disable golden reference at superblock level
    based on source sad and motion content.
    
    ~6% loss in RTC metrics over current [1;31mspeed[m 9.
    Speedup about ~10% for high motion clip on linux.
    
    Change-Id: I7ff8f81ac93ee8a90d5a1f4837c955d000bd75e7

[33mcommit c73907a09b5d26010b7b4da960748664ff6bbd2c[m
Merge: e6859b04a 9ebc8605d
Author: Marco Paniconi <marpan@google.com>
Date:   Mon May 14 22:44:52 2018 +0000

    Merge "vp9-realtime: Enable alt_ref at [1;31mspeed[m 5, for live."

[33mcommit 9ebc8605dbb493d25247cf106b8760c6fccbd11d[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Apr 27 10:38:15 2018 -0700

    vp9-realtime: Enable alt_ref at [1;31mspeed[m 5, for live.
    
    Enable alt_ref and compound prediction at [1;31mspeed[m 5.
    
    For 1 pass VBR mode, when lag > 0.
    Gain for Live set: ~3% gain on average, several
    clips have gains ~5-15%.
    
    Encoder fps decrease ~5-10%, on desktop with 4 threads.
    
    For now enable it only for resolutions <= 1280x720.
    
    Change-Id: I25e3d61a2244a3a01962624052c5adf4837965c7

[33mcommit 66aca163f5017fc50276f1c3025f2b2cc08aa010[m
Author: Jerome Jiang <jianj@google.com>
Date:   Thu Mar 29 14:59:58 2018 -0700

    VP9: Add [1;31mspeed[m 9 for subpel search.
    
    Set subpel search stop to 2 when motion vector is non zero.
    
    10% [1;31mspeed[mup on 1 and 2 threads on Samsung Galaxy S8+.
    
    Change-Id: I7323bb913000229cf60a37495bf88bcc51d0ac96

[33mcommit 11880f6a3d7e8a801a956d79c70421776523f532[m
Author: Hui Su <huisu@google.com>
Date:   Mon Apr 30 21:11:31 2018 -0700

    Don't use transform domain distortion when eob is 0
    
    When eob is 0, pixel domain distortion is more accurate and efficient.
    
    This mainly affects [1;31mspeed[m >= 2. Speed 0 always use pixel domain
    distortion; [1;31mspeed[m 1 use it most of the time.
    
    Compression impact(negative means gain):
            [1;31mspeed[m 2   [1;31mspeed[m 3   [1;31mspeed[m 4
    lowres   -0.04%   -0.06%    -0.06%
    midres   -0.10%   -0.10%    -0.20%
    hdres    -0.01%   -0.03%    -0.06%
    
    Encoding [1;31mspeed[m is about neutral.
    
    Change-Id: I77b957658deeaad57381fd13afc11bacdec8c08f

[33mcommit e4dfacbf6c362aec84d2fdeb3de04d676b5ec176[m
Author: Hui Su <huisu@google.com>
Date:   Tue Apr 24 22:42:54 2018 -0700

    Do one level less of transform search for large blocks
    
    If block size is larger than 32x32, search transform size for one level
    less than the other blocks.
    
    This mainly affects [1;31mspeed[m 0 and 1, as [1;31mspeed[m >= 2 uses largest transform
    size(except for keyframes and alt-ref frames).
    
    Compression(negative means gain):
            [1;31mspeed[m 0     [1;31mspeed[m 1
    lowres  -0.007%       0.00%
    midres   0.023%     -0.011%
    hdres    0.002%     -0.016%
    
    Encoder [1;31mspeed[m:
    Tested on crowd_run_1080p 30 frames
    Fixed QP = 30, [1;31mspeed[m 0: 582.5s -> 564.6s
                   [1;31mspeed[m 1:  75.0s ->  73.3s
    
    Change-Id: I46622efafe0e88d502efa1480a5324ead1d1e8d0

[33mcommit 6aca1d2d944bf0ac5810efd00e384847bd42eaee[m
Merge: 57755aad5 2eac6df78
Author: Hui Su <huisu@google.com>
Date:   Wed Apr 25 16:25:40 2018 +0000

    Merge "Add [1;31mspeed[m feture to control tx size search depth"

[33mcommit 2eac6df788dbcfb8f9388f785e7b124765b252bc[m
Author: Hui Su <huisu@google.com>
Date:   Mon Apr 23 14:05:23 2018 -0700

    Add [1;31mspeed[m feture to control tx size search depth
    
    Set the max depth as 2 for [1;31mspeed[m 0.
    
    Compression(negative means gain):
            [1;31mspeed[m 0     [1;31mspeed[m 1
    lowres   -0.01%      0.00%
    midres    0.05%     -0.01%
    hdres    -0.01%      0.01%
    
    Encoding [1;31mspeed[m gain:
    Tested on crowd_run_1080p 30 frames
    Fixed QP = 20, [1;31mspeed[m 0: 669.7s -> 656.1s
                   [1;31mspeed[m 1: 104.5s -> 101.5s
    Fixed QP = 40, [1;31mspeed[m 0: 440.7s -> 435.8s
                   [1;31mspeed[m 1:  47.7s ->  45.1s
    
    Change-Id: I61bc13818c72317b9f1d596727d54a906b20c012

[33mcommit ce11afb0e02a81a1e0e38ea9f3c3e13920439b1f[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Apr 16 16:15:05 2018 -0700

    vp9: Changes for scene detection overshoot and SVC.
    
    Refactor the scene detection for 1 pass cbr to allow the
    scene detection to be checked once per superframe (on the base layer),
    using the full resolution sources.
    
    If scene change is detected: check for re-encoding due to
    large overshoot for all spatial layers withing the superframe.
    
    Add [1;31mspeed[m feature to control the re-encode step.
    Keep the re-encode step on for now.
    
    Small change in nonrd_pickmode to remove the possible skip of golden
    reference for SVC, when the high_source_sad is set for the superframe.
    
    Change only affects SVC encoding with screen-content mode enabled.
    
    Change-Id: If4cfb52cb0dd0f0fce1c4214fa8b413f8f803d56

[33mcommit 55ca875e6bc2da9539fac2839611b3945f262e49[m
Author: Linfeng Zhang <linfengz@google.com>
Date:   Mon Apr 16 14:44:00 2018 -0700

    Update variance sse2 functions
    
    Old vs New
    Variance 64x64 time:   197 ms   143 ms
    Variance 64x32 time:   200 ms   146 ms
    Variance 32x64 time:   203 ms   140 ms
    Variance 32x32 time:   214 ms   152 ms
    Variance 32x16 time:   243 ms   153 ms
    Variance 16x32 time:   234 ms   197 ms
    Variance 16x16 time:   205 ms   205 ms
    Variance 16x8  time:   228 ms   222 ms
    Variance 8x16  time:   228 ms   232 ms
    Variance 8x8   time:   282 ms   240 ms
    Variance 8x4   time:   506 ms   341 ms
    Variance 4x8   time:   518 ms   415 ms
    Variance 4x4   time:   604 ms   628 ms
    
    Observed vp9 encoder [1;31mspeed[m up when encoding a 720p video.
    
    Change-Id: Iebb98f3b3d8adbc11a733a529d8427ce3d2a5314

[33mcommit debd86ec82f5fc9a37f5f3a828ff9ab0815a9c55[m
Merge: 872e34ae8 8edd5051a
Author: Linfeng Zhang <linfengz@google.com>
Date:   Wed Mar 28 19:39:37 2018 +0000

    Merge "Add [1;31mspeed[m test in SADx4Test"

[33mcommit 8edd5051aa7255927bec84dd5699c2149c6f61b3[m
Author: Linfeng Zhang <linfengz@google.com>
Date:   Thu Mar 22 13:37:49 2018 -0700

    Add [1;31mspeed[m test in SADx4Test
    
    Change-Id: I42dd3df8c13c0a6d08ce28e27e8917b5d831fc1a

[33mcommit 1ae97b4a4db010ee87bedca5943c64f55d43f6f7[m
Author: Jerome Jiang <jianj@google.com>
Date:   Tue Mar 20 15:39:02 2018 -0700

    vp9 svc frame drop: enable adaptive rd for row mt.
    
    adaptive_rd_threshold_mt is set to 1 when [1;31mspeed[m >= 7 for SVC.
    QVGA in SVC uses [1;31mspeed[m 5 which set adaptive_rd_threshold_mt to 0.
    If VGA or HD is dropped for the last super frame, the flag is still 0
    when the encoder is destroyed. Thus memory won't be released.
    
    Change the bitrate threshold in datarate test.
    
    Change-Id: I55352cc0b030568d38eb735d99c2fa29058d3690

[33mcommit ca28740570a9becaacead42aaeb4e1e126f17955[m
Author: Jerome Jiang <jianj@google.com>
Date:   Wed Feb 21 15:28:54 2018 -0800

    VP8: Fix out of range index for mvcost.
    
    Clamp index between 0 and MVvals.
    
    Bit exact for [1;31mspeed[m -8, -6 and -4 on RTC set.
    
    BUG=b/72510002
    
    Change-Id: I61bdb02a0924e157b3c1980f74fbbfe5ce51bc44

[33mcommit 46adbc4af8d670d16f89b403709173484dd50971[m
Author: Jerome Jiang <jianj@google.com>
Date:   Mon Jan 29 10:14:40 2018 -0800

    Reland "Add ROI support for VP9."
    
    Extended ROI struct suitable for VP9.
    ROI input from user is passed into internal struct and applied on every frame
    (except key frame).
    
    Enabled usage of all 4 VP9 segment features (delta_qp, delta_lf, skip,
    ref_frame) via the ROI map input.
    Made changes to nonrd_pickmode for the ref_frame feature.
    
    Only works for realtime [1;31mspeed[m >= 5.
    AQ_MODE needs to be turned off for ROI to take effect.
    
    Change example in the sample encoder: vpx_temporal_svc_encoder.c to be suitable
    for VP9.
    Add datarate test.
    
    Bump up ABI version.
    
    BUG=webm:1470
    
    Change-Id: I663b8c89862328646f4cc6119752b66efc5dc9ac

[33mcommit 62b013abe8b1134f291b9e94775a81fbbe9e6d38[m
Author: Jerome Jiang <jianj@google.com>
Date:   Fri Feb 9 18:53:54 2018 +0000

    Revert "Add ROI support for VP9."
    
    This reverts commit 4e5b4b58483e1f38e37acd49b809d725b4f66c26.
    
    Reason for revert: Commit message inaccurate.
    
    Original change's description:
    > Add ROI support for VP9.
    >
    > Extended ROI struct suitable for VP9.
    > ROI input from user is passed into internal struct and applied on every frame
    > (except key frame).
    >
    > Enabled usage of all 4 VP9 segment features (delta_qp, delta_lf, skip,
    > ref_frame) via the ROI map input.
    > Made changes to nonrd_pickmode for the ref_frame feature.
    >
    > Only works for realtime [1;31mspeed[m >= 5.
    > AQ_MODE needs to be turned off for ROI to take effect.
    >
    > Change example in the sample encoder: vpx_temporal_svc_encoder.c to be suitable
    > for VP9.
    > Add datarate test.
    >
    > Bump up ABI version.
    >
    > BUG=webm:1470
    >
    > Change-Id: I7e0cf6890649adb98a5fda2efb6ae1fa511c7fc9
    
    TBR=yaowu@google.com,jzern@google.com,marpan@google.com,builds@webmproject.org,jianj@google.com
    
    Change-Id: I000dbd81e0c67cb8a0dcde4013ee9bf7afb038f0
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Bug: webm:1470

[33mcommit 4e5b4b58483e1f38e37acd49b809d725b4f66c26[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Jan 29 10:14:40 2018 -0800

    Add ROI support for VP9.
    
    Extended ROI struct suitable for VP9.
    ROI input from user is passed into internal struct and applied on every frame
    (except key frame).
    
    Enabled usage of all 4 VP9 segment features (delta_qp, delta_lf, skip,
    ref_frame) via the ROI map input.
    Made changes to nonrd_pickmode for the ref_frame feature.
    
    Only works for realtime [1;31mspeed[m >= 5.
    AQ_MODE needs to be turned off for ROI to take effect.
    
    Change example in the sample encoder: vpx_temporal_svc_encoder.c to be suitable
    for VP9.
    Add datarate test.
    
    Bump up ABI version.
    
    BUG=webm:1470
    
    Change-Id: I7e0cf6890649adb98a5fda2efb6ae1fa511c7fc9

[33mcommit 14b21b84e3a396d8548c863c0105a2bc4485c39d[m
Author: James Zern <jzern@google.com>
Date:   Wed Jan 31 23:38:47 2018 -0800

    vp9_scale_test: parameterize filter type
    
    this allows the test to be sharded more efficiently and [1;31mspeed[ms up the
    run when built with slower configs, e.g., asan.
    
    Change-Id: If6d863b76871e3934704a1079bbf17f4886932c7

[33mcommit 55db4f033f637e3e5ef326da5cf27e708b1336c0[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Jan 4 14:20:59 2018 -0800

    vp9: Increase convergence [1;31mspeed[m of noise estimation.
    
    Increase the recursive average factor from 15/16 to 3/4
    to make the noise estimation respond faster.
    
    Small/neglible change on low noise content, but better
    denoising for noisy content.
    Also encoder [1;31mspeed[mup of ~2-3% observed on some noisy clips.
    
    Change-Id: I9dd02fe961ca24b411fe4c2732f814bf1e9a7f9f
For keyword quality:
[33mcommit 57f7c6f19144786c57d5cfc8e878765bd9944baf[m
Author: Marco Paniconi <marpan@google.com>
Date:   Tue Dec 18 10:59:39 2018 -0800

    vp9-svc: Adjust step_param for screen-content
    
    Use same step_param for all spatial layers for now.
    Some improvement in [1;31mquality[m on scrolling for spatial
    enhancement layer.
    
    Change-Id: Ic9eed8ba5dd44493e9f5e81f6115df2a25825d16

[33mcommit 1358fdf2cb3ff608fa71ab273e980bef57e61408[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Dec 17 10:30:17 2018 -0800

    Add PSNR_AQ mode
    
    Placeholder to support adaptive quantizer for PSNR and SSIM coding
    [1;31mquality[m improvement.
    
    Change-Id: Id967c9914bb1d72a6f480ef1ba9d6650914dd658

[33mcommit dcea8785ad76c477838a2a0cf0bb7b47ea71c356[m
Author: Angie Chiang <angiebird@google.com>
Date:   Wed Dec 5 17:58:58 2018 -0800

    Implement find_prev_nb_full_mvs
    
    In single_motion_search, we use prev coded nb full mvs to compute
    mv inconsistency.
    
    lambda is set to block_area / 4.
    
    This is a draft. Will to experiments to figure out the impact on
    coding efficiency and visual [1;31mquality[m.
    
    Change-Id: Id10f72b3c7e6085bfbe1a6156b9fd6917843d001

[33mcommit 314641e29816f7ec8079135291baa6ab3b2d7e83[m
Merge: 532a42aa5 bff94472a
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Nov 22 01:27:59 2018 +0000

    Merge "vp9 screen-content: Keep lower step_param for [1;31mquality[m layers."

[33mcommit bff94472a66167ad9ba40ee3c5ad554cda1c8ed8[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Nov 21 15:01:04 2018 -0800

    vp9 screen-content: Keep lower step_param for [1;31mquality[m layers.
    
    Issue with step_param = 2 seems specific to lower layers
    with different resolution.
    
    Change-Id: I26405488ac7691b3e471e98e794d4b1d8098a91d

[33mcommit 84b19ab5acb9f7104441c2c3c5a8157a95e417e1[m
Author: Marco Paniconi <marpan@google.com>
Date:   Sun Nov 11 22:09:31 2018 -0800

    vp9: Reorganize the buffer level for cbr mode
    
    Refactor the code with some changes.
    
    Split update into two parts: move the fillup
    (with per-frame-bandwidth) before the encoding, and
    keep the leaking part (with encoded_frame_size) after
    the encoding (postencode).
    
    For SVC with ref_frame_config usage: allow usage of timestamp
    delta for the fillup part of buffer, instead of the (average)
    framerate passed in via the duration.
    
    Moving the buffer fillup (+per-frame-bandwidth) part to the
    pre-encode causes some difference in performance
    (since buffer level affects active_worst/QPand frame-dropping),
    but the change is observed to be small.
    Made small adjustment to active_worst_[1;31mquality[m to compensate.
    
    Adjust some thresholds in datarate tests.
    
    Change-Id: I81a5562367034f318cffd451304bc4a34bf02a1d

[33mcommit 7db01784570c676a5a2d4a73a5e3986a846e6491[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Nov 5 17:49:39 2018 -0800

    vp9 screen-content: Adjustments for screen content.
    
    Increase search area, use NSTEP, and in some cases avoid
    bsize below 16x16. This for base spatial layer when many blocks
    in the frame have motion (from scene detection analysis).
    
    Improves [1;31mquality[m for scrolling motion.
    
    Change-Id: If77b43e738a6c43610d4727a95712667088db564

[33mcommit 043d9cfe6cd06401640e0664fcb2a944ef9016bc[m
Author: Angie Chiang <angiebird@google.com>
Date:   Wed Oct 17 13:56:42 2018 -0700

    Preserve code of doing mv search in raster order
    
    With this change, there will be three version of mv search scheme
    on the codebase simultaneously.
    We will do further experiment to evaluate which version is better
    in terms of visual [1;31mquality[m and coding performance.
    
    Change-Id: I6bf504b4551316ef10b8a341ab3ba14d0ec977ce

[33mcommit 8bb92e382de7d527f1f788cb0618aec485ffcee8[m
Author: Urvang Joshi <urvang@google.com>
Date:   Wed Oct 17 11:48:10 2018 -0700

    For keyframe-only coding do not boost in q mode
    
    If we are using keyframe only coding - either coding a
    single frame, or a sequence of keyframes - in the end-usage=q
    mode, use the cq_level directly as the [1;31mquality[m of each
    coded frame, rather than boost them.
    
    Ported from AV1: 563a0d1eb92bdc1e987df071a568d8406c4ffa92
    
    Change-Id: I6dc929b8b4f0aa18e279139077f3a87958c92245

[33mcommit be51a7731d009be79cbc4cdd0a3009fc4c287291[m
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Oct 15 15:27:49 2018 -0700

    A temporary fix to mips sub-pel filters
    
    There are Jenkins test failures in mips sub-pel filter optimizations.
    [ RUN      ] MSA/ConvolveTest.MatchesReferenceSubpixelFilter/5
    ../libvpx/test/convolve_test.cc:889: Failure
    Expected e[1;31mquality[m of these values:
      lookup(ref, y * kOutputStride + x)
        Which is: 255
      lookup(out, y * kOutputStride + x)
        Which is: 11
    mismatch at (1,0), filters (4,0,1)
    
    This relates to the 4-tap kernel added recently. This CL is a temporary
    fix, while we investigate the issue.
    
    BUG=webm:1568
    
    Change-Id: If64c552b794425687cca4fbed893d8ccb73c89a5

[33mcommit e5c304fb5ae52b4a224aef665e78694488436137[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Oct 1 15:31:27 2018 -0700

    Keep metric log only for the displayable frames
    
    The end-to-end reconstruction [1;31mquality[m is represented only by the
    displayable frames. Drop the coding stats from ARF frames.
    
    Change-Id: Ib8241db448611f4b6477f107930eaa273f960e20

[33mcommit a2cd0170163b58cb151e19e26b7cb0b23f1783c4[m
Author: Hui Su <huisu@google.com>
Date:   Tue Sep 25 12:19:53 2018 -0700

    Add ml_var_partition experiment
    
    Make partition decisions using machine learning models. The goal is to
    achieve better coding [1;31mquality[m than the variance-based parititioning
    without much encoding speed loss.
    
    To enable this experiment, use --enable-ml-var-partition for config.
    
    When eanbled, the variance-based partitioning is replaced by this ML
    based partitioing for speed 6 and above in real time mode(except low
    resolution or high bit-depth).
    
    Current coding gains(average PSNR):
                    speed 6      speed 7      speed 8
    rtc              2.04%        2.65%        3.90%
    ytlivehr         3.11%        4.53%       11.57%
    hdres(rtc mode)  5.10%
    
    Further testing and tuning is needed to see if the speed and [1;31mquality[m
    tradeoff is reasonable.
    
    Change-Id: I0da5a2fbc22c3261832b32920ee36d9b19d417af

[33mcommit f6ddb92a33aac1081348df1e2f899b3c1f55028d[m
Author: Jingning Han <jingning@google.com>
Date:   Mon Sep 24 13:53:53 2018 -0700

    Use layer dependent gfu_boost factor
    
    When multi-layer ARF is enabled, use the corresponding gfu_boost
    factor assigned to each ARF to compute the best_[1;31mquality[m_index
    adjustment. This on average improves the coding performance by
    0.2% for lowres and hdres, 0.4% for ntflx2k. It seems this change
    will only affect a small group of clips, e.g., pamphlet, bowing,
    mobcal_720p, etc., which tend to gain 4-5%, whereas the rest
    clips remain largely identical coding statistics.
    
    Change-Id: Ie19636a6cf32214aefd73e21ead2aea647ddbca8

[33mcommit 1b14cb4e942189db7401c7e0542280fb96672648[m
Author: Hui Su <huisu@google.com>
Date:   Tue Sep 18 10:33:23 2018 -0700

    Improve subpel MV search for speed 1
    
    Do one more subpel MV search each round. This improves coding
    efficiency slightly:
    
    lowres 0.12%
    midres 0.11%
    hdres  0.13%
    
    Also renames the control flag for subpel MV search [1;31mquality[m.
    
    Encoding speed loss is less than 1%.
    
    This only affects speed 1.
    
    Change-Id: I3aecd25342f2dcacea6c143db494f7db6282cb92

[33mcommit bb58dfade710c94fc78b50a50f76925863873f38[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Sep 6 15:56:01 2018 +0100

    Fix rate control bug with recode all.
    
    This patch fixes a rate control bug that can manifest if the recode
    loop is activated for all frame types. Specifically things go wrong when the
    recode loop is used on an overlay frame that has a rate target of 0 bits.
    
    The patch prevents adjustment of the active worst [1;31mquality[m and repeat recode
    loops for overlay frames.
    
    The bug showed up during artificial experiments on re-distribution of bits in
    ARF groups but does not activate in any current encode profile, as even best
    best [1;31mquality[m does not currently allow recodes for all frames.
    
    Change-Id: I80872093d9ebd3350106230c42c3928e56ecb754

[33mcommit 1f46c31844b9162557e12de73352075f6b8d9379[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Sep 3 16:48:02 2018 +0100

    Fix short first kf bug.
    
    This change is in response to [1;31mquality[m issue in b/112953058
    
    The [1;31mquality[m regression observed is a result of a bug that manifested
    because of a very short key frame group at the start of a chunk.
    The group was so short that it was less than the minimum allowed
    length of an ARF group, so the initial group was coded as a GF only
    group. However, group length was not set correctly and the result
    was a frame coded with a target of 0 bits.
    
    This causes two problems:
    
    Firstly one very poor frame that caused the issue to be raised.
    
    Secondly that one  frame obviously overshoots its 0 target very heavily
    and this has the effect moving the needle significantly in terms of the
    adaptive rate control (specifically the estimate of bits per macro block
    used to estimate the active Q range). Consequently there is undershoot
    for most of the rest of the chunk and the overall rate ends up much lower
    than the target (14Mb/s vs a target of 22Mb/s). (The sharp drop in the
    overall rate is also noted in the issue.
    
    BUG=b/112953058
    
    Change-Id: Ide9cce57acd3dee0f9496b752902e7b4735f2c7f

[33mcommit ce29b592822563a4e691d8793bdf5d4f87b27926[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Mon Sep 3 16:12:22 2018 +0100

    Revert "Revert "Prevent double application of min rate in two pass.""
    
    This rate control bug in the original patch is not the underlying cause
    of the [1;31mquality[m regression but simply unmasked a problem which stems
    from applying 0 bits to the last frame in a short KF group at the start
    of a chunk.
    
    This reverts commit d10b1f233657054b1465d40f0b409c20029a540b.
    
    Change-Id: I32c91a24a14d013853bb8e5587aa69600e6a0063

[33mcommit d10b1f233657054b1465d40f0b409c20029a540b[m
Author: Hui Su <huisu@google.com>
Date:   Thu Aug 23 21:39:38 2018 +0000

    Revert "Prevent double application of min rate in two pass."
    
    This reverts commit 416b7051d7f610ed6d62dff18af7776ec520fd9c.
    
    Reason for revert: it causes visual [1;31mquality[m drop as described in b/112953058.
    
    Original change's description:
    > Prevent double application of min rate in two pass.
    >
    > The initial allocation of bits in the two pass code to each frame
    > should be within the min max limits on the command line. However,
    > when forming an ARF group the cost of the ARF is shared by frames
    > in that group such that the residual bits for a frame could drop below
    > the min value. This change prevents the minimum being re-applied
    > after the cost of the ARF has been deducted as this may otherwise
    > cause low rate sections to overshoot their target.
    >
    > Test runs comparing to a baseline run with min and max section pct
    > 0-2000% vs one closer to the YT use case (50-150%) suggest that
    > this fix not only results in better rate control but also gives a better
    > rd outcome.
    >
    > For example the HD set vs 0-2000% baseline (opsnr, ssim).
    > Old code (50-150):  +0.751, +1.099
    > New code(50-150): +0.241, -0.009
    >
    > Change-Id: I715da7b130bf53ba8aa609532aa9e18b84f5e2ef
    
    TBR=yaowu@google.com,paulwilkins@google.com,debargha@google.com,builds@webmproject.org
    
    # Not skipping CQ checks because original CL landed > 1 day ago.
    
    Change-Id: Ic9849e4e0db64e9d92bbb9df9cc923230a15c4df

[33mcommit b4e783da577bc3631a48e071b67931b7833ec651[m
Author: Jerome Jiang <jianj@google.com>
Date:   Mon Aug 13 11:01:31 2018 -0700

    vp9: fix memory alloc for adaptive_rd_thresh_row_mt.
    
    When the feature is enabled and the memory is not available, allocate
    it. There was a case where speed feature changed in the middle of stream
    but the number of tiles stayed the same, memory was not re-allocated.
    
    Another case is where speed for base layer is different than that of
    higher [1;31mquality[m layers (same resolution). Removed the speed constraints
    forcing base layer using same speed setting.
    
    Thus the memory for adaptive_rd_thresh_row_mt stayed NULL but the
    feature was enabled.
    
    Add an end to end test to cover this case.
    
    Change-Id: I2f1f802ef98a554571b30094d3600b9439228457

[33mcommit f1d44c1f45bb0828ef4a683ad42544b3c6fc3af1[m
Author: Marco Paniconi <marpan@google.com>
Date:   Sun Aug 12 21:29:05 2018 -0700

    vp9-svc: Unittest for screen mode with [1;31mquality[m layers
    
    Add datarate unittest for SVC screen content mode,
    with 2 [1;31mquality[m layers.
    
    Change-Id: I9c8ad5462fd046698052bea6d7343c2b7e16668f

[33mcommit 763c9e08dd9fd7aa3acca3bf3a89a7c36d640050[m
Author: Hui Su <huisu@google.com>
Date:   Mon Aug 6 18:01:25 2018 -0700

    Add enhanced_full_pixel_motion_search feature
    
    Do some extra full pixel search to improve motion vector [1;31mquality[m.
    Currently it is enabled for speed 1 only; disabled for real time mode.
    
    Coding gain for speed 1:
             avg_psnr   ovr_psnr   ssim
    lowres   -0.23%     -0.23%    -0.35%
    midres   -0.33%     -0.35%    -0.38%
    hdres    -0.28%     -0.29%    -0.28%
    
    Tested encoding time over 10 HD sequences. Overall speed overhead is
    1.5% for QP=30; 0.6 % for QP=40.
    
    Change-Id: Ic2ea4d78c4979de9d5090c9d7c702944f155f8af

[33mcommit 25d6542251a535e48c4067f05013057b77d73801[m
Author: Hui Su <huisu@google.com>
Date:   Wed Aug 1 15:43:05 2018 -0700

    Handle partition cost better in RD search
    
    Take partition cost into consideration during rectangular partition
    mode search.
    
    Compression change is neutral. Encoding speed can be a little faster
    at low [1;31mquality[m settings. With QP=55 at speed 0, average speed up over
    15 midres sequences is about 2.7%.
    
    Change-Id: I6d423459675b5f1e4e1475dbbf6f67ab970a4832

[33mcommit e70fa980b87309553722700310ffee1e0c5bce40[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Tue Jul 17 14:48:02 2018 +0100

    Limit Max GF boost for slide shows
    
    Set an upper limit on the maximum boost for a static
    GF only group such as in slide shows as part of tweaks
    to [1;31mquality[m / rate trade off.
    
    Change-Id: Ic72575328419cdcf82ad3a20a1d9b947538c25c6

[33mcommit 31228b3595d17e8323aede7bb364bd731c192820[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Jun 20 17:21:49 2018 +0100

    Improved coding on slide show content.
    
    This patch adds in detection of slide show content and allows
    for coding of long GF only groups up to a length of 240 frames rather
    than coding a large number of shorter ARF groups that gradually
    lower the Q.
    
    In test samples this patch gave rise to a substantial improvement in
    overall psnr and a drop in data rate. In some cases the average psnr
    fell, however, with the boost and minQ values set as they are.
    This is to be expected because average psnr is dominated by the
    best frames in the sequence and previously a relatively poor key frame
    could be followed by progressively better alt refs. For example a key
    frame at q7.5 but subsequent alt refs improving it to lossless.
    
    For slides displayed for several seconds,  savings of >= 20% (or
    commensurate [1;31mquality[m gains) are likely.
    
    This patch allows for long GF groups in static sections before and after
    complex transitions (e.g. fades) with one or more normal ARF groups
    during the transition. However, it enforces a single "normal" length
    GF group after the transition before any extended group is allowed.
    The reason for this is that the ARF that spans the transition my not have
    a very high [1;31mquality[m and hence may not be a good GF for the long static
    section that follows.
    
    Change-Id: I66cc404c3b85e87dae9829b49d9d631cbf04e037

[33mcommit fba011507b1ee160caa82488cfeb4c7ad9471341[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jul 18 14:36:17 2018 -0700

    vp9: Screen-content after slide-change: increase refresh rate
    
    For screen-content real-time CBR mode: on a detected slide change
    that is encoded at max Q (to prevent excessive overshoot), increase
    the perc_refresh in the cyclic refresh following the slide change.
    Use counter to increase refresh up to some #frames from slide change.
    
    This is attempt to increase [1;31mquality[m ramp-up after slide change without
    causing too much excess overshoot.
    
    Change-Id: Ie4ec4361082803a522f4a8794b3bb0178c9cf307

[33mcommit 914d5abb5cb1f5944247ad06e042f96966ac5ffc[m
Merge: 8e01faee0 e92a68c22
Author: Marco Paniconi <marpan@google.com>
Date:   Sat Jun 30 00:04:39 2018 +0000

    Merge "vp9: Reduce [1;31mquality[m artifact for real-time scene-content."

[33mcommit e92a68c226f6de7a87d3e9d992651f799b0b117c[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Jun 29 11:15:00 2018 -0700

    vp9: Reduce [1;31mquality[m artifact for real-time scene-content.
    
    Add scene detection flag to choose_partitioning to force split
    of 64x64 block partition. This reduces artifacts on slide changes.
    
    Bug:b/110978869
    
    Change-Id: I9cc79a7c03f3aa2edeb28656b09a2177b72d59a8

[33mcommit 32235a77b78a228b9dfaf058194585355ac16cdc[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Jun 28 16:08:55 2018 -0700

    vp9-svc: Adjust threshold for early exit on golden
    
    Use the avg_frame_low_motion to reduce/turnoff this
    early exit for higher motion content. Get some [1;31mquality[m
    back for higher motion clips and keep the same exit
    thresh for low motion clips.
    
    Change-Id: I95daf754dc0048b3e935d1a753f7f1101e6ffb77

[33mcommit dd3d08f0c227ebe08b445801eeb38d39cc06f377[m
Author: Marco Paniconi <marpan@google.com>
Date:   Sun Jun 24 21:44:29 2018 -0700

    vp9: Add lower Q limt to cyclic refresh usage.
    
    Disable the cyclic refresh for very low average Q.
    This reduces encoded bitrate for static slides after the
    the [1;31mquality[m has ramped up well enough (low Q). And as the
    cyclic refresh is not needed at low Q in most cases, this
    has minimal/no effect on [1;31mquality[m on RTC set.
    
    Change-Id: Id6d449aa2351bb6886d72aafb2d406e967ed2789

[33mcommit 3b4425c2ca9b5f7e736f2bbdab492648364fb550[m
Author: Jerome Jiang <jianj@google.com>
Date:   Wed May 23 11:52:37 2018 -0700

    VP9: Allow for bilinear subpel interp at speed 9 for high motion.
    
    Fixed some settings in nonrd pick mode to allow for frame-level bilinear
    to be set.
    On Galaxy S8+ it has 4% speed up on high motion clips. Almost the same
    for low motion.
    
    0.17% [1;31mquality[m loss on RTC.
    
    Change-Id: I044a7de020183754ba08bb6c96c5a78ba5c7fea2

[33mcommit e93571601ac181376bb84b0b926c5e3ae8b9f496[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed May 9 20:37:48 2018 -0700

    vp9-svc: Fix inter-layer early exit threshold.
    
    If the scale factors are 1 (no scaling), set the threshold
    for skipping the inter-layer prediction to 0, so we will
    more often test this mode.
    
    Improves [1;31mquality[m for upper layers for [1;31mquality[m layers
    in svc mode.
    
    Change-Id: Iaf848d44f6cc153780db861b76517a4cf9672c45

[33mcommit f4091bc30eef0fcacb5d5bd74ab7cfbc3c8aab5f[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Thu Apr 12 09:14:25 2018 -0700

    Improved slide show coding
    
    This patch improves coding of slide shows with fade or other
    complex transitions.
    
    Previously, fades and other complex transitions between static "slides"
    were sometimes being incorrectly marked such that they were coded
    as a single static slide rather than two slides with a transition.
    
    As the initial key frame for the first slide is not necessarily a good
    predictor of the second slide and ARFs were turned off, this led to a
    poor visual and metrics outcome in some such cases.
    
    This patch allows for long GF groups in static sections before and after
    a complex transition (instead of just with  simple slide transitions) with
    one or more normal ARF groups during the transition. It also enforces a
    single "normal" length GF group after the transition before any extended
    group is allowed. The reason for this is that the ARF that spans the
    transition my not have a very high [1;31mquality[m and hence may not act as a
    good GF for the long static section that follows.
    
    Change-Id: Ica1f979e27d8a0625f3cebf7b7cf6d69edccaba9

[33mcommit 4934e52e437686dae73fa5549e6ef1c7213d251d[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Apr 6 05:41:56 2018 +0000

    Revert "vp9-svc: Fix to first superframe when inter_layer is off."
    
    This reverts commit 5cc8df5bcfe49fbfca21ee57401c7807c048751b.
    
    Reason for revert: <INSERT REASONING HERE>
    We need to do this on all key frames in the stream (not just the first one). Will make another cleaner change for this.
    
    Original change's description:
    > vp9-svc: Fix to first superframe when inter_layer is off.
    >
    > When the application selects the setting INTER_LAYER_PRED_OFF
    > each spatial stream should be decodeable separately.
    > For this we need to force key frames on all spatial layers
    > on the first superframe.
    >
    > In order to maintain the [1;31mquality[m at the beginning of the stream
    > the active_worst for spatial layer of the second superframe is set
    > to the last_QP of the correspondng spatial layer of the first superframe.
    > Also make sure nonrd_keyframe is set for non-base spatial layers.
    >
    > Change only affects SVC mode wit number_spatial_layers > 1 and
    > svc->disable_inter_layer_pred == INTER_LAYER_PRED_OFF.
    > And only affects first and second frame of sequence.
    >
    > Change-Id: I8ee9a0873ab1d3a02515774571f719617771ad41
    
    TBR=marpan@google.com,builds@webmproject.org,jianj@google.com
    
    Change-Id: If73d9f3932224fc6751e773763adf7e8ee67d17f
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true

[33mcommit 5cc8df5bcfe49fbfca21ee57401c7807c048751b[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Apr 4 16:24:39 2018 -0700

    vp9-svc: Fix to first superframe when inter_layer is off.
    
    When the application selects the setting INTER_LAYER_PRED_OFF
    each spatial stream should be decodeable separately.
    For this we need to force key frames on all spatial layers
    on the first superframe.
    
    In order to maintain the [1;31mquality[m at the beginning of the stream
    the active_worst for spatial layer of the second superframe is set
    to the last_QP of the correspondng spatial layer of the first superframe.
    Also make sure nonrd_keyframe is set for non-base spatial layers.
    
    Change only affects SVC mode wit number_spatial_layers > 1 and
    svc->disable_inter_layer_pred == INTER_LAYER_PRED_OFF.
    And only affects first and second frame of sequence.
    
    Change-Id: I8ee9a0873ab1d3a02515774571f719617771ad41

[33mcommit a4e453f668a8d98645c034b9aa9f979bfa5af4a9[m
Author: Marco Paniconi <marpan@google.com>
Date:   Thu Apr 5 15:54:17 2018 -0700

    vp9-svc: Fix to disable cyclic refresh on key superframes.
    
    Cyclic refresh is disabled on key frames, but we did not
    disable it for for spatial layers whose base is a key frame
    (i.e., on a key-superframe).
    
    This fix means generally somewhat lower frame-level QP will be
    used for those spatial layers whose base is a key frame,
    which will generally mean little better [1;31mquality[m for the
    key-superframes.
    
    Change-Id: Idf090651aa2f5856fb6696c89198a9f6d5d50280

[33mcommit fe72ba15ac42760c229e10e97e796cebd6ce02b4[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Mar 28 16:10:17 2018 -0700

    vp9-svc: Fix in pickmode for key frames.
    
    For the fixed/default SVC patterns, GOLDEN is the
    spatial reference, except on key frames, where LAST
    is labeled as the spatial reference.
    
    The current code was assuming GOLDEN is always the
    spatial reference for the purpose of selecting the
    subpel motion (due to the downsampling filter).
    
    Fix is make sure flag_svc_subpel is set and used
    with spatial_ref, which is labeled as the proper
    spatial reference before entering mode check.
    
    Some [1;31mquality[m improvement on key frames.
    Change-Id: Id236bcd47055b035731cc910ed84449d7e29f50c

[33mcommit 2fa333c2ae1b6fcc1864de12a7ad344a16e2ac0a[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Jan 31 16:42:37 2018 +0000

    Improved coding on slide show content.
    
    This patch adds in detection of slide show key frame groups.
    The detection assumes extremely  low or 0 motion for all frames
    in the key frame group.
    
    If this case is detected the boost level is set to a very high value
    and the min Q to a lower value for the key frame itself.
    Alt refs and golden frames are disabled to save bits (up to a limiting
    maximum interval currently set to 240 frames).
    
    In test samples that I created, this patch gave rise to a substantial
    improvement in overall psnr and a drop in data rate. In some cases the
    average psnr fell, however, with the boost and minQ values set as they are.
    
    This is to be expected because previously a relatively poor key frame
    could be followed by progressively better alt refs. For example a key
    frame at q7.5 but subsequent alt refs improving it to lossless. Given that
    average psnr tends to be dominated by the best frames, a ramp like this
    from q7.5 to lossless may give a better average psnr than, for example,
    coding the entire sequence at q2.5. Overall psnr, however, will be much
    better in the latter case.  The option exists to boost the key frame further
    which would  insure much better results for all metrics, but at the expense
    of smaller bitrate savings. Given that these samples tend to have very
    good [1;31mquality[m anyway this seems like a bad trade off.
    
    For slides displayed for several seconds, bitrate savings of >= 20% are likely
    and much larger gains are possible in some cases.
    
    Change-Id: Ib4b61e153c55d3f2f561153da13fdb56f397a52b

[33mcommit b78dad3ffad819cb79f0430ed5dc176656110b34[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Feb 7 15:05:20 2018 +0000

    Adjust MAXRATE_1080P.
    
    This value was originally set in response to requests from the hardware
    team before levels were properly defined for VP9.
    
    Even if a level is not specified for an encode, it imposes a maximum
    frame size for videos of dimensions <= 1080P.  For larger formats the
    limit was set at 250 bits per MB.
    
    This patch modifies the limit to be more in line with the requirements
    specified for level 4 (max rate for a 4 frame group of 16 Mbits).  If a lower
    level is specified at encode time and this mandates a smaller maximum frame
    size then the level requirement will still take precedence.
    
    Increasing this value allows for some slide shows or very low motion clips
    to code a better [1;31mquality[m key frame.
    
    Change-Id: Ic08e0e09c8a918077152190c59732b9a1c049787

[33mcommit 067457339bc6dce72cc07cb0ebf9f549f452250a[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jan 24 17:12:43 2018 -0800

    vp9-svc: Add QP dependency to thresh_svc_skip_golden.
    
    In nonrd-pickmode: the golden/spatial reference for inter-layer
    prediction may be skipped in the mode testing. Add QP dependency
    to reduce the threshold for skipping (i.e., check it more often)
    at high QP, if the lower layer was encoded at lower QP relative
    to the current layer.
    
    At high QP, a better [1;31mquality[m lower resolution is more likely to
    provide good spatial (inter-layer) prediction.
    
    avgPSNR/SSIM metrics up by ~1% (all clips positive gain or neutral).
    Some decrease in encode time (~1-2%) expected at lower bitrates,
    for 3 layer SVC.
    
    Change-Id: I9ee0f62d4b10d4ebd30165d378ecfa4399ae5ef1

[33mcommit bb4052b873b41e7ef8c01c74539a3f49bf3bb104[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Jan 10 15:03:21 2018 +0000

    Fix kf detection in some slide shows.
    
    This fix improves detection of key frames in slide shows.
    
    In particular it helps if the slides are pictures of varying formats
    as in a sample provided by yclin@.
    
    This change does not impact any of the clips in our standard tests
    but for the example slide show test clip helped global psnr by
    several db and resolved a serious visual [1;31mquality[m issue.
    
    Change-Id: Iaeeeed55dc0bb50aeacd4996ed660ced06374603
For keyword bitrate:
[33mcommit ad57c72b9f2e760c0e594d4711edbab39feb3b31[m
Author: Urvang Joshi <urvang@google.com>
Date:   Thu Jan 3 14:49:18 2019 -0800

    VP9 firstpass: Bugfix when mi_col_start/end is odd
    
    Before this patch, if mi_col_end was odd, then the for loop for 'mb_col'
    was looping once LESS than it should have been.
    
    For example, if mi_col_end = 47, then the loop was terminating when
    mb_col == 23. However, the correct behavior would be to terminate  when
    mb_col == 24.
    
    The issue was introduced in:
    https://chromium-review.googlesource.com/c/webm/libvpx/+/423279
    
    This can lead to many of the stats being inaccurate, for such videos
    (with mi_col_start/end having an odd value).
    
    As an example:
    Even for very static content, fp_acc_data->intercount can never reach the
    same value as num_mbs. And in turn, pcnt_inter can never reach the value 1
    (that is, 100%). This would lead to very static videos NOT being marked
    static, and encoded like regular videos.
    
    Note: this is just one possible effect based on observation. Other
    issues are also possible based on other stats.
    
    Improvement on some test clips:
    -------------------------------
    - One test clip saw a gain of -2.580% in VBR mode (and -3.153% in Q
    mode). The reason for improvement: a wrongly detected scene cut was
    avoided due to corrected value in 'this_frame->pcnt_inter'.
    - Some very static clips correctly marked as having 100% zero motion.
    This avoided addition of unncecessary alt-refs, thereby reducing the
    [1;31mbitrate[m.
    
    BDRate (PSNR) on regular sets (VBR mode):
    -----------------------------------------
    lowres: 0.0
    midres: -0.027 (some clips were better/worse, but I double checked that
    changes were as expected, given correction in stats calculation).
    hdres: 0.0
    
    STATS_CHANGED for the types of videos described above.
    
    Change-Id: Ifbc2c0c0815d23ec4015475680bdf8886f158dcc

[33mcommit 538b40699fc851957fd32a201e3b449976ecfb57[m
Merge: 69e9a3949 e70b8ccd5
Author: Jerome Jiang <jianj@google.com>
Date:   Fri Aug 10 00:54:45 2018 +0000

    Merge "Change target [1;31mbitrate[m in vp9 datarate test."

[33mcommit e70b8ccd5216871793927d216df150a13e9d1bdc[m
Author: Jerome Jiang <jianj@google.com>
Date:   Thu Aug 9 16:55:47 2018 -0700

    Change target [1;31mbitrate[m in vp9 datarate test.
    
    Due to the change of clip.
    
    Change-Id: Ibbe1a865df0837c349770287d148081230d10aaa

[33mcommit 89d23138d2a67a3e518d1026f87cdd5a9e1bee78[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri Aug 3 09:20:55 2018 -0700

    vp9: Adjust qp_thresh on slide change overshoot detection
    
    For real-time screen-content mode: increase the
    qp_thresh for max_Q setting on slide changes.
    This will make [1;31mbitrate[m spikes less likely on slide changes.
    
    Change-Id: Ie13524a06490214456b1c9c042a864ea0d0750c5

[33mcommit dd3d08f0c227ebe08b445801eeb38d39cc06f377[m
Author: Marco Paniconi <marpan@google.com>
Date:   Sun Jun 24 21:44:29 2018 -0700

    vp9: Add lower Q limt to cyclic refresh usage.
    
    Disable the cyclic refresh for very low average Q.
    This reduces encoded [1;31mbitrate[m for static slides after the
    the quality has ramped up well enough (low Q). And as the
    cyclic refresh is not needed at low Q in most cases, this
    has minimal/no effect on quality on RTC set.
    
    Change-Id: Id6d449aa2351bb6886d72aafb2d406e967ed2789

[33mcommit 3edef86c5f5651f4a89004012ec3efe3232351df[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Jun 25 09:02:24 2018 -0700

    vp9-svc: Fix to frame dropping when layer is skipped.
    
    Fix condition in frame dropper for SVC to handle case
    where spatial layer is skipped encoded (due to 0 [1;31mbitrate[m).
    
    Change-Id: I24185178774d73e8bb1c406acc0292422dfbe174

[33mcommit e3061c7e61366ee86255ae30983c67f1a341837e[m
Author: Jerome Jiang <jianj@google.com>
Date:   Wed Jun 20 16:30:35 2018 -0700

    VP9 SVC: Add tests for layer sync on base layer.
    
    Create tests for sync layer. The purpose of new tests is not to check
    [1;31mbitrate[m targeting, thus they're put in a new file.
    
    Create a base class for svc tests, which is also inherited by svc datarate
    tests, to reduce code redundancy.
    
    Start decoding in the test from the frame of layer sync.
    
    Change-Id: I7226d208279ad785873dffef51e0a8abef23b256

[33mcommit e86670a2af279917397271d6cfe4db2e30fe4693[m
Author: Zoe Liu <zoeliu@google.com>
Date:   Thu Jun 21 16:28:15 2018 -0700

    Add extra altref option for hierarchical structure
    
    This CL is to hook up the implemented hierarchical structure
    construction as well as its corresponding [1;31mbitrate[m allocation
    functionality with the defining of a GF group.
    
    Currently the hierarchical structure is off by default. Hence this CL
    has no impact on coding performance.
    
    Change-Id: I9e1ddfd877559e99072c23970f7fe103b64ed9ee

[33mcommit f31b3154bd32d990f7d2c8048a7a20f82c0a77af[m
Author: Zoe Liu <zoeliu@google.com>
Date:   Tue Jun 19 18:11:08 2018 -0700

    Add bit allocation for hierarchical layer
    
    This CL migrates the bit allocation scheme from libaom and combines the
    scheme for hierarchical layer with the updated scheme in libvpx that
    uses a modified scheme to calculate the target [1;31mbitrate[m per frame.
    
    Change-Id: I63593ed528abd4a6a1a8681abf6c9cf06c7a2ee0

[33mcommit 238cf66eb5e376062ee13198ef537e848866b8aa[m
Author: Hui Su <huisu@google.com>
Date:   Tue Jun 12 11:56:09 2018 -0700

    Improve the partition search breakout speed feature
    
    Use a linear model to make partition search breakout decisions.
    Currently the model is tuned for large quantizers and small resolutions.
    So it is only used when q-index is larger than 200 and frame
    width/height is smaller than 720. Also it's not yet supported for high
    bit depth.
    
    Tested speed 1 and 2 on lowres and midres. Compression performance is
    neutral. At low [1;31mbitrate[ms, encoding speedup is up to 50% for speed 1;
    up to 30% for speed 2.
    Some sample numbers:
    
    into_tree_480p, speed 1
    QP=60 before:  35.228 dB, 3488b/f, 7.78 fps
          now:     35.217 dB, 3475b/f, 11.57 fps
    QP=50 before:  37.492 dB, 7983b/f, 6.24 fps
          now:     37.491 dB, 7974b/f, 7.55 fps
    
    PartyScene_832x480_50, speed 1
    QP=60 before:  30.104 dB, 22426b/f, 3.28 fps
          now:     30.109 dB, 22410b/f, 4.43 fps
    QP=50 before:  33.016 dB, 46984b/f, 2.78 fps
          now:     33.018 dB, 46998b/f, 3.35 fps
    
    into_tree_480p, speed 2
    QP=60 before:  35.175 dB, 3506b/f, 10.96 fps
          now:     35.185 dB, 3510b/f, 13.47 fps
    QP=50 before:  37.448 dB, 8016b/f, 9.04 fps
          now:     37.459 dB, 8048b/f, 9.81 fps
    
    PartyScene_832x480_50, speed 2
    QP=60 before:  30.060 dB, 22537b/f, 4.42 fps
          now:     30.061 dB, 22541b/f, 5.38 fps
    QP=50 before:  32.923 dB, 47134b/f, 3.85 fps
          now:     32.920 dB, 47073b/f, 4.31 fps
    
    Change-Id: I674cba4f027c4c65f7837d5ec9179d6201e6ba86

[33mcommit 2459ce88815bfdf2e5268a3fffed26258e63c743[m
Author: Zoe Liu <zoeliu@google.com>
Date:   Thu Jun 14 11:09:41 2018 -0700

    Separate GF structure defining from bit allocation
    
    This CL separates the defining of the GF group structure from the
    handling of its [1;31mbitrate[m allocation. The encoder performance should stay
    unchanged.
    
    Change-Id: Ib77967757702bb4b284034e429d4c41ae86d0838

[33mcommit 1d293253612352e4c68d8ecbea4fb0bcfe2ddbea[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon May 28 21:08:57 2018 -0700

    vp9: Adjust cyclic refresh and limit frame-level q.
    
    For CBR mode with aq-mode=3: reduce delta-q for second
    segment and limit how much the frame-level q can decreae
    from one frame to the next.
    
    Reduces [1;31mbitrate[m spikes in slide/sreen content.
    
    Change-Id: Id9ac4b7270f07e09690380755cfbef4aec5c26dc

[33mcommit a2d5a4a9566874aea4f32303f74cad7ca408933a[m
Author: Marco Paniconi <marpan@google.com>
Date:   Fri May 18 14:50:46 2018 -0700

    vp9-svc: Fix issue with reseting lst_fb_idx.
    
    When encoding a given spatial layer and the same spatial layer
    on previous superframe was dropped (or disabled due to 0 [1;31mbitrate[m),
    the lst_fb_idx for current layer is set to the buffer index that
    was last updated on TL0 frame (for the same spatial layer).
    
    This condition was to maintain proper temporal prediction pattern
    under frame drops, and it should only apply to INTER frames.
    
    But the condition was causing an assert to be triggered on spatial
    layers whose base are key frames. Fix is to condition this reset of
    lst_fb_idx on the "is_key_frame" flag. Also initialize the
    fb_idx_upd_tl0 to -1 and only use it for a given spatial layer
    if its been set.
    
    These issues can happen when superframe drop happens just before
    a key frame, or when stream starts with lower layers and dynamically
    enabled higher spatial layers.
    
    Added datarate unittest the inserts key frame after superframe drop,
    and verified that this fix is needed for test to pass.
    Also modified the existing DisableEnable spatial layer test to trigger
    the issue of using fb_idx_upd_tl0 when it hasn't been set for a
    spatial layer.
    
    Change-Id: I059d1135736aca17e1326b9b4a2b16371eb4634e

[33mcommit 0ae1628f7e52ab498a9582f4f96c36acbec7198e[m
Author: Jerome Jiang <jianj@google.com>
Date:   Mon Apr 16 14:25:51 2018 -0700

    vp9: fix multiple run for vp9 datarate tests using one [1;31mbitrate[m.
    
    Change-Id: I1458bf25fadc23e8be5a9532a153d7129a53accf

[33mcommit 7b9984b38618d94e91f377634adf458b07a58f02[m
Author: Marco Paniconi <marpan@google.com>
Date:   Mon Mar 26 20:25:57 2018 -0700

    vp9-svc: Add logic to enable for constrained framedrop.
    
    Add the logic for the constrained framdrop mode for SVC.
    
    Add test case in datarate unittests.
    Also lower target [1;31mbitrate[ms in the tests to better test
    frame dropper.
    
    Change-Id: I8ee1b8cb56d835c233ad1fbe0fc1456cb2e7291f

[33mcommit 1ae97b4a4db010ee87bedca5943c64f55d43f6f7[m
Author: Jerome Jiang <jianj@google.com>
Date:   Tue Mar 20 15:39:02 2018 -0700

    vp9 svc frame drop: enable adaptive rd for row mt.
    
    adaptive_rd_threshold_mt is set to 1 when speed >= 7 for SVC.
    QVGA in SVC uses speed 5 which set adaptive_rd_threshold_mt to 0.
    If VGA or HD is dropped for the last super frame, the flag is still 0
    when the encoder is destroyed. Thus memory won't be released.
    
    Change the [1;31mbitrate[m threshold in datarate test.
    
    Change-Id: I55352cc0b030568d38eb735d99c2fa29058d3690

[33mcommit b24e377008f3f6c021ca069827bfd519152ddcec[m
Merge: f3adb4591 a3f09c03b
Author: Johann Koenig <johannkoenig@google.com>
Date:   Thu Mar 15 21:16:43 2018 +0000

    Merge changes I5501d0d6,I8c863ced,I19895d06,Ifa39353d,I09bd209b
    
    * changes:
      vp9_resize.c: assert vp9_highbd_resize_plane conditions
      vp9_loopfilter.c: zero lfl_uv
      vp8 rdopt.c: zero rd.[rate_uv|distortion_uv]
      vp8 mfqe: zero map[]
      temporal svc: zero layer_target_[1;31mbitrate[m

[33mcommit 8276005eba660ee076ccb9712d6f005c38419880[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Wed Mar 14 12:52:49 2018 -0700

    temporal svc: zero layer_target_[1;31mbitrate[m
    
    These values are set in main() from user input. Ensure
    they are cleared out first.
    
    Clears a static analysis warning:
    warning: The right operand of '*' is a garbage value
    1000.0 * rc->layer_target_[1;31mbitrate[m[0] / rc->layer_framerate[0];
    
    Change-Id: I09bd209be5aff31b87597a24d37a9673fa99381b

[33mcommit f0a39790630dc842d86ea1b49e948859757371ad[m
Author: Johann Koenig <johannkoenig@google.com>
Date:   Tue Mar 13 18:22:40 2018 -0700

    spatial svc: zero sizes
    
    This should be taken care of by parse_superframe_index but
    the static analysis is not recognizing it because it depends
    on 'marker' which is read from the bitstream.
    
    Clears a static analysis warning:
    The right operand of '*' is a garbage value
    rc.layer_encoding_[1;31mbitrate[m[layer] += 8.0 * sizes[sl];
    
    Change-Id: I8ee48a98f907bc7b46869fd27a351f33e2e7de71

[33mcommit acac2626639887ec6f2e9293c7518e0a52962ea7[m
Merge: dccb8b45b e3c6d3029
Author: Jerome Jiang <jianj@google.com>
Date:   Fri Feb 23 00:21:56 2018 +0000

    Merge "VP9 SVC: Datarate test for dynamic [1;31mbitrate[m change."

[33mcommit e3c6d30294fa5a2a86d47f0a112fdb257c4f4bfe[m
Author: Jerome Jiang <jianj@google.com>
Date:   Wed Feb 21 16:51:12 2018 -0800

    VP9 SVC: Datarate test for dynamic [1;31mbitrate[m change.
    
    Change-Id: Ie1cd990dcb19a4cc18de4a2e487791f399c4b3cb

[33mcommit 2fa333c2ae1b6fcc1864de12a7ad344a16e2ac0a[m
Author: Paul Wilkins <paulwilkins@google.com>
Date:   Wed Jan 31 16:42:37 2018 +0000

    Improved coding on slide show content.
    
    This patch adds in detection of slide show key frame groups.
    The detection assumes extremely  low or 0 motion for all frames
    in the key frame group.
    
    If this case is detected the boost level is set to a very high value
    and the min Q to a lower value for the key frame itself.
    Alt refs and golden frames are disabled to save bits (up to a limiting
    maximum interval currently set to 240 frames).
    
    In test samples that I created, this patch gave rise to a substantial
    improvement in overall psnr and a drop in data rate. In some cases the
    average psnr fell, however, with the boost and minQ values set as they are.
    
    This is to be expected because previously a relatively poor key frame
    could be followed by progressively better alt refs. For example a key
    frame at q7.5 but subsequent alt refs improving it to lossless. Given that
    average psnr tends to be dominated by the best frames, a ramp like this
    from q7.5 to lossless may give a better average psnr than, for example,
    coding the entire sequence at q2.5. Overall psnr, however, will be much
    better in the latter case.  The option exists to boost the key frame further
    which would  insure much better results for all metrics, but at the expense
    of smaller [1;31mbitrate[m savings. Given that these samples tend to have very
    good quality anyway this seems like a bad trade off.
    
    For slides displayed for several seconds, [1;31mbitrate[m savings of >= 20% are likely
    and much larger gains are possible in some cases.
    
    Change-Id: Ib4b61e153c55d3f2f561153da13fdb56f397a52b

[33mcommit ac54d233b6d7ba5674996353a86bae42417022ee[m
Merge: 534e9af53 519fed01c
Author: Jerome Jiang <jianj@google.com>
Date:   Fri Feb 2 05:32:55 2018 +0000

    Merge "Fix issue for 0 target [1;31mbitrate[m in multi-res build."

[33mcommit 519fed01c2846ab9294543a3d2d65efaa51ec85b[m
Author: Jerome Jiang <jianj@google.com>
Date:   Thu Jan 25 11:36:53 2018 -0800

    Fix issue for 0 target [1;31mbitrate[m in multi-res build.
    
    For encoding with --enable-multi-res-encoding, with 1 layer, when the
    target [1;31mbitrate[m is set 0, under these conditions null pointer
    will be de-referenced. Fix is to check
    cpi->oxcf.mr_total_resolutions > 1. Also added NULL pointer check.
    This issue causes crash for asan build in chromium clusterfuzz.
    
    BUG=805863
    
    Change-Id: I9cd25af631395bc9fede3a12fb68af4021eb15f8

[33mcommit 067457339bc6dce72cc07cb0ebf9f549f452250a[m
Author: Marco Paniconi <marpan@google.com>
Date:   Wed Jan 24 17:12:43 2018 -0800

    vp9-svc: Add QP dependency to thresh_svc_skip_golden.
    
    In nonrd-pickmode: the golden/spatial reference for inter-layer
    prediction may be skipped in the mode testing. Add QP dependency
    to reduce the threshold for skipping (i.e., check it more often)
    at high QP, if the lower layer was encoded at lower QP relative
    to the current layer.
    
    At high QP, a better quality lower resolution is more likely to
    provide good spatial (inter-layer) prediction.
    
    avgPSNR/SSIM metrics up by ~1% (all clips positive gain or neutral).
    Some decrease in encode time (~1-2%) expected at lower [1;31mbitrate[ms,
    for 3 layer SVC.
    
    Change-Id: I9ee0f62d4b10d4ebd30165d378ecfa4399ae5ef1
