Searching between mariadb-10.1.16 and mariadb-10.2.6
Keywords: slow, fast, time, perf(ormance), optim(ize), regression
Additional keywords: delayedInnoDBflush,delayed,InnoDB,flush
Keywords: slow fast time perf optim regression speed delayedInnoDBflush delayed InnoDB flush
For keyword slow:
commit ba824b66c1132f1360a317eeb8b590b705f04b69
Author: Vladislav Vaintroub <wlad@mariadb.com>
Date:   Wed May 3 18:15:54 2017 +0000

    MDEV-12597 Do not print warning about inconsistent slow-log variables
    
    The new 10.2 has log-slow-admin-statements ON but log-slow-queries OFF,
    thus  there is no reason for a warning about it(the change was "by design")

commit 0cca5bdf0b6d9b1562e7a92ae51d983d2a63a1f0
Author: Vladislav Vaintroub <wlad@mariadb.com>
Date:   Thu Mar 30 13:11:34 2017 +0000

    Allow to specify C runtime library used for compilation.
    Default to static release (previously static debug was used in debug
    builds, but not is appears to be too slow)

commit a194390eb8ddd4512751a937cc87f157c4d937e5
Author: Vladislav Vaintroub <wlad@mariadb.com>
Date:   Thu Mar 30 13:11:34 2017 +0000

    Allow to specify C runtime library used for compilation.
    Default to static release (previously static debug was used in debug
    builds, but not is appears to be too slow)

commit 124bae082bf17e9af1fc77f78bbebd019635be5c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 30 13:11:34 2017 +0300

    MDEV-12289 Keep 128 persistent rollback segments for compatibility and performance
    
    InnoDB divides the allocation of undo logs into rollback segments.
    The DB_ROLL_PTR system column of clustered indexes can address up to
    128 rollback segments (TRX_SYS_N_RSEGS). Originally, InnoDB only
    created one rollback segment. In MySQL 5.5 or in the InnoDB Plugin
    for MySQL 5.1, all 128 rollback segments were created.
    
    MySQL 5.7 hard-codes the rollback segment IDs 1..32 for temporary undo logs.
    On upgrade, unless a slow shutdown (innodb_fast_shutdown=0)
    was performed on the old server instance, these rollback segments
    could be in use by transactions that are in XA PREPARE state or
    transactions that were left behind by a server kill followed by a
    normal shutdown immediately after restart.
    
    Persistent tables cannot refer to temporary undo logs or vice versa.
    Therefore, we should keep two distinct sets of rollback segments:
    one for persistent tables and another for temporary tables. In this way,
    all 128 rollback segments will be available for both types of tables,
    which could improve performance. Also, MariaDB 10.2 will remain more
    compatible than MySQL 5.7 with data files from earlier versions of
    MySQL or MariaDB.
    
    trx_sys_t::temp_rsegs[TRX_SYS_N_RSEGS]: A new array of temporary
    rollback segments. The trx_sys_t::rseg_array[TRX_SYS_N_RSEGS] will
    be solely for persistent undo logs.
    
    srv_tmp_undo_logs. Remove. Use the constant TRX_SYS_N_RSEGS.
    
    srv_available_undo_logs: Change the type to ulong.
    
    trx_rseg_get_on_id(): Remove. Instead, let the callers refer to
    trx_sys directly.
    
    trx_rseg_create(), trx_sysf_rseg_find_free(): Remove unneeded parameters.
    These functions only deal with persistent undo logs.
    
    trx_temp_rseg_create(): New function, to create all temporary rollback
    segments at server startup.
    
    trx_rseg_t::is_persistent(): Determine if the rollback segment is for
    persistent tables.
    
    trx_sys_is_noredo_rseg_slot(): Remove. The callers must know based on
    context (such as table handle) whether the DB_ROLL_PTR is referring to
    a persistent undo log.
    
    trx_sys_create_rsegs(): Remove all parameters, which were always passed
    as global variables. Instead, modify the global variables directly.
    
    enum trx_rseg_type_t: Remove.
    
    trx_t::get_temp_rseg(): A method to ensure that a temporary
    rollback segment has been assigned for the transaction.
    
    trx_t::assign_temp_rseg(): Replaces trx_assign_rseg().
    
    trx_purge_free_segment(), trx_purge_truncate_rseg_history():
    Remove the redundant variable noredo=false.
    Temporary undo logs are discarded immediately at transaction commit
    or rollback, not lazily by purge.
    
    trx_purge_mark_undo_for_truncate(): Remove references to the
    temporary rollback segments.
    
    trx_purge_mark_undo_for_truncate(): Remove a check for temporary
    rollback segments. Only the dedicated persistent undo log tablespaces
    can be truncated.
    
    trx_undo_get_undo_rec_low(), trx_undo_get_undo_rec(): Add the
    parameter is_temp.
    
    trx_rseg_mem_restore(): Split from trx_rseg_mem_create().
    Initialize the undo log and the rollback segment from the file
    data structures.
    
    trx_sysf_get_n_rseg_slots(): Renamed from
    trx_sysf_used_slots_for_redo_rseg(). Count the persistent
    rollback segment headers that have been initialized.
    
    trx_sys_close(): Also free trx_sys->temp_rsegs[].
    
    get_next_redo_rseg(): Merged to trx_assign_rseg_low().
    
    trx_assign_rseg_low(): Remove the parameters and access the
    global variables directly. Revert to simple round-robin, now that
    the whole trx_sys->rseg_array[] is for persistent undo log again.
    
    get_next_noredo_rseg(): Moved to trx_t::assign_temp_rseg().
    
    srv_undo_tablespaces_init(): Remove some parameters and use the
    global variables directly. Clarify some error messages.
    
    Adjust the test innodb.log_file. Apparently, before these changes,
    InnoDB somehow ignored missing dedicated undo tablespace files that
    are pointed by the TRX_SYS header page, possibly losing part of
    essential transaction system state.

commit e5b155a4e5986a16620c3eb359a47bd27feb462a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Mar 10 16:01:02 2017 +0200

    MDEV-12091 Shutdown fails to wait for rollback of recovered transactions to finish
    
    In the 10.1 InnoDB Plugin, a call os_event_free(buf_flush_event) was
    misplaced. The event could be triggered by rollback of resurrected
    transactions while shutdown was in progress. This bug was caught
    by cmake -DWITH_ASAN testing. This call was only present in the
    10.1 InnoDB Plugin, not in other versions, or in XtraDB.
    
    That said, the bug affects all InnoDB versions. Shutdown assumes the
    cessation of any page-dirtying activity, including the activity of
    the background rollback thread. InnoDB only waited for the background
    rollback to finish as part of a slow shutdown (innodb_fast_shutdown=0).
    The default is a clean shutdown (innodb_fast_shutdown=1). In a scenario
    where InnoDB is killed, restarted, and shut down soon enough, the data
    files could become corrupted.
    
    logs_empty_and_mark_files_at_shutdown(): Wait for the
    rollback to finish, except if innodb_fast_shutdown=2
    (crash-like shutdown) was requested.
    
    trx_rollback_or_clean_recovered(): Before choosing the next
    recovered transaction to roll back, terminate early if non-slow
    shutdown was initiated. Roll back everything on slow shutdown
    (innodb_fast_shutdown=0).
    
    srv_innodb_monitor_mutex: Declare as static, because the mutex
    is only used within one module.
    
    In 10.2, os_event_destroy() sets the event to a NULL pointer,
    while os_event_free() in earlier versions did not do that.

commit 032678ad18498bab01d41779313e48df1990f780
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Mar 10 18:33:38 2017 +0200

    MDEV-12091 Shutdown fails to wait for rollback of recovered transactions to finish
    
    In the 10.1 InnoDB Plugin, a call os_event_free(buf_flush_event) was
    misplaced. The event could be signalled by rollback of resurrected
    transactions while shutdown was in progress. This bug was caught
    by cmake -DWITH_ASAN testing. This call was only present in the
    10.1 InnoDB Plugin, not in other versions, or in XtraDB.
    
    That said, the bug affects all InnoDB versions. Shutdown assumes the
    cessation of any page-dirtying activity, including the activity of
    the background rollback thread. InnoDB only waited for the background
    rollback to finish as part of a slow shutdown (innodb_fast_shutdown=0).
    The default is a clean shutdown (innodb_fast_shutdown=1). In a scenario
    where InnoDB is killed, restarted, and shut down soon enough, the data
    files could become corrupted.
    
    logs_empty_and_mark_files_at_shutdown(): Wait for the
    rollback to finish, except if innodb_fast_shutdown=2
    (crash-like shutdown) was requested.
    
    trx_rollback_or_clean_recovered(): Before choosing the next
    recovered transaction to roll back, terminate early if non-slow
    shutdown was initiated. Roll back everything on slow shutdown
    (innodb_fast_shutdown=0).
    
    srv_innodb_monitor_mutex: Declare as static, because the mutex
    is only used within one module.
    
    After each call to os_event_free(), ensure that the freed event
    is not reachable via global variables, by setting the relevant
    variables to NULL.

commit 15bdfeeba82134ed09ee3424db804fad1b613d8c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 9 15:58:33 2017 +0200

    Remove trx_sys_t::pending_purge_rseg_array.
    
    In MySQL 5.7, there is some redundant code for supposedly handling
    an upgrade from an earlier version of InnoDB.
    
    An upgrade of InnoDB between major versions should include a
    slow shutdown (innodb_fast_shutdown=0) of the previous version.
    
    A comment in trx_lists_init_at_db_start() confused clean shutdown
    and slow shutdown. A clean shutdown does not necessarily guarantee
    that there are no active transactions. A slow shutdown guarantees
    that.
    
    Because there was no code to handle rollback of recovered transactions
    that happened to use the rollback segment slots that MySQL 5.7.2
    repurposed for temporary undo logs, the upgrade is not working in all
    cases, and we may as well remove the code to handle purging.
    
    trx_sys_t::pending_purge_rseg_array: Remove.
    
    trx_undo_get_undo_rec_low(): Define as static. Remove the parameter
    is_redo_rseg.
    
    trx_undo_get_undo_rec(), trx_rseg_get_on_id(): Remove the parameter
    is_redo_rseg.
    
    trx_rseg_mem_free(): Remove the second parameter.
    
    trx_sys_get_nth_rseg(): Replace with trx_rseg_get_on_id().
    
    trx_rseg_schedule_pending_purge(): Remove.

commit 156cf86defdc59353f37f6bd5b685d91004f38aa
Author: Daniel Black <grooverdan@users.sourceforge.net>
Date:   Tue Feb 28 21:47:44 2017 +1100

    MDEV-11610: Alter Debian log rotate to not rotate binary/relay logs
    
    Rotating binary/relay logs can cause interuption to the processing
    on the server. Binary and relay logs have their own mechanism already
    for not getting out of control (expire_logs_days).
    
    By no longer rotating binary and relay logs log rotation is limited to
    the following logs:
    * error log
    * general log
    * slow query log
    
    Writing these to the binary log would cause any logrotation on the
    slave to occur twice, once due to this and another due to the log-
    rotate script on the slave. Now --local is passed to mysqladmin to
    prevent this duplication.

commit 72a822f2ec24a756eb605602a73b97855b288dc6
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Fri Feb 17 20:09:14 2017 +0200

    MDEV-11766 Tests failed in buildbot with semaphore waiting warnings
    
    The standalone warning is not a sign of a problem, just of slowness,
    so it should be added to global suppressions. If a real problem
    happens, there will be other errors

commit 6364adb199f8adbc5adfe0c276bdf2d3dd17454c
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Sat Feb 18 20:39:49 2017 +0200

    MDEV-10621 parts.partition_float_myisam failed with timeout in buildbot
    
    parts.partition_float_myisam, parts.partition_int_myisam,
    parts.partition_float_innodb are all known to fail with timeouts
    on slow builders. The tests are composed of several independent parts
    for corresponding subtypes (float == float + double,
    int == tinyint + smallint + mediumint + int + bigint). The solution
    is to split them into separate tests. No test logic has been changed.

commit b70cd26d73d727ad871c109b47a8a2645c553fd8
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Fri Feb 17 00:57:24 2017 +0200

    MDEV-11668 rpl.rpl_heartbeat_basic fails sporadically in buildbot
    
    On a slow builder, a delay between binlog events on master could
    occur, which would cause a heartbeat which is not expected by the
    test. The solution is to monitor the timing of binlog events
    on the master and only perform the heartbeat check if no critical
    delays have happened.
    
    Additionally, an unused variable was removed (this change is
    unrelated to the bugfix).

commit 41f42dff0624f19baf2353f3c09b3040e53f929d
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Tue Feb 14 15:30:45 2017 +0100

    cleanup: mtr startup warning
    
    options --log-slow-admin-statements, --log-queries-not-using-indexes and --log-slow-slave-statements have no effect if --log_slow_queries is not set
    
    1. s/--log_slow_queries/--log-slow-queries/
    2. disable log-slow-admin-statement/etc in mytr when doing mysqld --help

commit 3435e8a51552c3c73feab4b1c731dd8da225618c
Author: Nirbhay Choubey <nirbhay@mariadb.com>
Date:   Mon Dec 19 17:32:45 2016 -0500

    MDEV-7635: Part 1
    
    innodb_autoinc_lock_mode            = 2
    innodb_buffer_pool_dump_at_shutdown = ON
    innodb_buffer_pool_dump_pct         = 25
    innodb_buffer_pool_load_at_startup  = ON
    innodb_checksum_algorithm           = CRC32
    innodb_file_format                  = Barracuda
    innodb_large_prefix                 = ON
    innodb_log_compressed_pages         = ON
    innodb_purge_threads                = 4
    innodb_strict_mode                  = ON
    binlog_annotate_row_events          = ON
    binlog_format                       = MIXED
    binlog-row-event-max-size           = 8192
    group_concat_max_len                = 1M
    lock_wait_timeout                   = 86400
    log_slow_admin_statements           = ON
    log_slow_slave_statements           = ON
    log_warnings                        = 2
    max_allowed_packet                  = 16M
    replicate_annotate_row_events       = ON
    slave_net_timeout                   = 60
    sync_binlog                         = 1
    aria_recover                        = BACKUP,QUICK
    myisam_recover_options              = BACKUP,QUICK

commit 1628a2ae27cfc8b96e4b50d85d430955625e2d88
Author: Monty <monty@mariadb.org>
Date:   Tue Dec 27 01:30:20 2016 +0200

    Fixed issues found by buildbot
    
    - MDEV-11621 rpl.rpl_gtid_stop_start fails sporadically in buildbot
    - MDEV-11620 rpl.rpl_upgrade_master_info fails sporadically in buildbot
    
    The issue above was probably that the build machine was overworked and the
    shutdown took longer than 30 resp 10 seconds, which caused MyISAM tables
    to be marked as crashed.
    Fixed by flushing myisam tables before doing a forced shutdown/kill.
    I also increased timeout for forced shutdown from 10 seconds to 60 seconds
    to fix other possible issues on slow machines.
    
    Fixed also some compiler warnings

commit 4b05d60e62ef6e21d5329a9667813df890034ff0
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Jan 9 09:15:21 2017 +0200

    Make encryption.innodb_lotoftables more robust.
    
    Perform a slow shutdown at the start of the test, and create all
    InnoDB tables with STATS_PERSISTENT=0, so that any I/O related to
    background tasks (change buffer merge, purge, persistent statistics)
    should be eliminated.

commit f1ee011a6cbda1069a6ec9b5e2428451a64861fd
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Wed Jan 4 23:05:22 2017 +0200

    MDEV-11722 main.join_cache fails in buildbot on very slow builders
    
    The guilty part of the test checks for performance degradation on
    a query with numerous joins on an empty table. The test expects
    the query to take less than 1 second, and fails if it is not so
    (which can happen on very slow builders).
    
    The solution is to add more JOINs to the query. On a fixed server,
    it should not have any noticeable impact on the query execution,
    while on the unfixed version the query would take several times
    longer (e.g. 6.5 sec vs 1.5 sec). Thus, we can increase the margin
    for the error, and make the test fail when the query takes longer
    than 5 seconds.

commit 719321e78e69249e796a907c17400dac14ef0921
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Jan 4 18:43:32 2017 +0200

    MDEV-11638 Encryption causes race conditions in InnoDB shutdown
    
    InnoDB shutdown failed to properly take fil_crypt_thread() into account.
    The encryption threads were signalled to shut down together with other
    non-critical tasks. This could be much too early in case of slow shutdown,
    which could need minutes to complete the purge. Furthermore, InnoDB
    failed to wait for the fil_crypt_thread() to actually exit before
    proceeding to the final steps of shutdown, causing the race conditions.
    
    Furthermore, the log_scrub_thread() was shut down way too early.
    Also it should remain until the SRV_SHUTDOWN_FLUSH_PHASE.
    
    fil_crypt_threads_end(): Remove. This would cause the threads to
    be terminated way too early.
    
    srv_buf_dump_thread_active, srv_dict_stats_thread_active,
    lock_sys->timeout_thread_active, log_scrub_thread_active,
    srv_monitor_active, srv_error_monitor_active: Remove a race condition
    between startup and shutdown, by setting these in the startup thread
    that creates threads, not in each created thread. In this way, once the
    flag is cleared, it will remain cleared during shutdown.
    
    srv_n_fil_crypt_threads_started, fil_crypt_threads_event: Declare in
    global rather than static scope.
    
    log_scrub_event, srv_log_scrub_thread_active, log_scrub_thread():
    Declare in static rather than global scope. Let these be created by
    log_init() and freed by log_shutdown().
    
    rotate_thread_t::should_shutdown(): Do not shut down before the
    SRV_SHUTDOWN_FLUSH_PHASE.
    
    srv_any_background_threads_are_active(): Remove. These checks now
    exist in logs_empty_and_mark_files_at_shutdown().
    
    logs_empty_and_mark_files_at_shutdown(): Shut down the threads in
    the proper order. Keep fil_crypt_thread() and log_scrub_thread() alive
    until SRV_SHUTDOWN_FLUSH_PHASE, and check that they actually terminate.

commit 0f8e17af92cd0126aadf283e25edcd64872b2ea3
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Jan 4 18:16:37 2017 +0200

    Part 1 of MDEV-8139 Fix scrubbing tests
    
    Port a bug fix from MySQL 5.7, so that all undo log pages will be freed
    during a slow shutdown. We cannot scrub pages that are left allocated.
    
    commit 173e171c6fb55f064eea278c76fbb28e2b1c757b
    Author: Thirunarayanan Balathandayuthapani <thirunarayanan.balathandayuth@oracle.com>
    Date:   Fri Sep 9 18:01:27 2016 +0530
    
        Bug #24450908   UNDO LOG EXISTS AFTER SLOW SHUTDOWN
    
        Problem:
        ========
    
        1) cached undo segment is not removed from rollback segment history
        (RSEG_HISTORY) during slow shutdown. In other words, If the segment is
        not completely free, we are failing to remove an entry from the history
        list. While starting the server, we traverse all rollback segment slots
        history list and make it as list of undo logs to be purged in purge
        queue.
        In that case, purge queue will never be empty after slow shutdown.
    
        2) Freeing of undo log segment is linked with removing undo log header
        from history.
    
        Fix:
        ====
        1) Have separate logic of removing the undo log header from
        history list from rollback segment slots and remove it from
        rollback segment history even though it is not completely free.
    
        Reviewed-by: Debarun Banerjee <debarun.banerjee@oracle.com>
        Reviewed-by: Marko Mäkelä <marko.makela@oracle.com>
        RB:13672

commit 9bf92706d19761722b46d66a671734466cb6e98e
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Sun Jan 1 19:35:44 2017 +0200

    MDEV-8518 rpl.sec_behind_master-5114 fails sporadically in buildbot
    
    - fix the test to avoid false-negatives before MDEV-5114 patch;
    - fix the race condition which made the test fail on slow builders

commit e5d7fc967ede53407a65bfde3faec3181e35f19f
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Wed Jan 4 13:03:30 2017 +0200

    MDEV-10100 main.pool_of_threads fails sporadically in buildbot
    
    Backport the fix to 5.5, because it fails there too
    
    The patch fixes two test failures:
    - on slow builders, sometimes a connection attempt which should
      fail due to the exceeded number of thread_pool_max_threads
      actually succeeds;
    - on even slow builders, MTR sometimes cannot establish the
      initial connection, and check-testcase fails prior to the
      test start
    
    The problem with check-testcase was caused by connect-timeout=2
    which was set for all clients in the test config file. On slow
    builders it might be not enough.
    There is no way to override it for the pre-test check, so it needed
    to be substantially increased or removed.
    
    The other problem was caused by a race condition between sleeps
    that the test performs in existing connections and the connect
    timeout for the connection attempt which was expected to fail.
    If sleeps finished before the connect-timeout was exceeded, it
    would allow the connection to succeed.
    
    To solve each problem without making the other one worse,
    connect-timeout should be configured dynamically during the test.
    Due to the nature of the test (all connections must be busy
    at the moment when we need to change the timeout, and cannot execute
    SET GLOBAL ...), it needs to be done independently from the server.
    
    The solution:
    - recognize 'connect_timeout' as a connection option in mysqltest's
      "connect" command;
    - remove connect-timeout from the test configuration file;
    - use the new connect_timeout option for those connections which
      are expected to fail;
    - re-arrange the test flow to allow running a huge SLEEP
      without affecting the test execution time (because it would be
      interrupted after the main test flow is finished).
    
    The test is still subject to false negatives, e.g. if the connection
    fails due to timeout rather than due to the exceeded number of
    allowed threads, or if the connection on extra port succeeds due
    to a race condition and not because the special logic for the extra
    port. But those false negatives have always been possible there
    on slow builders, they should not be critical because faster builders
    should catch such failures if they appear.
    
    Conflicts:
            client/mysqltest.cc
            mysql-test/r/pool_of_threads.result
            mysql-test/t/pool_of_threads.test

commit 0912fbbce179cba38bd41de797ba5934e63dbaad
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Wed Jan 4 03:33:39 2017 +0200

    MDEV-11719 main.subselect_no_exists_to_in failed in buildbot
    
    main.log_slow might leave mysql.slow_log table non-empty,
    and tests which later use it might fail. Make sure that the table
    is properly truncated

commit 3871477c40efc826805f4c4e35b006c2c233dd26
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Sun Jan 1 20:06:03 2017 +0200

    MDEV-10100 main.pool_of_threads fails sporadically in buildbot
    
    The patch fixes two test failures:
    - on slow builders, sometimes a connection attempt which should
      fail due to the exceeded number of thread_pool_max_threads
      actually succeeds;
    - on even slow builders, MTR sometimes cannot establish the
      initial connection, and check-testcase fails prior to the
      test start
    
    The problem with check-testcase was caused by connect-timeout=2
    which was set for all clients in the test config file. On slow
    builders it might be not enough.
    There is no way to override it for the pre-test check, so it needed
    to be substantially increased or removed.
    
    The other problem was caused by a race condition between sleeps
    that the test performs in existing connections and the connect
    timeout for the connection attempt which was expected to fail.
    If sleeps finished before the connect-timeout was exceeded, it
    would allow the connection to succeed.
    
    To solve each problem without making the other one worse,
    connect-timeout should be configured dynamically during the test.
    Due to the nature of the test (all connections must be busy
    at the moment when we need to change the timeout, and cannot execute
    SET GLOBAL ...), it needs to be done independently from the server.
    
    The solution:
    - recognize 'connect_timeout' as a connection option in mysqltest's
      "connect" command;
    - remove connect-timeout from the test configuration file;
    - use the new connect_timeout option for those connections which
      are expected to fail;
    - re-arrange the test flow to allow running a huge SLEEP
      without affecting the test execution time (because it would be
      interrupted after the main test flow is finished).
    
    The test is still subject to false negatives, e.g. if the connection
    fails due to timeout rather than due to the exceeded number of
    allowed threads, or if the connection on extra port succeeds due
    to a race condition and not because the special logic for the extra
    port. But those false negatives have always been possible there
    on slow builders, they should not be critical because faster builders
    should catch such failures if they appear.

commit 37f294fec20e5b27532c156cd6956d65d804a5df
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Tue Dec 27 03:21:13 2016 +0200

    Disable the test for valgrind builds
    
    Test is very slow with valgrind, and pointless because it is
    initially about a race condition which is hardly achievable
    with valgrind

commit d6a1f9f10f21bfb5198b81c40e09755651013e09
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Dec 22 10:23:42 2016 +0200

    MDEV-11630 Call mutex_free() before freeing the mutex list
    
    fil_space_crypt_cleanup(): Call mutex_free() to pair with
    fil_space_crypt_init().
    
    fil_space_destroy_crypt_data(): Call mutex_free() to pair with
    fil_space_create_crypt_data() and fil_space_read_crypt_data().
    
    fil_crypt_threads_cleanup(): Call mutex_free() to pair with
    fil_crypt_threads_init().
    
    fil_space_free_low(): Invoke fil_space_destroy_crypt_data().
    
    fil_close(): Invoke fil_space_crypt_cleanup(), just like
    fil_init() invoked fil_space_crypt_init().
    
    Datafile::shutdown(): Set m_crypt_info=NULL without dereferencing
    the pointer. The object will be freed along with the fil_space_t
    in fil_space_free_low().
    Remove some unnecessary conditions (ut_free(NULL) is OK).
    
    srv_shutdown_all_bg_threads(): Shut down the encryption threads
    by calling fil_crypt_threads_end().
    
    srv_shutdown_bg_undo_sources(): Do not prematurely call
    fil_crypt_threads_end(). Many pages can still be written by
    change buffer merge, rollback of incomplete transactions, and
    purge, especially in slow shutdown (innodb_fast_shutdown=0).
    
    innobase_shutdown_for_mysql(): Call fil_crypt_threads_cleanup()
    also when innodb_read_only=1, because the threads will have been
    created also in that case.
    
    sync_check_close(): Re-enable the invocation of sync_latch_meta_destroy()
    to free the mutex list.

commit c33c638f39eb626ca7e77cbdd38eef6aee53f25e
Author: Monty <monty@mariadb.org>
Date:   Wed Dec 21 22:40:52 2016 +0200

    MDEV-7558 analyze_stmt_slow_query_log fails sporadically in buildbot
    
    The reason was that the test was reusing the same log file without deleting it between tests.
    Fixed by creating a new log file as part of the test

commit e86580c3dda707788fb0ca35244cf602d7e8d50d
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Thu Dec 15 18:20:58 2016 +0100

    MDEV-11552 Queries executed by event scheduler are written to slow log incorrectly or not written at all
    
    because thd->update_server_status() is used to measure the query time
    for the slow log (not only to set protocol level flags),
    it needs to be called also when the server isn't going to send
    anything to the client.

commit 8938031bc7eb78d406553465341338038cfb2e1a
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Wed Dec 14 17:47:10 2016 +0100

    InnoDB: don't stop purge threads if there's work to do
    
    in slow shutdown mode don't stop purge threads until they've
    purged everything there is

commit 8d770859c9d28c6b7ce8b052eaca706a18651562
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Wed Dec 14 17:46:58 2016 +0100

    InnoDB purge thread and other bg threads
    
    in slow shutdown mode stop all bg threads that might generate
    new undo records to purge before stopping purge threads.

commit eabb0aef12e1a6310dea18a2c72efcef42b6dd86
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Wed Dec 14 17:47:24 2016 +0100

    sporadic crashes of innodb.innodb_prefix_index_restart_server
    
    in slow shutdown mode purge threads really must exit only when there is
    nothing to purge. Restore the trx_commit_disallowed check and
    don't stop purge threads until all connection thread transactions
    are gone.

commit 48bd8b16fe382be302c6f0b45931be5aa6f29a0e
Author: Sivert Sorumgard <sivert.sorumgaard@oracle.com>
Date:   Mon Aug 22 14:30:02 2016 +0200

    Bug#24388753: PRIVILEGE ESCALATION USING MYSQLD_SAFE
    
    [This is the 5.5/5.6 version of the bugfix].
    
    The problem was that it was possible to write log files ending
    in .ini/.cnf that later could be parsed as an options file.
    This made it possible for users to specify startup options
    without the permissions to do so.
    
    This patch fixes the problem by disallowing general query log
    and slow query log to be written to files ending in .ini and .cnf.

commit 8dc642112c83c73969f37dbb12b9fe8f546fd42a
Author: Sivert Sorumgard <sivert.sorumgaard@oracle.com>
Date:   Mon Aug 22 14:30:02 2016 +0200

    Bug#24388753: PRIVILEGE ESCALATION USING MYSQLD_SAFE
    
    [This is the 5.5/5.6 version of the bugfix].
    
    The problem was that it was possible to write log files ending
    in .ini/.cnf that later could be parsed as an options file.
    This made it possible for users to specify startup options
    without the permissions to do so.
    
    This patch fixes the problem by disallowing general query log
    and slow query log to be written to files ending in .ini and .cnf.

commit 02d75ae1fd24f43f02f963a39e8df5644f8873d8
Author: Monty <monty@mariadb.org>
Date:   Wed Mar 23 14:36:59 2016 +0200

    Fixed failures from changing values of thread_stack and thread_cache_size
    Added --thread_cache_size=0 to slow_launch_time_func.test as otherwise
    the new thread would start too fast to be counted as a slow_launch_thread.

commit fa3edbf40d6b9f6b56feaceb0ec90753f1072ac9
Author: Monty <monty@mariadb.org>
Date:   Tue Mar 22 23:42:13 2016 +0200

    Increase value of thread_cache_size to 32
    Added 5 minute timeout before automaticlally removing threads from thread
    cache.
    
    This solves a problem with jemalloc, which is slow with a small
    thread cache and also makes thread_cache big enough that most users
    doesn't have to touch it
For keyword fast:
commit 2af4659b0593a640a1f5f641dc3e8d76ab35685a
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Tue Mar 21 10:00:02 2017 +0200

    Fix failure on galera_toi_drop_database test.
    
    It is assumed that both insert..select statements take so
    long that drop database from node2 gets to abort them both
    but on fast machines it was too small. Increased the size
    of insert.

commit 124bae082bf17e9af1fc77f78bbebd019635be5c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 30 13:11:34 2017 +0300

    MDEV-12289 Keep 128 persistent rollback segments for compatibility and performance
    
    InnoDB divides the allocation of undo logs into rollback segments.
    The DB_ROLL_PTR system column of clustered indexes can address up to
    128 rollback segments (TRX_SYS_N_RSEGS). Originally, InnoDB only
    created one rollback segment. In MySQL 5.5 or in the InnoDB Plugin
    for MySQL 5.1, all 128 rollback segments were created.
    
    MySQL 5.7 hard-codes the rollback segment IDs 1..32 for temporary undo logs.
    On upgrade, unless a slow shutdown (innodb_fast_shutdown=0)
    was performed on the old server instance, these rollback segments
    could be in use by transactions that are in XA PREPARE state or
    transactions that were left behind by a server kill followed by a
    normal shutdown immediately after restart.
    
    Persistent tables cannot refer to temporary undo logs or vice versa.
    Therefore, we should keep two distinct sets of rollback segments:
    one for persistent tables and another for temporary tables. In this way,
    all 128 rollback segments will be available for both types of tables,
    which could improve performance. Also, MariaDB 10.2 will remain more
    compatible than MySQL 5.7 with data files from earlier versions of
    MySQL or MariaDB.
    
    trx_sys_t::temp_rsegs[TRX_SYS_N_RSEGS]: A new array of temporary
    rollback segments. The trx_sys_t::rseg_array[TRX_SYS_N_RSEGS] will
    be solely for persistent undo logs.
    
    srv_tmp_undo_logs. Remove. Use the constant TRX_SYS_N_RSEGS.
    
    srv_available_undo_logs: Change the type to ulong.
    
    trx_rseg_get_on_id(): Remove. Instead, let the callers refer to
    trx_sys directly.
    
    trx_rseg_create(), trx_sysf_rseg_find_free(): Remove unneeded parameters.
    These functions only deal with persistent undo logs.
    
    trx_temp_rseg_create(): New function, to create all temporary rollback
    segments at server startup.
    
    trx_rseg_t::is_persistent(): Determine if the rollback segment is for
    persistent tables.
    
    trx_sys_is_noredo_rseg_slot(): Remove. The callers must know based on
    context (such as table handle) whether the DB_ROLL_PTR is referring to
    a persistent undo log.
    
    trx_sys_create_rsegs(): Remove all parameters, which were always passed
    as global variables. Instead, modify the global variables directly.
    
    enum trx_rseg_type_t: Remove.
    
    trx_t::get_temp_rseg(): A method to ensure that a temporary
    rollback segment has been assigned for the transaction.
    
    trx_t::assign_temp_rseg(): Replaces trx_assign_rseg().
    
    trx_purge_free_segment(), trx_purge_truncate_rseg_history():
    Remove the redundant variable noredo=false.
    Temporary undo logs are discarded immediately at transaction commit
    or rollback, not lazily by purge.
    
    trx_purge_mark_undo_for_truncate(): Remove references to the
    temporary rollback segments.
    
    trx_purge_mark_undo_for_truncate(): Remove a check for temporary
    rollback segments. Only the dedicated persistent undo log tablespaces
    can be truncated.
    
    trx_undo_get_undo_rec_low(), trx_undo_get_undo_rec(): Add the
    parameter is_temp.
    
    trx_rseg_mem_restore(): Split from trx_rseg_mem_create().
    Initialize the undo log and the rollback segment from the file
    data structures.
    
    trx_sysf_get_n_rseg_slots(): Renamed from
    trx_sysf_used_slots_for_redo_rseg(). Count the persistent
    rollback segment headers that have been initialized.
    
    trx_sys_close(): Also free trx_sys->temp_rsegs[].
    
    get_next_redo_rseg(): Merged to trx_assign_rseg_low().
    
    trx_assign_rseg_low(): Remove the parameters and access the
    global variables directly. Revert to simple round-robin, now that
    the whole trx_sys->rseg_array[] is for persistent undo log again.
    
    get_next_noredo_rseg(): Moved to trx_t::assign_temp_rseg().
    
    srv_undo_tablespaces_init(): Remove some parameters and use the
    global variables directly. Clarify some error messages.
    
    Adjust the test innodb.log_file. Apparently, before these changes,
    InnoDB somehow ignored missing dedicated undo tablespace files that
    are pointed by the TRX_SYS header page, possibly losing part of
    essential transaction system state.

commit e5b155a4e5986a16620c3eb359a47bd27feb462a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Mar 10 16:01:02 2017 +0200

    MDEV-12091 Shutdown fails to wait for rollback of recovered transactions to finish
    
    In the 10.1 InnoDB Plugin, a call os_event_free(buf_flush_event) was
    misplaced. The event could be triggered by rollback of resurrected
    transactions while shutdown was in progress. This bug was caught
    by cmake -DWITH_ASAN testing. This call was only present in the
    10.1 InnoDB Plugin, not in other versions, or in XtraDB.
    
    That said, the bug affects all InnoDB versions. Shutdown assumes the
    cessation of any page-dirtying activity, including the activity of
    the background rollback thread. InnoDB only waited for the background
    rollback to finish as part of a slow shutdown (innodb_fast_shutdown=0).
    The default is a clean shutdown (innodb_fast_shutdown=1). In a scenario
    where InnoDB is killed, restarted, and shut down soon enough, the data
    files could become corrupted.
    
    logs_empty_and_mark_files_at_shutdown(): Wait for the
    rollback to finish, except if innodb_fast_shutdown=2
    (crash-like shutdown) was requested.
    
    trx_rollback_or_clean_recovered(): Before choosing the next
    recovered transaction to roll back, terminate early if non-slow
    shutdown was initiated. Roll back everything on slow shutdown
    (innodb_fast_shutdown=0).
    
    srv_innodb_monitor_mutex: Declare as static, because the mutex
    is only used within one module.
    
    In 10.2, os_event_destroy() sets the event to a NULL pointer,
    while os_event_free() in earlier versions did not do that.

commit 032678ad18498bab01d41779313e48df1990f780
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Mar 10 18:33:38 2017 +0200

    MDEV-12091 Shutdown fails to wait for rollback of recovered transactions to finish
    
    In the 10.1 InnoDB Plugin, a call os_event_free(buf_flush_event) was
    misplaced. The event could be signalled by rollback of resurrected
    transactions while shutdown was in progress. This bug was caught
    by cmake -DWITH_ASAN testing. This call was only present in the
    10.1 InnoDB Plugin, not in other versions, or in XtraDB.
    
    That said, the bug affects all InnoDB versions. Shutdown assumes the
    cessation of any page-dirtying activity, including the activity of
    the background rollback thread. InnoDB only waited for the background
    rollback to finish as part of a slow shutdown (innodb_fast_shutdown=0).
    The default is a clean shutdown (innodb_fast_shutdown=1). In a scenario
    where InnoDB is killed, restarted, and shut down soon enough, the data
    files could become corrupted.
    
    logs_empty_and_mark_files_at_shutdown(): Wait for the
    rollback to finish, except if innodb_fast_shutdown=2
    (crash-like shutdown) was requested.
    
    trx_rollback_or_clean_recovered(): Before choosing the next
    recovered transaction to roll back, terminate early if non-slow
    shutdown was initiated. Roll back everything on slow shutdown
    (innodb_fast_shutdown=0).
    
    srv_innodb_monitor_mutex: Declare as static, because the mutex
    is only used within one module.
    
    After each call to os_event_free(), ensure that the freed event
    is not reachable via global variables, by setting the relevant
    variables to NULL.

commit 15bdfeeba82134ed09ee3424db804fad1b613d8c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 9 15:58:33 2017 +0200

    Remove trx_sys_t::pending_purge_rseg_array.
    
    In MySQL 5.7, there is some redundant code for supposedly handling
    an upgrade from an earlier version of InnoDB.
    
    An upgrade of InnoDB between major versions should include a
    slow shutdown (innodb_fast_shutdown=0) of the previous version.
    
    A comment in trx_lists_init_at_db_start() confused clean shutdown
    and slow shutdown. A clean shutdown does not necessarily guarantee
    that there are no active transactions. A slow shutdown guarantees
    that.
    
    Because there was no code to handle rollback of recovered transactions
    that happened to use the rollback segment slots that MySQL 5.7.2
    repurposed for temporary undo logs, the upgrade is not working in all
    cases, and we may as well remove the code to handle purging.
    
    trx_sys_t::pending_purge_rseg_array: Remove.
    
    trx_undo_get_undo_rec_low(): Define as static. Remove the parameter
    is_redo_rseg.
    
    trx_undo_get_undo_rec(), trx_rseg_get_on_id(): Remove the parameter
    is_redo_rseg.
    
    trx_rseg_mem_free(): Remove the second parameter.
    
    trx_sys_get_nth_rseg(): Replace with trx_rseg_get_on_id().
    
    trx_rseg_schedule_pending_purge(): Remove.

commit b27fd90ad36f4194665744cc1dcdd05f2d0b47ef
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Wed Feb 15 18:45:19 2017 +0100

    MDEV-11902 mi_open race condition
    
    TOCTOU bug. The path is checked to be valid, symlinks are resolved.
    Then the resolved path is opened. Between the check and the open,
    there's a window when one can replace some path component with a
    symlink, bypassing validity checks.
    
    Fix: after we resolved all symlinks in the path, don't allow open()
    to resolve symlinks, there should be none.
    
    Compared to the old MyISAM/Aria code:
    * fastpath. Opening of not-symlinked files is just one open(),
      no fn_format() and lstat() anymore.
    * opening of symlinked tables doesn't do fn_format() and lstat() either.
      it also doesn't to realpath() (which was lstat-ing every path
      component), instead if opens every path component with O_PATH.
    * share->data_file_name stores realpath(path) not readlink(path). So,
      SHOW CREATE TABLE needs to do lstat/readlink() now (see ::info()),
      and certain error messages (cannot open file "XXX") show the real
      file path with all symlinks resolved.

commit 2bf07556e8ba35ea166b1f603706851faa01d9c5
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Feb 14 10:53:17 2017 +0200

    Post-push fix for MDEV-12057.
    
    Fix a test result for the narrower type of innodb_fast_shutdown.

commit 1b4b4f688711c2ee99bc70e6cffa37b64820b0f2
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Feb 13 14:06:01 2017 +0200

    MDEV-12057 Embedded server shutdown hangs in InnoDB
    
    Ever since MDEV-5800 enabled indexed virtual columns for InnoDB,
    the InnoDB shutdown relied on close_connections() that would set
    thd->killed for the InnoDB purge threads. Alas, the embedded server
    shutdown is not invoking close_connections(), and thus InnoDB purge
    threads fail to initiate shutdown, causing a hang.
    
    innodb_inited: Remove. Use srv_was_started instead.
    
    innobase_fast_shutdown: Remove. Use srv_fast_shutdown instead.
    
    srv_running: Renamed from thd_destructor_myvar, and made global.
    The value NULL means that shutdown was requested or the purge threads
    should not be running because of innodb_read_only_mode=1.
    
    innobase_init(): Set srv_was_started after ensuring that srv_running
    was initialized. (In innodb_read_only mode, the purge threads are not
    started and we do not care if srv_running==NULL.)
    
    innobase_start_or_create_for_mysql(): Do not set srv_was_started.
    Let it be set by the only caller innobase_init().
    
    srv_purge_should_exit(): Check also srv_was_started and srv_running
    when evaluating thd->killed.

commit 81b7fe9d383bdf68a622b95384f067ed68ba342c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 31 19:43:03 2017 +0200

    Shut down InnoDB after aborted startup.
    
    This fixes memory leaks in tests that cause InnoDB startup to fail.
    
    buf_pool_free_instance(): Also free buf_pool->flush_rbt, which would
    normally be freed when crash recovery finishes.
    
    fil_node_close_file(), fil_space_free_low(), fil_close_all_files():
    Relax some debug assertions to tolerate !srv_was_started.
    
    innodb_shutdown(): Renamed from innobase_shutdown_for_mysql().
    Changed the return type to void. Do not assume that all subsystems
    were started.
    
    que_init(), que_close(): Remove (empty functions).
    
    srv_init(), srv_general_init(): Remove as global functions.
    
    srv_free(): Allow srv_sys=NULL.
    
    srv_get_active_thread_type(): Only return SRV_PURGE if purge really
    is running.
    
    srv_shutdown_all_bg_threads(): Do not reset srv_start_state. It will
    be needed by innodb_shutdown().
    
    innobase_start_or_create_for_mysql(): Always call srv_boot() so that
    innodb_shutdown() can assume that it was called. Make more subsystems
    dependent on SRV_START_STATE_STAT.
    
    srv_shutdown_bg_undo_sources(): Require SRV_START_STATE_STAT.
    
    trx_sys_close(): Do not assume purge_sys!=NULL. Do not call
    buf_dblwr_free(), because the doublewrite buffer can exist while
    the transaction system does not.
    
    logs_empty_and_mark_files_at_shutdown(): Do a faster shutdown if
    !srv_was_started.
    
    recv_sys_close(): Invoke dblwr.pages.clear() which would normally
    be invoked by buf_dblwr_process().
    
    recv_recovery_from_checkpoint_start(): Always release log_sys->mutex.
    
    row_mysql_close(): Allow the subsystem not to exist.

commit e5d7fc967ede53407a65bfde3faec3181e35f19f
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Wed Jan 4 13:03:30 2017 +0200

    MDEV-10100 main.pool_of_threads fails sporadically in buildbot
    
    Backport the fix to 5.5, because it fails there too
    
    The patch fixes two test failures:
    - on slow builders, sometimes a connection attempt which should
      fail due to the exceeded number of thread_pool_max_threads
      actually succeeds;
    - on even slow builders, MTR sometimes cannot establish the
      initial connection, and check-testcase fails prior to the
      test start
    
    The problem with check-testcase was caused by connect-timeout=2
    which was set for all clients in the test config file. On slow
    builders it might be not enough.
    There is no way to override it for the pre-test check, so it needed
    to be substantially increased or removed.
    
    The other problem was caused by a race condition between sleeps
    that the test performs in existing connections and the connect
    timeout for the connection attempt which was expected to fail.
    If sleeps finished before the connect-timeout was exceeded, it
    would allow the connection to succeed.
    
    To solve each problem without making the other one worse,
    connect-timeout should be configured dynamically during the test.
    Due to the nature of the test (all connections must be busy
    at the moment when we need to change the timeout, and cannot execute
    SET GLOBAL ...), it needs to be done independently from the server.
    
    The solution:
    - recognize 'connect_timeout' as a connection option in mysqltest's
      "connect" command;
    - remove connect-timeout from the test configuration file;
    - use the new connect_timeout option for those connections which
      are expected to fail;
    - re-arrange the test flow to allow running a huge SLEEP
      without affecting the test execution time (because it would be
      interrupted after the main test flow is finished).
    
    The test is still subject to false negatives, e.g. if the connection
    fails due to timeout rather than due to the exceeded number of
    allowed threads, or if the connection on extra port succeeds due
    to a race condition and not because the special logic for the extra
    port. But those false negatives have always been possible there
    on slow builders, they should not be critical because faster builders
    should catch such failures if they appear.
    
    Conflicts:
            client/mysqltest.cc
            mysql-test/r/pool_of_threads.result
            mysql-test/t/pool_of_threads.test

commit 3871477c40efc826805f4c4e35b006c2c233dd26
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Sun Jan 1 20:06:03 2017 +0200

    MDEV-10100 main.pool_of_threads fails sporadically in buildbot
    
    The patch fixes two test failures:
    - on slow builders, sometimes a connection attempt which should
      fail due to the exceeded number of thread_pool_max_threads
      actually succeeds;
    - on even slow builders, MTR sometimes cannot establish the
      initial connection, and check-testcase fails prior to the
      test start
    
    The problem with check-testcase was caused by connect-timeout=2
    which was set for all clients in the test config file. On slow
    builders it might be not enough.
    There is no way to override it for the pre-test check, so it needed
    to be substantially increased or removed.
    
    The other problem was caused by a race condition between sleeps
    that the test performs in existing connections and the connect
    timeout for the connection attempt which was expected to fail.
    If sleeps finished before the connect-timeout was exceeded, it
    would allow the connection to succeed.
    
    To solve each problem without making the other one worse,
    connect-timeout should be configured dynamically during the test.
    Due to the nature of the test (all connections must be busy
    at the moment when we need to change the timeout, and cannot execute
    SET GLOBAL ...), it needs to be done independently from the server.
    
    The solution:
    - recognize 'connect_timeout' as a connection option in mysqltest's
      "connect" command;
    - remove connect-timeout from the test configuration file;
    - use the new connect_timeout option for those connections which
      are expected to fail;
    - re-arrange the test flow to allow running a huge SLEEP
      without affecting the test execution time (because it would be
      interrupted after the main test flow is finished).
    
    The test is still subject to false negatives, e.g. if the connection
    fails due to timeout rather than due to the exceeded number of
    allowed threads, or if the connection on extra port succeeds due
    to a race condition and not because the special logic for the extra
    port. But those false negatives have always been possible there
    on slow builders, they should not be critical because faster builders
    should catch such failures if they appear.

commit d6a1f9f10f21bfb5198b81c40e09755651013e09
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Dec 22 10:23:42 2016 +0200

    MDEV-11630 Call mutex_free() before freeing the mutex list
    
    fil_space_crypt_cleanup(): Call mutex_free() to pair with
    fil_space_crypt_init().
    
    fil_space_destroy_crypt_data(): Call mutex_free() to pair with
    fil_space_create_crypt_data() and fil_space_read_crypt_data().
    
    fil_crypt_threads_cleanup(): Call mutex_free() to pair with
    fil_crypt_threads_init().
    
    fil_space_free_low(): Invoke fil_space_destroy_crypt_data().
    
    fil_close(): Invoke fil_space_crypt_cleanup(), just like
    fil_init() invoked fil_space_crypt_init().
    
    Datafile::shutdown(): Set m_crypt_info=NULL without dereferencing
    the pointer. The object will be freed along with the fil_space_t
    in fil_space_free_low().
    Remove some unnecessary conditions (ut_free(NULL) is OK).
    
    srv_shutdown_all_bg_threads(): Shut down the encryption threads
    by calling fil_crypt_threads_end().
    
    srv_shutdown_bg_undo_sources(): Do not prematurely call
    fil_crypt_threads_end(). Many pages can still be written by
    change buffer merge, rollback of incomplete transactions, and
    purge, especially in slow shutdown (innodb_fast_shutdown=0).
    
    innobase_shutdown_for_mysql(): Call fil_crypt_threads_cleanup()
    also when innodb_read_only=1, because the threads will have been
    created also in that case.
    
    sync_check_close(): Re-enable the invocation of sync_latch_meta_destroy()
    to free the mutex list.

commit c64edc6b83f1cf1ed21d93bdba5d13dd2afd8dc6
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Dec 15 18:51:41 2016 +0200

    MDEV-6076: Preserve PAGE_ROOT_AUTO_INC when emptying pages.
    
    Thanks to Zhangyuan from Alibaba for pointing out this bug.
    
    btr_page_empty(): When a clustered index root page is emptied,
    preserve PAGE_ROOT_AUTO_INC. This would occur during a page split.
    
    page_create_empty(): Preserve PAGE_ROOT_AUTO_INC when a clustered
    index root page becomes empty. Use a faster method for writing
    the field.
    
    page_zip_copy_recs(): Reset PAGE_MAX_TRX_ID when copying
    clustered index pages. We must clear the field when the root page
    was a leaf page and it is being split, so that PAGE_MAX_TRX_ID
    will continue to be 0 in clustered index non-root pages.
    
    page_create_zip(): Add debug assertions for validating
    PAGE_MAX_TRX_ID and PAGE_ROOT_AUTO_INC.

commit 473fb9295db547136bedcc6aae4bae4fcfb5c4f0
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Thu Dec 8 11:55:35 2016 +1100

    MDEV-11454: Improve test case innodb_buffer_pool_dump_pct
    
    Based off feedback from Marko Mäkelä:
    * Don't set timeouts on restart.
    * Use innodb_fast_shutdown=0
    
    Also:
    
    Set innodb_buffer_pool_instances=1 - adds predicability to tests
    - if a biased pool is used less pages could be saved.
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit 3a6e781ea39b67fabf1a528e6a071215a65f50b0
Author: Otto Kekäläinen <otto@mariadb.org>
Date:   Sat Nov 26 00:46:12 2016 +0100

    MDEV-9165: Run chown much faster on the datadir during install/update

commit a6f032af5778018051d41fc8ba7e9c983b4b7fbf
Author: Otto Kekäläinen <otto@mariadb.org>
Date:   Sun Oct 9 13:46:09 2016 +0300

    Deb: use --mem to run mtr faster and keep Travis-CI well below 50 min

commit c416ed8b46e9129baff961c5fb2b155f5def7c57
Author: Otto Kekäläinen <otto@mariadb.org>
Date:   Sun Oct 9 13:42:36 2016 +0300

    Deb: build faster using ccache when available

commit 02d75ae1fd24f43f02f963a39e8df5644f8873d8
Author: Monty <monty@mariadb.org>
Date:   Wed Mar 23 14:36:59 2016 +0200

    Fixed failures from changing values of thread_stack and thread_cache_size
    Added --thread_cache_size=0 to slow_launch_time_func.test as otherwise
    the new thread would start too fast to be counted as a slow_launch_thread.

commit 076aa182c2d2ee67c233d0e79c900dfba6f593c1
Author: Monty <monty@mariadb.org>
Date:   Sat Jan 30 00:11:27 2016 +0200

    Optimized intkorr() and intstore(functions) for intel 64 bits.
    (Benchmarked, about 30 % faster and 50 % smaller than original)

commit 63f0669fd6dc430b60ffd5de0bff9854622a1c1a
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Wed Dec 23 15:52:34 2015 +0400

    MDEV-9297 - mysql_install_db launches mysqld 3x
    
    Perform database installation in one mysqld run. This makes mysql_install_db
    3x faster.

commit e562b43222621b75516414e4f7b686031b01461a
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Thu Nov 19 16:54:45 2015 +0400

    MDEV-8111 - remove "fast mutexes"
    
    They aren't faster than normal mutexes. They're disabled by default for years,
    so de facto it's dead code, never used.
For keyword time:
commit ff166093741df0bd91ba24e02714ef882073c51b
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu May 11 21:12:37 2017 +0300

    MDEV-12674 Innodb_row_lock_current_waits has overflow
    
    There is a race condition related to the variable
    srv_stats.n_lock_wait_current_count, which is only
    incremented and decremented by the function lock_wait_suspend_thread(),
    
    The incrementing is protected by lock_sys->wait_mutex, but the
    decrementing does not appear to be protected by anything.
    This mismatch could allow the counter to be corrupted when a
    transactional InnoDB table or record lock wait is terminating
    roughly at the same time with the start of a wait on a
    (possibly different) lock.
    
    ib_counter_t: Remove some unused methods. Prevent instantiation for N=1.
    Add an inc() method that takes a slot index as a parameter.
    
    single_indexer_t: Remove.
    
    simple_counter<typename Type, bool atomic=false>: A new counter wrapper.
    Optionally use atomic memory operations for modifying the counter.
    Aligned to the cache line size.
    
    lsn_ctr_1_t, ulint_ctr_1_t, int64_ctr_1_t: Define as simple_counter<Type>.
    These counters are either only incremented (and we do not care about
    losing some increment operations), or the increment/decrement operations
    are protected by some mutex.
    
    srv_stats_t::os_log_pending_writes: Document that the number is protected
    by log_sys->mutex.
    
    srv_stats_t::n_lock_wait_current_count: Use simple_counter<ulint, true>,
    that is, atomic inc() and dec() operations.
    
    lock_wait_suspend_thread(): Release the mutexes before incrementing
    the counters. Avoid acquiring the lock mutex if the lock wait has
    already been resolved. Atomically increment and decrement
    srv_stats.n_lock_wait_current_count.
    
    row_insert_for_mysql(), row_update_for_mysql(),
    row_update_cascade_for_mysql(): Use the inc() method with the trx->id
    as the slot index. This is a non-functional change, just using
    inc() instead of add(1).
    
    buf_LRU_get_free_block(): Replace the method add(index, n) with inc().
    There is no slot index in the simple_counter.

commit 993323995648526781e5d22afbc77e260529a8b0
Author: Michael Widenius <monty@mariadb.org>
Date:   Thu May 11 17:28:47 2017 +0300

    MDEV-10804 main.stat_tables_par fails sporadically in buildbot
    
    This was because of two issues:
    - thr_multi_lock_after_thr_lock needed to be hit 3 times before go2 could
      be signaled, because 2 of these happened before statistics_update_start
      was reached.
    - The original code didn't take into accunt that thr_locks can be executed in
      any random order, which caused sporadic failures when waiting for 1 lock
      of 3, as if the locks where in different order, there would be a dead-lock.
      Fixed by introducing thr_multi_lock_before_thr_lock which is deterministic.
    - Some of the test failures where not noticed as the DEBUG_SYNC timeout
      would cause the test to pass (after 300 seconds).

commit e3a7f75aefb882a291b7308d84e8a36b34d3009f
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed May 10 14:14:50 2017 +0300

    MDEV-12679 purge_sys_t::~purge_sys_t(): Assertion `latch.magic_n == 0' failed on --bootstrap (CMAKE_BUILD_TYPE=Debug)
    
    rw_lock_free_func(): Assign lock->magic_n = 0 in debug builds,
    because sometimes, the assignment in the explicit destructor call
    is being optimized away.
    This was verified when using GCC 6.3.0 with -O3 -g -mtune=native
    on a Debian GNU/Linux 9.0 system on AMD64.

commit ccca4f43c92916c347210a7f9a8126f2aa3f6c31
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Wed May 3 21:22:59 2017 +0200

    MDEV-10332  support for OpenSSL 1.1 and LibreSSL
    
    post-review fixes:
    * move all ssl implementation related ifdefs/defines to one file
      (ssl_compat.h)
    * work around OpenSSL-1.1 desire to malloc every EVP context by
      run-time checking that context allocated on the stack is big enough
      (openssl.c)
    * use newer version of the AWS SDK for OpenSSL 1.1
    * use get_dh2048() function as generated by openssl 1.1
      (viosslfactories.c)

commit 56b3bcc8127c90f63bd33847f8a5a02fd78e4682
Author: Sachin Setiya <sachin.setiya@mariadb.com>
Date:   Mon May 8 18:02:46 2017 +0530

    MDEV-12290 Wrong timestamps in binary log causes replication issues
    
    Binlog_background_thread does not make a call to set_time(), And when
    we call binlog_checkpoint_log_event->write() , we write the wrong timestamp.
    In this patch we correct this by calling thd->set_time().

commit b48f2a097dffb6b571bdc349337885b4f953ad94
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Tue May 2 13:55:08 2017 +0000

    MDEV-12663 : rocksdb.compact_deletes times out and causes other tests to fail
    
    Temporarily disable rocksdb.compact_deletes.

commit acce1f37c2518278a31606c7f1b460ad0ac7347c
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Tue May 2 08:09:16 2017 +0300

    MDEV-12624: encryption.innodb_encryption_tables fails in buildbot with timeout
    
    This regression was caused by MDEV-12467 encryption.create_or_replace
    hangs during DROP TABLE, where if table->is_stopping() (i.e. when
    tablespace is dropped) background key rotation thread calls
    fil_crypt_complete_rotate_space to release space and stop rotation.
    However, that function does not decrease number of rotating
    threads if table->is_stopping() is true.

commit d17093b2edfbd1422f224c553eb73c9263eeeb1a
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Tue Apr 18 17:44:30 2017 +0200

    MDEV-12293 Assertion `table->no_keyread || !table->covering_keys.is_set(tab->index) || table->file->keyread == tab->index' failed
    
    sometimes the optimizer starts a keyread on some index
    and later (but before any actual index accesses) changes
    it to a keyread on a different index

commit 0636637e37a4471ae2ef44b4932c6dcb4d9a77cf
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Tue Apr 25 22:55:27 2017 +0200

    regenerate SSL certificates again
    
    and make sure that private ca key is not deleted at the end of
    the procedure, so that we could generate additional certificates
    any time without regenerating everything

commit 4e41ac26f5a1c2d5a601754c3593fbc031ceaae6
Author: Debarun Banerjee <debarun.banerjee@oracle.com>
Date:   Sun Nov 13 10:31:35 2016 +0530

    BUG#25082593 FOREIGN KEY VALIDATION DOESN'T NEED TO ACQUIRE GAP LOCK IN READ COMMITTED
    
    Problem :
    ---------
    This bug is filed from the base replication bug#25040331 where the
    slave thread times out while INSERT operation waits on GAP lock taken
    during Foreign Key validation.
    
    The primary reason for the lock wait is because the statements are
    getting replayed in different order. However, we also observed
    two things ...
    
    1. The slave thread could always use "Read Committed" isolation for
    row level replication.
    
    2. It is not necessary to have GAP locks in "READ Committed" isolation
    level in innodb.
    
    This bug is filed to address point(2) to avoid taking GAP locks during
    Foreign Key validation.
    
    Solution :
    ----------
    Innodb is primarily designed for "Repeatable Read" and the GAP lock
    behaviour is default. For "Read Committed" isolation, we have special
    handling in row_search_mvcc to avoid taking the GAP lock while
    scanning records.
    
    While looking for Foreign Key, the code is following the default
    behaviour taking GAP locks. The suggested fix is to avoid GAP
    locking during FK validation similar to normal search operation
    (row_search_mvcc) for "Read Committed" isolation level.
    
    Reviewed-by: Sunny Bains <sunny.bains@oracle.com>
    
    RB: 14526

commit 9df04261035638cdf55237decf4cacab256fb473
Author: Knut Anders Hatlen <knut.hatlen@oracle.com>
Date:   Fri Nov 4 13:44:36 2016 +0100

    Bug#25048573: STD::MAP INSTANTIATIONS CAUSE STATIC ASSERT FAILURES ON FREEBSD 11
    
    Problem: Some instantiations of std::map have discrepancies between
    the value_type of the map and the value_type of the map's allocator.
    On FreeBSD 11 this is detected by Clang, and an error is raised at
    compilation time.
    
    Fix: Specify the correct value_type for the allocators.
    
    Also fix an unused variable warning in storage/innobase/os/os0file.cc.

commit bdfa49f6e23e1f6b8dbd1a5c9a782c4e65ab6869
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Apr 25 10:11:40 2017 +0300

    Remove redundant initialization of some InnoDB startup parameters
    
    The InnoDB startup parameters will be initialized via pointers
    in innobase_system_variables[]. Remove some redundant link-time
    initialization.

commit 0b52b28b91eac1018d865f2f918b83c416565f2f
Author: Jacob Mathew <jacob.mathew@mariadb.com>
Date:   Tue Apr 18 17:36:05 2017 -0700

    MDEV-10355 Weird error message upon CREATE TABLE with DEFAULT
    
    Fixed handling of default values with cached temporal functions so that the
    CREATE TABLE statement now succeeds.
    Fixed virtual column session cleanup.
    Fixed the error message.
    Added quoting of date/time values in cases when this was omitted.
    Added a test case in default.test.
    Updated test result files.

commit eecce3d7c8a6374342ed7d0cd8844420d8957682
Author: Daniel Black <grooverdan@users.sourceforge.net>
Date:   Mon Apr 10 19:11:01 2017 +1000

    Travis: Test more suites, latest OSX
    
    Remove clang-3.8 which doesn't have a repository on apt.llvm.org any
    more.
    
    For OSX, xcode8.3 is explicitly specified.
    
    /usr/local/Cellar is used as a cache repository to save brew install
    time on OSX (and /usr/local was too big).
    
    Debian autobake.sh is moved to a matrix include.
    
    Other branches of the matrix build test other test suites.
    An Ubuntu galera is downloaded and used in the test suite.
    
    TYPE=RelWithDebInfo used with the test to provide backtraces with line
    numbers when crashes occur.
    
    Build of PLUGIN_AWS_KEY_MANAGEMENT enabled in build.
    
    Code supporting TYPE=Debug and -DWITH_ASAN=ON included by not enabled
    due to large numbers of errors.
    
    Running more tests in parallel (6) as container based builds seem to
    support them. The test case timeout has been set to 2 minutes as large
    stalls will put test cases over 50 minute interval.
    
    ccache enabled where possible. Linux clang builds don't use them as the
    minimum CMake version isn't there.

commit a33653eedb42a99568d9e7b4c3f4576e73ba3726
Author: Vladislav Vaintroub <wlad@mariadb.com>
Date:   Fri Apr 7 15:09:28 2017 +0000

    MDEV-12473 - fix rocksdb linking error
    
    link rocksdb with librt, for clock_gettime()

commit 08359bc570dc4a078c025e5650d303954df244ac
Author: Daniel Black <grooverdan@users.sourceforge.net>
Date:   Sun Apr 2 20:39:01 2017 +1000

    travis: OSX - 2 minute test case timeout

commit f369942d90ed00be6a05c36efc86e2739161e587
Author: Sachin Setiya <sachin.setiya@mariadb.com>
Date:   Thu Mar 23 15:00:14 2017 +0530

    Galera MTR Tests: stability fixes
    
     * remove part of galera_var_cluster_address.test that can not be tested reliably
     * reduce running time for galera_gcache_recover_manytrx.test
     * Additional wait_conditions for GAL-401.test
    
    Signed-off-by: Sachin Setiya <sachin.setiya@mariadb.com>

commit 9b13147d725b0c5c21319c22dd860c7004bfdd5c
Author: Sachin Setiya <sachin.setiya@mariadb.com>
Date:   Wed Mar 22 11:41:47 2017 +0530

    Galera MTR Tests: MW-308 , MW-307, GCF-992
    
    * a dedicated test for wsrep_retry_autocommit
    * some galera_toi_* tests were only passing because wsrep_retry_autocommit
      was in effect. The tests were changed to do not use autocommit
    * higher timeout values in galera_2nodes.cnf , galera_3nodes.cnf
    
    Signed-off-by: Sachin Setiya <sachin.setiya@mariadb.com>

commit 8423294acf32d966027ef99a38938bb4acc001d5
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Apr 5 16:24:44 2017 +0300

    Make InnoDB doublewrite buffer creation more robust.
    
    buf_dblwr_create(): Remove a bogus check for the buffer pool size.
    Theoretically, there is no problem if the doublewrite buffer is
    larger than the buffer pool. It could only cause trouble on crash
    recovery, and on recovery the doublewrite buffer is read to a buffer
    that is allocated outside of the buffer pool. Moreover, this check
    was only performed when the database was initialized for the first
    time.
    
    On a normal startup, buf_dblwr_init() would not enforce any
    rule on the innodb_buffer_pool_size.
    
    Furthermore, in case of an error, commit the mini-transaction in order
    to avoid an assertion failure on shutdown. Yes, this will leave the
    doublewrite buffer in a corrupted stage, but the doublewrite buffer
    should only be initialized when the data files are being initialized
    from the scratch in the first place.

commit 15878ee41c5845403faf16d853011375550f0727
Author: Vladislav Vaintroub <wlad@mariadb.com>
Date:   Tue Apr 4 18:55:18 2017 +0000

    Windows, compiling : Remove _DEBUG preprocessor constant, to fix
    debug build with older cmake.
    
    The constant is implicitely defined by VS when chosen C runtime is Debug
    (/MTd, MDd).
    
    CMake does not define it since https://public.kitware.com/Bug/view.php?id=15777
    was fixed.
    
    We remove it from compile flags, to be able to build Debug with /MT runtime
    using older cmakes.

commit 0cca5bdf0b6d9b1562e7a92ae51d983d2a63a1f0
Author: Vladislav Vaintroub <wlad@mariadb.com>
Date:   Thu Mar 30 13:11:34 2017 +0000

    Allow to specify C runtime library used for compilation.
    Default to static release (previously static debug was used in debug
    builds, but not is appears to be too slow)

commit a194390eb8ddd4512751a937cc87f157c4d937e5
Author: Vladislav Vaintroub <wlad@mariadb.com>
Date:   Thu Mar 30 13:11:34 2017 +0000

    Allow to specify C runtime library used for compilation.
    Default to static release (previously static debug was used in debug
    builds, but not is appears to be too slow)

commit cd2fe26116930220666281949fb7af81f3cc2b28
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Mar 24 18:24:46 2017 +0200

    MDEV-11802 innodb.innodb_bug14676111 fails on buildbot
    
    The test was unnecessarily depending on InnoDB purge, which can
    sometimes fail to proceed.
    
    Let us rewrite the test to use BEGIN;INSERT;ROLLBACK to cause the
    immediate removal of the desired records.

commit a821ef76057f17a9532f525d2858bb1d31c0a56d
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Mar 24 18:01:56 2017 +0200

    MDEV-11802 innodb.innodb_bug14676111 fails on buildbot
    
    The test was unnecessarily depending on InnoDB purge, which can
    sometimes fail to proceed.
    
    Let us rewrite the test to use BEGIN;INSERT;ROLLBACK to cause the
    immediate removal of the desired records.

commit e5b67a46bcb75a751f5906f19694971bc803d67c
Author: Vladislav Vaintroub <wlad@mariadb.com>
Date:   Thu Mar 23 11:48:56 2017 +0000

    MDEV-12345 Performance : replace calls to clock() inside trx_start_low() by THD::start_utime

commit 4c35dce2968ac715b72bb75c2d64d977868f718f
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Sat Mar 18 22:50:14 2017 +0200

    Clean up the test mentioned in MDEV-12052.
    
    The test is not expected to crash. With a non-debug server,
    Valgrind completes in reasonable time without any failure.
    
    Also, it does not make sense to store and restore parameters
    when the parameters are already being restored by a server restart.

commit 7668a79a88a3103781ee23eace53ca3e9bbd6644
Author: Marko Mäkelä <marko.makela@oracle.com>
Date:   Tue Mar 29 13:20:32 2016 +0300

    MDEV-12269 Port Bug#22996442 INNODB: MAKE UNIV_DEBUG DEPEND ON DBUG_OFF
    
    This is a partial port of my patch in MySQL 8.0.
    In MySQL 8.0, all InnoDB references to DBUG_OFF were replaced
    with UNIV_DEBUG. We will not do that in MariaDB.
    
    InnoDB used two independent compile-time flags that distinguish
    debug and non-debug builds, which is confusing.
    
    Also, make ut_ad() and alias of DBUG_ASSERT().

commit 105f46ffb801bc1487c0383f73729fefa568f017
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Mar 15 15:56:17 2017 +0200

    MDEV-12273 Remove dict_table_t::does_not_fit_in_memory
    
    In the InnoDB internal SQL parser, there is the keyword
    DOES_NOT_FIT_IN_MEMORY that is never specified in any CREATE TABLE
    statement that is passed to the InnoDB SQL parser
    (que_eval_sql() or pars_sql() or yyparse()). If this keyword were
    ever present, it would set the flag dict_table_t::does_not_fit_in_memory
    which is only present in debug builds.
    
    Let us remove all traces of this.
    
    Also, fix storage/innobase/pars/make_flex.sh so that no the generated
    file storage/innobase/pars/lexyy.cc works as is.
    
    FIXME: Always generate the InnoDB Bison files at build time, similar
    to how sql/sql_yacc.yy is handled. (This would still leave the
    generated scanner files, unless we want to add a build-time dependency
    for Flex.)

commit c010f06380f004adbc6f7062f656ab9dfa73e15f
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Wed Mar 15 23:19:33 2017 +0300

    MariaRocks: Run rocksdb testsuite with @@rocksdb_flush_log_at_trx_commit=0
    
    The default value of 1 causes many tests to time out (primary reason is
    that many tests populate tables with one-row INSERT statements that
    run with autocommit=1).

commit 50eb40a2a8aa3af6cc271f6028f4d6d74301d030
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Tue Mar 14 12:56:01 2017 +0200

    MDEV-11738: Mariadb uses 100% of several of my 8 cpus doing nothing
    
    MDEV-11581: Mariadb starts InnoDB encryption threads
    when key has not changed or data scrubbing turned off
    
    Background: Key rotation is based on background threads
    (innodb-encryption-threads) periodically going through
    all tablespaces on fil_system. For each tablespace
    current used key version is compared to max key age
    (innodb-encryption-rotate-key-age). This process
    naturally takes CPU. Similarly, in same time need for
    scrubbing is investigated. Currently, key rotation
    is fully supported on Amazon AWS key management plugin
    only but InnoDB does not have knowledge what key
    management plugin is used.
    
    This patch re-purposes innodb-encryption-rotate-key-age=0
    to disable key rotation and background data scrubbing.
    All new tables are added to special list for key rotation
    and key rotation is based on sending a event to
    background encryption threads instead of using periodic
    checking (i.e. timeout).
    
    fil0fil.cc: Added functions fil_space_acquire_low()
    to acquire a tablespace when it could be dropped concurrently.
    This function is used from fil_space_acquire() or
    fil_space_acquire_silent() that will not print
    any messages if we try to acquire space that does not exist.
    fil_space_release() to release a acquired tablespace.
    fil_space_next() to iterate tablespaces in fil_system
    using fil_space_acquire() and fil_space_release().
    Similarly, fil_space_keyrotation_next() to iterate new
    list fil_system->rotation_list where new tables.
    are added if key rotation is disabled.
    Removed unnecessary functions fil_get_first_space_safe()
    fil_get_next_space_safe()
    
    fil_node_open_file(): After page 0 is read read also
    crypt_info if it is not yet read.
    
    btr_scrub_lock_dict_func()
    buf_page_check_corrupt()
    buf_page_encrypt_before_write()
    buf_merge_or_delete_for_page()
    lock_print_info_all_transactions()
    row_fts_psort_info_init()
    row_truncate_table_for_mysql()
    row_drop_table_for_mysql()
        Use fil_space_acquire()/release() to access fil_space_t.
    
    buf_page_decrypt_after_read():
        Use fil_space_get_crypt_data() because at this point
        we might not yet have read page 0.
    
    fil0crypt.cc/fil0fil.h: Lot of changes. Pass fil_space_t* directly
    to functions needing it and store fil_space_t* to rotation state.
    Use fil_space_acquire()/release() when iterating tablespaces
    and removed unnecessary is_closing from fil_crypt_t. Use
    fil_space_t::is_stopping() to detect when access to
    tablespace should be stopped. Removed unnecessary
    fil_space_get_crypt_data().
    
    fil_space_create(): Inform key rotation that there could
    be something to do if key rotation is disabled and new
    table with encryption enabled is created.
    Remove unnecessary functions fil_get_first_space_safe()
    and fil_get_next_space_safe(). fil_space_acquire()
    and fil_space_release() are used instead. Moved
    fil_space_get_crypt_data() and fil_space_set_crypt_data()
    to fil0crypt.cc.
    
    fsp_header_init(): Acquire fil_space_t*, write crypt_data
    and release space.
    
    check_table_options()
            Renamed FIL_SPACE_ENCRYPTION_* TO FIL_ENCRYPTION_*
    
    i_s.cc: Added ROTATING_OR_FLUSHING field to
    information_schema.innodb_tablespace_encryption
    to show current status of key rotation.

commit 5da6bd7b959af4a9755556afedde8f34d95c679a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Mar 7 17:16:49 2017 +0200

    MDEV-11027 InnoDB log recovery is too noisy
    
    Provide more useful progress reporting of crash recovery.
    
    recv_sys_t::progress_time: The time of the last report.
    
    recv_sys_t::report(ib_time_t): Determine whether progress should
    be reported.
    
    recv_scan_print_counter: Remove.
    
    log_group_read_log_seg(): After after each I/O request, invoke
    recv_sys_t::report() and report progress if needed.
    
    recv_apply_hashed_log_recs(): Change the return type back to void
    (DB_SUCCESS was always returned), and rename the parameter to last_batch.
    At the start of each batch, if there are pages to be recovered,
    issue a message.

commit 47396ddea91698f6ea1829697566a4d7c31bc789
Merge: c4f3e64c23f 6860a4b5566
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Mar 8 11:40:43 2017 +0200

    Merge 5.5 into 10.0
    
    Also, implement MDEV-11027 a little differently from 5.5:
    
    recv_sys_t::report(ib_time_t): Determine whether progress should
    be reported.
    
    recv_apply_hashed_log_recs(): Rename the parameter to last_batch.

commit 9c47beb8bd7e60f00e434d8c1e4bbf2b0befb28c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Mar 8 10:07:50 2017 +0200

    MDEV-11027 InnoDB log recovery is too noisy
    
    Provide more useful progress reporting of crash recovery.
    
    recv_sys_t::progress_time: The time of the last report.
    
    recv_scan_print_counter: Remove.
    
    log_group_read_log_seg(): After after each I/O request,
    report progress if needed.
    
    recv_apply_hashed_log_recs(): At the start of each batch,
    if there are pages to be recovered, issue a message.

commit 2bca41265c802dc9a3e8852bb2b3cda720a5d44a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Mar 7 13:15:29 2017 +0200

    Remove MLOG_COMP_REC_SEC_DELETE_MARK.
    
    The InnoDB redo log record type MLOG_COMP_REC_SEC_DELETE_MARK has
    been unused for a long time, and it has never been written after
    WL#8845 introduced the redo log format identifier in MySQL 5.7.9
    or MariaDB Server 10.2.2. Thus, removing the record type does not
    constitute any functional change.

commit 27b9989d316163d00177bfee8fceb10995c2ba9b
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Feb 23 23:05:12 2017 +0200

    MDEV-12121 Introduce build option WITH_INNODB_AHI to disable innodb_adaptive_hash_index
    
    The InnoDB adaptive hash index is sometimes degrading the performance of
    InnoDB, and it is sometimes disabled to get more consistent performance.
    We should have a compile-time option to disable the adaptive hash index.
    
    Let us introduce two options:
    
    OPTION(WITH_INNODB_AHI "Include innodb_adaptive_hash_index" ON)
    OPTION(WITH_INNODB_ROOT_GUESS "Cache index root block descriptors" ON)
    
    where WITH_INNODB_AHI always implies WITH_INNODB_ROOT_GUESS.
    
    As part of this change, the misleadingly named function
    trx_search_latch_release_if_reserved(trx) will be replaced with the macro
    trx_assert_no_search_latch(trx) that will be empty unless
    BTR_CUR_HASH_ADAPT is defined (cmake -DWITH_INNODB_AHI=ON).
    
    We will also remove the unused column
    INFORMATION_SCHEMA.INNODB_TRX.TRX_ADAPTIVE_HASH_TIMEOUT.
    In MariaDB Server 10.1, it used to reflect the value of
    trx_t::search_latch_timeout which could be adjusted during
    row_search_for_mysql(). In 10.2, there is no such field.
    
    Other than the removal of the unused column TRX_ADAPTIVE_HASH_TIMEOUT,
    this is an almost non-functional change to the server when using the
    default build options.
    
    Some tests are adjusted so that they will work with both
    -DWITH_INNODB_AHI=ON and -DWITH_INNODB_AHI=OFF. The test
    innodb.innodb_monitor has been renamed to innodb.monitor
    in order to track MySQL 5.7, and the duplicate tests
    sys_vars.innodb_monitor_* are removed.

commit ab8199f38e8f271139ac14ac704324cc1df541ce
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Mar 1 23:43:37 2017 +0200

    MDEV-12103 Reduce the time of looking for MLOG_CHECKPOINT during crash recovery
    
    This fixes MySQL Bug#80788 in MariaDB 10.2.5.
    
    When I made the InnoDB crash recovery more robust by implementing
    WL#7142, I also introduced an extra redo log scan pass that can be
    shortened.
    
    This fix will slightly extend the InnoDB redo log format that I
    introduced in MySQL 5.7.9 by writing the start LSN of the MLOG_CHECKPOINT
    mini-transaction to the end of the log checkpoint page, so that recovery
    can jump straight to it without scanning all the preceding redo log.
    
    LOG_CHECKPOINT_END_LSN: At the end of the checkpoint page, the start LSN
    of the MLOG_CHECKPOINT mini-transaction. Previously, these bytes were
    written as 0.
    
    log_write_checkpoint_info(), log_group_checkpoint(): Add the parameter
    end_lsn for writing LOG_CHECKPOINT_END_LSN.
    
    log_checkpoint(): Remember the LSN at which the MLOG_CHECKPOINT
    mini-transaction is starting (or at which the redo log ends on
    shutdown).
    
    recv_init_crash_recovery(): Remove.
    
    recv_group_scan_log_recs(): Add the parameter checkpoint_lsn.
    
    recv_recovery_from_checkpoint_start(): Read LOG_CHECKPOINT_END_LSN
    and if it is set, start the first scan from it instead of the
    checkpoint LSN. Improve some messages and remove bogus assertions.
    
    recv_parse_log_recs(): Do not skip DBUG_PRINT("ib_log") for some
    file-level redo log records.
    
    recv_parse_or_apply_log_rec_body(): If we have not parsed all redo
    log between the checkpoint and the corresponding MLOG_CHECKPOINT
    record, defer the check for MLOG_FILE_DELETE or MLOG_FILE_NAME records
    to recv_init_crash_recovery_spaces().
    
    recv_init_crash_recovery_spaces(): Refuse recovery if
    MLOG_FILE_NAME or MLOG_FILE_DELETE records are missing.

commit 659047b8207a1212adeaa80c23b22da929f22b1b
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Mon Jan 23 08:34:59 2017 +1100

    MDEV-11386: Advance Toochain library cache workaround (temporary)
    
    Due to the way Advance Toolchain before 10.0-3 and 8.0-8 is
    packaged, shared libraries installed after the library cache
    advance-toolchain-atX.Y-runtime package aren't updated in
    /opt/atX.Y/etc/ld.so.cache. This results in mysqld,
    configured with RUNPATH set to /opt/atX.Y/lib64, resulting
    in the Advance Toolchain loader being used and if libraries
    such as jemalloc, libssl or any other library that mysqld uses
    is installed after Advance Toolchain, these libraries aren't in
    the cache and therefore won't be found in the RPM postinstall
    when mysqld is executed by mysql_install_db.
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit e9ad4bdb4252e0a4a3799364e9a27c3865a19df1
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Tue Feb 28 15:23:44 2017 +0400

    MDEV-11221 - main.events_restart failed in bb
    
    Applied lost in a merge revision 7f38a07:
    
    MDEV-10043 - main.events_restart fails sporadically in buildbot (crashes upon
                 shutdown)
    
    There was race condition between shutdown thread and event worker threads.
    
    Shutdown thread waits for thread_count to become 0 in close_connections(). It
    may happen so that event worker thread was started but didn't increment
    thread_count by this time. In this case shutdown thread may miss wait for this
    working thread and continue deinitialization. Worker thread in turn may continue
    execution and crash on deinitialized data.
    
    Fixed by incrementing thread_count before thread is actually created like it is
    done for connection threads.
    
    Also let event scheduler not to inc/dec running threads counter for symmetry
    with other "service" threads.

commit f3c65ce95189f4636ef853b819fb02c4e068bc0f
Author: Monty <monty@mariadb.org>
Date:   Fri Feb 10 20:30:37 2017 +0200

    Add protection to not access is_open() without LOCK_log mutex
    
    Protection added to reopen_file() and new_file_impl().
    
    Without this we could get an assert in fn_format() as name == 0,
    because the file was closed and name reset, atthe same time
    new_file_impl() was called.

commit b624b41abb20b853cb033aa9b40bd0786e9d17fa
Author: Monty <monty@mariadb.org>
Date:   Fri Feb 10 20:25:01 2017 +0200

    Don't allow one to kill START SLAVE while the slaves IO_THREAD or SQL_THREAD
     is starting.
    
    This is needed as if we kill the START SLAVE thread too early during
    shutdown then the IO_THREAD or SQL_THREAD will not have time to properly
    initlize it's replication or THD structures and clean_up() will try to
    delete master_info structures that are still in use.

commit e65f667bb60244610512efd7491fc77eccceb9db
Author: Monty <monty@mariadb.org>
Date:   Sun Jan 29 22:10:56 2017 +0200

    MDEV-9573 'Stop slave' hangs on replication slave
    
    The reason for this is that stop slave takes LOCK_active_mi over the
    whole operation while some slave operations will also need LOCK_active_mi
    which causes deadlocks.
    
    Fixed by introducing object counting for Master_info and not taking
    LOCK_active_mi over stop slave or even stop_all_slaves()
    
    Another benefit of this approach is that it allows:
    - Multiple threads can run SHOW SLAVE STATUS at the same time
    - START/STOP/RESET/SLAVE STATUS on a slave will not block other slaves
    - Simpler interface for handling get_master_info()
    - Added some missing unlock of 'log_lock' in error condtions
    - Moved rpl_parallel_inactivate_pool(&global_rpl_thread_pool) to end
      of stop_slave() to not have to use LOCK_active_mi inside
      terminate_slave_threads()
    - Changed argument for remove_master_info() to Master_info, as we always
      have this available
    - Fixed core dump when doing FLUSH TABLES WITH READ LOCK and parallel
      replication. Problem was that waiting for pause_for_ftwrl was not done
      when deleting rpt->current_owner after a force_abort.

commit 19150f7e7ac6e47e67b82c675f13ef1e550d429d
Author: Tor Didriksen <tor.didriksen@oracle.com>
Date:   Fri Feb 24 16:20:14 2017 +0100

    Bug#25611609 LINK WITH DYNAMIC RUNTIME LIBRARIES ON WINDOWS
    
    Patch for 5.5 and 5.6
    Use default runtime libraries on windows, i.e. build with /MD

commit bdb672fe96cfb75baab0ea1f1db8870d6cb8911b
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Thu Feb 23 19:46:10 2017 +0200

    MDEV-12120 tokudb_bugs.xa-N tests fail with timeout on valgrind
    
    The tests are disabled for valgrind in 5.6/10.x (LP:1549196),
    so they should be disabled in 5.5 as well

commit 81695ab8b53013c302b50e015836d38146436cba
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Feb 21 16:52:41 2017 +0200

    MDEV-11520 Extending an InnoDB data file unnecessarily allocates
    a large memory buffer on Windows
    
    fil_extend_space_to_desired_size(), os_file_set_size(): Use calloc()
    for memory allocation, and handle failures. Properly check the return
    status of posix_fallocate(), and pass the correct arguments to
    posix_fallocate().
    
    On Windows, instead of extending the file by at most 1 megabyte at a time,
    write a zero-filled page at the end of the file.
    According to the Microsoft blog post
    https://blogs.msdn.microsoft.com/oldnewthing/20110922-00/?p=9573
    this will physically extend the file by writing zero bytes.
    (InnoDB never uses DeviceIoControl() to set the file sparse.)
    
    I tested that the file extension works properly with a multi-file
    system tablespace, both with --innodb-use-fallocate and
    --skip-innodb-use-fallocate (the default):
    
    ./mtr \
    --mysqld=--innodb-use-fallocate \
    --mysqld=--innodb-autoextend-increment=1 \
    --mysqld=--innodb-data-file-path='ibdata1:5M;ibdata2:5M:autoextend' \
    --parallel=auto --force --retry=0 --suite=innodb &
    
    ls -lsh mysql-test/var/*/mysqld.1/data/ibdata2
    (several samples while running the test)

commit 978179a9d4933d3d8d2ac99028798e8a07095dd4
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Feb 20 17:58:42 2017 +0200

    MDEV-11520 Extending an InnoDB data file unnecessarily allocates
    a large memory buffer on Windows
    
    fil_extend_space_to_desired_size(), os_file_set_size(): Use calloc()
    for memory allocation, and handle failures. Properly check the return
    status of posix_fallocate().
    
    On Windows, instead of extending the file by at most 1 megabyte at a time,
    write a zero-filled page at the end of the file.
    According to the Microsoft blog post
    https://blogs.msdn.microsoft.com/oldnewthing/20110922-00/?p=9573
    this will physically extend the file by writing zero bytes.
    (InnoDB never uses DeviceIoControl() to set the file sparse.)
    
    For innodb_plugin, port the XtraDB fix for MySQL Bug#56433
    (introducing fil_system->file_extend_mutex). The bug was
    fixed differently in MySQL 5.6 (and MariaDB Server 10.0).

commit 6dc00f97b7db13975a26fd92ffd08aaa60339b87
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Tue Feb 21 15:03:34 2017 +0200

    MDEV-11774 tokudb.locks-select-update-3 failed in buildbot with lock wait timeout
    
    Increase tokudb_lock_timeout for the test

commit a13a636c74d9778ec0430ec963dcfd1614f7c81e
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Feb 17 10:32:21 2017 +0200

    MDEV-11802 innodb.innodb_bug14676111 fails
    
    The function trx_purge_stop() was calling os_event_reset(purge_sys->event)
    before calling rw_lock_x_lock(&purge_sys->latch). The os_event_set()
    call in srv_purge_coordinator_suspend() is protected by that X-latch.
    
    It would seem a good idea to consistently protect both os_event_set()
    and os_event_reset() calls with a common mutex or rw-lock in those
    cases where os_event_set() and os_event_reset() are used
    like condition variables, tied to changes of shared state.
    
    For each os_event_t, we try to document the mutex or rw-lock that is
    being used. For some events, frequent calls to os_event_set() seem to
    try to avoid hangs. Some events are never waited for infinitely, only
    timed waits, and os_event_set() is used for early termination of these
    waits.
    
    os_aio_simulated_put_read_threads_to_sleep(): Define as a null macro
    on other systems than Windows. TODO: remove this altogether and disable
    innodb_use_native_aio on Windows.
    
    os_aio_segment_wait_events[]: Initialize only if innodb_use_native_aio=0.
    
    log_write_flush_to_disk_low(): Invoke log_mutex_enter() at the end, to
    avoid race conditions when changing the system state. (No potential
    race condition existed before MySQL 5.7.)

commit 13493078e9aea37f6714b3921921aa10864c8b30
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Feb 16 19:40:03 2017 +0200

    MDEV-11802 innodb.innodb_bug14676111 fails
    
    The function trx_purge_stop() was calling os_event_reset(purge_sys->event)
    before calling rw_lock_x_lock(&purge_sys->latch). The os_event_set()
    call in srv_purge_coordinator_suspend() is protected by that X-latch.
    
    It would seem a good idea to consistently protect both os_event_set()
    and os_event_reset() calls with a common mutex or rw-lock in those
    cases where os_event_set() and os_event_reset() are used
    like condition variables, tied to changes of shared state.
    
    For each os_event_t, we try to document the mutex or rw-lock that is
    being used. For some events, frequent calls to os_event_set() seem to
    try to avoid hangs. Some events are never waited for infinitely, only
    timed waits, and os_event_set() is used for early termination of these
    waits.
    
    os_aio_simulated_put_read_threads_to_sleep(): Define as a null macro
    on other systems than Windows. TODO: remove this altogether and disable
    innodb_use_native_aio on Windows.
    
    os_aio_segment_wait_events[]: Initialize only if innodb_use_native_aio=0.

commit 6364adb199f8adbc5adfe0c276bdf2d3dd17454c
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Sat Feb 18 20:39:49 2017 +0200

    MDEV-10621 parts.partition_float_myisam failed with timeout in buildbot
    
    parts.partition_float_myisam, parts.partition_int_myisam,
    parts.partition_float_innodb are all known to fail with timeouts
    on slow builders. The tests are composed of several independent parts
    for corresponding subtypes (float == float + double,
    int == tinyint + smallint + mediumint + int + bigint). The solution
    is to split them into separate tests. No test logic has been changed.

commit d4746422547f1901831f9c891a3600275daf6534
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Tue Feb 14 18:31:30 2017 +0200

    MDEV-10092: Server crashes in in ha_heap::rnd_pos / Table_read_cursor::get_next
    
    The bug was caused by several issues.
    2 problems in seek_io_cache. Due to wrong offsets used, we would end up
    seeking way too much (first change), or over the intended seek point
    (second change). Fixing it requires correctly detecting available data
    in buffer (first change), and not using "IO_SIZE alligned" reads. The
    second is needed because _my_b_cache_read adjusts the pos_in_file itself
    based on read_pos and read_end. Pretending buffer is empty when we want
    to force a read will aleviate this problem.
    
    Secondly, the big-table cursors didn't repect the interface definitions
    of always returning the rownumber that Table_read_cursor::fetch() would activate.
    
    At the same time, next(), prev() and move_to() should not perform any
    row activation.

commit 2af28a363c0ac55c9b91aa9eb26949fc9ecf043a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Feb 10 12:11:42 2017 +0200

    MDEV-11782: Redefine the innodb_encrypt_log format
    
    Write only one encryption key to the checkpoint page.
    Use 4 bytes of nonce. Encrypt more of each redo log block,
    only skipping the 4-byte field LOG_BLOCK_HDR_NO which the
    initialization vector is derived from.
    
    Issue notes, not warning messages for rewriting the redo log files.
    
    recv_recovery_from_checkpoint_finish(): Do not generate any redo log,
    because we must avoid that before rewriting the redo log files, or
    otherwise a crash during a redo log rewrite (removing or adding
    encryption) may end up making the database unrecoverable.
    Instead, do these tasks in innobase_start_or_create_for_mysql().
    
    Issue a firm "Missing MLOG_CHECKPOINT" error message. Remove some
    unreachable code and duplicated error messages for log corruption.
    
    LOG_HEADER_FORMAT_ENCRYPTED: A flag for identifying an encrypted redo
    log format.
    
    log_group_t::is_encrypted(), log_t::is_encrypted(): Determine
    if the redo log is in encrypted format.
    
    recv_find_max_checkpoint(): Interpret LOG_HEADER_FORMAT_ENCRYPTED.
    
    srv_prepare_to_delete_redo_log_files(): Display NOTE messages about
    adding or removing encryption. Do not issue warnings for redo log
    resizing any more.
    
    innobase_start_or_create_for_mysql(): Rebuild the redo logs also when
    the encryption changes.
    
    innodb_log_checksums_func_update(): Always use the CRC-32C checksum
    if innodb_encrypt_log. If needed, issue a warning
    that innodb_encrypt_log implies innodb_log_checksums.
    
    log_group_write_buf(): Compute the checksum on the encrypted
    block contents, so that transmission errors or incomplete blocks can be
    detected without decrypting.
    
    Rewrite most of the redo log encryption code. Only remember one
    encryption key at a time (but remember up to 5 when upgrading from the
    MariaDB 10.1 format.)

commit 239790d92f73e73afaba5292162738c838fdcba2
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Thu Feb 9 14:15:10 2017 +0100

    MDEV-11604 Assertion `!check_datetime_range(ltime)' failed in TIME_to_longlong_datetime_packed

commit 8d99166c697516ad9b4084c2bc10ba4acf8b9744
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Mon Feb 6 23:52:47 2017 +0100

    MDEV-11640 gcol.gcol_select_myisam fails in buildbot on Power
    
    JOIN_CACHE's were initialized in  check_join_cache_usage()
    from make_join_readinfo(). After that make_join_readinfo() was looking
    whether it's possible to use keyread. Later, after make_join_readinfo(),
    optimizer decided whether to use filesort. And even later, at the
    execution time, from join_read_first(), keyread was actually enabled.
    
    The problem is, that if a query uses a vcol, base columns that it
    depends on are automatically added to the read_set - because they're
    needed to calculate the vcol. But if we're doing keyread, vcol is taken
    from the index, not calculated, and base columns do not need to  be
    in the read set (even should not be - as they aren't getting values).
    
    The bug was that JOIN_CACHE used read_set with base columns,
    they were not read because of keyread, so it was caching garbage.
    
    So read_set is only known after the keyread was decided. And after the
    filesort was decided, as filesort doesn't use keyread. But
    check_join_cache_usage() needs to be done in make_join_readinfo(),
    as the code below depends on these checks,
    
    Fix: keep JOIN_CACHE checks where they were, but move initialization
    down to the very end of JOIN::optimize_inner. If keyread was enabled,
    update the read_set to include only columns that are part of the index.
    Copy the keyread logic from join_read_first() to happen at optimize time.

commit 265e3253f1e5218c8f85f1c412575069cb15f2c0
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Tue Feb 7 13:08:17 2017 +1100

    MDEV-12055: Correct binlog_stm_ctype_ucs test
    
    The fix from MDEV-10866 was insufficient.
    Attempt 2 at fixing this.
    
    binlog.binlog_row_ctype_ucs 'row'        w18 [ fail ]
            Test ended at 2017-02-13 10:36:57
    
    CURRENT_TEST: binlog.binlog_row_ctype_ucs
    --- /mariadb/mysql-test/suite/binlog/r/binlog_row_ctype_ucs.result        2017-02-06 09:29:43.116183650 +1100
    +++ /mariadb/mysql-test/suite/binlog/r/binlog_row_ctype_ucs.reject        2017-02-13 10:36:56.984056229 +1100
    @@ -71,21 +71,21 @@
     /*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
     DELIMITER /*!*/;
     # at #
    -#700101  6:46:40 server id #  end_log_pos # CRC32 XXX  Start: binlog v 4, server v #.##.## created 700101  6:46:40
    +#170213 10:36:56 server id #  end_log_pos # CRC32 XXX  Start: binlog v 4, server v #.##.## created 170213 10:36:56
     # at #
    -#700101  6:46:40 server id #  end_log_pos # CRC32 XXX  Gtid list [#-#-#]
    +#170213 10:36:56 server id #  end_log_pos # CRC32 XXX  Gtid list [#-#-#]
     # at #
    -#700101  6:46:40 server id #  end_log_pos # CRC32 XXX  Binlog checkpoint master-bin.000002
    +#170213 10:36:56 server id #  end_log_pos # CRC32 XXX  Binlog checkpoint master-bin.000002
     # at #
    -#700101  6:46:40 server id #  end_log_pos # CRC32 XXX  Binlog checkpoint master-bin.000003
    +#170213 10:36:56 server id #  end_log_pos # CRC32 XXX  Binlog checkpoint master-bin.000003
     # at #
    -#700101  6:46:40 server id #  end_log_pos # CRC32 XXX  GTID #-#-# ddl
    +#170213 10:36:56 server id #  end_log_pos # CRC32 XXX  GTID #-#-# ddl
     /*!100101 SET @@session.skip_parallel_replication=0*//*!*/;
     /*!100001 SET @@session.gtid_domain_id=#*//*!*/;
     /*!100001 SET @@session.server_id=#*//*!*/;
     /*!100001 SET @@session.gtid_seq_no=#*//*!*/;
     # at #
    -#700101  6:46:40 server id #  end_log_pos # CRC32 XXX  Query   thread_id=#     exec_time=#     error_code=0
    +#170213 10:36:56 server id #  end_log_pos # CRC32 XXX  Query   thread_id=#     exec_time=#     error_code=0
     use `test`/*!*/;
     SET TIMESTAMP=XXX/*!*/;
     SET @@session.pseudo_thread_id=#/*!*/;
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit 3435e8a51552c3c73feab4b1c731dd8da225618c
Author: Nirbhay Choubey <nirbhay@mariadb.com>
Date:   Mon Dec 19 17:32:45 2016 -0500

    MDEV-7635: Part 1
    
    innodb_autoinc_lock_mode            = 2
    innodb_buffer_pool_dump_at_shutdown = ON
    innodb_buffer_pool_dump_pct         = 25
    innodb_buffer_pool_load_at_startup  = ON
    innodb_checksum_algorithm           = CRC32
    innodb_file_format                  = Barracuda
    innodb_large_prefix                 = ON
    innodb_log_compressed_pages         = ON
    innodb_purge_threads                = 4
    innodb_strict_mode                  = ON
    binlog_annotate_row_events          = ON
    binlog_format                       = MIXED
    binlog-row-event-max-size           = 8192
    group_concat_max_len                = 1M
    lock_wait_timeout                   = 86400
    log_slow_admin_statements           = ON
    log_slow_slave_statements           = ON
    log_warnings                        = 2
    max_allowed_packet                  = 16M
    replicate_annotate_row_events       = ON
    slave_net_timeout                   = 60
    sync_binlog                         = 1
    aria_recover                        = BACKUP,QUICK
    myisam_recover_options              = BACKUP,QUICK

commit 3c411e3ad66d0b4ddee2563deb621db249b94432
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Feb 8 12:48:25 2017 +0200

    Test fix for MDEV-6076 Persistent AUTO_INCREMENT for InnoDB
    
    Before killing the server, ensure that the redo log for the
    incomplete transaction is flushed, so that the AUTO_INCREMENT
    sequence will always be updated. Usually the INSERT
    transaction would not have persisted the sequence before the
    server was killed, but sometimes it could happen, causing
    result mismatch.
    
    Note: This test used to be called innodb_fts.innodb_fts_misc_debug.

commit cbdc389ec9cd9bac3f8fc8f4aea81669a629260f
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Feb 8 11:35:35 2017 +0200

    MDEV-12022 InnoDB wrongly ignores the end of an .ibd file
    
    InnoDB can wrongly ignore the end of data files when using
    innodb_page_size=32k or innodb_page_size=64k. These page sizes
    use an allocation extent size of 2 or 4 megabytes, not 1 megabyte.
    
    This issue does not affect MariaDB Server 10.2, which is using
    the correct WL#5757 code from MySQL 5.7.
    
    That said, it does not make sense to ignore the tail of data files.
    The next time the data file needs to be extended, it would be extended
    to a multiple of the extent size, once the size exceeds one extent.

commit 6da2adfaa203fd9f76a32fa314b3c14f11ecddc1
Author: Nirbhay Choubey <nirbhay@mariadb.com>
Date:   Tue Feb 7 13:54:46 2017 -0500

    MDEV-12005: GET_LOCK: Fractional part of timeout is ignored
    
    In order to include the fractional part, convert lock_wait_timeout
    (in secs) to nanoseconds before calculating the absolute time for
    timeout.

commit 9f0dbb3120fdc0474d606dc9c48e5f5f7a2c8484
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Feb 3 18:17:36 2017 +0200

    MDEV-11947 InnoDB purge workers fail to shut down
    
    srv_release_threads(): Actually wait for the threads to resume
    from suspension. On CentOS 5 and possibly other platforms,
    os_event_set() may be lost.
    
    srv_resume_thread(): A counterpart of srv_suspend_thread().
    Optionally wait for the event to be set, optionally with a timeout,
    and then release the thread from suspension.
    
    srv_free_slot(): Unconditionally suspend the thread. It is always
    in resumed state when this function is entered.
    
    srv_active_wake_master_thread_low(): Only call os_event_set().
    
    srv_purge_coordinator_suspend(): Use srv_resume_thread() instead
    of the complicated logic.

commit bc12d993d7bc94a9533028a258afc7e4ceb21e92
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Feb 2 18:17:46 2017 +0200

    MDEV-11947 InnoDB purge workers fail to shut down
    
    srv_release_threads(): Actually wait for the threads to resume
    from suspension. On CentOS 5 and possibly other platforms,
    os_event_set() may be lost.
    
    srv_resume_thread(): A counterpart of srv_suspend_thread().
    Optionally wait for the event to be set, optionally with a timeout,
    and then release the thread from suspension.
    
    srv_free_slot(): Unconditionally suspend the thread. It is always
    in resumed state when this function is entered.
    
    srv_active_wake_master_thread_low(): Only call os_event_set().
    
    srv_purge_coordinator_suspend(): Use srv_resume_thread() instead
    of the complicated logic.

commit cd8482c19e325355006adc8fc5591998be46e288
Author: Nirbhay Choubey <nirbhay@mariadb.com>
Date:   Mon Jan 30 14:49:44 2017 -0500

    MDEV-11945: Fix description for "max_statement_time" in --help
    
    max_statement_time also applies to non-SELECT queries.

commit 35809da2077e913eda7da75aec674593c74238af
Author: Thayumanavar S <thayumanavar.x.sachithanantha@oracle.com>
Date:   Mon Jan 30 03:16:09 2017 +0100

    WL#10287 - Backport WL#7195 to MySQL - 5.5
    
    This is backport of WL#7195 to MySQL-5.5. In 5.5, we
    offload connection authentication from the acceptor
    thread to tp worker threads.
    
    Connection authentication happens in the acceptor thread that
    accepts the connection for thread pool plugin. Connection authentication
    involves exchanging packets with client and disk I/O
    which is time consuming. This can cause other client
    connections to starve and wait in the queue possibly increasing the
    connect latency and decreasing throughput. In the worst case, some
    connections could be dropped. n addition, SSL handshakes are quite
    expensive and can stall connections in the accept queue.
    
    This patch offloads connection authentication when thread pool
    plugin is used for client connection. Each thread group
    shall have a queue of connection_context objects, which represents
    new connections that need to be processed by thread group threads.
    The connection context is composed of THD object & list pointers
    for intrusive queue implementation. Whenever a new connection
    arrives, connection context object is created and added to the
    queue. A new connect handler thread is created or woken up to handle
    the authentication task. The worker thread loop is modified to
    process connection events on connect handler threads in addition to
    checking for query processing events. The initial number of connect
    handler threads is one per thread group and it is restricted to
    a maximum of 4 threads per thread group.

commit 5c9baf54e7af994391aa0510f666b364ff2e657b
Author: Monty <monty@mariadb.org>
Date:   Fri Jan 27 16:46:26 2017 +0200

    Fix for memory leak in applications, like QT,that calls
    my_thread_global_init() + my_thrad_global_end() repeatadily.
    This caused THR_KEY_mysys to be allocated multiple times.
    
    Deletion of THR_KEY_mysys was originally in my_thread_global_end() but was
    moved to my_end() as DBUG uses THR_KEY_mysys and DBUG is released after
    my_thread_global_end() is called.
    
    Releasing DBUG before my_thread_global_end() and move THR_KEY_mysys back
    into my_thread_global_end() could be a solution, but as safe_mutex and other
    things called by my_thread_global_end is using DBUG it may not be completely
    safe.
    
    To solve this, I used the simple solution to add a marker that THR_KEY_mysys
    is created and not re-create it in my_thread_global_init if it already
    exists.

commit 406e113e9abc2139e40018ec7bd1b1fb018642c9
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Jan 26 14:05:00 2017 +0200

    MDEV-11915 Detect InnoDB system tablespace size mismatch early
    
    InnoDB would refuse to start up if there is a mismatch on
    the size of the system tablespace files. However, before this
    check is conducted, the system tablespace may already have been
    heavily modified.
    
    InnoDB should perform the size check as early as possible.
    
    recv_recovery_from_checkpoint_finish():
    Move the recv_apply_hashed_log_recs() call to
    innobase_start_or_create_for_mysql().
    
    innobase_start_or_create_for_mysql(): Test the mutex functionality
    before doing anything else. Use a compile_time_assert() for a
    sizeof() constraint. Check the size of the system tablespace as
    early as possible.

commit afb461587c0b7dea2e5e70a165e8d4d437c3f964
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Jan 26 14:05:00 2017 +0200

    MDEV-11915 Detect InnoDB system tablespace size mismatch early
    
    InnoDB would refuse to start up if there is a mismatch on
    the size of the system tablespace files. However, before this
    check is conducted, the system tablespace may already have been
    heavily modified.
    
    InnoDB should perform the size check as early as possible.
    
    recv_recovery_from_checkpoint_finish():
    Move the recv_apply_hashed_log_recs() call to
    innobase_start_or_create_for_mysql().
    
    innobase_start_or_create_for_mysql(): Test the mutex functionality
    before doing anything else. Use a compile_time_assert() for a
    sizeof() constraint. Check the size of the system tablespace as
    early as possible.

commit 10b1f4dd093cb2b21aa9ed09dc453bc52d028b3d
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Mon Jan 23 13:32:57 2017 +1100

    MDEV-11866: ANALYZE FORMAT=JSON not predicatable for r_total_time_ms/r_buffer_size
    
    [0-9]*[.]?[0-9]* wasn't a sufficient regex to cover the
    %lg used in Json_writer::add_double. Exponent formats
    where missed.
    
    Here we normalize all the replace_regex expressions for
    ANALYZE FORMAT=JSON into one include file.
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit d75d8631ed2d6af730931ea7079ec7e512e61796
Author: Monty <monty@mariadb.org>
Date:   Fri Jan 20 15:33:28 2017 +0200

    [MDEV-10570] Add Flashback support
    
    ==== Description ====
    
    Flashback can rollback the instances/databases/tables to an old snapshot.
    It's implement on Server-Level by full image format binary logs (--binlog-row-image=FULL), so it supports all engines.
    Currently, it’s a feature inside mysqlbinlog tool (with --flashback arguments).
    
    Because the flashback binlog events will store in the memory, you should check if there is enough memory in your machine.
    
    ==== New Arguments to mysqlbinlog ====
    
    --flashback (-B)
    It will let mysqlbinlog to work on FLASHBACK mode.
    
    ==== New Arguments to mysqld ====
    
    --flashback
    
    Setup the server to use flashback. This enables binary log in row mode
    and will enable extra logging for DDL's needed by flashback feature
    
    ==== Example ====
    
    I have a table "t" in database "test", we can compare the output with "--flashback" and without.
    
    #client/mysqlbinlog /data/mysqldata_10.0/binlog/mysql-bin.000001 -vv -d test -T t --start-datetime="2013-03-27 14:54:00" > /tmp/1.sql
    #client/mysqlbinlog /data/mysqldata_10.0/binlog/mysql-bin.000001 -vv -d test -T t --start-datetime="2013-03-27 14:54:00" -B > /tmp/2.sql
    
    Then, importing the output flashback file (/tmp/2.log), it can flashback your database/table to the special time (--start-datetime).
    And if you know the exact postion, "--start-postion" is also works, mysqlbinlog will output the flashback logs that can flashback to "--start-postion" position.
    
    ==== Implement ====
    
    1. As we know, if binlog_format is ROW (binlog-row-image=FULL in 10.1 and later), all columns value are store in the row event, so we can get the data before mis-operation.
    
    2. Just do following things:
    
      2.1 Change Event Type, INSERT->DELETE, DELETE->INSERT.
      For example:
        INSERT INTO t VALUES (...)  ---> DELETE FROM t WHERE ...
        DELETE FROM t ... ---> INSERT INTO t VALUES (...)
    
      2.2 For Update_Event, swapping the SET part and WHERE part.
      For example:
        UPDATE t SET cols1 = vals1 WHERE cols2 = vals2
        --->
        UPDATE t SET cols2 = vals2 WHERE cols1 = vals1
    
      2.3 For Multi-Rows Event, reverse the rows sequence, from the last row to the first row.
      For example:
        DELETE FROM t WHERE id=1; DELETE FROM t WHERE id=2; ...; DELETE FROM t WHERE id=n;
        --->
        DELETE FROM t WHERE id=n; ...; DELETE FROM t WHERE id=2; DELETE FROM t WHERE id=1;
    
      2.4 Output those events from the last one to the first one which mis-operation happened.
      For example:

commit 494e4b99a4a6c2f933c7e663cbb6ad5b17e8f84a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Jan 16 16:02:42 2017 +0200

    Remove MYSQL_TABLESPACES.
    
    MySQL 5.7 introduced partial support for user-created shared tablespaces
    (for example, import and export are not supported).
    
    MariaDB Server does not support tablespaces at this point of time.
    Let us remove most InnoDB code and data structures that is related
    to shared tablespaces.

commit 5dfab33c4ec54082daf034da99c4a796410fe4f3
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Thu Jan 12 00:33:21 2017 +0100

    MDEV-11551 Server crashes in Field::is_real_null
    
    sometimes table->s->stored_fields is less than table->s->null_fields

commit b948b5f7c64c6430d98dc31b7e9f71d990b40ec1
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sat Jan 14 21:23:00 2017 +0100

    bugfix: Item_func_min_max stored thd internally
    
    It was used for get_datetime_value() and for thd->is_error().
    
    But in fact, get_datetime_value() never used thd argument, because the
    cache ptr argument was NULL. And thd->is_error() check was not needed
    at that place at all.

commit 798fcb541698cbf51f1ee33f44b023c11dc2b784
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sat Jan 14 20:55:33 2017 +0100

    bugfix: cmp_item_row::alloc_comparators() allocated on the wrong arena
    
    it used current_thd->alloc() and allocated on the thd's execution arena,
    not on table->expr_arena.
    
    Remove THD::arena_for_cached_items that is temporarily set in
    update_virtual_fields(), and replaces THD arena in get_datetime_value().
    Instead set THD arena to table->expr_arena for the whole  duration
    of update_virtual_fields()

commit 67e2028161d1f653a852f1a4679ff5e523296218
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sat Jan 14 14:56:01 2017 +0100

    MDEV-9690 concurrent queries with virtual columns crash in temporal code
    
    Item_func_le included Arg_comparator. Arg_comparator remembered
    the current_thd during fix_fields and used that value during
    execution to allocate Item_cache in get_datetime_value().
    But for vcols fix_fields and val_int can happen in different threads.
    
    Same bug for Item_func_in using in_datetime or cmp_item_datetime,
    both also remembered current_thd at fix_fields() to use it later
    for get_datetime_value().
    
    As a fix, these objects no longer remember the current_thd,
    and get_datetime_value() uses current_thd at run time. This
    should not increase the number of current_thd calls much, as
    Item_cache is created only once anyway.

commit 0d1d0d77f2a72d9cb6de0489dceb37644caf9037
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Wed Jan 11 19:12:21 2017 +0100

    MDEV-11706 Assertion `is_stat_field || !table || (!table->write_set || bitmap_is_set(table->write_set, field_index) || (table->vcol_set && bitmap_is_set(table->vcol_set, field_index)))' failed in Field_time::store_TIME_with_warning
    
    vcols and triggers. Revert 094f4cf77890c5a747a57cf2bed149b0b6933507,
    backport the correct fix (Table_triggers_list::mark_fields_used() not
    marking vcols) from 10.2.

commit ea1b25046c81db8fdf59130126d57cfb42737ba5
Author: Monty <monty@mariadb.org>
Date:   Fri Dec 30 11:07:44 2016 +0200

    New simpler bugfix for UPDATE and virtual BLOBs
    
    When updating a table with virtual BLOB columns, the following might
    happen:
    - an old record is read from the table, it has no virtual blob values
    - update_virtual_fields() is run, vcol blob gets its value into the
      record. But only a pointer to the value is in the table->record[0],
      the value is in Field_blob::value String (but it doesn't have to be!
      it can be in the record, if the column is just a copy of another
      columns: ... b VARCHAR, c BLOB AS (b) ...)
    - store_record(table,record[1]), old record now is in record[1]
    - fill_record() prepares new values in record[0], vcol blob is updated,
      new value replaces the old one in the Field_blob::value
    - now both record[1] and record[0] have a pointer that points to the
      *new* vcol blob value. Or record[1] has a pointer to nowhere if
       Field_blob::value had to realloc.
    
    To fix this I have introduced a new String object 'read_value' in
    Field_blob.  When updating virtual columns when a row has been read,
    the allocated value is stored in 'read_value' instead of 'value'.  The
    allocated blobs for the new row is stored in 'value' as before.
    
    I also made, as a safety precaution, the insert delayed handling of
    blobs more general by using value to store strings instead of the
    record.  This ensures that virtual functions on delayed insert should
    work in as in the case of normal insert.
    
    Triggers are now properly updating the read, write and vcol maps for used
    fields. This means that we don't need VCOL_UPDATE_FOR_READ_WRITE anymore
    and there is no need for any other special handling of triggers in
    update_virtual_fields().
    
    To be able to test how many times virtual fields are invoked, I also
    relaxed rules that one can use local (@) variables in DEFAULT and non
    persistent virtual field expressions.

commit 1628a2ae27cfc8b96e4b50d85d430955625e2d88
Author: Monty <monty@mariadb.org>
Date:   Tue Dec 27 01:30:20 2016 +0200

    Fixed issues found by buildbot
    
    - MDEV-11621 rpl.rpl_gtid_stop_start fails sporadically in buildbot
    - MDEV-11620 rpl.rpl_upgrade_master_info fails sporadically in buildbot
    
    The issue above was probably that the build machine was overworked and the
    shutdown took longer than 30 resp 10 seconds, which caused MyISAM tables
    to be marked as crashed.
    Fixed by flushing myisam tables before doing a forced shutdown/kill.
    I also increased timeout for forced shutdown from 10 seconds to 60 seconds
    to fix other possible issues on slow machines.
    
    Fixed also some compiler warnings

commit ed0bc17bee591599c988df21b8d5a264f08eb885
Author: Monty <monty@mariadb.org>
Date:   Tue Dec 20 13:03:45 2016 +0200

    Removed usage of my_hash_search() with uninitialized HASH.
    
    - Not documented on intened usage
    - Extra checking takes time for all HASH usage

commit 384f4d1e36cf2ba8791b15c83ac601b98f3270c0
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Sat Jan 7 15:27:59 2017 +0200

    Post-push fix for MDEV-11556: Make the debug variable UINT.
    
    Sometimes innodb_data_file_size_debug was reported as INT UNSIGNED
    instead of BIGINT UNSIGNED. Make it uint instead of ulong to get
    a more deterministic result.

commit 43378f367c5c01ebc214919006e2072fb2356724
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Mon Jul 25 13:07:50 2016 +0200

    MDEV-10271: Stopped SQL slave thread doesn't print a message to error log like IO thread does
    
    Make the slave SQL thread always output to the error log the message "Slave
    SQL thread exiting, replication stopped in ..." whenever it previously
    outputted "Slave SQL thread initialized, starting replication ...".
    
    Before this patch, it was somewhat inconsistent in which cases the message
    would be output and in which not, depending on the exact time and cause of
    the condition that caused the SQL thread to stop.

commit 670b85804ca6d3b0e640a7ddbb5b6e494bec7c2b
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Sun Jan 1 15:36:56 2017 +0200

    Replication tests fail on valgrind due to waiting-related timeouts
    
    MTR raises default wait_for_pos_timeout from 300 to 1500 when tests
    are run with valgrind. The same needs to be done for other
    replication-related waits.
    
    The change should fix one of failures mentioned in MDEV-10653
    (rpl.rpl_parallel fails in buildbot with timeout), the one
    on the valgrind builder; but not all of them

commit 5302ef2c955d98bf3b1fb1f94c036d904c8af922
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Sun Jan 1 23:13:04 2017 +0200

    MDEV-11700 funcs_2.innodb_charset fails in buldbot on valgrind builder with timeout
    
    When the test is run as a part of the suite with valgrind,
    only allow it to be executed if --big-test is set.
    If the test is run by specifying its name explicitly, it
    will still be executed, even with valgrind without big-test,
    MTR has special logic for that

commit f1ee011a6cbda1069a6ec9b5e2428451a64861fd
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Wed Jan 4 23:05:22 2017 +0200

    MDEV-11722 main.join_cache fails in buildbot on very slow builders
    
    The guilty part of the test checks for performance degradation on
    a query with numerous joins on an empty table. The test expects
    the query to take less than 1 second, and fails if it is not so
    (which can happen on very slow builders).
    
    The solution is to add more JOINs to the query. On a fixed server,
    it should not have any noticeable impact on the query execution,
    while on the unfixed version the query would take several times
    longer (e.g. 6.5 sec vs 1.5 sec). Thus, we can increase the margin
    for the error, and make the test fail when the query takes longer
    than 5 seconds.

commit 719321e78e69249e796a907c17400dac14ef0921
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Jan 4 18:43:32 2017 +0200

    MDEV-11638 Encryption causes race conditions in InnoDB shutdown
    
    InnoDB shutdown failed to properly take fil_crypt_thread() into account.
    The encryption threads were signalled to shut down together with other
    non-critical tasks. This could be much too early in case of slow shutdown,
    which could need minutes to complete the purge. Furthermore, InnoDB
    failed to wait for the fil_crypt_thread() to actually exit before
    proceeding to the final steps of shutdown, causing the race conditions.
    
    Furthermore, the log_scrub_thread() was shut down way too early.
    Also it should remain until the SRV_SHUTDOWN_FLUSH_PHASE.
    
    fil_crypt_threads_end(): Remove. This would cause the threads to
    be terminated way too early.
    
    srv_buf_dump_thread_active, srv_dict_stats_thread_active,
    lock_sys->timeout_thread_active, log_scrub_thread_active,
    srv_monitor_active, srv_error_monitor_active: Remove a race condition
    between startup and shutdown, by setting these in the startup thread
    that creates threads, not in each created thread. In this way, once the
    flag is cleared, it will remain cleared during shutdown.
    
    srv_n_fil_crypt_threads_started, fil_crypt_threads_event: Declare in
    global rather than static scope.
    
    log_scrub_event, srv_log_scrub_thread_active, log_scrub_thread():
    Declare in static rather than global scope. Let these be created by
    log_init() and freed by log_shutdown().
    
    rotate_thread_t::should_shutdown(): Do not shut down before the
    SRV_SHUTDOWN_FLUSH_PHASE.
    
    srv_any_background_threads_are_active(): Remove. These checks now
    exist in logs_empty_and_mark_files_at_shutdown().
    
    logs_empty_and_mark_files_at_shutdown(): Shut down the threads in
    the proper order. Keep fil_crypt_thread() and log_scrub_thread() alive
    until SRV_SHUTDOWN_FLUSH_PHASE, and check that they actually terminate.

commit e5d7fc967ede53407a65bfde3faec3181e35f19f
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Wed Jan 4 13:03:30 2017 +0200

    MDEV-10100 main.pool_of_threads fails sporadically in buildbot
    
    Backport the fix to 5.5, because it fails there too
    
    The patch fixes two test failures:
    - on slow builders, sometimes a connection attempt which should
      fail due to the exceeded number of thread_pool_max_threads
      actually succeeds;
    - on even slow builders, MTR sometimes cannot establish the
      initial connection, and check-testcase fails prior to the
      test start
    
    The problem with check-testcase was caused by connect-timeout=2
    which was set for all clients in the test config file. On slow
    builders it might be not enough.
    There is no way to override it for the pre-test check, so it needed
    to be substantially increased or removed.
    
    The other problem was caused by a race condition between sleeps
    that the test performs in existing connections and the connect
    timeout for the connection attempt which was expected to fail.
    If sleeps finished before the connect-timeout was exceeded, it
    would allow the connection to succeed.
    
    To solve each problem without making the other one worse,
    connect-timeout should be configured dynamically during the test.
    Due to the nature of the test (all connections must be busy
    at the moment when we need to change the timeout, and cannot execute
    SET GLOBAL ...), it needs to be done independently from the server.
    
    The solution:
    - recognize 'connect_timeout' as a connection option in mysqltest's
      "connect" command;
    - remove connect-timeout from the test configuration file;
    - use the new connect_timeout option for those connections which
      are expected to fail;
    - re-arrange the test flow to allow running a huge SLEEP
      without affecting the test execution time (because it would be
      interrupted after the main test flow is finished).
    
    The test is still subject to false negatives, e.g. if the connection
    fails due to timeout rather than due to the exceeded number of
    allowed threads, or if the connection on extra port succeeds due
    to a race condition and not because the special logic for the extra
    port. But those false negatives have always been possible there
    on slow builders, they should not be critical because faster builders
    should catch such failures if they appear.
    
    Conflicts:
            client/mysqltest.cc
            mysql-test/r/pool_of_threads.result
            mysql-test/t/pool_of_threads.test

commit 4c610d10d400938481e418d8798279d61ff41d26
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 3 09:44:44 2017 +0200

    Post-fix for MDEV-11195 NUMA does not get enabled even when checks are passed
    
    The C preprocessor symbol WITH_NUMA is never defined. Instead, the symbol
    HAVE_LIBNUMA is used for checking if the feature is to be used.
    
    If cmake -DWITH_NUMA=OFF is specified, HAVE_LIBNUMA will not be defined
    at compilation time even if the library is available.
    
    If cmake -DWITH_NUMA=ON is specified but the library is not available
    at configuration time, the compilation will be aborted.

commit 3871477c40efc826805f4c4e35b006c2c233dd26
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Sun Jan 1 20:06:03 2017 +0200

    MDEV-10100 main.pool_of_threads fails sporadically in buildbot
    
    The patch fixes two test failures:
    - on slow builders, sometimes a connection attempt which should
      fail due to the exceeded number of thread_pool_max_threads
      actually succeeds;
    - on even slow builders, MTR sometimes cannot establish the
      initial connection, and check-testcase fails prior to the
      test start
    
    The problem with check-testcase was caused by connect-timeout=2
    which was set for all clients in the test config file. On slow
    builders it might be not enough.
    There is no way to override it for the pre-test check, so it needed
    to be substantially increased or removed.
    
    The other problem was caused by a race condition between sleeps
    that the test performs in existing connections and the connect
    timeout for the connection attempt which was expected to fail.
    If sleeps finished before the connect-timeout was exceeded, it
    would allow the connection to succeed.
    
    To solve each problem without making the other one worse,
    connect-timeout should be configured dynamically during the test.
    Due to the nature of the test (all connections must be busy
    at the moment when we need to change the timeout, and cannot execute
    SET GLOBAL ...), it needs to be done independently from the server.
    
    The solution:
    - recognize 'connect_timeout' as a connection option in mysqltest's
      "connect" command;
    - remove connect-timeout from the test configuration file;
    - use the new connect_timeout option for those connections which
      are expected to fail;
    - re-arrange the test flow to allow running a huge SLEEP
      without affecting the test execution time (because it would be
      interrupted after the main test flow is finished).
    
    The test is still subject to false negatives, e.g. if the connection
    fails due to timeout rather than due to the exceeded number of
    allowed threads, or if the connection on extra port succeeds due
    to a race condition and not because the special logic for the extra
    port. But those false negatives have always been possible there
    on slow builders, they should not be critical because faster builders
    should catch such failures if they appear.

commit dc9f5dfcbb8efbc7c1f178313f945981b01d229b
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Tue Dec 27 20:41:32 2016 +0200

    Replication tests fail on valgrind due to waiting-related timeouts
    
    MTR raises default wait_for_pos_timeout from 300 to 1500 when tests
    are run with valgrind. The same needs to be done for other
    replication-related waits

commit e00810b934fd495009c1b8d47446714bdbc0b249
Author: Shishir Jaiswal <shishir.j.jaiswal@oracle.com>
Date:   Thu Dec 22 14:56:02 2016 +0530

    Bug#11751149 - TRYING TO START MYSQL WHILE ANOTHER INSTANCE
                   IS STARTING: CONFUSING ERROR
    
    DESCRIPTION
    ===========
    When mysql server processes transactions but has not yet
    committed and shuts down abnormally (due to crash, external
    killing etc.), a recovery is due from Storage engine side
    which takes place the next time mysql server (either
    through mysqld or mysqld_safe) is run.
    
    While the 1st server is in mid of recovery, if another
    instance of mysqld_safe is made to run, it may result into
    2nd instance killing the 1st one after a moment.
    
    ANALYSIS
    ========
    In the "while true" loop, we've a check (which is done
    after the server stops) for the existence of pid file to
    enquire if it was a normal shutdown or not. If the file is
    absent, it means that the graceful exit of server had
    removed this file.
    
    However if the file is present, the scripts makes a plain
    assumption that this file is leftover of the "current"
    server. It misses to consider that it could be a valid pid
    file belonging to another running mysql server.
    
    We need to add more checks in the latter case. The script
    should extract the PID from this existing file and check if
    its running or not. If yes, it means an older instance of
    mysql server is running and hence the script should abort.
    
    FIX
    ===
    Checking the status of process (alive or not) by adding a
    @CHECK_PID@ in such a case. Aborting if its alive. Detailed
    logic is as follows:
    
    - The mysqld_safe script would quit at start only as soon
    as it finds that there is an active PID i.e. a mysql server
    is already running.
    - The PID file creation takes place after InnoDb recovery,
    which means in rare case (when PID file isn't created yet)
    it may happen that more than 1 server can come up but even
    in that case others will have to wait till the 1st server
    has released the acquired InnoDb lock. In this case all
    these servers will either TIMEOUT waiting for InnoDb lock
    or after this they would find that the 1st server is
    already running (by reading $pid_file) and would abort.
    - Our core fix is that we now check the status of mysql
    server process (alive or not) after the server stops
    running within the loop of "run -> shutdown/kill/abort ->
    run ... ", so that only the script who owns the mysql
    server would be able to bring it down if required.
    
    NOTE
    ====
    Removed the deletion of pid file and socket file from entry
    of the loop, as it may result in 2nd instance deleting
    these files created by 1st instance in RACE condition.
    Compensated this by deleting these files at end of the loop
    
    Reverted the changes made in patch to Bug#16776528. So
    after this patch is pushed, the concept of mysqld_safe.pid
    would go altogether. This was required as the script was
    deleting other instance's mysqld_safe.pid allowing multiple
    mysqld_safe instances to run in parallel. This patch would
    fix Bug#16776528 as well as the resources would be guarded
    anyway by InnoDb lock + our planned 5.7 patch.

commit 561b6d213c2c03d92a5b951d6e434604cf79dbf9
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Dec 20 22:46:29 2016 +0200

    Revert "Merge pull request #275 from grooverdan/10.2-MDEV-11075-crc32-runtime-detect-getauxval"
    
    This reverts commit edf4cc7519b84a2e00b5284761781352b3d376f3, reversing
    changes made to 9320d8ae30c18420bef659618175836221d363ea.

commit 8375a2c1cec3c386f6db797d75f64b8f03c83b37
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Dec 16 16:36:54 2016 +0200

    MDEV-11585 Hard-code the shared InnoDB temporary tablespace ID at -1
    
    MySQL 5.7 supports only one shared temporary tablespace.
    
    MariaDB 10.2 does not support any other shared InnoDB tablespaces than
    the two predefined tablespaces: the persistent InnoDB system tablespace
    (default file name ibdata1) and the temporary tablespace
    (default file name ibtmp1).
    
    InnoDB is unnecessarily allocating a tablespace ID for the predefined
    temporary tablespace on every startup, and it is in several places
    testing whether a tablespace ID matches this dynamically generated ID.
    
    We should use a compile-time constant to reduce code size and to avoid
    unnecessary updates to the DICT_HDR page at every startup.
    
    Using a hard-coded tablespace ID will should make it easier to remove the
    TEMPORARY flag from FSP_SPACE_FLAGS in MDEV-11202.

commit 2f6fede8d5f7e98319b4b7b557bd565fdb42fac3
Author: Alexander Barkov <bar@mariadb.org>
Date:   Mon Dec 19 14:28:08 2016 +0400

    MDEV-10524 Assertion `arg1_int >= 0' failed in Item_func_additive_op::result_precision()
    
    This change is a backport from 10.0 to 5.5 for:
    1. The full patch for:
         MDEV-4841 Wrong character set of ADDTIME() and DATE_ADD()
         9adb6e991ec87b65d04929f115d9d0c899e4ab19
    
    2. A small fragment of:
         MDEV-5298 Illegal mix of collations on timestamp
         03f6778d61a74bdd7d09103a16473a2a5624cf66
       which overrides Item_temporal_hybrid_func::cmp_type(),
       and adds a new line into cache_temporal_4265.result.

commit b2b210b891697f999a9f85037462d54f78707e3e
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Fri Dec 16 17:42:21 2016 +0100

    MDEV-11543 Buildbot tests fail with warnings on server shutdown after rpl.rpl_row_mysqlbinlog
    
    double the timeout for threads to die on shutdown

commit b03b38dd6515e60689adb6c9ca57d9612618e2bf
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Fri Dec 16 10:10:08 2016 +0100

    cleanup: rpl.rpl_row_mysqlbinlog
    
    some trivial simplifications. drinking the ocean,
    one drop at a time

commit e86580c3dda707788fb0ca35244cf602d7e8d50d
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Thu Dec 15 18:20:58 2016 +0100

    MDEV-11552 Queries executed by event scheduler are written to slow log incorrectly or not written at all
    
    because thd->update_server_status() is used to measure the query time
    for the slow log (not only to set protocol level flags),
    it needs to be called also when the server isn't going to send
    anything to the client.

commit 211cf9321a91b12eaef3d7968adc699085dbb54e
Author: Alexey Botchkov <holyfoot@askmonty.org>
Date:   Fri Dec 16 18:37:11 2016 +0400

    MDEV-11510 Audit plugin sometimes causes server to crash when using with MySQL.
    
            MySQL has a bug failing to handle
               MYSQL_THDVAR_STR(...  PLUGIN_VAR_NOSYSVAR |
                                     PLUGIN_VAR_NOCMDOPT | PLUGIN_VAR_MEMALLOC)
            so fall back to just PLUGIN_VAR_READONLY | PLUGIN_VAR_MEMALLOC
            whem MySQL started.

commit cb0ce5c2e9cafb8f3c41d45a28292f1898ccdbd3
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Dec 16 10:19:14 2016 +0200

    MDEV-6076: Optimize the test.
    
    Remove unnecessary restarts by testing multiple tables across a restart.
    This change almost halves the execution time.
    Some further restarts could be removed with additional effort.

commit 8777458a6eb73ac1d7d864ebac390ea7039e21c1
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Dec 14 19:56:39 2016 +0200

    MDEV-6076 Persistent AUTO_INCREMENT for InnoDB
    
    This should be functionally equivalent to WL#6204 in MySQL 8.0.0, with
    the notable difference that the file format changes are limited to
    repurposing a previously unused data field in B-tree pages.
    
    For persistent InnoDB tables, write the last used AUTO_INCREMENT
    value to the root page of the clustered index, in the previously
    unused (0) PAGE_MAX_TRX_ID field, now aliased as PAGE_ROOT_AUTO_INC.
    Unlike some other previously unused InnoDB data fields, this one was
    actually always zero-initialized, at least since MySQL 3.23.49.
    
    The writes to PAGE_ROOT_AUTO_INC are protected by SX or X latch on the
    root page. The SX latch will allow concurrent read access to the root
    page. (The field PAGE_ROOT_AUTO_INC will only be read on the
    first-time call to ha_innobase::open() from the SQL layer. The
    PAGE_ROOT_AUTO_INC can only be updated when executing SQL, so
    read/write races are not possible.)
    
    During INSERT, the PAGE_ROOT_AUTO_INC is updated by the low-level
    function btr_cur_search_to_nth_level(), adding no extra page
    access. [Adaptive hash index lookup will be disabled during INSERT.]
    
    If some rare UPDATE modifies an AUTO_INCREMENT column, the
    PAGE_ROOT_AUTO_INC will be adjusted in a separate mini-transaction in
    ha_innobase::update_row().
    
    When a page is reorganized, we have to preserve the PAGE_ROOT_AUTO_INC
    field.
    
    During ALTER TABLE, the initial AUTO_INCREMENT value will be copied
    from the table. ALGORITHM=COPY and online log apply in LOCK=NONE will
    update PAGE_ROOT_AUTO_INC in real time.
    
    innodb_col_no(): Determine the dict_table_t::cols[] element index
    corresponding to a Field of a non-virtual column.
    (The MySQL 5.7 implementation of virtual columns breaks the 1:1
    relationship between Field::field_index and dict_table_t::cols[].
    Virtual columns are omitted from dict_table_t::cols[]. Therefore,
    we must translate the field_index of AUTO_INCREMENT columns into
    an index of dict_table_t::cols[].)
    
    Upgrade from old data files:
    
    By default, the AUTO_INCREMENT sequence in old data files would appear
    to be reset, because PAGE_MAX_TRX_ID or PAGE_ROOT_AUTO_INC would contain
    the value 0 in each clustered index page. In new data files,
    PAGE_ROOT_AUTO_INC can only be 0 if the table is empty or does not contain
    any AUTO_INCREMENT column.
    
    For backward compatibility, we use the old method of
    SELECT MAX(auto_increment_column) for initializing the sequence.
    
    btr_read_autoinc(): Read the AUTO_INCREMENT sequence from a new-format
    data file.
    
    btr_read_autoinc_with_fallback(): A variant of btr_read_autoinc()
    that will resort to reading MAX(auto_increment_column) for data files
    that did not use AUTO_INCREMENT yet. It was manually tested that during
    the execution of innodb.autoinc_persist the compatibility logic is
    not activated (for new files, PAGE_ROOT_AUTO_INC is never 0 in nonempty
    clustered index root pages).
    
    initialize_auto_increment(): Replaces
    ha_innobase::innobase_initialize_autoinc(). This initializes
    the AUTO_INCREMENT metadata. Only called from ha_innobase::open().
    
    ha_innobase::info_low(): Do not try to lazily initialize
    dict_table_t::autoinc. It must already have been initialized by
    ha_innobase::open() or ha_innobase::create().
    
    Note: The adjustments to class ha_innopart were not tested, because
    the source code (native InnoDB partitioning) is not being compiled.

commit 441fa0056da27e83771a7d7ccd09da8b38f22417
Author: Igor Babaev <igor@askmonty.org>
Date:   Wed Dec 14 10:11:52 2016 -0800

    Fixed bug mdev-11488.
    
    The patch for bug mdev-10882 tried to fix it by providing an
    implementation of the virtual method build_clone for the class
    Item_cache. It's turned out that it is not easy provide a valid
    implementation for Item_cache::build_clone(). At the same time
    if the condition that can be pushed into a materialized view
    contains a cached item this item can be substituted for a basic
    constant of the same value. In such a way we can avoid building
    proper clones for Item_cache objects when constructing pushdown
    conditions.

commit 1cae1af6f9286ca6695206ce20c63bb639c60310
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Mon Nov 7 22:35:02 2016 +0100

    MDEV-5800 InnoDB support for indexed vcols
    
      * remove old 5.2+ InnoDB support for virtual columns
      * enable corresponding parts of the innodb-5.7 sources
      * copy corresponding test cases from 5.7
      * copy detailed Alter_inplace_info::HA_ALTER_FLAGS flags from 5.7
         - and more detailed detection of changes in fill_alter_inplace_info()
      * more "innodb compatibility hooks" in sql_class.cc to
         - create/destroy/reset a THD (used by background purge threads)
         - find a prelocked table by name
         - open a table (from a background purge thread)
    
      * different from 5.7:
        - new service thread "thd_destructor_proxy" to make sure all THDs are
          destroyed at the correct point in time during the server shutdown
        - proper opening/closing of tables for vcol evaluations in
           + FK checks (use already opened prelocked tables)
           + purge threads (open the table, MDLock it, add it to tdc, close
             when not needed)
        - cache open tables in vc_templ
        - avoid unnecessary allocations, reuse table->record[0] and table->s->default_values
        - not needed in 5.7, because it overcalculates:
          + tell the server to calculate vcols for an on-going inline ADD INDEX
          + calculate vcols for correct error messages
    
      * update other engines (mroonga/tokudb) accordingly

commit edf4cc7519b84a2e00b5284761781352b3d376f3
Merge: 9320d8ae30c e76183f0996
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Dec 12 09:56:42 2016 +0200

    Merge pull request #275 from grooverdan/10.2-MDEV-11075-crc32-runtime-detect-getauxval
    
    MDEV-11075: Power - runtime detection of optimized instructions

commit e76183f0996ba97bf987f2b2d3e7f12d32055703
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Mon Dec 12 15:35:08 2016 +1100

    MDEV-11075: Power - runtime detection of optimized instructions
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit 473fb9295db547136bedcc6aae4bae4fcfb5c4f0
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Thu Dec 8 11:55:35 2016 +1100

    MDEV-11454: Improve test case innodb_buffer_pool_dump_pct
    
    Based off feedback from Marko Mäkelä:
    * Don't set timeouts on restart.
    * Use innodb_fast_shutdown=0
    
    Also:
    
    Set innodb_buffer_pool_instances=1 - adds predicability to tests
    - if a biased pool is used less pages could be saved.
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit c32d3e16f37b0b3581ee03d4b3681add890112da
Author: Alexander Barkov <bar@mariadb.org>
Date:   Wed Dec 7 18:05:13 2016 +0400

    MDEV-10787 Assertion `ltime->neg == 0' failed in void date_to_datetime(MYSQL_TIME*)

commit 1e3f351e92b94a35825e2c9867c5be5e1e2d0618
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Thu Oct 6 07:47:49 2016 +0200

    MDEV-11454: Make innodb_buffer_pool_dump_pct refer to the entire buffer pool size
    
    Rather than innodb_buffer_pool_dump_pct referring to the percentage of hot data
    in the buffer pool, it refers to the entire buffer pool size. This means that a
    completed load followed by a shutdown will write the exact same data.
    
    The problem was:
    
    With innodb_buffer_pool_dump_pct say 25% (the default since 10.2.2), a server
    started will restore 25% of the buffer pool size with the expectation that over
    time the rest of the buffer pool will be populated. Then on shutdown 25% will
    be saved.
    
    If a server is started and then is shutdown a) without much activity occurring
    b) is started as a hot spare and shutdown before being used, then 6.25% (25%
    of 25%) of the buffer pool is saved.
    
    This will generate bigger dump files for users who don't have a full
    innodb_buffer_pool however a realistic scenario is a buffer pool should be
    completely used.
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit 4f90605a3d1e3f20e8ae79c869958e475685dc45
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Sat Dec 3 14:56:38 2016 +0000

    MariaRocks port: make datetime-aware tests work in any timezone
    
    This fixes
    - rocksdb.col_opt_not_null
    - rocksdb.col_opt_null
    - rocksdb.type_date_time

commit f2219fe94d1da1da59cb39784e04ffb587c37c91
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Fri Dec 2 13:59:31 2016 +0000

    MDEV-11462: MariaRocks: rocksdb.type_float_indexes fails
    
    Also do similar result updates for:
    - rocksdb.type_date_time_indexese
    - rocksdb.type_fixed_indexes

commit dbdef41a59ced64e21cd6c9059ce85496662212b
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Tue Nov 29 08:41:45 2016 +0200

    MDEV-10686: innodb_zip.innodb_prefix_index_liftedlimit failed with timeout in buildbot
    
    Test moved to big_test and not run with valgrind because of timeout.

commit 9f31949b6460e7bd27daa8cbcaeb0343836e5352
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Tue Nov 29 08:35:51 2016 +0200

    MDEV-10739: encryption.innodb-page_encryption_compression fails with timeout on valgrind
    
    Test moved to big_test and not run on valgrind. Test heavy especially on debug builds.

commit dd0ff30278cd7b24776ccf36a9c0d9171a569750
Author: Alexander Barkov <bar@mariadb.org>
Date:   Tue Nov 29 06:51:12 2016 +0400

    MDEV-11343 LOAD DATA INFILE fails to load data with an escape character followed by a multi-byte character
    
    Partially backporting MDEV-9874 from 10.2 to 10.0
    
    READ_INFO::read_field() raised the ER_INVALID_CHARACTER_STRING error
    when reading an escape character followed by a multi-byte character.
    
    Raising wellformedness errors in READ_INFO::read_field() was wrong,
    because the main goal of READ_INFO::read_field() is to *unescape* the
    data which was presumably escaped using mysql_real_escape_string(),
    using the same character set with the one specified in
    "LOAD DATA INFILE ... CHARACTER SET ..." (or assumed by default).
    
    During LOAD DATA, multi-byte characters are not always scanned as a single
    entity! In case of escaped data, parts of a multi-byte character can be
    scanned on different loop iterations. So the old code erroneously tested
    welformedness in the middle of a multi-byte character.
    
    Moreover, the data after unescaping can go into a BLOB field, not a text field.
    Wellformedness tests are meaningless in this case.
    
    Ater this patch, wellformedness is only checked later, during
    Field::store(str,length,cs) time. The loop that scans bytes only
    makes sure to revert the changes made by mysql_real_escape_string().
    
    Note, in some cases users can supply data which did not really go through
    mysql_real_escape_string() and was escaped by some other means,
    or was not escaped at all. The file reported in this MDEV contains
    the string "\ä", which is an example of such improperly escaped data, as
    - either there should be two backslashes:   "\\ä"
    - or there should be no backslashes at all: "ä"
    mysql_real_escape_string() could not generate "\ä".

commit d145d1b6ee42ffa7f9ca2ce02478a31a09f3fe99
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Wed Nov 23 12:29:38 2016 +0100

    fix bogus stalls in the lock tree for low concurrency applications
    
    Merge into the MariaDB tree the pull request from Rich Prohaska for
    PerconaFT. These changes are needed to get parallel replication to
    work with TokuDB. Once the pull request is accepted by Percona and the new upstream version enters MariaDB, this commit can be superseded.
    
    Original commit message from Rich Prohaska:
    
        1. Fix the release before wait race
    
        The release before wait race occurs when a lock is released by transaction A after transaction B tried to acquire it but before transaction B has a chance to register it's pending lock request.  There are several ways to fix this problem, but we want to optimize for the common situation of minimal lock conflicts, which is what the lock acquisition algorithm currently does.  Our solution to the release before wait race is for transaction B to retry its lock request after its lock request has been added to the pending lock set.
    
        2. Fix the retry race
    
        The retry race occurs in the current lock retry algorithm which assumes that if some transaction is running lock retry, then my transaction does not also need to run it.  There is a chance that some pending lock requests will be skipped, but these lock requests will eventually time out.  For applications with small numbers of concurrent transactions, timeouts will frequently occur, and the application throughput will be very small.
    
        The solution to the retry race is to use a group retry algorithm.  All threads run through the retry logic.  Sequence numbers are used to group retries into batches such that one transaction can run the retry logic on behalf of several transactions.  This amortizes the retry cost.  The sequence numbers also ensure that when a transaction releases its locks, all of the pending lock requests that it is blocking are retried.
    
        3. Implement a mechanism to find and kill a pending lock request
    
        Tags lock requests with a client id, use the client id as a key into the pending lock requests sets to find a lock request, complete the lock request with a lock timeout error.
    
        Copyright (c) 2016, Rich Prohaska
        All rights reserved.
    
        Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
    
        1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    
        2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

commit dcfe6cb834b8106e384e24ac038cf6a6456fa9ee
Author: Otto Kekäläinen <otto@mariadb.org>
Date:   Sun Nov 13 01:10:41 2016 +0200

    Deb: make libmariadb3 to provide the libmariadbclient.so.18 link
    
    In Debian many existing applications in Debian/Ubuntu have been built
    while libmariadbclient-dev or libmariadbclient-dev-compat was installed.
    
    To satisfy installation dependencies, the package name libmariadbclient18
    must be provided, and at runtime a shared library must by the name
    libmariadbclient.so.18.
    
    Provide these to remain backwards compatible.

commit 2bcc16c17b290d319364bd4c75be8140b5e3c29f
Author: Otto Kekäläinen <otto@mariadb.org>
Date:   Thu Nov 17 22:12:42 2016 +0200

    Deb: rename client library packages to reflect its contents
    
    The new library name libmariadb3 matches the libmariadb.so.3 filename.
    Packages that want to build against MariaDB Connector C have as
    build-dependency libmariadb-dev and as run-time dependency libmariadb3.
    
    Make the package provide libmariadbclient18 for backwards compatibility,
    though compatibility is not always assured. There library did change
    to a whole new generation after all, even though ABI compatibility has
    been a design goal.
    
    Also do the equivalent change for the -dev package. Packages that
    explicitly want to use the MariaDB Connector C should mark it as
    their build-depends.
    
    Also provide an empty libmariadbclient18 metapackage to facilitate
    upgrades from old MariaDB installs, just like there is an empty
    libmysqlclient18 package. Create more of these in the future as needed.

commit 45049864b47475b6f9b24319b1a23096fc29aa19
Author: Otto Kekäläinen <otto@mariadb.org>
Date:   Fri Nov 18 18:28:01 2016 +0200

    Deb: install libmysqld.so and libmysqld.so.19 in correct packages
    
    The versioned so-file belongs to the run-time package and the unversioned
    symlink shall be in the development package.

commit 826753942fbedba51d97d1eff03e4d03699f6217
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Sat Nov 12 09:20:36 2016 +0000

    MariaRocks port: temporarily? update ER_LOCK_WAIT_TIMEOUT error messages
    
    facebook/mysql-5.6 has error messages with extra info, MariaDB doesn't
    have extra info:
    -ERROR HY000: Lock wait timeout exceeded; try restarting transaction: Timeout on index: test.t1.PRIMARY
    +ERROR HY000: Lock wait timeout exceeded; try restarting transaction
    
    This patch updates .result files so that differences do not get in the
    way; if we decide to use new error message text in MariaDB, this patch
    can be applied in reverse.

commit 8014a942b78a44e294983f9a39d296f56303e143
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Thu Nov 10 20:36:24 2016 +0000

    MariaRocks port: update results for rocksdb.col_opt_null test.
    
    The differences are due:
    - MariaDB 10.1+ assigns different DEFAULT values
      = in some cases, MariaDB's table has no default value, while
        MySQL's has '' as default.
      = BLOB/TEXT can have a default value.
    - MariaDB's MTR runs tests with diffferent timezone (affects result of
      FROM_UNIXTIME())
    - MySQL has removed YEAR(2). MariaDB produces warning but still creates
      the column of this type.
    - Different wording in warning/error messages.

commit d665e79c5b8582f44dc280e5e6df4a8ff4945623
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Fri May 6 13:44:07 2016 +0400

    MDEV-7660 - MySQL WL#6671 "Improve scalability by not using thr_lock.c locks
                for InnoDB tables"
    
    Don't use thr_lock.c locks for InnoDB tables. Below is list of changes that
    were needed to implement this:
    - HANDLER OPEN acquireis MDL_SHARED_READ instead of MDL_SHARED
    - HANDLER READ calls external_lock() even if SE is not going to be locked by
      THR_LOCK
    - InnoDB lock wait timeouts are now honored which are much shorter by default
      than server lock wait timeouts (1 year vs 50 seconds)
    - with @@autocommit= 1 LOCK TABLES disables autocommit implicitely, though
      user still sees @@autocommt= 1
    - the above starts implicit transaction
    - transactions started by LOCK TABLES are now rolled back on disconnect
      (previously everything was committed due to autocommit)
    - transactions started by LOCK TABLES are now rolled back by ROLLBACK
      (previously everything was committed due to autocommit)
    - it is now impossible to change BINLOG_FORMAT under LOCK TABLES (at least
      to statement) due to running transaction
    - LOCK TABLES WRITE is additionally handled by MDL
    - ...in contrast LOCK TABLES READ protection against DML is pure InnoDB
    - combining transactional and non-transactional tables under LOCK TABLES
      may cause rolled back changes in transactional table and "committed"
      changes in non-transactional table
    - user may disable innodb_table_locks, which will cause LOCK TABLES to be
      noop basically
    
    Removed tests for BUG#45143 and BUG#55930 which cover InnoDB + THR_LOCK. To
    operate properly these tests require code flow to go through THR_LOCK debug
    sync points, which is not the case after this patch. These tests are removed
    by WL#6671 as well. An alternative is to port them to different storage engine.

commit 71e11bce34339a69576321d6c40838fa65208dc7
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Fri Oct 28 12:29:37 2016 +0400

    MDEV-8791 - AIX: Unresolved Symbols during linking
    
    Clean-up nolock.h: it doesn't serve any purpose anymore. Appropriate code moved
    to x86-gcc.h and my_atomic.h.
    
    If gcc sync bultins were detected, we want to make use of them independently of
    __GNUC__ definition. E.g. XLC simulates those, but doesn't define __GNUC__.
    
    HS/Spider: According to AIX manual alloca() returns char*, which cannot be
    casted to any type with static_cast. Use explicit cast instead.
    
    MDL: Removed namemangling pragma, which didn't let MariaDB build with XLC.
    
    WSREP: _int64 seem to be conflicting name with XLC, replaced with _integer64.
    
    CONNECT: RTLD_NOLOAD is GNU extention. Removed rather meaningless check if
    library is loaded. Multiple dlopen()'s of the same library are permitted,
    and it never gets closed anyway. Except for error, which was a bug: it may
    close library, which can still be referenced by other subsystems.
    
    InnoDB: __ppc_get_timebase() is GNU extention. Only use it when __GLIBC__ is
    defined.
    
    Based on contribution by flynn1973.

commit c912d05fab9db5829c403432fddece257c75ece0
Author: Otto Kekäläinen <otto@mariadb.org>
Date:   Sat Oct 29 02:43:45 2016 +0300

    MDEV-6284: Install systemd files (almost) the Debian way
    
    The control file contents must be correct from the start and cannot
    be modified at build time by CMake. Also all static Debian package
    analyzers will fail to see all manipulations by CMake later on.
    
    It is best to do all manipulations like these in autobake-deb.sh.

commit 8c32d959203e88a20e066338630f3d88ec27fea4
Author: Otto Kekäläinen <otto@mariadb.org>
Date:   Tue Oct 11 17:26:22 2016 +0300

    MDEV-6284: Activate quilt patches again: test table expection needed
    
    Buildbot tries to create database 'test' so we need to have these
    Debian-only exceptions enabled and patch our own source at build time.

commit 86d963eb0888cb7f608a9185116c38de8310f7a6
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Fri Oct 21 20:05:40 2016 +0000

    MariaRocks port: provide timeout_message()
    
    Also, ER_LOCK_WAIT_TIMEOUT error doesn't have a string parameter
    in MariaDB.

commit e1ef99c3dcb8bb6fdea290e319d14f5a983d1785
Merge: 057c560ee45 fb136165189
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Sun Oct 16 23:44:44 2016 +0200

    MDEV-7145: Delayed replication
    
    Merge feature into 10.2 from feature branch.
    
    Delayed replication adds an option
    
      CHANGE MASTER TO master_delay=<seconds>
    
    Replication will then delay applying events with that many
    seconds. This creates a replication slave that reflects the state of
    the master some time in the past.
    
    Feature is ported from MySQL source tree.
    
    Signed-off-by: Kristian Nielsen <knielsen@knielsen-hq.org>

commit 09136ec30484deb97db548ca2b079b9e26cef8cf
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Fri Oct 14 11:33:45 2016 +0200

    MDEV-7145, Delayed slave.
    
    Only run testcase in --big. It takes a long time due to excessive sleeps.
    
    Signed-off-by: Kristian Nielsen <knielsen@knielsen-hq.org>

commit 149212772804e93983f80b63099ba9e1241ddf4f
Author: Karthik Kamath <karthik.kamath@oracle.com>
Date:   Thu Oct 13 14:48:45 2016 +0530

    BUG#23499695: MYSQL SERVER NORMAL SHUTDOWN WITH TIME STAMP
                  700101
    
    ANALYSIS:
    =========
    To set the time 'start_time' of query in THD, current time
    is obtained by calling 'gettimeofday()'. On Solaris
    platform, due to some system level issues, time obtained is
    invalid i.e. its either greater than 2038 (max signed value
    to hold microseconds since 1970) or 1970 (0 microseconds
    since 1970). In these cases, validation checks infer that
    the 'start_time' is invalid and mysql server initiates the
    shutdown process. But the reason for shutdown is not logged.
    
    FIX:
    ====
    We are now logging appropriate message when shutdown is
    triggered in the above mentioned scenarios. Now, even if
    the initial validation checks infer that the 'start_time'
    is invalid, server shutdown is not initiated immediately.
    Before initiating the server shutdown, the process of
    setting 'start_time' and validating it is reiterated (for
    max 5 times). If correct time is obtained in these 5
    iterations then server continues to run.

commit 553ca406cd44946d454d84c08a7247ef595378f5
Author: Alexander Barkov <bar@mariadb.org>
Date:   Sat Oct 8 15:20:16 2016 +0400

    A post-fix for MDEV-10866 Extend PREPARE and EXECUTE IMMEDIATE to understand expressions
    
    The result of binlog_{row|stm}_ctype_ucs.test depended on the machine
    time zone setting. Making the test timzone independent.

commit 8be53a389c8eebed337057fa366b7c4506ba16b1
Author: Monty <monty@mariadb.org>
Date:   Sun Oct 2 15:35:08 2016 +0300

    MDEV-6112 multiple triggers per table
    
    This is similar to MysQL Worklog 3253, but with
    a different implementation. The disk format and
    SQL syntax is identical with MySQL 5.7.
    
    Fetures supported:
    - "Any" ammount of any trigger
    - Supports FOLLOWS and PRECEDES to be
      able to put triggers in a certain execution order.
    
    Implementation details:
    - Class Trigger added to hold information about a trigger.
      Before this trigger information was stored in a set of lists in
      Table_triggers_list and in Table_triggers_list::bodies
    - Each Trigger has a next field that poinst to the next Trigger with the
      same action and time.
    - When accessing a trigger, we now always access all linked triggers
    - The list are now only used to load and save trigger files.
    - MySQL trigger test case (trigger_wl3253) added and we execute these
      identically.
    - Even more gracefully handling of wrong trigger files than before. This
      is useful if a trigger file uses functions or syntax not provided by
      the server.
    - Each trigger now has a "Created" field that shows when the trigger was
      created, with 2 decimals.
    
    Other comments:
    - Many of the changes in test files was done because of the new "Created"
      field in the trigger file. This shows up in SHOW ... TRIGGER and when
      using information_schema.trigger.
    - Don't check if all memory is released if on uses --gdb;  This is needed
      to be able to get a list from safemalloc of not freed memory while
      debugging.
    - Added option to trim_whitespace() to know how many prefix characters
      was skipped.
    - Changed a few ulonglong sql_mode to sql_mode_t, to find some wrong usage
      of sql_mode.

commit a53f3c6d3cfa50b15b1aff26bc9479eb582d8611
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Wed Sep 28 16:12:58 2016 +0300

    MDEV-10649: Optimizer sometimes use "index" instead of "range" access for UPDATE
    
    (Fixing both InnoDB and XtraDB)
    
    Re-opening a TABLE object (after e.g. FLUSH TABLES or open table cache
    eviction) causes ha_innobase to call
    dict_stats_update(DICT_STATS_FETCH_ONLY_IF_NOT_IN_MEMORY).
    
    Inside this call, the following is done:
      dict_stats_empty_table(table);
      dict_stats_copy(table, t);
    
    On the other hand, commands like UPDATE make this call to get the "rows in
    table" statistics in table->stats.records:
    
      ha_innobase->info(HA_STATUS_VARIABLE|HA_STATUS_NO_LOCK)
    
    note the HA_STATUS_NO_LOCK parameter. It means, no locks are taken by
    ::info() If the ::info() call happens between dict_stats_empty_table
    and dict_stats_copy calls, the UPDATE's optimizer will get an estimate
    of table->stats.records=1, which causes it to pick a full table scan,
    which in turn will take a lot of row locks and cause other bad
    consequences.

commit 3f5aedccca25da72e21d7859b55edeb172d45ce0
Author: Vladislav Vaintroub <wlad@mariadb.com>
Date:   Tue Sep 27 11:18:24 2016 +0000

    MDEV-10847 Bring AWS KMS encryption plugin up-to-date with released SDK
    
    - Library path's are different now
    - New dependency on Linux libuuid
    - Add calls for SDK Initialization/shutdown
    - Also add request_timeout parameter, default SDK HTTPs timeout appears
    to be too short in my tests

commit a2bafbabe2c1335bd411daf85dde8908e55dab62
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Tue Sep 20 22:12:48 2016 +0200

    Make first_value and last_value computation efficient
    
    With clever use of partition bounds, we only need to add one row to the
    items at a time. This way we remove the need to "reset" the item and run
    through the full partition again.

commit 00bf18e2bf6a1b57b8ce94a0bf0b5fa6c353bdda
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Tue Sep 20 11:11:24 2016 +0200

    Move table record writing outside of loop
    
    We can set values in the record buffer first and only perform one table
    write call at the end. No need to write to file every time one column is
    updated.
    
    Also, remove unused method from Table_read_cursor.

commit 457f3b99413e50c7cf393b06a86483e1854d86c8
Author: Igor Babaev <igor@askmonty.org>
Date:   Fri Sep 23 14:42:12 2016 -0700

    Added the test case for bug mdev-9941 that was fixed some time ago.

commit 2bedc3978b90bf5abe1029df393c63ced1849bed
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Thu Sep 22 16:32:26 2016 +0300

    MDEV-9931: InnoDB reads first page of every .ibd file at startup
    
    Analysis: By design InnoDB was reading first page of every .ibd file
    at startup to find out is tablespace encrypted or not. This is
    because tablespace could have been encrypted always, not
    encrypted newer or encrypted based on configuration and this
    information can be find realible only from first page of .ibd file.
    
    Fix: Do not read first page of every .ibd file at startup. Instead
    whenever tablespace is first time accedded we will read the first
    page to find necessary information about tablespace encryption
    status.
    
    TODO: Add support for SYS_TABLEOPTIONS where all table options
    encryption information included will be stored.

commit be2b833c426b420073c50564125049e2b4a95e8b
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Fri Sep 9 18:53:01 2016 +0300

    It is now possible to remove values multiple times from window functions
    
    This can happen with degenerate frame definitions that are always empty.

commit bbfb5d7c749dc9879dd2d05e94891b8b4be7338f
Author: Monty <monty@mariadb.org>
Date:   Mon Aug 29 20:33:25 2016 +0300

    Fixed failures for privilege_table_io and wsrep_cluster_address_basic
    
    - Sometimes privilege_table_io printed double rows of roles_mapping
      - Fixed by forcing restart of server when running test
    - Wsrep_cluster_address_basic failed in some combinations because
      wsrep_cluster_address was set to NULL
      - Fixed by ensuring it's never set to NULL, only empty string

commit 96e95b5465e2e3e629d532f24ebe166f979dd220
Author: Monty <monty@mariadb.org>
Date:   Mon Aug 29 13:10:17 2016 +0300

    Better SHOW PROCESSLIST for replication
    - When waiting for events, start time is now counted from start of wait
    - Instead of having "Connect" as "Command" for all replication threads we
      now have:
      - Slave_IO for Slave thread reading relay log
      - Slave_SQL for slave executing SQL commands or distribution queries to
        Slave workers
      - Slave_worker for slave threads executin SQL commands in parallel replication

commit 12d2c4fcd0bc3fbe74759e8285f2c93ad348e749
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sat Jul 23 16:55:52 2016 +0200

    optimize constant default expressions
    
    to be calculated at the CREATE TABLE time and stored in
    the default row image.

commit 39537435cbf1cb705e9d11c5711170e26ae30c08
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Fri Jul 22 14:24:23 2016 +0200

    clarify the comment
    
    and use the same error message for CREATE and open table time

commit 73a220aac3842da0ab8d51fa9961a18b03c45001
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Mon Jul 25 14:34:37 2016 +0200

    session-state dependent functions in DEFAULT/CHECK/vcols
    
    * revert part of the db7edfe that moved calculations from
      fix_fields to val_str for Item_func_sysconst and descendants
    * mark session state dependent functions in check_vcol_func_processor()
    * re-run fix_fields for all such functions for every statement
    * fix CURRENT_USER/CURRENT_ROLE not to use Name_resolution_context
      (that is allocated on the stack in unpack_vcol_info_from_frm())
    
    Note that NOW(), CURDATE(), etc use lazy initialization and do *not*
    force fix_fields to be re-run. The rule is:
    * lazy initialization is *not* allowed, if it changes metadata (so,
       e.g. DAYNAME() cannot use it)
    * lazy initialization is *preferrable* if it has side effects (e.g.
      NOW() sets thd->time_zone_used=1, so it's better to do it when
      the value of NOW is actually needed, not when NOW is simply prepared)

commit 2d65679384c36ae2e46b2f62538223c3d71fb00a
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Thu Aug 25 19:47:38 2016 +0300

    MDEV-10665: Json_writer produces extra members in output
    
    Fix an issue in Single_line_formatting_helper: flush_on_one_line()
    didn't clean up the buffered items which could cause them to be
    printed for the second time.
    
    This can't be ever observed by a user (see MDEV text for details).

commit b51109693e6abb0e58256192a648cdd158d47615
Author: Monty <monty@mariadb.org>
Date:   Mon Aug 22 10:16:00 2016 +0300

    MDEV-10630 rpl.rpl_mdev6020 fails in buildbot with timeout
    
    The issue was that when running with valgrind the wait for master_pos_Wait()
    was not long enough.
    
    This patch also fixes two other failures that could affect rpl_mdev6020:
    - check_if_conflicting_replication_locks() didn't properly check domains
    - 'did_mark_start_commit' was after signals to other threads was sent which could
      get the variable read too early.

commit 065645313528fcb8a996b6a5f08686193b0b696c
Author: Philip Stoev <philip.stoev@galeracluster.com>
Date:   Fri Jul 22 04:16:09 2016 -0700

    Galera MTR Tests: increase timeouts and adjust some sporadically-failing tests so that the Galera suites can be run with --parallel=4

commit 5996c7baad2cc936881442ccb26bdde3b04ad6f2
Author: sjaakola <seppo.jaakola@iki.fi>
Date:   Tue Jun 7 10:46:14 2016 +0300

    refs: MW-279
    - At startup time global wsrep_on is set too late and some wsrep paths may be executed
      because of this. e.g. replication slave restart could happen before wsrep_on state is defined.
    - This fix checks both global wsrep_on and wsrep_provider values to determine if wsrep
      processing should happen
    - Fix affects all instances where WSREP_ON macro is used

commit b159b666e5191b22618e631e9ed48159be541f7e
Author: sjaakola <seppo.jaakola@iki.fi>
Date:   Mon Feb 29 16:36:17 2016 +0200

    Refs MW-252
    - Calling FTWRL two times in a row caused desync error, this is fixed
      by making sub-sequent FTWRL calls bail out before wsrep operations

commit 5932fa789043fad1602a5ebb335adf4e7c860cdf
Author: Monty <monty@mariadb.org>
Date:   Sun Aug 21 20:38:47 2016 +0300

    Fixed "Packets out of order" warning message on stdout in clients,
    compiled for debugging, when the server goes down
    
    This happens in the following scenario:
    - Server gets a shutdown message
    - Servers sends error ER_CONNECTION_KILLED to the clients connection
    - The client sends a query to the server, before the server has time to
      close the connection to the client
    - Client reads the ER_CONNECTION_KILLED error message
    
    In the above case, the packet number for the reply is one less than
    what the client expected and the client prints "Packets out of order".
    
    Fixed the following way:
    - The client accepts now error packages with a packet number
      one less than expected.
    - To ensure that this issue can be detected early in my_real_read(), error
      messages sent to the client are not compressed, even when compressed protocol is used.

commit dfadb3680d0ffc211ce4f36fed28e59e3fec0842
Author: Philip Stoev <philip.stoev@galeracluster.com>
Date:   Fri Jul 15 01:13:32 2016 -0700

    Galera MTR Tests: Test case for MW-292 : NOW() returns stale timestamp after transaction replay

commit 9a809fe31be15131baf909e898c1ad2c02976728
Author: Daniele Sciascia <daniele.sciascia@galeracluster.com>
Date:   Thu Jul 14 14:29:59 2016 +0200

    MW-292 Reset timestamp after transaction replay
    
    Transaction replay causes the THD to re-apply the replication
    events from execution, using the same path appliers do. While
    applying the log events, the THD's timestamp is set to the
    timestamp of the event.
    Setting the timestamp explicitly causes function NOW() to
    always the timestamp that was set. To avoid this behavior we
    reset the timestamp after replaying is done.

commit 22eec68941f3acbd9033e7fb33d10c63e6b388da
Author: Neha Kumari <neha.n.kumari@oracle.com>
Date:   Fri Aug 5 12:17:11 2016 +0530

    Bug#23540182:MYSQLBINLOG DOES NOT FREE THE EXISTING CONNECTION BEFORE OPENING NEW REMOTE ONE
    
    It happens when you are trying to read two or more log files from a
    remote server using mysqlbinlog utility.
    
    The reason for this is no matching mysql_close() that concludes the
    life time of 'mysql' struct describing connection to the server.
    This happens when mysqlbinlog is invoked with connecting to the server
    and requesting more than one binlog file. In such case
    dump_remote_log_entries() keeps calling safe_connect() per eachfile,
    never caring to invoke mysql_close(). Only the final safe_connect()'s
    allocation effect are cleaned by the base code.
    That is with 2 files there's one 'mysql' connection descriptor struct
    uncleaned/deallocated.
    
    We are backporting the bug 21255763 (pushed in mysql-trunk)
    in the earlier version of MySQL starting from 5.5 to 5.7.
    which was pushed in mysql-trunk.
    
    Fix:
    Invoke mysql_close() just before mysql_init() in safe_connect()
    defined in mysqlbinlog.cc. That makes possibly previously used 'mysql' be
    reclaimed prior a new one is allocated.

commit e57287866fd33b4494839c21ccd7875480c8558d
Author: Philip Stoev <philip.stoev@galeracluster.com>
Date:   Fri Jul 15 01:13:32 2016 -0700

    Galera MTR Tests: Test case for MW-292 : NOW() returns stale timestamp after transaction replay

commit 7431368eafb3e531ba3926e85cc515778f6b5e2f
Author: Daniele Sciascia <daniele.sciascia@galeracluster.com>
Date:   Thu Jul 14 14:29:59 2016 +0200

    MW-292 Reset timestamp after transaction replay
    
    Transaction replay causes the THD to re-apply the replication
    events from execution, using the same path appliers do. While
    applying the log events, the THD's timestamp is set to the
    timestamp of the event.
    Setting the timestamp explicitly causes function NOW() to
    always the timestamp that was set. To avoid this behavior we
    reset the timestamp after replaying is done.

commit fb076581f6eeeb931108b689211cbc662e35478f
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Mon Jul 25 13:07:50 2016 +0200

    MDEV-10271: Stopped SQL slave thread doesn't print a message to error log like IO thread does
    
    Make the slave SQL thread always output to the error log the message "Slave
    SQL thread exiting, replication stopped in ..." whenever it previously
    outputted "Slave SQL thread initialized, starting replication ...".
    
    Before this patch, it was somewhat inconsistent in which cases the message
    would be output and in which not, depending on the exact time and cause of
    the condition that caused the SQL thread to stop.

commit 1b5da2ca49f69605ccfe4d98e9207e7b8551e21f
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Thu Jul 21 15:32:28 2016 +0400

    MDEV-10316 - main.type_date fails around midnight sporadically
    
    A better fix for MySQL Bug#41776: use hard timestamp rather than unreliable
    sleep.

commit db7edfed17efe6bc3684b0fbacc0b0249e4f0fa2
Author: Michael Widenius <monty@mariadb.org>
Date:   Wed Jun 29 09:14:22 2016 +0200

    MDEV-7563 Support CHECK constraint as in (or close to) SQL Standard
    MDEV-10134 Add full support for DEFAULT
    
    - Added support for using tables with MySQL 5.7 virtual fields,
      including MySQL 5.7 syntax
    - Better error messages also for old cases
    - CREATE ... SELECT now also updates timestamp columns
    - Blob can now have default values
    - Added new system variable "check_constraint_checks", to turn of
      CHECK constraint checking if needed.
    - Removed some engine independent tests in suite vcol to only test myisam
    - Moved some tests from 'include' to 't'. Should some day be done for all tests.
    - FRM version increased to 11 if one uses virtual fields or constraints
    - Changed to use a bitmap to check if a field has got a value, instead of
      setting HAS_EXPLICIT_VALUE bit in field flags
    - Expressions can now be up to 65K in total
    - Ensure we are not refering to uninitialized fields when handling virtual fields or defaults
    - Changed check_vcol_func_processor() to return a bitmap of used types
    - Had to change some functions that calculated cached value in fix_fields to do
      this in val() or getdate() instead.
    - store_now_in_TIME() now takes a THD argument
    - fill_record() now updates default values
    - Add a lookahead for NOT NULL, to be able to handle DEFAULT 1+1 NOT NULL
    - Automatically generate a name for constraints that doesn't have a name
    - Added support for ALTER TABLE DROP CONSTRAINT
    - Ensure that partition functions register virtual fields used. This fixes
      some bugs when using virtual fields in a partitioning function

commit b2ae32aafdd2787ad456f38833f630182ded25e8
Author: Nirbhay Choubey <nirbhay@mariadb.com>
Date:   Fri Jun 10 17:05:29 2016 -0400

    MDEV-5535: Cannot reopen temporary table
    
    Since a query can now refer to the same temporary table
    multiple times, find_dup_table()/find_table_in_list()
    have been updated to also consider this new possibility.

commit 49ad08450369dbf7ee85759786b6b844e1460471
Author: Alexey Kopytov <akopytov@gmail.com>
Date:   Fri Apr 1 11:31:53 2016 +1100

    Few improvements related to CPU cache line size and padding:
    
    Bug #79636: CACHE_LINE_SIZE should be 128 on AArch64
    Bug #79637: Hard-coded cache line size
    Bug #79638: Reconcile CACHE_LINE_SIZE with CPU_LEVEL1_DCACHE_LINESIZE
    Bug #79652: Suspicious padding in srv_conc_t
    
    - changed CPU_LEVEL1_DCACHE_LINESIZE to default to 128 bytes on POWER
      and AArch64 architectures in cases when no value could be detected
      by CMake using getconf
    
    - changed CACHE_LINE_SIZE definition in ut0counter.h to be an alias of
      CPU_LEVEL1_DCACHE_LINESIZE
    
    - changed a number of hard-coded 64-byte cache line size values in the
      InnoDB code
    
    - fixed insufficient padding for srv_conc members in srv0conc.cc
    
    Ported to Mariadb by Daniel Black <daniel.black@au.ibm.com>
    Added s390 cache size of 256 at same time.

commit 69da361ccdac3c0dd6233527ee983687e966fd20
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Mon Apr 11 08:18:21 2016 +0200

    reset @@TIMESTAMP for COM_CHANGE_USER
    
    this also fixes tokudb.type_year failure
    (in ./mtr tokudb.type_timestamp tokudb.type_year)

commit c9629daa1ed383d5ea90b7a8542cf2e2e7f7f842
Author: Alexander Barkov <bar@mariadb.org>
Date:   Thu May 19 18:57:23 2016 +0400

    This patch is a cleanup simplifying upcoming
    "MDEV-8909 union parser cleanup" changes.
    
    When the server parses a query like
      SELECT * FROM (SELECT 1);
    a sequence of calls
      st_select_lex::init_nested_join() ..
      st_select_lex::end_nested_join()
    was performed two times (tested in gdb).
    Both pairs of calls seem to be redundant for a query
    like this, because there are actually no any joins here.
    
    This patch moved "table_ref_select" inside "select_derived",
    which revealed that one the pairs was definitely redundant:
    After this transformation we got an init_nested_join()
    immediately followed by end_nested_join() for the same st_select_lex,
    which has no any sense. So this pair of calls was removed.

commit 818b3a91231119663a95b854ab1e0e2d7a2d3feb
Author: Sujatha Sivakumar <sujatha.sivakumar@oracle.com>
Date:   Wed May 4 14:06:45 2016 +0530

    Bug#12818255: READ-ONLY OPTION DOES NOT ALLOW
    INSERTS/UPDATES ON TEMPORARY TABLES
    Bug#14294223: CHANGES NOT ALLOWED TO TEMPORARY TABLES ON
    READ-ONLY SERVERS
    
    Problem:
    ========
    Running 5.5.14 in read only we can create temporary tables
    but can not insert or update records in the table. When we
    try we get Error 1290 : The MySQL server is running with the
    --read-only option so it cannot execute this statement.
    
    Analysis:
    =========
    This bug is very specific to binlog being enabled and
    binlog-format being stmt/mixed. Standalone server without
    binlog enabled or with row based binlog-mode works fine.
    
    How standalone server and row based replication work:
    =====================================================
    Standalone server and row based replication mark the
    transactions as read_write only when they are modifying
    non temporary tables as part of their current transaction.
    
    Because of this when code enters commit phase it checks
    if a transaction is read_write or not. If the transaction
    is read_write and global read only mode is enabled those
    transaction will fail with 'server is read only mode'
    error.
    
    In the case of statement based mode at the time of writing
    to binary log a binlog handler is created and it is always
    marked as read_write. In case of temporary tables even
    though the engine did not mark the transaction as read_write
    but the new transaction that is started by binlog handler is
    considered as read_write.
    
    Hence in this case when code enters commit phase it finds
    one handler which has a read_write transaction even when
    we are modifying temporary table. This causes the server
    to throw an error when global read-only mode is enabled.
    
    Fix:
    ====
    At the time of commit in "ha_commit_trans" if a read_write
    transaction is found, we should check if this transaction is
    coming from a handler other than binlog_handler. This will
    ensure that there is a genuine read_write transaction being
    sent by the engine apart from binlog_handler and only then
    it should be blocked.

commit 419c92506971a42d752d0ae1980b4d5756cc1a97
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Sun Apr 10 07:51:42 2016 +0300

    Fix dense_rank returning minimum rank of 2 when using null columns.
    
    The bug was caused by a weird behaviour in test_if_group_changed, not
    returning true when testing for the first time after initializing
    the Cached_item list.

commit cdd404311792302a27242ba1f210be3addda6405
Author: Monty <monty@mariadb.org>
Date:   Tue Apr 5 17:44:12 2016 +0300

    Cleanups:
    
    - Removed some QQ markers
    - Removed some rows not compatible with valgrind 3.9.0
    - Made mysql_install_db.sh more silent by default. --verbose now gives more information
    - Added assert that auto-increment doesn't generate 0 (safety)
    - Removed thd->set_time() in some places as it's set in init_for_queries()
    - Fixed some --big tests in tokudb
    - Fixed a bug in mysql_client_test.cc where sql_mode was not properly reset

commit 4b6b3a96ade6c8c761db382e5c9ccff05e8c8bd7
Author: Alexander Barkov <bar@mariadb.org>
Date:   Mon Apr 4 09:52:24 2016 +0400

    Clean-up: Adding a class Term_string to share some LOAD DATA code
    
    The new class is used for:
    - FIELDS TERMINATED BY 'string'
    - LINES STARTING BY 'string'
    - LINES TERMINATED BY 'string'
    
    The implementation of "FIELDS ENCLOSED BY 'char'" and "FIELDS ESCAPED BY 'char'"
    should eventually also switch to this class to support multi-byte characters.
    Currently multi-byte ENCLOSED and ESCAPED characters are rejected at parse time.

commit 02d75ae1fd24f43f02f963a39e8df5644f8873d8
Author: Monty <monty@mariadb.org>
Date:   Wed Mar 23 14:36:59 2016 +0200

    Fixed failures from changing values of thread_stack and thread_cache_size
    Added --thread_cache_size=0 to slow_launch_time_func.test as otherwise
    the new thread would start too fast to be counted as a slow_launch_thread.

commit fa3edbf40d6b9f6b56feaceb0ec90753f1072ac9
Author: Monty <monty@mariadb.org>
Date:   Tue Mar 22 23:42:13 2016 +0200

    Increase value of thread_cache_size to 32
    Added 5 minute timeout before automaticlally removing threads from thread
    cache.
    
    This solves a problem with jemalloc, which is slow with a small
    thread cache and also makes thread_cache big enough that most users
    doesn't have to touch it

commit dfa22c5d3921fade44113bcca90fec451e6f24ed
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Tue Mar 22 18:24:09 2016 +0300

    Don't select 'digest' column from PERFORMANCE_SCHEMA.events_statements_history_long
    
    Its value changes depending on the parser constants, so it changes
    every time somebody makes a change in the parser

commit d30ae14c24f434e35b58707c24c69dddd582d98b
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Fri Feb 26 15:32:34 2016 +0400

    Fixed compilarion failure on 32bit systems
    
    Compile time assertion "sizeof(struct st_irem) % sizeof(double) == 0" started
    to fail on 32bit systems after my_thread_id was changed from ulong to int64.
    
    Fixed by added padding to struct st_irem on 32bit systems.
For keyword perf:
commit 0906dc49e8c442ca00b8b7889ee09812040e5638
Author: Igor Babaev <igor@askmonty.org>
Date:   Mon Apr 24 14:56:53 2017 -0700

    Fixed the bug mdev-12564.
    
    Here's  what started happening after the patch that fixed
    the bug mdev-10454 with query reported for the bug
    SELECT * FROM t t1 right JOIN t t2 ON (t2.pk = t1.pk)
      WHERE (t2.i, t2.pk) NOT IN ( SELECT t3.i, t3.i FROM t t3, t t4 )
            AND t1.c = 'foo';
    The patch added an implementation of propagate_equal_fields() for
    the class Item_row and thus opened the possibility of equal fields
    substitutions.
    At the prepare stage after setup_conds() called for WHERE condition
    had completed the flag of maybe_null of the Item_row object created
    for  (t2.i, t2.pk) was set to false, because the maybe_null flags of
    both elements were set to false. However the flag of maybe_null for
    t1.pk from the ON condition were set to true, because t1 was an inner
    table of an outer join.
    At the optimization stage the outer join was converted to inner join,
    but the maybe_null flags were not corrected and remained the same.
    So after the substitution t2.pk/t1.pk. the maybe_null flag for the
    row remained false while the maybe_flag for the second element of
    the row was true. As a result, when the in-to_exists transformation
    was performed for the NOT IN predicate the guards variables were
    not created for the elements of the row, but a guard object for
    the second element was created. The object were not valid because
    it referred to NULL as a guard variable. This ultimately caused
    a crash when the expression with the guard was evaluated at the
    execution stage.
    
    The patch made sure that the guard objects are not created without
    guard variables.
    
    Yet it does not resolve the problem of inconsistent maybe_null flags.
    and it might be that the problem will pop op in other pieces of code.
    The resolution of this problem is not easy, but the problem should
    be resolved in future versions.

commit 97fb1f26797828427ad850b0420aaafc74205e71
Author: Igor Babaev <igor@askmonty.org>
Date:   Fri Apr 21 14:34:24 2017 -0700

    Fixed bug mdev-10053.
    
    The implementation of the walk method for the class Item_in_subselect
    was missing. As a result the method never traversed the left operand
    of any IN subquery predicate.
    
    Item_exists_subselect::exists2in_processor() that performs the
    Exist-To-In transformation calls the walk method to collect info
    on outer references. As the walk method did not traverse the
    left operands of the IN subqueries the outer references there
    were not taken into account and some subqueries that were actually
    correlated were marked as uncorrelated. It could lead to an
    attempt of the materialization of such a subquery.
    
    Also added a cleanup for some test cases merged from 5.5.

commit 8423294acf32d966027ef99a38938bb4acc001d5
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Apr 5 16:24:44 2017 +0300

    Make InnoDB doublewrite buffer creation more robust.
    
    buf_dblwr_create(): Remove a bogus check for the buffer pool size.
    Theoretically, there is no problem if the doublewrite buffer is
    larger than the buffer pool. It could only cause trouble on crash
    recovery, and on recovery the doublewrite buffer is read to a buffer
    that is allocated outside of the buffer pool. Moreover, this check
    was only performed when the database was initialized for the first
    time.
    
    On a normal startup, buf_dblwr_init() would not enforce any
    rule on the innodb_buffer_pool_size.
    
    Furthermore, in case of an error, commit the mini-transaction in order
    to avoid an assertion failure on shutdown. Yes, this will leave the
    doublewrite buffer in a corrupted stage, but the doublewrite buffer
    should only be initialized when the data files are being initialized
    from the scratch in the first place.

commit 9505c9683930290c1e028043940ae8512a6ca040
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Apr 3 19:36:54 2017 +0300

    MDEV-12428 SIGSEGV in buf_page_decrypt_after_read() during DDL
    
    Also, some MDEV-11738/MDEV-11581 post-push fixes.
    
    In MariaDB 10.1, there is no fil_space_t::is_being_truncated field,
    and the predicates fil_space_t::stop_new_ops and fil_space_t::is_stopping()
    are interchangeable. I requested the fil_space_t::is_stopping() to be added
    in the review, but some added checks for fil_space_t::stop_new_ops were
    not replaced with calls to fil_space_t::is_stopping().
    
    buf_page_decrypt_after_read(): In this low-level I/O operation, we must
    look up the tablespace if it exists, even though future I/O operations
    have been blocked on it due to a pending DDL operation, such as DROP TABLE
    or TRUNCATE TABLE or other table-rebuilding operations (ALTER, OPTIMIZE).
    Pass a parameter to fil_space_acquire_low() telling that we are performing
    a low-level I/O operation and the fil_space_t::is_stopping() status should
    be ignored.

commit b2865a437f45922c2f31f2bffe0f7d6134a8720e
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Tue Mar 14 15:36:30 2017 +0100

    search_pattern_in_file.inc changes
    
    1. Special mode to search in error logs: if SEARCH_RANGE is not set,
       the file is considered an error log and the search is performed
       since the last CURRENT_TEST: line
    2. Number of matches is printed too. "FOUND 5 /foo/ in bar".
       Use greedy .* at the end of the pattern if number of matches
       isn't stable. If nothing is found it's still "NOT FOUND",
       not "FOUND 0".
    3. SEARCH_ABORT specifies the prefix of the output.
       Can be "NOT FOUND" or "FOUND" as before,
       but also "FOUND 5 " if needed.

commit 124bae082bf17e9af1fc77f78bbebd019635be5c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 30 13:11:34 2017 +0300

    MDEV-12289 Keep 128 persistent rollback segments for compatibility and performance
    
    InnoDB divides the allocation of undo logs into rollback segments.
    The DB_ROLL_PTR system column of clustered indexes can address up to
    128 rollback segments (TRX_SYS_N_RSEGS). Originally, InnoDB only
    created one rollback segment. In MySQL 5.5 or in the InnoDB Plugin
    for MySQL 5.1, all 128 rollback segments were created.
    
    MySQL 5.7 hard-codes the rollback segment IDs 1..32 for temporary undo logs.
    On upgrade, unless a slow shutdown (innodb_fast_shutdown=0)
    was performed on the old server instance, these rollback segments
    could be in use by transactions that are in XA PREPARE state or
    transactions that were left behind by a server kill followed by a
    normal shutdown immediately after restart.
    
    Persistent tables cannot refer to temporary undo logs or vice versa.
    Therefore, we should keep two distinct sets of rollback segments:
    one for persistent tables and another for temporary tables. In this way,
    all 128 rollback segments will be available for both types of tables,
    which could improve performance. Also, MariaDB 10.2 will remain more
    compatible than MySQL 5.7 with data files from earlier versions of
    MySQL or MariaDB.
    
    trx_sys_t::temp_rsegs[TRX_SYS_N_RSEGS]: A new array of temporary
    rollback segments. The trx_sys_t::rseg_array[TRX_SYS_N_RSEGS] will
    be solely for persistent undo logs.
    
    srv_tmp_undo_logs. Remove. Use the constant TRX_SYS_N_RSEGS.
    
    srv_available_undo_logs: Change the type to ulong.
    
    trx_rseg_get_on_id(): Remove. Instead, let the callers refer to
    trx_sys directly.
    
    trx_rseg_create(), trx_sysf_rseg_find_free(): Remove unneeded parameters.
    These functions only deal with persistent undo logs.
    
    trx_temp_rseg_create(): New function, to create all temporary rollback
    segments at server startup.
    
    trx_rseg_t::is_persistent(): Determine if the rollback segment is for
    persistent tables.
    
    trx_sys_is_noredo_rseg_slot(): Remove. The callers must know based on
    context (such as table handle) whether the DB_ROLL_PTR is referring to
    a persistent undo log.
    
    trx_sys_create_rsegs(): Remove all parameters, which were always passed
    as global variables. Instead, modify the global variables directly.
    
    enum trx_rseg_type_t: Remove.
    
    trx_t::get_temp_rseg(): A method to ensure that a temporary
    rollback segment has been assigned for the transaction.
    
    trx_t::assign_temp_rseg(): Replaces trx_assign_rseg().
    
    trx_purge_free_segment(), trx_purge_truncate_rseg_history():
    Remove the redundant variable noredo=false.
    Temporary undo logs are discarded immediately at transaction commit
    or rollback, not lazily by purge.
    
    trx_purge_mark_undo_for_truncate(): Remove references to the
    temporary rollback segments.
    
    trx_purge_mark_undo_for_truncate(): Remove a check for temporary
    rollback segments. Only the dedicated persistent undo log tablespaces
    can be truncated.
    
    trx_undo_get_undo_rec_low(), trx_undo_get_undo_rec(): Add the
    parameter is_temp.
    
    trx_rseg_mem_restore(): Split from trx_rseg_mem_create().
    Initialize the undo log and the rollback segment from the file
    data structures.
    
    trx_sysf_get_n_rseg_slots(): Renamed from
    trx_sysf_used_slots_for_redo_rseg(). Count the persistent
    rollback segment headers that have been initialized.
    
    trx_sys_close(): Also free trx_sys->temp_rsegs[].
    
    get_next_redo_rseg(): Merged to trx_assign_rseg_low().
    
    trx_assign_rseg_low(): Remove the parameters and access the
    global variables directly. Revert to simple round-robin, now that
    the whole trx_sys->rseg_array[] is for persistent undo log again.
    
    get_next_noredo_rseg(): Moved to trx_t::assign_temp_rseg().
    
    srv_undo_tablespaces_init(): Remove some parameters and use the
    global variables directly. Clarify some error messages.
    
    Adjust the test innodb.log_file. Apparently, before these changes,
    InnoDB somehow ignored missing dedicated undo tablespace files that
    are pointed by the TRX_SYS header page, possibly losing part of
    essential transaction system state.

commit 5a4537f09296a1c6151c8dfc35ecad7584aa55c4
Author: Igor Babaev <igor@askmonty.org>
Date:   Fri Mar 24 22:04:19 2017 -0700

    Fixed bug mdev-12360.
    
    The method With_element::check_unrestricted_recursive() icorrectly performed
    the check that no recursive reference is not encountered in inner parts of
    outer joins. As a result the server reported errors for valid specifications
    with outer joins.

commit 13e5c9de800254dc80a4ba4cc98d788be899acb6
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 9 23:20:51 2017 +0200

    MDEV-12219 Discard temporary undo logs at transaction commit
    
    Starting with MySQL 5.7, temporary tables in InnoDB are handled
    differently from persistent tables. Because temporary tables are
    private to a connection, concurrency control and multi-versioning
    (MVCC) are not applicable. For performance reasons, purge is
    disabled as well. Rollback is supported for temporary tables;
    that is why we have the temporary undo logs in the first place.
    
    Because MVCC and purge are disabled for temporary tables, we should
    discard all temporary undo logs already at transaction commit,
    just like we discard the persistent insert_undo logs. Before this
    change, update_undo logs were being preserved.
    
    trx_temp_undo_t: A wrapper for temporary undo logs, comprising
    a rollback segment and a single temporary undo log.
    
    trx_rsegs_t::m_noredo: Use trx_temp_undo_t.
    (Instead of insert_undo, update_undo, there will be a single undo.)
    
    trx_is_noredo_rseg_updated(), trx_is_rseg_assigned(): Remove.
    
    trx_undo_add_page(): Remove the parameter undo_ptr.
    Acquire and release the rollback segment mutex inside the function.
    
    trx_undo_free_last_page(): Remove the parameter trx.
    
    trx_undo_truncate_end(): Remove the parameter trx, and add the
    parameter is_temp. Clean up the code a bit.
    
    trx_undo_assign_undo(): Split the parameter undo_ptr into rseg, undo.
    
    trx_undo_commit_cleanup(): Renamed from trx_undo_insert_cleanup().
    Replace the parameter undo_ptr with undo.
    This will discard the temporary undo or insert_undo log at
    commit/rollback.
    
    trx_purge_add_update_undo_to_history(), trx_undo_update_cleanup():
    Remove 3 parameters. Always operate on the persistent update_undo.
    
    trx_serialise(): Renamed from trx_serialisation_number_get().
    
    trx_write_serialisation_history(): Simplify the code flow.
    If there are no persistent changes, do not update MONITOR_TRX_COMMIT_UNDO.
    
    trx_commit_in_memory(): Simplify the logic, and add assertions.
    
    trx_undo_page_report_modify(): Keep a direct reference to the
    persistent update_undo log.
    
    trx_undo_report_row_operation(): Simplify some code.
    Always assign TRX_UNDO_INSERT for temporary undo logs.
    
    trx_prepare_low(): Keep only one parameter. Prepare all 3 undo logs.
    
    trx_roll_try_truncate(): Remove the parameter undo_ptr.
    Try to truncate all 3 undo logs of the transaction.
    
    trx_roll_pop_top_rec_of_trx_low(): Remove.
    
    trx_roll_pop_top_rec_of_trx(): Remove the redundant parameter
    trx->roll_limit. Clear roll_limit when exhausting the undo logs.
    Consider all 3 undo logs at once, prioritizing the persistent
    undo logs.
    
    row_undo(): Minor cleanup. Let trx_roll_pop_top_rec_of_trx()
    reset the trx->roll_limit.

commit 0633d0e2ed606a7fe51d0cbf08c60c5a7d5572f6
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Wed Mar 8 14:54:12 2017 +0100

    don't show 'performance_schema_%_classes_lost' variables in tests
    
    because FLUSH STATUS does not reset them, so their values
    are affected by previously run tests since the last server restart.

commit f65c9f825d164cf79dd6d5897ef144abba40ff6d
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Tue Mar 7 15:52:17 2017 +0200

    mysql_client_test_nonblock fails when compiled with clang
    
    mysql_client uses some inline assembly code to switch thread stacks.
    This works, however tools that perform backtrace get confused to fix
    this we write a specific constant to signify bottom of stack. This
    constant is needed when compiling with CLang as well.

commit 27b9989d316163d00177bfee8fceb10995c2ba9b
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Feb 23 23:05:12 2017 +0200

    MDEV-12121 Introduce build option WITH_INNODB_AHI to disable innodb_adaptive_hash_index
    
    The InnoDB adaptive hash index is sometimes degrading the performance of
    InnoDB, and it is sometimes disabled to get more consistent performance.
    We should have a compile-time option to disable the adaptive hash index.
    
    Let us introduce two options:
    
    OPTION(WITH_INNODB_AHI "Include innodb_adaptive_hash_index" ON)
    OPTION(WITH_INNODB_ROOT_GUESS "Cache index root block descriptors" ON)
    
    where WITH_INNODB_AHI always implies WITH_INNODB_ROOT_GUESS.
    
    As part of this change, the misleadingly named function
    trx_search_latch_release_if_reserved(trx) will be replaced with the macro
    trx_assert_no_search_latch(trx) that will be empty unless
    BTR_CUR_HASH_ADAPT is defined (cmake -DWITH_INNODB_AHI=ON).
    
    We will also remove the unused column
    INFORMATION_SCHEMA.INNODB_TRX.TRX_ADAPTIVE_HASH_TIMEOUT.
    In MariaDB Server 10.1, it used to reflect the value of
    trx_t::search_latch_timeout which could be adjusted during
    row_search_for_mysql(). In 10.2, there is no such field.
    
    Other than the removal of the unused column TRX_ADAPTIVE_HASH_TIMEOUT,
    this is an almost non-functional change to the server when using the
    default build options.
    
    Some tests are adjusted so that they will work with both
    -DWITH_INNODB_AHI=ON and -DWITH_INNODB_AHI=OFF. The test
    innodb.innodb_monitor has been renamed to innodb.monitor
    in order to track MySQL 5.7, and the duplicate tests
    sys_vars.innodb_monitor_* are removed.

commit 71f53bf72d918d99910f4a3e8cadbd5ed98a3021
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Thu Mar 2 12:35:31 2017 +0400

    MDEV-11221 - main.events_restart failed in bb
    
    This is an addition to original fix. Buildbot revealed another sporadic failure
    in perfschema.threads_mysql test. Tests relies on data stored in
    performance_schema.threads, while performing waits on
    information_schema.processlist. These tables are not updated synchronously.
    
    Fixed by performing waits on performance_schema.threads instead.

commit b70cd26d73d727ad871c109b47a8a2645c553fd8
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Fri Feb 17 00:57:24 2017 +0200

    MDEV-11668 rpl.rpl_heartbeat_basic fails sporadically in buildbot
    
    On a slow builder, a delay between binlog events on master could
    occur, which would cause a heartbeat which is not expected by the
    test. The solution is to monitor the timing of binlog events
    on the master and only perform the heartbeat check if no critical
    delays have happened.
    
    Additionally, an unused variable was removed (this change is
    unrelated to the bugfix).

commit d4746422547f1901831f9c891a3600275daf6534
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Tue Feb 14 18:31:30 2017 +0200

    MDEV-10092: Server crashes in in ha_heap::rnd_pos / Table_read_cursor::get_next
    
    The bug was caused by several issues.
    2 problems in seek_io_cache. Due to wrong offsets used, we would end up
    seeking way too much (first change), or over the intended seek point
    (second change). Fixing it requires correctly detecting available data
    in buffer (first change), and not using "IO_SIZE alligned" reads. The
    second is needed because _my_b_cache_read adjusts the pos_in_file itself
    based on read_pos and read_end. Pretending buffer is empty when we want
    to force a read will aleviate this problem.
    
    Secondly, the big-table cursors didn't repect the interface definitions
    of always returning the rownumber that Table_read_cursor::fetch() would activate.
    
    At the same time, next(), prev() and move_to() should not perform any
    row activation.

commit f675eab7dc7f1eb4f4b61bfdd548d9e8052678a4
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Tue Feb 7 14:02:25 2017 +0200

    MDEV-10122: MariaDB does not support group functions in some contexts where MySQL does
    
    The problematic queries involve unions. For unions we have an
    optimization where we skip the ORDER BY clause in a query from one side
    of the union if it will be performed later due to UNION.
    EX:
    (SELECT a from t1 ORDER BY a) ORDER BY b;
    The first ordering by a is not necessary and it gets removed.
    
    The problem is that we still need to resolve the Items before removing the
    ORDER BY list from the
    SELECT_LEX structure. During this final resolve step however, we forgot to
    allow SET functions within the ORDER BY clause. This caused us to return
    an "Invalid use of group function" error during the checking performed
    by fix_fields in Item_sum::init_sum_func_check.

commit 78b5e8d6ca35be35cf2f10769c19cd7dacad09d2
Author: Igor Babaev <igor@askmonty.org>
Date:   Thu Feb 9 19:33:28 2017 -0800

    Fixed bug mdev-11745.
    
    Due to this bug many queries that contained a window function
    with MIN/MAX aggregation returned wrong results.
    
    Calculation of a MIN/MAX aggregate function uses cache objects
    and a comparator object that are created and set up in
    Item_sum_hybrid::fix_fields () by a call of Item_sum_hybrid::setup_hybrid().
    The latter binds the objects to the first argument of the
    MIN/MAX function. Meanwhile window function perform aggregation
    over fields of a temporary table. So binding must be done rather to
    these fields. The earliest moment when setup the objects used in
    MIN/max functions can be done is after all calls of the method
    split_sum_func().
    
    This patch introduces this late setup, but only for aggregate
    functions used in window functions.
    Probably it makes sense to use this late setup for all MIN/MAX
    objects.

commit c46d140961b4797509fc83b2d04120e179bc2431
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Sun Jan 29 21:00:02 2017 +0200

    MDEV-11764 perfschema.table_name fails in buildbot
    
    There is only one select that returns a result set in this test.
    It needs to be sorted

commit 406e113e9abc2139e40018ec7bd1b1fb018642c9
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Jan 26 14:05:00 2017 +0200

    MDEV-11915 Detect InnoDB system tablespace size mismatch early
    
    InnoDB would refuse to start up if there is a mismatch on
    the size of the system tablespace files. However, before this
    check is conducted, the system tablespace may already have been
    heavily modified.
    
    InnoDB should perform the size check as early as possible.
    
    recv_recovery_from_checkpoint_finish():
    Move the recv_apply_hashed_log_recs() call to
    innobase_start_or_create_for_mysql().
    
    innobase_start_or_create_for_mysql(): Test the mutex functionality
    before doing anything else. Use a compile_time_assert() for a
    sizeof() constraint. Check the size of the system tablespace as
    early as possible.

commit afb461587c0b7dea2e5e70a165e8d4d437c3f964
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Jan 26 14:05:00 2017 +0200

    MDEV-11915 Detect InnoDB system tablespace size mismatch early
    
    InnoDB would refuse to start up if there is a mismatch on
    the size of the system tablespace files. However, before this
    check is conducted, the system tablespace may already have been
    heavily modified.
    
    InnoDB should perform the size check as early as possible.
    
    recv_recovery_from_checkpoint_finish():
    Move the recv_apply_hashed_log_recs() call to
    innobase_start_or_create_for_mysql().
    
    innobase_start_or_create_for_mysql(): Test the mutex functionality
    before doing anything else. Use a compile_time_assert() for a
    sizeof() constraint. Check the size of the system tablespace as
    early as possible.

commit 736afe868094b9aa24211c3772fb3b297d62d8fc
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Fri Jan 13 11:25:38 2017 +0100

    mysql_install_db enhancements to facilitate Debian bug#848616 fix
    
    In Debian, the default install is made more secure by omitting the anonymous
    user and by making the root account authenticate by unix socket
    authentication instead of the default password-less root. However, Debian
    hard-codes this change in mysql_install_db, which breaks that program for
    other users.
    
    This commit instead implements new general options for mysql_install_db that
    can be used by anyone to similarly perform a more secure install:
    
      --skip-auth-anonymous-user: omits the anonymous user.
    
      --auth-root-authentication-method=normal: Keeps the existing behaviour
        with a password-less root account. Currently on by default.
    
      --auth-root-socket-user=USER
      --auth-root-authentication-method=socket: creates the MariaDB root user
        with the name USER (defaults to 'root') and using unix socket
        authentication. This way, only that user has MariaDB root access
        after install.
    
    The idea with --auth-root-authentication-method=normal is that
    applications that need this behaviour can give that option explicitly.
    Then eventually we could make --auth-root-authentication-method=socket
    the default, giving a more secure default installation.
    
    Note that it is perfectly possible to do a secure install with
    --auth-root-authentication-method=normal. For example, installing a
    private server just for local access by a single OS-level user, by
    using --skip-networking and putting the connection socket in a
    location without public access. So it is important to preserve this
    API for backwards compatibility.

commit 4799af092574e7957d7143c7751acef74a95a495
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Tue Jan 10 14:20:43 2017 +0200

    Fix unit test after merge from mysql 5.5.35 perfschema
    
    The problem in MariaDB is introduced by this merge commit:
    c33db2cdc0ab70a874060d58710895f6dac3dea3
    
    The merge comes from mysql and the original author comes from this
    commit from MySQL:
    ------------------------------------------------
        commit 160b823d146288d66638e4a740d6d2da72f9a689
        Author: Marc Alff <marc.alff@oracle.com>
        Date:   Tue Aug 30 12:14:07 2016 +0200
    
        Bug#22551677 SIGNAL 11 IN LF_PINBOX_PUT_PINS
    
        Backport to 5.6
    ------------------------------------------------
    
    The breaking change is in start_socket_wait_v1 where instead of using
    m_thread_owner, we make use of my_pthread_getspecific_ptr to fetch a
    thread local storage value. Unfortunately this invalidates the
    "m_thread_owner" member when a socket is created. The internals of the
    socket structure have m_thread_owner set to NULL, but when checking for
    ownership we actually look at the current thread's key store.
    
    This seems incorrect however it is not immediately apparent why.
    
    To not diverge from MySQL's reasoning as it is not described what the
    actual problem was that this commit is trying to fix, I have adjusted the
    unittest to account for this new behaviour. We destroy the current
    thread in the unit test, such that the newly created socket actually has
    no thread owner. The m_thread_owner is untouched in all this.

commit 94e18e2987183e251849838a38ddc588dfefa58a
Merge: 682d4849ff6 c33db2cdc0a
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Tue Jan 10 12:32:54 2017 +0200

    Merge remote-tracking branch 'merge/merge-perfschema-5.6' into 10.0

commit f1ee011a6cbda1069a6ec9b5e2428451a64861fd
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Wed Jan 4 23:05:22 2017 +0200

    MDEV-11722 main.join_cache fails in buildbot on very slow builders
    
    The guilty part of the test checks for performance degradation on
    a query with numerous joins on an empty table. The test expects
    the query to take less than 1 second, and fails if it is not so
    (which can happen on very slow builders).
    
    The solution is to add more JOINs to the query. On a fixed server,
    it should not have any noticeable impact on the query execution,
    while on the unfixed version the query would take several times
    longer (e.g. 6.5 sec vs 1.5 sec). Thus, we can increase the margin
    for the error, and make the test fail when the query takes longer
    than 5 seconds.

commit e5d7fc967ede53407a65bfde3faec3181e35f19f
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Wed Jan 4 13:03:30 2017 +0200

    MDEV-10100 main.pool_of_threads fails sporadically in buildbot
    
    Backport the fix to 5.5, because it fails there too
    
    The patch fixes two test failures:
    - on slow builders, sometimes a connection attempt which should
      fail due to the exceeded number of thread_pool_max_threads
      actually succeeds;
    - on even slow builders, MTR sometimes cannot establish the
      initial connection, and check-testcase fails prior to the
      test start
    
    The problem with check-testcase was caused by connect-timeout=2
    which was set for all clients in the test config file. On slow
    builders it might be not enough.
    There is no way to override it for the pre-test check, so it needed
    to be substantially increased or removed.
    
    The other problem was caused by a race condition between sleeps
    that the test performs in existing connections and the connect
    timeout for the connection attempt which was expected to fail.
    If sleeps finished before the connect-timeout was exceeded, it
    would allow the connection to succeed.
    
    To solve each problem without making the other one worse,
    connect-timeout should be configured dynamically during the test.
    Due to the nature of the test (all connections must be busy
    at the moment when we need to change the timeout, and cannot execute
    SET GLOBAL ...), it needs to be done independently from the server.
    
    The solution:
    - recognize 'connect_timeout' as a connection option in mysqltest's
      "connect" command;
    - remove connect-timeout from the test configuration file;
    - use the new connect_timeout option for those connections which
      are expected to fail;
    - re-arrange the test flow to allow running a huge SLEEP
      without affecting the test execution time (because it would be
      interrupted after the main test flow is finished).
    
    The test is still subject to false negatives, e.g. if the connection
    fails due to timeout rather than due to the exceeded number of
    allowed threads, or if the connection on extra port succeeds due
    to a race condition and not because the special logic for the extra
    port. But those false negatives have always been possible there
    on slow builders, they should not be critical because faster builders
    should catch such failures if they appear.
    
    Conflicts:
            client/mysqltest.cc
            mysql-test/r/pool_of_threads.result
            mysql-test/t/pool_of_threads.test

commit 3871477c40efc826805f4c4e35b006c2c233dd26
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Sun Jan 1 20:06:03 2017 +0200

    MDEV-10100 main.pool_of_threads fails sporadically in buildbot
    
    The patch fixes two test failures:
    - on slow builders, sometimes a connection attempt which should
      fail due to the exceeded number of thread_pool_max_threads
      actually succeeds;
    - on even slow builders, MTR sometimes cannot establish the
      initial connection, and check-testcase fails prior to the
      test start
    
    The problem with check-testcase was caused by connect-timeout=2
    which was set for all clients in the test config file. On slow
    builders it might be not enough.
    There is no way to override it for the pre-test check, so it needed
    to be substantially increased or removed.
    
    The other problem was caused by a race condition between sleeps
    that the test performs in existing connections and the connect
    timeout for the connection attempt which was expected to fail.
    If sleeps finished before the connect-timeout was exceeded, it
    would allow the connection to succeed.
    
    To solve each problem without making the other one worse,
    connect-timeout should be configured dynamically during the test.
    Due to the nature of the test (all connections must be busy
    at the moment when we need to change the timeout, and cannot execute
    SET GLOBAL ...), it needs to be done independently from the server.
    
    The solution:
    - recognize 'connect_timeout' as a connection option in mysqltest's
      "connect" command;
    - remove connect-timeout from the test configuration file;
    - use the new connect_timeout option for those connections which
      are expected to fail;
    - re-arrange the test flow to allow running a huge SLEEP
      without affecting the test execution time (because it would be
      interrupted after the main test flow is finished).
    
    The test is still subject to false negatives, e.g. if the connection
    fails due to timeout rather than due to the exceeded number of
    allowed threads, or if the connection on extra port succeeds due
    to a race condition and not because the special logic for the extra
    port. But those false negatives have always been possible there
    on slow builders, they should not be critical because faster builders
    should catch such failures if they appear.

commit 8774a02364600279908bd9fb8b92d61dc4fcf60e
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Thu Dec 8 14:20:46 2016 +0400

    MDEV-11227 - mysqlimport -l doesn't issue UNLOCK TABLES
    
    Implementation of MDEV-7660 introduced unwanted incompatible change:
    modifications under LOCK TABLES with autocommit enabled are rolled back on
    disconnect. Previously everything was committed, because LOCK TABLES didn't
    adjust autocommit setting.
    
    This patch restores original behavior by reverting some changes done in
    MDEV-7660:
    - sql/sql_parse.cc: do not reset autocommit on LOCK TABLES
    - sql/sql_base.cc: do not set autocommit on UNLOCK TABLES
    - test cases: main.lock_tables_lost_commit, main.partition_explicit_prune,
      rpl.rpl_switch_stm_row_mixed, tokudb.nested_txn_implicit_commit,
      tokudb_bugs.db806
    
    But it makes InnoDB tables under LOCK TABLES ... READ [LOCAL] not protected
    against DML. To restore protection some changes from WL#6671 were merged,
    specifically MDL_SHARED_READ_ONLY and test cases.
    
    WL#6671 merge highlights:
    - Not all tests merged.
    - In MySQL LOCK TABLES ... READ acquires MDL_SHARED_READ_ONLY for all engines,
      in MariaDB MDL_SHARED_READ is always acquired first and then upgraded to
      MDL_SHARED_READ_ONLY for InnoDB only.
    - The above allows us to omit MDL_SHARED_WRITE_LOW_PRIO implementation in
      MariaDB, which is rather useless with InnoDB. In MySQL it is needed to
      preserve locking behavior between low priority writes and LOCK TABLES ... READ
      for non-InnoDB engines (covered by sys_vars.sql_low_priority_updates_func).
    - Omitted HA_NO_READ_LOCAL_LOCK, we rely on lock_count() instead.
    - Omitted "piglets": in MariaDB stream of DML against InnoDB table may lead to
      concurrent LOCK TABLES ... READ starvation.
    - HANDLER ... OPEN acquires MDL_SHARED_READ instead of MDL_SHARED in MariaDB.
    - Omitted SNRW->X MDL lock upgrade for IMPORT/DISCARD TABLESPAECE under LOCK
      TABLES.
    - Omitted strong locks for views, triggers and SP under LOCK TABLES.
    - Omitted IX schema lock for LOCK TABLES READ.
    - Omitted deadlock weight juggling for LOCK TABLES.
    
    Full WL#6671 merge status:
    - innodb.innodb-lock: fully merged
    - main.alter_table: not merged due to different HANDLER solution
    - main.debug_sync: fully merged
    - main.handler_innodb: not merged due to different HANDLER solution
    - main.handler_myisam: not merged due to different HANDLER solution
    - main.innodb_mysql_lock: fully merged
    - main.insert_notembedded: fully merged
    - main.lock: not merged (due to no strong locks for views)
    - main.lock_multi: not merged
    - main.lock_sync: fully merged (partially in MDEV-7660)
    - main.mdl_sync: not merged
    - main.partition_debug_sync: not merged due to different HANDLER solution
    - main.status: fully merged
    - main.view: fully merged
    - perfschema.mdl_func: not merged (no such test in MariaDB)
    - perfschema.table_aggregate_global_2u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_global_2u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_global_4u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_global_4u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_hist_2u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_hist_2u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_hist_4u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_hist_4u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_thread_2u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_thread_2u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_thread_4u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_thread_4u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_global_2u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_global_2u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_global_4u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_global_4u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_hist_2u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_hist_2u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_hist_4u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_hist_4u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_thread_2u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_thread_2u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_thread_4u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_thread_4u_3t: not merged (didn't fail in MariaDB)
    - sys_vars.sql_low_priority_updates_func: not merged
    - include/thr_rwlock.h: not merged, rw_pr_lock_assert_write_owner and
      rw_pr_lock_assert_not_write_owner are macros in MariaDB
    - sql/handler.h: not merged (HA_NO_READ_LOCAL_LOCK)
    - sql/mdl.cc: partially merged (MDL_SHARED_READ_ONLY only)
    - sql/mdl.h: partially merged (MDL_SHARED_READ_ONLY only)
    - sql/lock.cc: fully merged
    - sql/sp_head.cc: not merged
    - sql/sp_head.h: not merged
    - sql/sql_base.cc: partially merged (MDL_SHARED_READ_ONLY only)
    - sql/sql_base.h: not merged
    - sql/sql_class.cc: fully merged
    - sql/sql_class.h: fully merged
    - sql/sql_handler.cc: merged partially (different solution in MariaDB)
    - sql/sql_parse.cc: partially merged, mostly omitted low priority write part
    - sql/sql_reload.cc: not merged comment change
    - sql/sql_table.cc: not merged SNRW->X upgrade for IMPORT/DISCARD TABLESPACE
    - sql/sql_view.cc: not merged
    - sql/sql_yacc.yy: not merged (MDL_SHARED_WRITE_LOW_PRIO, MDL_SHARED_READ_ONLY)
    - sql/table.cc: not merged (MDL_SHARED_WRITE_LOW_PRIO)
    - sql/table.h: not merged (MDL_SHARED_WRITE_LOW_PRIO)
    - sql/trigger.cc: not merged
    - storage/innobase/handler/ha_innodb.cc: merged store_lock()/lock_count()
      changes (in MDEV-7660), didn't merge HA_NO_READ_LOCAL_LOCK
    - storage/innobase/handler/ha_innodb.h: fully merged in MDEV-7660
    - storage/myisammrg/ha_myisammrg.cc: not merged comment change
    - storage/perfschema/table_helper.cc: not merged (no MDL support in MariaDB PFS)
    - unittest/gunit/mdl-t.cc: not merged
    - unittest/gunit/mdl_sync-t.cc: not merged
    
    MariaDB specific changes:
    - handler.heap: different HANDLER solution, MDEV-7660
    - handler.innodb: different HANDLER solution, MDEV-7660
    - handler.interface: different HANDLER solution, MDEV-7660
    - handler.myisam: different HANDLER solution, MDEV-7660
    - main.mdl_sync: MDEV-7660 specific changes
    - main.partition_debug_sync: removed test due to different HANDLER solution,
      MDEV-7660
    - main.truncate_coverage: removed test due to different HANDLER solution,
      MDEV-7660
    - mysql-test/include/mtr_warnings.sql: additional cleanup, MDEV-7660
    - mysql-test/lib/v1/mtr_report.pl: additional cleanup, MDEV-7660
    - plugin/metadata_lock_info/metadata_lock_info.cc: not in MySQL
    - sql/sql_handler.cc: MariaDB specific fix for mysql_ha_read(), MDEV-7660

commit 30a59a8d78f10f738aef124fe6736851275192bd
Author: Sreeharsha Ramanavarapu <sreeharsha.ramanavarapu@oracle.com>
Date:   Tue Dec 13 16:41:05 2016 +0530

    Bug #24595937: INCORRECT BEHAVIOR WHEN LOADING DATA TO VIEW
    
    Issue:
    ------
    While using the LOAD statement to insert data into an
    updateable view, the check to verify whether a column
    is actually updatable is missing.
    
    Solution for 5.5 and 5.6:
    -------------------------
    For a view whose column-list in specified in the LOAD
    command, this check is not performed. This fix adds the
    check.
    
    This is a partial backport of Bug#21097485.
    
    Solution for 5.7 and trunk:
    ---------------------------
    For a view whose column-list is specified in the LOAD
    command, this check is already performed. This fix adds the
    same check when no column-list is specified.

commit 4dfb6a3f54cfb26535636197cc5fa70fe5bacc2e
Author: Vladislav Vaintroub <wlad@mariadb.com>
Date:   Wed Sep 28 14:16:38 2016 +0000

    MDEV-11083 performance schema test fail with threadpool
    
    Fix PSI idle and socket instrumentation in threadpool

commit 0a132ae7a29d21397ff7cf031f7fdc42d218a01f
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Sun Oct 16 18:38:34 2016 +0000

    MariaRocks: disable more of my_io_perf_t usage

commit 50f19ca8099994e992e1b411c7c05287855a7bdd
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Tue Sep 20 15:30:57 2016 +0200

    Remove unnecessary global mutex in parallel replication.
    
    The function apply_event_and_update_pos() is called with the
    rli->data_lock mutex held. However, there seems to be nothing in the
    function actually needing the mutex to be held. Certainly not in the
    parallel replication case, where sql_slave_skip_counter is always 0
    since the non-zero case is handled by the SQL driver thread.
    
    So this patch makes parallel replication use a variant of
    apply_event_and_update_pos() without the need to take the
    rli->data_lock mutex. This avoids one contended global mutex for each
    event executed, which might improve performance on CPU-bound workloads
    somewhat.
    
    Signed-off-by: Kristian Nielsen <knielsen@knielsen-hq.org>

commit 84dd64702a8f3eebe3fba6f8fbcbe767cab3505b
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Sun Oct 9 16:02:13 2016 +0000

    Fix compilation failure in rdb_perf_context.h
    
    Rdb_atomic_perf_counters uses my_io_perf_atomic_struct
    which uses atomic_stat from include/atomic_stat.h
    which was backported in the previous cset.

commit 20bd26e6df3acf739ff1b2cffc41084367cd6dd0
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Sun Oct 9 15:27:22 2016 +0000

    Backport from facebook/mysql-5.6:
    
    commit b5fda565d4bad66f3b5a6432236b96743ccfd323
    Author: Steaphan Greene <steaphan@fb.com>
    Date:   Fri Feb 7 21:34:04 2014 -0800
    
        Add basic atomic_stats type
    
        Summary:
        WebScaleSQL Feature: Basic Stats Support
    
        This is a simple class template that implements an atomic stats variable.
    
        The focus is on performance, not accuracy.  No set operations are
        guaranteed.  The other operations are all atomic, so values should not
        actually be lost - however, there is no attempt to be consistent in
        reading multiple stats, nor any concern that different threads see any
        consistent view across multiple stats.
    
        Test Plan:
        This has been tested quite a bit in isolation, and no problems have been
        found.  However, this has never been used in production.  Also, a newer,
        more sophisticated, version of this is already in development.
    
        It also shows a small perf gain in the larger stats diffs (Table Stats,
        User Stats, etc...), when compared to the built-in MySQL atomics.
    
        Reviewers: pivanof
    
        Reviewed By: pivanof
    
        CC: jtolmer, MarkCallaghan, flamingcow, jeremycole, andrew-ford, inaam-rana, liang.guo.752
    
        Differential Revision: https://reviews.facebook.net/D16029
        Differential Revision: https://reviews.facebook.net/D16449

commit 2e914acb7862a49db577adb29a4a1e5712991a29
Merge: bb8b6589544 e3124a8cd79
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Tue Sep 27 19:00:08 2016 +0200

    Merge branch 'merge/merge-perfschema-5.6' into 10.0

commit 61ab7333db3b2dcc0e2b7d5b44c0692a6b0c3e8a
Author: Igor Babaev <igor@askmonty.org>
Date:   Sat Sep 24 20:29:56 2016 -0700

    Fixed bug mdev-10883.
    When a prepared statement uses a CTE definition with a column list
    renaming of columns of the CTE expression  must be performed
    for every execution of the prepared statement.

commit 9a5930bcdfc72f3b63569332205d8574a586247d
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Tue Sep 20 20:44:49 2016 +0200

    Implement first_value and last_value as window functions
    
    Currently the implementation doesn't support removal, thus the
    computation is performed by running over the window frame again.

commit 00bf18e2bf6a1b57b8ce94a0bf0b5fa6c353bdda
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Tue Sep 20 11:11:24 2016 +0200

    Move table record writing outside of loop
    
    We can set values in the record buffer first and only perform one table
    write call at the end. No need to write to file every time one column is
    updated.
    
    Also, remove unused method from Table_read_cursor.

commit 2857ff3c98cd2720d28aaf452f2c63ca7f98604b
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Fri Sep 16 20:38:22 2016 +0200

    MDEV-10815: Window Function Expressions Wrong Results
    
    Fix window function expressions such as win_func() <operator> expr.
    The problem was found in 2 places.
    First, when we have complex expressions containing window functions, we
    can only compute their final value _after_ we have computed the window
    function's values. These values must be stored within the temporary
    table that we are using, before sending them off.
    This is done by performing an extra copy_funcs call before the final
    end_send() call.
    
    Second, such expressions need to have their inner arguments,
    changed such that the references within those arguments point to fields within
    the temporary table.
    Ex: sum(t.a) over (order by t.b) + sum(t.a) over (order by t.b)
    Before this fix, t.a pointed to the original table's a field. In order
    to compute the sum function's value correctly, it needs to point to the
    copy of this field inside the temp table.
    This is done by calling split_sum_func for each argument in the
    expression in turn.
    
    The win.test results have also been updated as they contained wrong
    values for such a use case.

commit e56a53920b0075f9a534610032ee05f2e249e3ae
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Fri Jul 1 13:57:18 2016 +0400

    MDEV-10315 - Online ALTER TABLE may get stuck in tdc_remove_table
    
    There was race condition between online ALTER TABLE and statements performing
    TABLE_SHARE release without marking it flushed (e.g. in case of table cache
    overflow, SET @@global.table_open_cache, manager thread purging table cache).
    
    The reason was missing mysql_cond_broadcast().

commit d876f4bd5e0f3934fd9d95399be1940a1de43e46
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Wed Sep 21 13:20:24 2016 +0200

    disable session_track_schema for perfschema.socket_summary_by_instance_func
    
    because it counts number of bytes sent and expects it to be independent
    from the database name length

commit c22d307afa1a6accbfe9857256cad01c1eacd677
Author: Igor Babaev <igor@askmonty.org>
Date:   Wed Sep 14 01:06:45 2016 -0700

    Fixed bug mdev-10785.
    The condition pushed into WHERE/HAVING of a materialized
    view/derived table may differ for different executions of
    the same prepared statement. That's why the should be
    ANDed with the existing WHERE/HAVING conditions only after all
    permanent transformations of these conditions has been
    performed.

commit dc900cc8461ed995875d0dda5d372d95c58a94f0
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sun Sep 11 10:57:05 2016 +0200

    Remove a bunch of TODO's, fix perfschema.threads_innodb test

commit 747893a854515e96891dcfafed8adcc721e8011f
Author: Nirbhay Choubey <nirbhay@mariadb.com>
Date:   Fri Sep 2 14:40:09 2016 -0400

    MDEV-10545: Update perfschema.nesting result

commit 88a1592b0a785aff0941540a9543ef2964caaf21
Author: Daniele Sciascia <daniele.sciascia@galeracluster.com>
Date:   Tue Jun 14 17:18:21 2016 +0200

    MW-286 Avoid spurious deadlock errors when wsrep_on is disabled
    
    If a conflict happens under wsrep_on, the THD's wsrep_conflict_state
    is typically set to MUST_ABORT and cleared later, when transaction is
    aborted. However, when wsrep_on is disabled, no check is performed to
    see whether wsrep_conflict_state is set. So this potentially creates
    spurious deadlock errors on the subsequent statement that runs with
    wsrep_on enabled.
    To avoid this problem wsrep_thd_set_conflict_state() sets the conflict
    state only if wsrep_on is enabled.

commit e672d3fb326f717c9e9d26f9bf79ea84ce022e6e
Merge: 57fbc603bf1 0d8bb019b69
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Wed Aug 10 19:44:28 2016 +0200

    Merge branch 'merge/merge-perfschema-5.6' into 10.0
    
    5.6.32

commit a63a250d40be0254c6a5633329a6b0577eaee74c
Author: Neha Kumari <neha.n.kumari@oracle.com>
Date:   Mon Jul 25 20:34:20 2016 +0530

    BUG#23509275 :DBUG_PRINT in THD::decide_logging_format prints incorrectly, access out-of-bound
    
    Problem:
    In debug builds, there is a chance that an out-of-bounds
    read is performed when tables are locked in
    LTM_PRELOCKED_UNDER_LOCK_TABLES mode. It can happen because
    the debug code uses enum values as index for an array of
    mode descriptions, but it only takes into consideration 3
    out of 4 of the enum values.
    
    Fix:
    This patch fixes it by implementing a getter for the enum which
    returns a string representation of the enum,
    effectively removing the out-of-bounds read.
    
    Moreover, it also fixes the lock mode descriptions that
    would be print out in debug builds.

commit 6986645c7924ef3292e233d9365520b29eb8fa0d
Author: Christopher Powers <chris.powers@oracle.com>
Date:   Thu Jun 30 20:42:29 2016 +0200

    Bug#14111584 PB2: PERFSCHEMA.AGGREGATE FAILS ON PB2 SPORADICALLY
    
    Permanently removed test case perfschema.aggregate.
    
    The Performance Schema is generally lock-free, allowing for
    race conditions that might arise from multi-threaded operation
    which occasionally results in temporary and/or minor variances
    when aggregating statistics. This test needs to be redesigned
    to accommodate such variances.

commit d6d40112110e05f62122e90f209f05f273c7e6dc
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Wed Jun 1 17:54:23 2016 +0400

    Move wait_for_mdl_deadlock_detector() call to tc_remove_table()
    
    As a side effect tc_remove_all_unused_tables() has to call
    tc_wait_for_mdl_deadlock_detector() once per TABLE object now, while it called
    it only once before. This should be acceptable since actual wait will still be
    performed only once. It only adds redundant checks for all_tables_refs.

commit c9629daa1ed383d5ea90b7a8542cf2e2e7f7f842
Author: Alexander Barkov <bar@mariadb.org>
Date:   Thu May 19 18:57:23 2016 +0400

    This patch is a cleanup simplifying upcoming
    "MDEV-8909 union parser cleanup" changes.
    
    When the server parses a query like
      SELECT * FROM (SELECT 1);
    a sequence of calls
      st_select_lex::init_nested_join() ..
      st_select_lex::end_nested_join()
    was performed two times (tested in gdb).
    Both pairs of calls seem to be redundant for a query
    like this, because there are actually no any joins here.
    
    This patch moved "table_ref_select" inside "select_derived",
    which revealed that one the pairs was definitely redundant:
    After this transformation we got an init_nested_join()
    immediately followed by end_nested_join() for the same st_select_lex,
    which has no any sense. So this pair of calls was removed.

commit 4f1c81de2875cbce4180e152d12a8a1df60c717a
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Fri Apr 29 18:39:18 2016 +0200

    after-merge: simplify, fix a bug
    
    * simplify the code at default: label
    * bugfix: flush the checksum for NULL fields
      (perfschema.checksum was failing)
    * cleanup: put repeated code into a function

commit 9d9c60fb12f7443fae9d22e716391ed75cf2b41a
Author: Igor Babaev <igor@askmonty.org>
Date:   Fri Feb 12 20:33:56 2016 -0800

    Initial patch for the implementation of window functions (MDEV-6115):
    - All parsing problems look like resolved
    - Stub performing name resolution of window functions
    in simplest queries has been added.
For keyword optim:
commit e3a7f75aefb882a291b7308d84e8a36b34d3009f
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed May 10 14:14:50 2017 +0300

    MDEV-12679 purge_sys_t::~purge_sys_t(): Assertion `latch.magic_n == 0' failed on --bootstrap (CMAKE_BUILD_TYPE=Debug)
    
    rw_lock_free_func(): Assign lock->magic_n = 0 in debug builds,
    because sometimes, the assignment in the explicit destructor call
    is being optimized away.
    This was verified when using GCC 6.3.0 with -O3 -g -mtune=native
    on a Debian GNU/Linux 9.0 system on AMD64.

commit ce8ee7d90b4f7dd784e1d7587093e671b35303f0
Author: Igor Babaev <igor@askmonty.org>
Date:   Wed May 3 13:49:43 2017 -0700

    Fixed the bug mdev-11990.
    
    The usage of windows functions when all tables were optimized away
    by min/max optimization were not supported. As result a result,
    the queries that used window functions with min/max aggregation
    over the whole table returned wrong result sets.
    The patch fixed this problem.

commit d17093b2edfbd1422f224c553eb73c9263eeeb1a
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Tue Apr 18 17:44:30 2017 +0200

    MDEV-12293 Assertion `table->no_keyread || !table->covering_keys.is_set(tab->index) || table->file->keyread == tab->index' failed
    
    sometimes the optimizer starts a keyread on some index
    and later (but before any actual index accesses) changes
    it to a keyread on a different index

commit 14fe6dd23947636caca6743425ad0501f9b73f51
Author: Aditya A <aditya.a@oracle.com>
Date:   Wed Feb 15 12:00:07 2017 +0530

    Bug #23046302 COUNT(*) MUCH SLOWER ON 5.7 THAN 5.6
    
    ANALYSIS
    
    This is regression caused due to worklog 6742 which
    implemented ha_innobase::records() which always
    uses clustered index to get the row count. Previously
    optimizer chose secondary index which was smaller in
    size of clustered index to scan for rows and resulted in
    a quicker scan.
    
    FIX
    
    After discussion it was decided to remove this feature in 5.7.
    
    [#rb14040 Approved by Kevin and Oystein ]

commit 0906dc49e8c442ca00b8b7889ee09812040e5638
Author: Igor Babaev <igor@askmonty.org>
Date:   Mon Apr 24 14:56:53 2017 -0700

    Fixed the bug mdev-12564.
    
    Here's  what started happening after the patch that fixed
    the bug mdev-10454 with query reported for the bug
    SELECT * FROM t t1 right JOIN t t2 ON (t2.pk = t1.pk)
      WHERE (t2.i, t2.pk) NOT IN ( SELECT t3.i, t3.i FROM t t3, t t4 )
            AND t1.c = 'foo';
    The patch added an implementation of propagate_equal_fields() for
    the class Item_row and thus opened the possibility of equal fields
    substitutions.
    At the prepare stage after setup_conds() called for WHERE condition
    had completed the flag of maybe_null of the Item_row object created
    for  (t2.i, t2.pk) was set to false, because the maybe_null flags of
    both elements were set to false. However the flag of maybe_null for
    t1.pk from the ON condition were set to true, because t1 was an inner
    table of an outer join.
    At the optimization stage the outer join was converted to inner join,
    but the maybe_null flags were not corrected and remained the same.
    So after the substitution t2.pk/t1.pk. the maybe_null flag for the
    row remained false while the maybe_flag for the second element of
    the row was true. As a result, when the in-to_exists transformation
    was performed for the NOT IN predicate the guards variables were
    not created for the elements of the row, but a guard object for
    the second element was created. The object were not valid because
    it referred to NULL as a guard variable. This ultimately caused
    a crash when the expression with the guard was evaluated at the
    execution stage.
    
    The patch made sure that the guard objects are not created without
    guard variables.
    
    Yet it does not resolve the problem of inconsistent maybe_null flags.
    and it might be that the problem will pop op in other pieces of code.
    The resolution of this problem is not easy, but the problem should
    be resolved in future versions.

commit 92f7f81b6b0a617c4e1c128ffee34961b9fb6799
Author: Shaohua Wang <shaohua.wang@oracle.com>
Date:   Tue Aug 16 03:33:21 2016 +0200

    BUG#24331265 MEMORY LEAK IN SOME INNODB FTS TESTS
    
    We don't free some memory used by fts optimize thread in release build.
    
    Patch approved by Allen.Lai over IM.

commit 82196f0131a26c0f72e7452ff172eb2f93067efd
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Mon Apr 3 17:18:37 2017 +0200

    MDEV-11995 ALTER TABLE proceeds despite reporting ER_TOO_LONG_KEY error
    
    automatic shortening of a too-long non-unique key should
    be not a warning, but a note. It's a normal optimization,
    doesn't affect correctness, and should never be converted to
    an error, no matter how strict sql_mode is.

commit 00ab154d49853e20f48a516897e14bf67c58671e
Author: Igor Babaev <igor@askmonty.org>
Date:   Mon Apr 3 15:59:38 2017 -0700

    Fixed bug mdev-10454.
    
    The patch actually fixes the old defect of the optimizer that
    could not extract keys for range access from IN predicates
    with row arguments.
    
    This problem was resolved in the mysql-5.7 code. The patch
    supersedes what was done there:
     - it can build range access when not all components of
     the first row argument are refer to the columns of the table
     for which the range access is constructed.
     - it can use equality predicates to build range access
     to the table that is not referred to in this argument.

commit 238c6700dd52c00e99a24126379b85657d3e3442
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sat Apr 1 18:55:42 2017 +0200

    include C/C fix for binding of int values to string variables
    
    fixes many test failures in optimized builds in --ps-protocol

commit ac78927aefa2bd0d869d999839480d69086a9882
Author: Igor Babaev <igor@askmonty.org>
Date:   Fri Feb 24 00:10:08 2017 -0800

    Fixed bug mdev-7992.
    
    'Not exists' optimization can be used for nested outer joins
    only if IS NULL predicate from the WHERE condition is activated.
    So we have to check that all guards that wrap this predicate
    are in the 'open' state.
    This patch supports usage of 'Not exists' optimization for any
    outer join, no matter how it's nested in other outer joins.
    
    This patch is also considered as a proper fix for bugs
    #49322/#58490 and LP #817360.

commit 5ddfcb05ca98a62b01da1c8b939e5303f900a5cc
Author: Oleksandr Byelkin <sanja@mariadb.com>
Date:   Fri Feb 17 13:37:18 2017 +0100

    MDEV-9455: [ERROR] mysqld got signal 11
    
    Switch MEM_ROOT to non-prune_partitions() during optimizing subselect.

commit 37925c6ccc61bd4d5af4956dbd877c69983c09f3
Author: Igor Babaev <igor@askmonty.org>
Date:   Wed Feb 15 22:41:45 2017 -0800

    Fixed bug mdev-9924.
    
    Supported queries with window functions when GROUP BY could be
    optimized away.

commit 9fe9fb68acd763ad3908c03d82d4de577d6f0c21
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Tue Feb 14 14:02:29 2017 +0200

    MDEV-10859: Wrong result of aggregate window function in query with HAVING and no ORDER BY
    
    Window functions need to be computed after applying the HAVING clause.
    An optimization that we have for regular, non-window function, cases is
    to apply having only during sending of the rows to the client. This
    allows rows that should be filtered from the temporary table used to
    store aggregation results to be stored there.
    
    This behaviour is undesireable for window functions, as we have to
    compute window functions on the result-set after HAVING is applied.
    Storing extra rows in the table leads to wrong values as the frame
    bounds might capture those -to be filtered afterwards- rows.

commit f675eab7dc7f1eb4f4b61bfdd548d9e8052678a4
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Tue Feb 7 14:02:25 2017 +0200

    MDEV-10122: MariaDB does not support group functions in some contexts where MySQL does
    
    The problematic queries involve unions. For unions we have an
    optimization where we skip the ORDER BY clause in a query from one side
    of the union if it will be performed later due to UNION.
    EX:
    (SELECT a from t1 ORDER BY a) ORDER BY b;
    The first ordering by a is not necessary and it gets removed.
    
    The problem is that we still need to resolve the Items before removing the
    ORDER BY list from the
    SELECT_LEX structure. During this final resolve step however, we forgot to
    allow SET functions within the ORDER BY clause. This caused us to return
    an "Invalid use of group function" error during the checking performed
    by fix_fields in Item_sum::init_sum_func_check.

commit 8d99166c697516ad9b4084c2bc10ba4acf8b9744
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Mon Feb 6 23:52:47 2017 +0100

    MDEV-11640 gcol.gcol_select_myisam fails in buildbot on Power
    
    JOIN_CACHE's were initialized in  check_join_cache_usage()
    from make_join_readinfo(). After that make_join_readinfo() was looking
    whether it's possible to use keyread. Later, after make_join_readinfo(),
    optimizer decided whether to use filesort. And even later, at the
    execution time, from join_read_first(), keyread was actually enabled.
    
    The problem is, that if a query uses a vcol, base columns that it
    depends on are automatically added to the read_set - because they're
    needed to calculate the vcol. But if we're doing keyread, vcol is taken
    from the index, not calculated, and base columns do not need to  be
    in the read set (even should not be - as they aren't getting values).
    
    The bug was that JOIN_CACHE used read_set with base columns,
    they were not read because of keyread, so it was caching garbage.
    
    So read_set is only known after the keyread was decided. And after the
    filesort was decided, as filesort doesn't use keyread. But
    check_join_cache_usage() needs to be done in make_join_readinfo(),
    as the code below depends on these checks,
    
    Fix: keep JOIN_CACHE checks where they were, but move initialization
    down to the very end of JOIN::optimize_inner. If keyread was enabled,
    update the read_set to include only columns that are part of the index.
    Copy the keyread logic from join_read_first() to happen at optimize time.

commit 460ff39871d6554ec17714a79a174cf8f80f7817
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Thu Feb 2 12:44:01 2017 +0100

    bugfix: don't calculate vcols if doing keyread
    
    old code didn't calculate vcols that were part of keyread,
    but calculated other vcols. It was wrong - there was no guarantee
    that vcol's base columns were part of keyread.
    
    Technically it's possible for the vcol not be a part of keyread,
    but all its base columns being part of keyread. But currently the
    optimizer doesn't do that, keyread is only used if it covers
    all columns used in the query.
    
    This fixes crashes of vcol.vcol_trigger_sp_innodb

commit f003cc8a35a4cdd9621621f95da889777b8b31b0
Author: Igor Babaev <igor@askmonty.org>
Date:   Wed Jan 18 11:42:41 2017 -0800

    Fixed bug mdev-8603.
    
    When building different range and index-merge trees the range optimizer
    could build an index-merge tree with an index scan containing less ranges
    then needed. This index-merge could be chosen as the best. Following this
    index-merge the executioner missed some rows in the result set.
    The invalid index scan was built due to an inconsistency in the code
    back-ported from mysql into 5.3 that fixed mysql bug #11765831:
    the code added to key_or() could change shared keys of the second
    ored tree. Partially the problem was fixed in the patch for mariadb
    bug #823301, but it turned out that only partially.

commit b4616c40be00c5c8a2a73d537d676d8ddb7c84cf
Author: Sachin Setiya <sachinsetia1001@gmail.com>
Date:   Tue Jan 3 10:45:55 2017 +0530

    MDEV-7955 WSREP() appears on radar in OLTP RO
    
    This commit is for optimizing WSREP(thd) macro.
    
    #define WSREP(thd) \
      (WSREP_ON && wsrep && (thd && thd->variables.wsrep_on))
    
    In this we can safely remove wsrep and thd. We are not removing WSREP_ON
    because this will change WSREP(thd) behaviour.
    
    Patch Credit:- Nirbhay Choubay, Sergey Vojtovich

commit f41bd7e54512d4e283ba909b4c3a700382cf1147
Author: Varun Gupta <varunraiko1803@gmail.com>
Date:   Tue Dec 13 05:07:02 2016 +0530

    MDEV-11060 sql/protocol.cc:532: void Protocol::end_statement(): Assertion `0' failed
    
    In file sql/opt_range.cc,when calculate_cond_selectivity_for_table() is called with optimizer_use_condition_selectivity=4 then
            - thd->no_errors is set to 1
            - the original value of thd->no_error is not restored to its original value
            - this is causing the assertion to fail in the subsequent queries
    
    Fixed by restoring the original value of thd->no_errors

commit 94462aa9e6dbe71ac49192553e9fcd130d470c3a
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sat Nov 19 16:23:33 2016 +0100

    bugfix: remove broken insert t values () optimization
    
    * wrong results for 5.7 and 10.1- vcols, and for indexed vcols
    * only helps in rare cases and only minimally

commit aebb1038aab6cadc3408fc194d1d9331d2b673ff
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Wed Nov 23 12:54:59 2016 +0100

    bugfix: multi-UPDATE, vcols, const tables
    
    multi-update was setting up read_set/vcol_set in
    multi_update::initialize_tables() that is invoked after
    the optimizer (JOIN::optimize_inner()). But some rows - if they're from
    const tables - will be read already in the optimizer, and these rows
    will not have all necessary column/vcol values.
    
    * multi_update::initialize_tables() uses results from the optimizer
      and cannot be moved to be called earlier.
    * multi_update::prepare() is called before the optimizer, but
      it cannot set up read_set/vcol_set, because the optimizer
      might reset them (see SELECT_LEX::update_used_tables()).
    
    As a fix I've added a new method, select_result::prepare_to_read_rows(),
    it's called from inside the optimizer just before make_join_statistics().

commit edf4cc7519b84a2e00b5284761781352b3d376f3
Merge: 9320d8ae30c e76183f0996
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Dec 12 09:56:42 2016 +0200

    Merge pull request #275 from grooverdan/10.2-MDEV-11075-crc32-runtime-detect-getauxval
    
    MDEV-11075: Power - runtime detection of optimized instructions

commit e76183f0996ba97bf987f2b2d3e7f12d32055703
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Mon Dec 12 15:35:08 2016 +1100

    MDEV-11075: Power - runtime detection of optimized instructions
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit c868acdf656213cdc081c4c965a1bcf3d22558bb
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Dec 5 21:04:30 2016 +0200

    MDEV-11487 Revert InnoDB internal temporary tables from WL#7682
    
    WL#7682 in MySQL 5.7 introduced the possibility to create light-weight
    temporary tables in InnoDB. These are called 'intrinsic temporary tables'
    in InnoDB, and in MySQL 5.7, they can be created by the optimizer for
    sorting or buffering data in query processing.
    
    In MariaDB 10.2, the optimizer temporary tables cannot be created in
    InnoDB, so we should remove the dead code and related data structures.

commit 2b6498b0027b998de8f4fc762780306fea7ddfa7
Merge: 7ca1e2abad4 850ed6e4cc9
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Fri Dec 9 08:20:27 2016 +0200

    Merge pull request #274 from grooverdan/10.2-MDEV-11075-innochecksum-bigendian-optimised
    
    MDEV-11075: changing to algorithm innodb from crc32

commit 850ed6e4cc9c4608844e5188b4be226fa63e2736
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Fri Dec 9 14:58:23 2016 +1100

    MDEV-11075: changing to algorithm innodb from crc32
    
    With innodb compressed pages formerly as crc32 changing to the
    innodb checksum, optimize for speed by only calcuating the big
    endian variant of crc32 after checking that the little endian
    doesn't validate the page.
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit ab65db6d3fc0c876130cefb45a63cdaad4018f8c
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Thu Dec 8 21:03:45 2016 +0100

    Revert "MDEV-10713: signal 11 error on multi-table update - crash in handler::increment_statistics or in make_select or assertion failure pfs_thread == ((PFS_thread*) pthread_getspecific((THR_PFS)))"
    
    This reverts commit 035a5ac62a0215c2f6e3e363331e3e984d780138.
    
    Two minor problems and one regression:
    1. caching the value in str_result. Other Item methods may use it,
       destroying the cache. See, for example, Item::save_in_field, where
       str_result is moved to use a local buffer (this failed main.grant)
    2. Item_func_conv_charset::safe is now set too late, it's initialized
       only in val_str() but checked before that, this failed many tests
       in optimized builds.
    
    to fix 1 - use tmp_result instead of str_result, to fix 2, use
    the else branch in the Item_func_conv_charset constructor to set
    safe purely from charset properties.
    
    But this introduces a regression, constant strings can no longer be
    converted, say, from utf8 to latin1 (because 'safe' will be false).
    This fails few tests too. There is no way to fix it without reverting
    the commit and converting constants, as before, in the constructor.

commit 7ca1e2abad42a7436e6b668b4568d6fadc2ca165
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Dec 8 14:34:54 2016 +0200

    MDEV-11422 rpl.rpl_parallel_optimistic_nobinlog failed in buildbot with "InnoDB: Killing connection failed Deadlock"
    
    innobase_kill_query(): Remove the bogus warning message
    (for the valid outcome err==DB_DEADLOCK) that was added in
    
    commit fec844aca88e1c6b9c36bb0b811e92d9d023ffb9
    Author: Jan Lindström <jan.lindstrom@mariadb.com>
    Date:   Tue Sep 6 09:43:16 2016 +0300
    
        Merge InnoDB 5.7 from mysql-5.7.14.
    
    Also, remove some redundant variables and add a debug assertion for
    enforcing the proper outcome of lock_trx_handle_wait().

commit b11eb36963793452128ebaa3a2f4057c4eca20f2
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Thu Dec 1 17:14:47 2016 +1100

    MDEV-11451: isinf || isnan -> !isfinite
    
    There are only 3 logical states for a number. The isfinite is a
    single function call rather than multiple leaving scope for compiler
    /architecture optimization.
    
    Changed the logic as follows in a few files.
    
    my_isinf(square) || my_isnan(square) -> !isfinite(square)
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit 410bf82b98cb2b29e7663ea8f2fc2d45cd0579b0
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Mon Dec 5 08:35:55 2016 +1100

    MDEV-9872: Valgrind supports CRC32B and CRC32Q since valgrind-3.6.1
    
    We don't need to drop down to unoptimized crc because of valgrind now.
    
    Valgrind-3.6.1 was released 16 February 2011.
    
    The Power8 ASM instructions seem to be supported in 3.9.0 (31 October 2013).
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit e493c6bb432a4b83277e22c236a39b82a4859356
Merge: a68d1352b60 3bec0b327c7
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Mon Nov 28 09:57:28 2016 +0100

    Merge remote-tracking branch 'my/tokudb_optimistic_parallel_replication' into 10.1

commit d247d64988fb3b5d348e412813593a13f3be91fa
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Nov 25 06:28:02 2016 +0200

    MDEV-11349 (2/2) Fix some bogus-looking Valgrind warnings
    
    buf_block_init(): Initialize buf_page_t::flush_type.
    For some reason, Valgrind 3.12.0 would seem to flag some
    bits in adjacent bitfields as uninitialized, even though only
    the two bits of flush_type were left uninitialized. Initialize
    the field to get rid of many warnings.
    
    buf_page_init_low(): Initialize buf_page_t::old.
    For some reason, Valgrind 3.12.0 would seem to flag all 32
    bits uninitialized when buf_page_init_for_read() invokes
    buf_LRU_add_block(bpage, TRUE). This would trigger bogus warnings
    for buf_page_t::freed_page_clock being uninitialized.
    (The V-bits would later claim that only "old" is initialized
    in the 32-bit word.) Perhaps recent compilers
    (GCC 6.2.1 and clang 4.0.0) generate more optimized x86_64 code
    for bitfield operations, confusing Valgrind?
    
    mach_write_to_1(), mach_write_to_2(), mach_write_to_3():
    Rewrite the assertions that ensure that the most significant
    bits are zero. Apparently, clang 4.0.0 would optimize expressions
    of the form ((n | 0xFF) <= 0x100) to (n <= 0x100). The redundant
    0xFF was added in the first place in order to suppress a
    Valgrind warning. (Valgrind would warn about comparing uninitialized
    values even in the case when the uninitialized bits do not affect
    the result of the comparison.)

commit cdaa1d768ebc002b968dee347c1928fef87b9537
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Nov 25 06:09:00 2016 +0200

    MDEV-11349 (1/2) Fix some clang 4.0 warnings
    
    In functions that declare pointer parameters as nonnull,
    remove nullness checks, because GCC would optimize them away anyway.
    
    Use #ifdef instead of #if when checking for a configuration flag.
    
    Clang says that left shifts of negative values are undefined.
    So, use ~0U instead of ~0 in a number of macros.
    
    Some functions that were defined as UNIV_INLINE were declared as
    UNIV_INTERN. Consistently use the same type of linkage.
    
    ibuf_merge_or_delete_for_page() could pass bitmap_page=NULL to
    buf_page_print(), conflicting with the __attribute__((nonnull)).

commit a68d1352b60bfc3a424fd290a4f5a1beae1bb71e
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Nov 25 06:28:02 2016 +0200

    MDEV-11349 (2/2) Fix some bogus-looking Valgrind warnings
    
    buf_block_init(): Initialize buf_page_t::flush_type.
    For some reason, Valgrind 3.12.0 would seem to flag some
    bits in adjacent bitfields as uninitialized, even though only
    the two bits of flush_type were left uninitialized. Initialize
    the field to get rid of many warnings.
    
    buf_page_init_low(): Initialize buf_page_t::old.
    For some reason, Valgrind 3.12.0 would seem to flag all 32
    bits uninitialized when buf_page_init_for_read() invokes
    buf_LRU_add_block(bpage, TRUE). This would trigger bogus warnings
    for buf_page_t::freed_page_clock being uninitialized.
    (The V-bits would later claim that only "old" is initialized
    in the 32-bit word.) Perhaps recent compilers
    (GCC 6.2.1 and clang 4.0.0) generate more optimized x86_64 code
    for bitfield operations, confusing Valgrind?
    
    mach_write_to_1(), mach_write_to_2(), mach_write_to_3():
    Rewrite the assertions that ensure that the most significant
    bits are zero. Apparently, clang 4.0.0 would optimize expressions
    of the form ((n | 0xFF) <= 0x100) to (n <= 0x100). The redundant
    0xFF was added in the first place in order to suppress a
    Valgrind warning. (Valgrind would warn about comparing uninitialized
    values even in the case when the uninitialized bits do not affect
    the result of the comparison.)

commit 8da33e3a868e7ab4472823f8f3bfab3d5cd1833e
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Nov 25 06:09:00 2016 +0200

    MDEV-11349 (1/2) Fix some clang 4.0 warnings
    
    In InnoDB and XtraDB functions that declare pointer parameters as nonnull,
    remove nullness checks, because GCC would optimize them away anyway.
    
    Use #ifdef instead of #if when checking for a configuration flag.
    
    Clang says that left shifts of negative values are undefined.
    So, use ~0U instead of ~0 in a number of macros.
    
    Some functions that were defined as UNIV_INLINE were declared as
    UNIV_INTERN. Consistently use the same type of linkage.
    
    ibuf_merge_or_delete_for_page() could pass bitmap_page=NULL to
    buf_page_print(), conflicting with the __attribute__((nonnull)).

commit 660a2928a535e36e5dda846677dce4ba96508cd7
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Wed Nov 23 16:46:33 2016 +0100

    Fix optimistic parallel replication for TokuDB.
    
    Make TokuDB report row lock waits with thd_rpl_deadlock_check(). This allows
    parallel replication to properly detect conflicts, and kill and retry the
    offending transaction.

commit d145d1b6ee42ffa7f9ca2ce02478a31a09f3fe99
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Wed Nov 23 12:29:38 2016 +0100

    fix bogus stalls in the lock tree for low concurrency applications
    
    Merge into the MariaDB tree the pull request from Rich Prohaska for
    PerconaFT. These changes are needed to get parallel replication to
    work with TokuDB. Once the pull request is accepted by Percona and the new upstream version enters MariaDB, this commit can be superseded.
    
    Original commit message from Rich Prohaska:
    
        1. Fix the release before wait race
    
        The release before wait race occurs when a lock is released by transaction A after transaction B tried to acquire it but before transaction B has a chance to register it's pending lock request.  There are several ways to fix this problem, but we want to optimize for the common situation of minimal lock conflicts, which is what the lock acquisition algorithm currently does.  Our solution to the release before wait race is for transaction B to retry its lock request after its lock request has been added to the pending lock set.
    
        2. Fix the retry race
    
        The retry race occurs in the current lock retry algorithm which assumes that if some transaction is running lock retry, then my transaction does not also need to run it.  There is a chance that some pending lock requests will be skipped, but these lock requests will eventually time out.  For applications with small numbers of concurrent transactions, timeouts will frequently occur, and the application throughput will be very small.
    
        The solution to the retry race is to use a group retry algorithm.  All threads run through the retry logic.  Sequence numbers are used to group retries into batches such that one transaction can run the retry logic on behalf of several transactions.  This amortizes the retry cost.  The sequence numbers also ensure that when a transaction releases its locks, all of the pending lock requests that it is blocking are retried.
    
        3. Implement a mechanism to find and kill a pending lock request
    
        Tags lock requests with a client id, use the client id as a key into the pending lock requests sets to find a lock request, complete the lock request with a lock timeout error.
    
        Copyright (c) 2016, Rich Prohaska
        All rights reserved.
    
        Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
    
        1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    
        2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

commit 665045f985787d77318a17ccddd67ec3ff92f7bc
Author: Igor Babaev <igor@askmonty.org>
Date:   Mon Nov 21 10:33:06 2016 -0800

    Fixed bug mdev-11081.
    
    The idea of this fix was taken from the patch by Roy Lyseng
    for mysql-5.6 bug iBug#14740889: "Wrong result for aggregate
    functions when executing query through cursor".
    
    Here's Roy's comment for his patch:
    "
    The problem was that a grouped query did not behave properly when
    executed using a cursor. On further inspection, the query used one
    intermediate temporary table for the grouping.
    Then, Select_materialize::send_result_set_metadata created a temporary
    table for storing the query result. Notice that get_unit_column_types()
    is used to retrieve column meta-data for the query. The items contained
    in this list are later modified so that their result_field points to
    the row buffer of the materialized temporary table for the cursor.
    But prior to this, these result_field objects have been prepared for
    use in the grouping operation, by JOIN::make_tmp_tables_info(), hence
    the grouping operation operates on wrong column buffers.
    
    The problem is solved by using the list JOIN::fields when copying data
    to the materialized table. This list is set by JOIN::make_tmp_tables_info()
    and points to the columns of the last intermediate temporary table of
    the executed query. For a UNION, it points to the temporary table
    that is the result of the UNION query.
    
    Notice that we have to assign a value to ::fields early in JOIN::optimize()
    in case the optimization shortcuts due to a const plan detection.
    
    A more optimal solution might be to avoid creating the final temporary
    table when the query result is already stored in a temporary table.
    "
    The patch does not contain a test case, but the description of the
    problem corresponds exactly what could be observed in the test
    case for mdev-11081.

commit 96b62b55149a9297f32c3aad99ece613cc3f788f
Author: Igor Babaev <igor@askmonty.org>
Date:   Fri Nov 11 20:55:03 2016 -0800

    Fixed bug mdev-11161.
    The flag TABLE_LIST::fill_me must be reset to false at the prepare
    phase for any materialized derived table used in the executed query.
    Otherwise if the optimizer decides to generate a key for such a table
    it is generated only for the first execution of the query.

commit d4b2c9bb1afd6887d9295b44ed8f85f3bcf5019f
Author: vinchen <vinchen13@gmail.com>
Date:   Fri Oct 14 15:23:49 2016 +0800

    optimize the memory allocation for compressed binlog event

commit a53f3c6d3cfa50b15b1aff26bc9479eb582d8611
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Wed Sep 28 16:12:58 2016 +0300

    MDEV-10649: Optimizer sometimes use "index" instead of "range" access for UPDATE
    
    (Fixing both InnoDB and XtraDB)
    
    Re-opening a TABLE object (after e.g. FLUSH TABLES or open table cache
    eviction) causes ha_innobase to call
    dict_stats_update(DICT_STATS_FETCH_ONLY_IF_NOT_IN_MEMORY).
    
    Inside this call, the following is done:
      dict_stats_empty_table(table);
      dict_stats_copy(table, t);
    
    On the other hand, commands like UPDATE make this call to get the "rows in
    table" statistics in table->stats.records:
    
      ha_innobase->info(HA_STATUS_VARIABLE|HA_STATUS_NO_LOCK)
    
    note the HA_STATUS_NO_LOCK parameter. It means, no locks are taken by
    ::info() If the ::info() call happens between dict_stats_empty_table
    and dict_stats_copy calls, the UPDATE's optimizer will get an estimate
    of table->stats.records=1, which causes it to pick a full table scan,
    which in turn will take a lot of row locks and cause other bad
    consequences.

commit a95e384d5470253cae46aa6fd6869e887de081ab
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Sat Sep 24 15:27:56 2016 +0300

    MDEV-10174: Make the fix for MDEV-8989 enabled by default in 10.2
    
    - Change the default @@optimizer_switch value
    - Adjust the testcases

commit 8e8e65ed1c747a9b53b07ba5147103210b517c32
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Mon Sep 19 12:07:20 2016 +1000

    MDEV-10829: innodb_numa_interleave=1, use numa numa_get_mems_allowed
    
    Using numa_all_nodes_ptr was excessively optimistic. Due to
    constraints in systemd, containers or otherwise mysqld could of been
    limited to a smaller set of cpus. Use the numa_get_mems_allowed
    library function to see what we can interleave between before doing
    so. The alternative is to fail interleaving overall.
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit 7e0c9de86484815b6e014ce3ad3e3a9b74ec0ce0
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Thu Sep 8 15:25:40 2016 +0200

    Parallel replication async deadlock kill
    
    When a deadlock kill is detected inside the storage engine, the kill
    is not done immediately, to avoid calling back into the storage engine
    kill_query method with various lock subsystem mutexes held. Instead the
    kill is queued and done later by a slave background thread.
    
    This patch in preparation for fixing TokuDB optimistic parallel
    replication, as well as for removing locking hacks in InnoDB/XtraDB in
    10.2.
    
    Signed-off-by: Kristian Nielsen <knielsen at knielsen-hq.org>

commit 2e814d4702d71a04388386a9f591d14a35980bfe
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Fri Aug 12 11:17:45 2016 +0300

    Merge InnoDB 5.7 from mysql-5.7.9.
    
    Contains also
    
    MDEV-10547: Test multi_update_innodb fails with InnoDB 5.7
    
            The failure happened because 5.7 has changed the signature of
            the bool handler::primary_key_is_clustered() const
            virtual function ("const" was added). InnoDB was using the old
            signature which caused the function not to be used.
    
    MDEV-10550: Parallel replication lock waits/deadlock handling does not work with InnoDB 5.7
    
            Fixed mutexing problem on lock_trx_handle_wait. Note that
            rpl_parallel and rpl_optimistic_parallel tests still
            fail.
    
    MDEV-10156 : Group commit tests fail on 10.2 InnoDB (branch bb-10.2-jan)
      Reason: incorrect merge
    
    MDEV-10550: Parallel replication can't sync with master in InnoDB 5.7 (branch bb-10.2-jan)
      Reason: incorrect merge

commit 00d84eada2806431fdd10f4dbcffdff450be2ee0
Author: Oleksandr Byelkin <sanja@mariadb.com>
Date:   Wed Jun 22 11:17:44 2016 +0200

    MDEV-10045: Server crashes in Time_and_counter_tracker::incr_loops
    
    Do not set 'optimized' flag until whole optimization procedure is finished.

commit 12d2c4fcd0bc3fbe74759e8285f2c93ad348e749
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sat Jul 23 16:55:52 2016 +0200

    optimize constant default expressions
    
    to be calculated at the CREATE TABLE time and stored in
    the default row image.

commit 0248fb2e8a3c6a02f443140cfcf68a0190354e23
Author: Chaithra Gopalareddy <chaithra.gopalareddy@oracle.com>
Date:   Thu Aug 18 09:56:48 2016 +0530

    Bug #23135667: CRASH AFTER DEEPLY NESTED BUILD_EQUAL_ITEMS_FOR_COND
    
    Problem:
    When build_equal_items_for_cond gets called for a big query
    recursively, the specified thread_stack_size exceeds. But
    optimizer does not handle this condition. As a result, server
    exits.
    
    Solution:
    Check if we exceed specified stack size and if yes exit
    gracefully by throwing an error.

commit 45ffbda79e22cdfb8841eaec3e81d689fbb5aaf2
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Fri Aug 5 14:36:07 2016 +1000

    MDEV-9872: used optimized crc32 for SQL CRC32 function
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit a2c826b6aa38d68e79a80499b0ecdc57ae98f8e0
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Tue Mar 15 18:02:51 2016 +1100

    MDEV-9872: New Power8 crc32(ieee) optimized functions
    
    These are different from the existing crc32 functions which
    where really crc32c.

commit 9c2215e022c325599bd1b66d1f2214529fb99a24
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Tue Jul 5 16:37:42 2016 +0400

    MDEV-9872 - Add common optimized CRC32 function interface
    
    Move crc32-vpmsum to extra.
    Compile static crc32-vpmsum instead of adding sources directly.
    Make use of crc32-vpmsum via my_checksum().
    
    Based on contribution by Daniel Black.

commit f982d1074a3bc880462ab2372803b278af8dc4dd
Author: Igor Babaev <igor@askmonty.org>
Date:   Tue Jul 26 22:58:33 2016 -0700

    Fixed the following problem:
    Temporary tables created for recursive CTE
    were instantiated at the prepare phase. As
    a result these temporary tables missed
    indexes for look-ups and optimizer could not
    use them.

commit a52d3aa831454aa2e7dd4dfde9c65d4b87532caa
Author: Oleksandr Byelkin <sanja@mariadb.com>
Date:   Wed Jun 22 11:17:44 2016 +0200

    MDEV-10045: Server crashes in Time_and_counter_tracker::incr_loops
    
    Do not set 'optimized' flag until whole optimization procedure is finished.

commit ffac85482b0de13d7780b47edd2a5d5947b528dd
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Fri Jul 1 16:44:17 2016 +0200

    MDEV-8989 ORDER BY optimizer ignores equality propagation
    
    Restore the fix from the commit 99cd5a9 that was lost in a merge.

commit 23d03a1b1e486da353f20964a1b91068bec209c0
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Mon Jun 27 15:41:51 2016 +0200

    parse negative numbers into one item
    
    use Item->neg to convert generate negative Item_num's
    instead of Item_func_neg(Item_num).
    
    Based on the following commit:
    
      Author: Monty <monty@mariadb.org>
      Date:   Mon May 30 22:44:00 2016 +0300
    
        Make negative number their own token
        The negation (-) operator will call Item->neg() one underlying numeric constants
        and remove itself (like the NOT() function does today for other NOT functions.
    
        This simplifies things
        - -1 is not anymore an expression but a basic_const_item
          - improves optimizer
          - DEFAULT -1 doesn't need special handling anymore
          - When we add DEFAULT expressions, -1 will be treated exactly like 1
        - printing of items doesn't anymore put braces around all negative numbers
    
        Other things fixed:
        - Fixed that longlong converted to decimal's has a more appropriate size
        - Fixed that "-0.0" read into a decimal is interpreted as 0.0

commit 51a66299f3f34947baee2cf39fc9c25f01baab19
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Fri Mar 18 11:50:41 2016 +1100

    CHECKSUM TABLE to calculate in multiple column chunks
    
    Checksum implementations contain optimizations for calculating
    checksums of larger blocks of memory.
    
    This optimization calls my_checksum on a larger block of memory
    rather than calling on multiple adjacent memory as its going though
    the table columns for each table row.

commit 957809b19098b677bc0512dd8fbc55c9bdb2a6bb
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Sat Apr 16 20:41:06 2016 +0300

    MDEV-9922: Assertion `!join->only_const_tables() && fsort' failed
    
    When join output is just one row, we still need to compute window
    function values for it. We could skip invoking filesort for it,
    but it doesn't seem to be worth it to do such optimization.

commit cb002d34790d46442917575ccecfd9eca412dab8
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Fri Apr 8 03:21:25 2016 +0300

    Window functions: make "ORDER BY window_func" work
    
    - When window functions are present, JOIN::simple_order should be set
      to FALSE. (Otherwise, the optimizer may attempt to do a "pre-sorting"
      on the first join_tab. Which can work in some cases, but generally
      isn't)
    
    - filesort tries to only read table fields that it requires. Window
      function requires its temp.table field.  In order to pass this info
      to filesort, added an implementation of Item_window_func::
      register_field_in_read_map.

commit 0786b0d2cd75fb4e59752616abf03688e7cdba0a
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Sun Mar 27 11:47:19 2016 +0300

    Make window function computation a part of the query plan
    
    Added class Window_funcs_computation, with setup() method to setup
    execution, and exec() to run window function computation.
    
    setup() is currently trivial. In the future, it is expected to optimize
    the number of sorting operations and passes that are done over the temp.
    table.

commit c5537c042ac44fde7c63e8225dcf0590b53cec26
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Thu Mar 17 22:17:09 2016 +0300

    MDEV-9755: Buildbot shows a crash in JOIN::make_aggr_tables_info()
    
    Don't attempt to do query pushdown when all tables have been optimized
    away (tables_list=NULL)>

commit 43c49d0826f40ec32770d14da6fac52ec095c8be
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Sat Feb 13 21:58:48 2016 +0300

    Fix maria.maria test by updating test results.
    
    "Distinct" optimization is not used by this query (both in this tree
    and in mainline 10.2). Verified this in debugger.

commit 2cfc450bf78c2d951729d1a0e8f731c0d987b1d5
Author: Igor Babaev <igor@askmonty.org>
Date:   Tue Feb 9 12:35:59 2016 -0800

    This is the consolidated patch for mdev-8646:
    "Re-factor the code for post-join operations".
    
    The patch mainly contains the code ported from mysql-5.6 and
    created for two essential architectural changes:
    1. WL#5558: Resolve ORDER BY execution method at the optimization stage
    2. WL#6071: Inline tmp tables into the nested loops algorithm
    
    The first task was implemented for mysql-5.6 by Ole John Aske.
    It allows to make all decisions on ORDER BY operation at the optimization
    stage.
    
    The second task implemented for mysql-5.6 by Evgeny Potemkin adds JOIN_TAB
    nodes for post-join operations that require temporary tables. It allows
    to execute these operations within the nested loops algorithm that used to
    be used before this task only for join queries. Besides these task moves
    all planning on the execution of these operations from the execution phase
    to the optimization phase.
    
    Some other re-factoring changes of mysql-5.6 were pulled in, mainly because
    it was easier to pull them in than roll them back. In particular all
    changes concerning Ref_ptr_array were incorporated.
    
    The port required some changes in the MariaDB code that concerned the
    functionality of EXPLAIN and ANALYZE. This was done mainly by Sergey
    Petrunia.

commit 4434c5cee8f9cc66a777e812b17ab9f9e0ea84b3
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sat Nov 21 20:27:49 2015 +0100

    followup for optimizer_search_depth change
    
    see commit 81e4ce5

commit 81e4ce5e31ba0753d7acfab28bc6c3d83bfad1c6
Author: Oleksandr Byelkin <sanja@mariadb.com>
Date:   Thu Nov 19 10:56:30 2015 +0100

    Removed depricated optimizer_search_depth.
For keyword regression:
commit acce1f37c2518278a31606c7f1b460ad0ac7347c
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Tue May 2 08:09:16 2017 +0300

    MDEV-12624: encryption.innodb_encryption_tables fails in buildbot with timeout
    
    This regression was caused by MDEV-12467 encryption.create_or_replace
    hangs during DROP TABLE, where if table->is_stopping() (i.e. when
    tablespace is dropped) background key rotation thread calls
    fil_crypt_complete_rotate_space to release space and stop rotation.
    However, that function does not decrease number of rotating
    threads if table->is_stopping() is true.

commit b82c602db588cfa688278ef772050c004590c124
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Apr 28 03:20:49 2017 +0300

    MDEV-12602 InnoDB: Failing assertion: space->n_pending_ops == 0
    
    This fixes a regression caused by MDEV-12428.
    When we introduced a variant of fil_space_acquire() that could
    increment space->n_pending_ops after space->stop_new_ops was set,
    the logic of fil_check_pending_operations() was broken.
    
    fil_space_t::n_pending_ios: A new field to track read or write
    access from the buffer pool routines immediately before a block
    write or after a block read in the file system.
    
    fil_space_acquire_for_io(), fil_space_release_for_io(): Similar
    to fil_space_acquire_silent() and fil_space_release(), but
    modify fil_space_t::n_pending_ios instead of fil_space_t::n_pending_ops.
    
    Adjust a number of places accordingly, and remove some redundant
    tablespace lookups.
    
    The following parts of this fix differ from the 10.2 version of this fix:
    
    buf_page_get_corrupt(): Add a tablespace parameter.
    
    In 10.2, we already had a two-phase process of freeing fil_space objects
    (first, fil_space_detach(), then release fil_system->mutex, and finally
    free the fil_space and fil_node objects).
    
    fil_space_free_and_mutex_exit(): Renamed from fil_space_free().
    Detach the tablespace from the fil_system cache, release the
    fil_system->mutex, and then wait for space->n_pending_ios to reach 0,
    to avoid accessing freed data in a concurrent thread.
    During the wait, future calls to fil_space_acquire_for_io() will
    not find this tablespace, and the count can only be decremented to 0,
    at which point it is safe to free the objects.
    
    fil_node_free_part1(), fil_node_free_part2(): Refactored from
    fil_node_free().

commit 4b24467ff37d6db82500e736e832d0a53842ac9b
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Apr 28 12:23:35 2017 +0300

    MDEV-12602 InnoDB: Failing assertion: space->n_pending_ops == 0
    
    This fixes a regression caused by MDEV-12428.
    When we introduced a variant of fil_space_acquire() that could
    increment space->n_pending_ops after space->stop_new_ops was set,
    the logic of fil_check_pending_operations() was broken.
    
    fil_space_t::n_pending_ios: A new field to track read or write
    access from the buffer pool routines immediately before a block
    write or after a block read in the file system.
    
    fil_space_acquire_for_io(), fil_space_release_for_io(): Similar
    to fil_space_acquire_silent() and fil_space_release(), but
    modify fil_space_t::n_pending_ios instead of fil_space_t::n_pending_ops.
    
    fil_space_free_low(): Wait for space->n_pending_ios to reach 0,
    to avoid accessing freed data in a concurrent thread. Future
    calls to fil_space_acquire_for_io() will not find this tablespace,
    because it will already have been detached from fil_system.
    
    Adjust a number of places accordingly, and remove some redundant
    tablespace lookups.
    
    FIXME: buf_page_check_corrupt() should take a tablespace from
    fil_space_acquire_for_io() as a parameter. This will be done
    in the 10.1 version of this patch and merged from there.
    That depends on MDEV-12253, which has not been merged from 10.1 yet.

commit 14fe6dd23947636caca6743425ad0501f9b73f51
Author: Aditya A <aditya.a@oracle.com>
Date:   Wed Feb 15 12:00:07 2017 +0530

    Bug #23046302 COUNT(*) MUCH SLOWER ON 5.7 THAN 5.6
    
    ANALYSIS
    
    This is regression caused due to worklog 6742 which
    implemented ha_innobase::records() which always
    uses clustered index to get the row count. Previously
    optimizer chose secondary index which was smaller in
    size of clustered index to scan for rows and resulted in
    a quicker scan.
    
    FIX
    
    After discussion it was decided to remove this feature in 5.7.
    
    [#rb14040 Approved by Kevin and Oystein ]

commit e63ead68bf4ef14f836181c834aa010d471abe9c
Author: Marko Mäkelä <marko.makela@oracle.com>
Date:   Fri Sep 2 17:28:54 2016 +0300

    Bug#24346574 PAGE CLEANER THREAD, ASSERT BLOCK->N_POINTERS == 0
    
    btr_search_drop_page_hash_index(): Do not return before ensuring
    that block->index=NULL, even if !btr_search_enabled. We would
    typically still skip acquiring the AHI latch when the AHI is
    disabled, because block->index would already be NULL. Only if the AHI
    is in the process of being disabled, we would wait for the AHI latch
    and then notice that block->index=NULL and return.
    
    The above bug was a regression caused in MySQL 5.7.9 by the fix of
    Bug#21407023: DISABLING AHI SHOULD AVOID TAKING AHI LATCH
    
    The rest of this patch improves diagnostics by adding assertions.
    
    assert_block_ahi_valid(): A debug predicate for checking that
    block->n_pointers!=0 implies block->index!=NULL.
    
    assert_block_ahi_empty(): A debug predicate for checking that
    block->n_pointers==0.
    
    buf_block_init(): Instead of assigning block->n_pointers=0,
    assert_block_ahi_empty(block).
    
    buf_pool_clear_hash_index(): Clarify comments, and assign
    block->n_pointers=0 before assigning block->index=NULL.
    The wrong ordering could make block->n_pointers appear incorrect in
    debug assertions. This bug was introduced in MySQL 5.1.52 by
    Bug#13006367 62487: INNODB TAKES 3 MINUTES TO CLEAN UP THE
    ADAPTIVE HASH INDEX AT SHUTDOWN
    
    i_s_innodb_buffer_page_get_info(): Add a comment that
    the IS_HASHED column in the INFORMATION_SCHEMA views
    INNODB_BUFFER_POOL_PAGE and INNODB_BUFFER_PAGE_LRU may
    show false positives (there may be no pointers after all.)
    
    ha_insert_for_fold_func(), ha_delete_hash_node(),
    ha_search_and_update_if_found_func(): Use atomics for
    updating buf_block_t::n_pointers. While buf_block_t::index is
    always protected by btr_search_x_lock(index), in
    ha_insert_for_fold_func() the n_pointers-- may belong to
    another dict_index_t whose btr_search_latches[] we are not holding.
    
    RB: 13879
    Reviewed-by: Jimmy Yang <jimmy.yang@oracle.com>

commit 78153cf641aea41166d3e79ae99b57b154f6a027
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Feb 24 12:51:55 2017 +0200

    MDEV-11927 InnoDB change buffer is not being merged
    to tables in the system tablespace
    
    This is a regression caused by MDEV-11585, which accidentally
    changed Tablespace::is_undo_tablespace() in an incorrect way,
    causing the InnoDB system tablespace to be reported as a dedicated
    undo tablespace, for which the change buffer is not applicable.
    
    Tablespace::is_undo_tablespace(): Remove. There were only 2
    calls from the function buf_page_io_complete(). Replace those
    calls as appropriate.
    
    Also, merge changes to tablespace import/export tests from
    MySQL 5.7, and clean up the tests a little further, allowing
    them to be run with any innodb_page_size.
    
    Remove duplicated error injection instrumentation for the
    import/export tests.  In MySQL 5.7, the error injection label
    buf_page_is_corrupt_failure was renamed to
    buf_page_import_corrupt_failure.
    
    fil_space_extend_must_retry(): Correct a debug assertion
    (tablespaces can be extended during IMPORT), and remove a
    TODO comment about compressed temporary tables that was
    already addressed in MDEV-11816.
    
    dict_build_tablespace_for_table(): Correct a comment that
    no longer holds after MDEV-11816, and assert that
    ROW_FORMAT=COMPRESSED can only be used in .ibd files.

commit 365c4e971a684151762058befb27b54832dc8779
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Feb 22 10:03:33 2017 +0200

    MDEV-11520/MDEV-5746 post-fix: Do not posix_fallocate() too much.
    
    Before the MDEV-11520 fixes, fil_extend_space_to_desired_size()
    in MariaDB Server 5.5 incorrectly passed the desired file size as the
    third argument to posix_fallocate(), even though the length of the
    extension should have been passed. This looks like a regression
    that was introduced in the 5.5 version of MDEV-5746.

commit 32170cafad643403985754f6d7a41e8927f4a6cf
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Feb 16 11:12:24 2017 +0200

    MDEV-12075 innodb_use_fallocate does not work in MariaDB Server 10.1.21
    
    fil_space_extend_must_retry(): When innodb_use_fallocate=ON,
    initialize pages_added = size - space->size so that posix_fallocate()
    will actually attempt to extend the file, instead of keeping the same size.
    
    This is a regression from MDEV-11556 which refactored
    the InnoDB data file extension.

commit 34bbc76f1c1f6968cdcf65dee2d887ab71557e5c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Feb 16 09:18:46 2017 +0200

    Simplify a WL#6494/WL#7142 test.
    
    The test innodb.log_file_size_checkpoint was originally added to
    MySQL 5.7 by me in a bug fix, to fix the interaction of WL#6494
    (redo log resizing, introduced in MySQL 5.6) and WL#7142
    (data file discovery based on MLOG_FILE_NAME records,
    introduced in MySQL 5.7):
    
    commit 70f9ef4e1220827132b50275ca7272f2bcca1864
    Author: Marko Mäkelä <marko.makela@oracle.com>
    Date:   Wed May 21 13:31:29 2014 +0300
    
        Bug#18755095 REDO LOG SIZE CHANGE AFTER CRASH RESULTS IN CHECKPOINT AGE
        ERROR MESSAGE
    
        This is a regression from fixing
        Bug#18730524 REPEATED KILL+RESTART FAILS DUE TO MISSING MLOG_FILE_NAME
        RECORD
    
        innobase_start_or_create_for_mysql(): Invoke fil_names_clear() before
        creating the "checkpoint" when changing redo log files.
    
        Approved by Jimmy Yang on IM.
    
    The relevant part of the test is that fil_names_clear() is invoked to
    emit an MLOG_CHECKPOINT record before the redo log files are deleted.
    In case the server is killed before ib_logfile0 has been deleted,
    the old (not-yet-resized) redo log will be treated as valid. We do not
    need to create a large number of tables for that.

commit eb54d86b584833fe3586467a65794c3e46f3ddb6
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Wed Feb 15 08:53:25 2017 +0200

    MDEV-10700: 10.2.2 windowing function returns incorrect result
    
    This bug is fixed by MDEV-10092. Add test case to check for regressions.

commit d06a44e027070a65c5cfc0079aa977e73fa12d0e
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Wed Feb 15 08:43:39 2017 +0200

    MDEV-11868: min ( distinct ) over ( ) returns wrong value
    
    The bug was not visible in current HEAD. Introduced test case to catch
    regressions. Also improve error messages regarding distinct usage in
    window functions.

commit 88ddb1ea4e4c7ce4816026d9a64b3f8b1cc59072
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Tue Feb 14 22:40:00 2017 +0200

    MDEV-11697: Lead Window Function Returns Incorrect Results
    
    This issue is fixed by the patch for MDEV-10092. Add test case to check
    for regressions though.

commit ab65db6d3fc0c876130cefb45a63cdaad4018f8c
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Thu Dec 8 21:03:45 2016 +0100

    Revert "MDEV-10713: signal 11 error on multi-table update - crash in handler::increment_statistics or in make_select or assertion failure pfs_thread == ((PFS_thread*) pthread_getspecific((THR_PFS)))"
    
    This reverts commit 035a5ac62a0215c2f6e3e363331e3e984d780138.
    
    Two minor problems and one regression:
    1. caching the value in str_result. Other Item methods may use it,
       destroying the cache. See, for example, Item::save_in_field, where
       str_result is moved to use a local buffer (this failed main.grant)
    2. Item_func_conv_charset::safe is now set too late, it's initialized
       only in val_str() but checked before that, this failed many tests
       in optimized builds.
    
    to fix 1 - use tmp_result instead of str_result, to fix 2, use
    the else branch in the Item_func_conv_charset constructor to set
    safe purely from charset properties.
    
    But this introduces a regression, constant strings can no longer be
    converted, say, from utf8 to latin1 (because 'safe' will be false).
    This fails few tests too. There is no way to fix it without reverting
    the commit and converting constants, as before, in the constructor.

commit 1a1749e38c774ce3a3493da2410b19ebe71eccb5
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Thu Nov 24 18:18:00 2016 +0400

    MDEV-11296 - InnoDB stalls under OLTP RW on P8
    
    Threads may fall asleep forever while acquiring InnoDB rw-lock on Power8. This
    regression was introduced along with InnoDB atomic operations fixes.
    
    The problem was that proper memory order wasn't enforced between "writers"
    store and "lock_word" load:
    
      my_atomic_store32((int32*) &lock->waiters, 1);
      ...
      local_lock_word = lock->lock_word;
    
    Locking protocol is such that store to "writers" must be completed before load
    of "lock_word". my_atomic_store32() was expected to enforce memory order because
    it issues strongest MY_MEMORY_ORDER_SEQ_CST memory barrier.
    
    According to C11:
    - any operation with this memory order is both an acquire operation and a
      release operation
    - for atomic store order must be one of memory_order_relaxed
      memory_order_release or memory_order_seq_cst. Otherwise the behavior is
      undefined.
    
    That is it doesn't say explicitly that this expectation is wrong, but there are
    indications that acquire (which is actually supposed to guarantee memory order
    in this case) may not be issued along with MY_MEMORY_ORDER_SEQ_CST.
    
    A good fix for this is to encode waiters into lock_word, but it is a bit too
    intrusive. Instead we change atomic store to atomic fetch-and-store, which
    does memory load and is guaranteed to issue acquire.

commit 19abe79fd15ab6d8ac0c2f65476bc3c7d29a008d
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Thu Sep 22 08:26:45 2016 +0200

    MDEV-7145: Delayed replication, intermediate commit.
    
    Initial merge of delayed replication from MySQL git.
    
    The code from the initial push into MySQL is merged, and the
    associated test case passes. A number of tasks are still pending:
    
    1. Check full test suite run for any regressions or .result file updates.
    
    2. Extend the feature to also work for parallel replication.
    
    3. There are some todo-comments about future refactoring left from
    MySQL, these should be located and merged on top.
    
    4. There are some later related MySQL commits, these should be checked
    and merged. These include:
        e134b9362ba0b750d6ac1b444780019622d14aa5
        b38f0f7857c073edfcc0a64675b7f7ede04be00f
        fd2b210383358fe7697f201e19ac9779879ba72a
        afc397376ec50e96b2918ee64e48baf4dda0d37d
    
    5. The testcase from MySQL relies heavily on sleep and timing for
    testing, and seems likely to sporadically fail on heavily loaded test
    servers in buildbot or distro build farms.
    
    Signed-off-by: Kristian Nielsen <knielsen@knielsen-hq.org>

commit 86637b2558be6765e39cf94077bd75a09158b7f5
Author: Hartmut Holzgraefe <hartmut@mariadb.com>
Date:   Sun Oct 9 01:20:17 2016 +0200

    MDEV-726 - added regression test case
For keyword speed:
commit 850ed6e4cc9c4608844e5188b4be226fa63e2736
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Fri Dec 9 14:58:23 2016 +1100

    MDEV-11075: changing to algorithm innodb from crc32
    
    With innodb compressed pages formerly as crc32 changing to the
    innodb checksum, optimize for speed by only calcuating the big
    endian variant of crc32 after checking that the little endian
    doesn't validate the page.
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit bfda961c86849a4a6fea4b6d71a38266758b1bc9
Author: Otto Kekäläinen <otto@mariadb.org>
Date:   Sat Oct 29 01:30:50 2016 +0300

    Deb: omit source building step when running from autobake-deb.sh
    
    This will increase the speed of the build by a minute or two.

commit 0668e6ba49f0004e7f137b22c912cea74069d851
Author: Otto Kekäläinen <otto@mariadb.org>
Date:   Wed Oct 26 02:12:18 2016 +0300

    Travis-CI: skip building mariadb-test packages to speed up build
    
    The build must stay under the Travis-CI 50 minute limit. Currently
    they often exceed, and the huge test suite is the single most long
    step in moving/packaging files, so remove it on Travis-CI automatically.

commit 82b974a1b602b8ec02619fb72c911a3e466c806d
Merge: 27025221fe2 9970e81f105
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Fri Oct 21 17:37:30 2016 +0200

    Merge MDEV-11064: "Restrict the speed of reading binlog from Master" into 10.2

commit c334f4fe461e590c319fd65591314b30576c6f6f
Author: vinchen <vinchen13@gmail.com>
Date:   Mon Oct 17 18:04:15 2016 +0800

    fix the code style for read_binlog_speed_limit

commit 43789901c7887eefda1e965c9d7571dae89bd911
Author: vinchen <vinchen13@gmail.com>
Date:   Mon Sep 19 17:23:23 2016 +0800

    Control the binlog read speed for compressed protocol

commit 8eb0f5ca1a3b62d144668ebf960a93a7a67138db
Author: vinchen <vinchen13@gmail.com>
Date:   Mon Sep 19 11:40:31 2016 +0800

    Control the Maximum speed(KB/s) to read binlog from master

commit 3d4a7390c1a94ef6e07b04b52ea94a95878cda1b
Author: Monty <monty@mariadb.org>
Date:   Mon Feb 1 12:45:39 2016 +0200

    MDEV-6150 Speed up connection speed by moving creation of THD to new thread
    
    Creating a CONNECT object on client connect and pass this to the working thread which creates the THD.
    Split LOCK_thread_count to different mutexes
    Added LOCK_thread_start to syncronize threads
    Moved most usage of LOCK_thread_count to dedicated functions
    Use next_thread_id() instead of thread_id++
    
    Other things:
    - Thread id now starts from 1 instead of 2
    - Added cast for thread_id as thread id is now of type my_thread_id
    - Made THD->host const (To ensure it's not changed)
    - Removed some DBUG_PRINT() about entering/exiting mutex as these was already logged by mutex code
    - Fixed that aborted_connects and connection_errors_internal are counted in all cases
    - Don't take locks for current_linfo when we set it (not needed as it was 0 before)
For keyword delayedInnoDBflush:
For keyword delayed:
commit ea1b25046c81db8fdf59130126d57cfb42737ba5
Author: Monty <monty@mariadb.org>
Date:   Fri Dec 30 11:07:44 2016 +0200

    New simpler bugfix for UPDATE and virtual BLOBs
    
    When updating a table with virtual BLOB columns, the following might
    happen:
    - an old record is read from the table, it has no virtual blob values
    - update_virtual_fields() is run, vcol blob gets its value into the
      record. But only a pointer to the value is in the table->record[0],
      the value is in Field_blob::value String (but it doesn't have to be!
      it can be in the record, if the column is just a copy of another
      columns: ... b VARCHAR, c BLOB AS (b) ...)
    - store_record(table,record[1]), old record now is in record[1]
    - fill_record() prepares new values in record[0], vcol blob is updated,
      new value replaces the old one in the Field_blob::value
    - now both record[1] and record[0] have a pointer that points to the
      *new* vcol blob value. Or record[1] has a pointer to nowhere if
       Field_blob::value had to realloc.
    
    To fix this I have introduced a new String object 'read_value' in
    Field_blob.  When updating virtual columns when a row has been read,
    the allocated value is stored in 'read_value' instead of 'value'.  The
    allocated blobs for the new row is stored in 'value' as before.
    
    I also made, as a safety precaution, the insert delayed handling of
    blobs more general by using value to store strings instead of the
    record.  This ensures that virtual functions on delayed insert should
    work in as in the case of normal insert.
    
    Triggers are now properly updating the read, write and vcol maps for used
    fields. This means that we don't need VCOL_UPDATE_FOR_READ_WRITE anymore
    and there is no need for any other special handling of triggers in
    update_virtual_fields().
    
    To be able to test how many times virtual fields are invoked, I also
    relaxed rules that one can use local (@) variables in DEFAULT and non
    persistent virtual field expressions.

commit a838b10466b537314f4f15c035ba9680234bdd72
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Tue Nov 8 09:24:23 2016 +0100

    bugfix: delayed insert table was using other table's expr_arena

commit 870d7589c6c4596b0f1a641add5071469e2c94a7
Author: Elena Stepanova <elenst@montyprogram.com>
Date:   Thu Dec 8 20:49:54 2016 +0200

    MDEV-11491 binlog_encryption.rpl_checksum fails sporadically in buildbot
    
    The race condition happened if mark_xid_done was considerably delayed,
    and an extra Binlog_checkpoint event was written into the binary log
    which was later indicated in an error message. Fixed by ensuring
    that the event is written before the binary log is rotated to the one
    which is used in the output.

commit fb13616518975b84eea9b9e0d5a91122bb1abe7a
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Fri Oct 14 21:29:35 2016 +0200

    MDEV-7145: Delayed replication.
    
    Add test cases for delayed slave with parallel replication.
    
    Signed-off-by: Kristian Nielsen <knielsen@knielsen-hq.org>

commit 814880711f0084f5cb1d8b1342b15ac819935742
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Fri Oct 14 11:18:33 2016 +0200

    BUG#56442: Slave executes delayed statements when STOP SLAVE is issued
    
    Problem:
    When using the delayed slave feature, and the SQL thread is delaying,
    and the user issues STOP SLAVE, the event we wait for was executed.
    It should not be executed.
    Fix:
    Check the return value from the delay function,
    slave.cc:slave_sleep(). If the return value is 1, it means the thread
    has been stopped, in this case we don't execute the statement.
    
    Also, refactored the test case for delayed slave a little: added the
    test script include/rpl_assert.inc, which asserts that a condition holds
    and prints a message if not. Made rpl_delayed_slave.test use this. The
    advantage is that the test file is much easier to read and maintain,
    because it is clear what is an assertion and what is not, and also the
    expected result can be found in the test file, you don't have to compare
    it to the result file.
    
    Manually merged into MariaDB from MySQL commit
    fd2b210383358fe7697f201e19ac9779879ba72a
    
    Signed-off-by: Kristian Nielsen <knielsen@knielsen-hq.org>

commit 19abe79fd15ab6d8ac0c2f65476bc3c7d29a008d
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Thu Sep 22 08:26:45 2016 +0200

    MDEV-7145: Delayed replication, intermediate commit.
    
    Initial merge of delayed replication from MySQL git.
    
    The code from the initial push into MySQL is merged, and the
    associated test case passes. A number of tasks are still pending:
    
    1. Check full test suite run for any regressions or .result file updates.
    
    2. Extend the feature to also work for parallel replication.
    
    3. There are some todo-comments about future refactoring left from
    MySQL, these should be located and merged on top.
    
    4. There are some later related MySQL commits, these should be checked
    and merged. These include:
        e134b9362ba0b750d6ac1b444780019622d14aa5
        b38f0f7857c073edfcc0a64675b7f7ede04be00f
        fd2b210383358fe7697f201e19ac9779879ba72a
        afc397376ec50e96b2918ee64e48baf4dda0d37d
    
    5. The testcase from MySQL relies heavily on sleep and timing for
    testing, and seems likely to sporadically fail on heavily loaded test
    servers in buildbot or distro build farms.
    
    Signed-off-by: Kristian Nielsen <knielsen@knielsen-hq.org>

commit eb32dfd8092a656e2eb77107d8b5d31e143e2cc4
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Wed Aug 3 11:49:35 2016 +0400

    MDEV-10365 - Race condition in error handling of INSERT DELAYED
    
    Shared variables of Delayed_insert may be updated without mutex protection
    when delayed insert thread gets an error.
    
    Re-acquire mutex earlier, so that shared variables are protected.

commit 9f9eb682d54fedf38e02df1d28228e68c10ee77d
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Mon Jun 13 19:50:45 2016 +0200

    MDEV-10098 main.create_delayed fails with ps-protocol: assertion `global_status_var.global_memory_used >= 0' failed
    
    Remove the assert. We cannot verify that
    global_memory_used value is valid (>=0)
    because some of updates are cached in individual THD's
    (e.g. THD1 can have +300 cached, while the other THD2
    can have -300 cached. If the second THD exists before
    the first one, global_memory_used will be -300
    temporarily).
    
    Instead add the assert just before the exit, when all
    THDs been already destroyed.

commit 7ecb304996df7d917ef1e857090a9a9c525160f1
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Fri Jun 10 17:37:12 2016 +0400

    Code cleanups
    
    - unused TABLE_SHARE::deleting and TABLE_LIST::deleting flags were removed
    - kill_delayed_threads_for_table() and intern_close_table() are now private
      methods of table cache
    - removed free_share flag of closefrm(): it was never used for temporary
      tables and was rarely useful for regular tables
For keyword InnoDB:
commit ff166093741df0bd91ba24e02714ef882073c51b
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu May 11 21:12:37 2017 +0300

    MDEV-12674 Innodb_row_lock_current_waits has overflow
    
    There is a race condition related to the variable
    srv_stats.n_lock_wait_current_count, which is only
    incremented and decremented by the function lock_wait_suspend_thread(),
    
    The incrementing is protected by lock_sys->wait_mutex, but the
    decrementing does not appear to be protected by anything.
    This mismatch could allow the counter to be corrupted when a
    transactional InnoDB table or record lock wait is terminating
    roughly at the same time with the start of a wait on a
    (possibly different) lock.
    
    ib_counter_t: Remove some unused methods. Prevent instantiation for N=1.
    Add an inc() method that takes a slot index as a parameter.
    
    single_indexer_t: Remove.
    
    simple_counter<typename Type, bool atomic=false>: A new counter wrapper.
    Optionally use atomic memory operations for modifying the counter.
    Aligned to the cache line size.
    
    lsn_ctr_1_t, ulint_ctr_1_t, int64_ctr_1_t: Define as simple_counter<Type>.
    These counters are either only incremented (and we do not care about
    losing some increment operations), or the increment/decrement operations
    are protected by some mutex.
    
    srv_stats_t::os_log_pending_writes: Document that the number is protected
    by log_sys->mutex.
    
    srv_stats_t::n_lock_wait_current_count: Use simple_counter<ulint, true>,
    that is, atomic inc() and dec() operations.
    
    lock_wait_suspend_thread(): Release the mutexes before incrementing
    the counters. Avoid acquiring the lock mutex if the lock wait has
    already been resolved. Atomically increment and decrement
    srv_stats.n_lock_wait_current_count.
    
    row_insert_for_mysql(), row_update_for_mysql(),
    row_update_cascade_for_mysql(): Use the inc() method with the trx->id
    as the slot index. This is a non-functional change, just using
    inc() instead of add(1).
    
    buf_LRU_get_free_block(): Replace the method add(index, n) with inc().
    There is no slot index in the simple_counter.

commit f4df8c00c957146f04db031f1f9f80aab229d1d2
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Wed May 10 23:13:06 2017 +0300

    MDEV-11197: TrxInInnoDB::is_aborted(const trx_t*): Assertion `srv_read_only_mode || trx->in_depth > 0' failed
    
    TrxInInnoDB should be constructed to track if a transaction is executing
    inside InnoDB code i.e. it is like a gate between Server and InnoDB
    ::rnd_next() is called from Server and thus construct TrxInInnoDB
    also there.
    
    Applied suggested clean-up to TrxInInnoDB class functions enter()
    and exit(). Note that exactly original did not work for enter().

commit 00821c38255a319a276f1cc76d95c14b6c5a6673
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed May 10 15:13:11 2017 +0300

    MDEV-12776 Do not create the InnoDB temporary tablespace in innodb_read_only mode
    
    The InnoDB temporary tablespace is only usable if innodb_read_only=OFF.
    It is useless to create the tablespace in read-only mode, because
    CREATE TEMPORARY TABLE is disallowed if innodb_read_only, and nothing
    can we written to the temporary tablespace if no temporary tables
    can be created.

commit 3a906ca98209670a038488eda8d4be81580e7c88
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed May 10 14:31:57 2017 +0300

    MDEV-12708 innodb.truncate_purge_debug fails sporadically in buildbot
    
    The latest attempted fix for
    MDEV-11802 InnoDB purge fails to start when there is work to do
    is not complete.
    
    For now, work around the issue by making SHOW ENGINE INNODB STATUS
    call srv_wake_purge_thread_if_not_active() to wake up the purge.

commit 6322913339642029dacf6245423958f92faa4007
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Thu May 4 09:12:00 2017 +0300

    MDEV-12472: InnoDB should accept XtraDB parameters, warning that they are ignored
    
    Added a new file ha_xtradb.h where XtraDB parameters are defined. This
    file is included in two places to avoid too intrusive change to
    ha_innodb.cc that would make future merges harder.
    
    innodb_show_locks_held and innodb_show_verbose_locks should be
    implemented (but on different commit).

commit e8889c800223db6a9b9e6d02dcb09a97524a1f16
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue May 9 10:00:49 2017 +0300

    MDEV-12745 InnoDB Assertion `0' failed at row0umod.cc:1181
    
    row_undo_mod_parse_undo_rec(): Relax the too strict assertion and
    correct the comment.
    
    innodb.innodb-blob: Force a flush of the redo log right before
    killing the server, to ensure that the code path gets exercised.
    (The bogus debug assertion failed on the rollback of the statement
    UPDATE t3 SET c=REPEAT('j',3000) WHERE a=2 which did not modify
    any indexes before the server was killed.)

commit bc5c1d99708cf336d632b657ca730955b52df418
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri May 5 14:04:18 2017 +0300

    MDEV-12635 innodb.log_file_size fails when run with Valgrind
    
    In MariaDB Server before 10.2, InnoDB will not be shut down properly
    if startup fails. So, Valgrind failures are to be expected.
    Disable the test under Valgrind. In 10.2, it should pass with Valgrind.

commit f9cc391863ab962e8c8a8a8a676d730498eb8d6f
Merge: db0917f68f2 765a43605a4
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri May 5 10:25:29 2017 +0300

    Merge 10.1 into 10.2
    
    This only merges MDEV-12253, adapting it to MDEV-12602 which is already
    present in 10.2 but not yet in the 10.1 revision that is being merged.
    
    TODO: Error handling in crash recovery needs to be improved.
    If a page cannot be decrypted (or read), we should cleanly abort
    the startup. If innodb_force_recovery is specified, we should
    ignore the problematic page and apply redo log to other pages.
    Currently, the test encryption.innodb-redo-badkey randomly fails
    like this (the last messages are from cmake -DWITH_ASAN):
    
    2017-05-05 10:19:40 140037071685504 [Note] InnoDB: Starting crash recovery from checkpoint LSN=1635994
    2017-05-05 10:19:40 140037071685504 [ERROR] InnoDB: Missing MLOG_FILE_NAME or MLOG_FILE_DELETE before MLOG_CHECKPOINT for tablespace 1
    2017-05-05 10:19:40 140037071685504 [ERROR] InnoDB: Plugin initialization aborted at srv0start.cc[2201] with error Data structure corruption
    2017-05-05 10:19:41 140037071685504 [Note] InnoDB: Starting shutdown...
    i=================================================================
    ==5226==ERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: 0x612000018588 in thread T0
        #0 0x736750 in operator delete(void*) (/mariadb/server/build/sql/mysqld+0x736750)
        #1 0x1e4833f in LatchCounter::~LatchCounter() /mariadb/server/storage/innobase/include/sync0types.h:599:4
        #2 0x1e480b8 in LatchMeta<LatchCounter>::~LatchMeta() /mariadb/server/storage/innobase/include/sync0types.h:786:17
        #3 0x1e35509 in sync_latch_meta_destroy() /mariadb/server/storage/innobase/sync/sync0debug.cc:1622:3
        #4 0x1e35314 in sync_check_close() /mariadb/server/storage/innobase/sync/sync0debug.cc:1839:2
        #5 0x1dfdc18 in innodb_shutdown() /mariadb/server/storage/innobase/srv/srv0start.cc:2888:2
        #6 0x197e5e6 in innobase_init(void*) /mariadb/server/storage/innobase/handler/ha_innodb.cc:4475:3

commit 0072d2e9a162e87c50988d9f820ae40fdfdf7251
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Fri Apr 7 15:01:27 2017 +0200

    InnoDB cleanup: remove a bunch of #ifdef UNIV_INNOCHECKSUM
    
    innochecksum uses global variables. great, let's use them all the
    way down, instead of passing them as arguments to innodb internals,
    conditionally modifying function prototypes with #ifdefs

commit 935a1c676e1fbfea7950d69c410a59a29a50857a
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Sat Apr 29 10:05:39 2017 +0300

    MDEV-12623: InnoDB: Failing assertion: kv == 0
    
    || kv >= crypt_data->min_key_version,
    encryption.innodb_encryption_tables failed in buildbot.
    
    Now that key_version is not stored when page is read to
    buf_page_t::key_version but always read from actual page
    this assertion is not always valid.

commit b82c602db588cfa688278ef772050c004590c124
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Apr 28 03:20:49 2017 +0300

    MDEV-12602 InnoDB: Failing assertion: space->n_pending_ops == 0
    
    This fixes a regression caused by MDEV-12428.
    When we introduced a variant of fil_space_acquire() that could
    increment space->n_pending_ops after space->stop_new_ops was set,
    the logic of fil_check_pending_operations() was broken.
    
    fil_space_t::n_pending_ios: A new field to track read or write
    access from the buffer pool routines immediately before a block
    write or after a block read in the file system.
    
    fil_space_acquire_for_io(), fil_space_release_for_io(): Similar
    to fil_space_acquire_silent() and fil_space_release(), but
    modify fil_space_t::n_pending_ios instead of fil_space_t::n_pending_ops.
    
    Adjust a number of places accordingly, and remove some redundant
    tablespace lookups.
    
    The following parts of this fix differ from the 10.2 version of this fix:
    
    buf_page_get_corrupt(): Add a tablespace parameter.
    
    In 10.2, we already had a two-phase process of freeing fil_space objects
    (first, fil_space_detach(), then release fil_system->mutex, and finally
    free the fil_space and fil_node objects).
    
    fil_space_free_and_mutex_exit(): Renamed from fil_space_free().
    Detach the tablespace from the fil_system cache, release the
    fil_system->mutex, and then wait for space->n_pending_ios to reach 0,
    to avoid accessing freed data in a concurrent thread.
    During the wait, future calls to fil_space_acquire_for_io() will
    not find this tablespace, and the count can only be decremented to 0,
    at which point it is safe to free the objects.
    
    fil_node_free_part1(), fil_node_free_part2(): Refactored from
    fil_node_free().

commit 4b24467ff37d6db82500e736e832d0a53842ac9b
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Apr 28 12:23:35 2017 +0300

    MDEV-12602 InnoDB: Failing assertion: space->n_pending_ops == 0
    
    This fixes a regression caused by MDEV-12428.
    When we introduced a variant of fil_space_acquire() that could
    increment space->n_pending_ops after space->stop_new_ops was set,
    the logic of fil_check_pending_operations() was broken.
    
    fil_space_t::n_pending_ios: A new field to track read or write
    access from the buffer pool routines immediately before a block
    write or after a block read in the file system.
    
    fil_space_acquire_for_io(), fil_space_release_for_io(): Similar
    to fil_space_acquire_silent() and fil_space_release(), but
    modify fil_space_t::n_pending_ios instead of fil_space_t::n_pending_ops.
    
    fil_space_free_low(): Wait for space->n_pending_ios to reach 0,
    to avoid accessing freed data in a concurrent thread. Future
    calls to fil_space_acquire_for_io() will not find this tablespace,
    because it will already have been detached from fil_system.
    
    Adjust a number of places accordingly, and remove some redundant
    tablespace lookups.
    
    FIXME: buf_page_check_corrupt() should take a tablespace from
    fil_space_acquire_for_io() as a parameter. This will be done
    in the 10.1 version of this patch and merged from there.
    That depends on MDEV-12253, which has not been merged from 10.1 yet.

commit 7223ec4ca79a436509a1734c8cfb082927159143
Author: Thirunarayanan Balathandayuthapani <thirunarayanan.balathandayuth@oracle.com>
Date:   Wed Feb 1 16:03:57 2017 +0530

    Bug #25385590 DROP TABLE CRASHES IF INNODB_FORCE_RECOVERY > 4
    
    Problem:
    ========
     - Drop table assert if innodb_force_recovery is set to 5 or 6.
    For innodb_force_recovery 5 and 6, InnoDB doesn't scan the undo log
    and it makes the redo rollback segment as NULL. There is no way for
    transaction to write any undo log.
    
     - If innodb_force_recovery is set to 6 then InnoDB does not do the
    redo log roll-forward in connection with recovery. In this case,
    log_sys will be initalized only and it will not have latest
    checkpoint information. Checkpoint is done during shutdown even
    innodb_force_recovery is set to 6. So it leads to incorrect
    information update in checkpoint header.
    
    Solution:
    ========
    1) Allow drop table only if innodb_force_recovery < 5.
    2) Make innodb as read-only if innodb_force_recovery is set to 6.
    3) During shutdown, remove the checkpoint if innodb_force_recovery
    is set to 6.
    
    Reviewed-by: Jimmy Yang <jimmy.yang@oracle.com>
    RB: 15075

commit 13dcdb0903f30130e69e2d6c7cf7770a3d3b9427
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Apr 26 10:30:13 2017 +0300

    MDEV-11802 InnoDB purge does not always run when there is work to do
    
    srv_sys_t::n_threads_active[]: Protect writes by both the mutex and
    by atomic memory access.
    
    srv_active_wake_master_thread_low(): Reliably wake up the master
    thread if there is work to do. The trick is to atomically read
    srv_sys->n_threads_active[].
    
    srv_wake_purge_thread_if_not_active(): Atomically read
    srv_sys->n_threads_active[] (and trx_sys->rseg_history_len),
    so that the purge should always be triggered when there is work to do.
    
    trx_commit_in_memory(): Invoke srv_wake_purge_thread_if_not_active()
    whenever a transaction is committed. Purge could have been prevented by
    the read view of the currently committing transaction, even if it is
    a read-only transaction.
    
    trx_purge_add_update_undo_to_history(): Do not wake up the purge.
    This is only called by trx_undo_update_cleanup(), as part of
    trx_write_serialisation_history(), which in turn is only called by
    trx_commit_low() which will always call trx_commit_in_memory().
    Thus, the added call in trx_commit_in_memory() will cover also
    this use case where a committing read-write transaction added
    some update_undo log to the purge queue.
    
    trx_rseg_mem_restore(): Atomically modify trx_sys->rseg_history_len.

commit 6264e892cf3e81f4cdcb13eb0e13955dbf3fdfc8
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Apr 26 10:11:46 2017 +0300

    Remove redundant initialization of global InnoDB variables
    
    Also, remove the unused global variable srv_priority_boost.

commit 698e37d60c6ac3e0c524011ed33b964d84dcfaee
Author: Darshan M N <darshan.m.n@oracle.com>
Date:   Fri Dec 16 12:14:38 2016 +0530

    BUG#25251082 DISABLING CERTAIN MACROS IN INNODB RESULTS IN COMPILATION ERRORS
    
    Issue:
    ======
    Disabling macros such as UNIV_PFS_MUTEX/UNIV_PFS_RWLOCK/UNIV_PFS_THREAD
    which are defined in InnoDB throws errors during compilation.
    
    Fix:
    ====
    Fix all the compilation errors.
    
    RB: 14893
    Reviewed-by: Jimmy Yang <Jimmy.Yang@oracle.com>
    Reviewed-by: Satya Bodapati <satya.bodapati@oracle.com>

commit bf5be323765b7a7e31e8813bbb995ca08e74f940
Author: Debarun Banerjee <debarun.banerjee@oracle.com>
Date:   Sat Nov 12 20:53:15 2016 +0530

    BUG#25032066 PREPARED TRANSACTION SHOULD NOT BE ROLLED BACK BY HIGH PRIORITY TRANSACTION
    
    Problem :
    ---------
    1. delete_all_rows() and rnd_init() are not returning error
    after async rollback in 5.7. This results in assert in
    innodb in next call.
    
    2. High priority transaction is rolling back prepared transaction.
    This is because TRX_FORCE_ROLLBACK_DISABLE is getting set only for
    first entry [TrxInInnoDB].
    
    Solution :
    ----------
    1. return DB_FORCED_ABORT error after rollback.
    2. check and disable rollback in TrxInInnodb::enter always.
    
    Reviewed-by: Sunny Bains <sunny.bains@oracle.com>
    
    RB: 13777

commit bdfa49f6e23e1f6b8dbd1a5c9a782c4e65ab6869
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Apr 25 10:11:40 2017 +0300

    Remove redundant initialization of some InnoDB startup parameters
    
    The InnoDB startup parameters will be initialized via pointers
    in innobase_system_variables[]. Remove some redundant link-time
    initialization.

commit 472b5f0d1ff53cf9889758f6c2f11fb93ad15e6d
Author: Marko Mäkelä <marko.makela@oracle.com>
Date:   Tue Sep 6 14:57:16 2016 +0300

    Follow-up to Bug#24346574 PAGE CLEANER THREAD, ASSERT BLOCK->N_POINTERS == 0
    
    Silence the Valgrind warnings on instrumented builds (-DWITH_VALGRIND).
    
    assert_block_ahi_empty_on_init(): A variant of
    assert_block_ahi_empty() that declares n_pointers initialized and then
    asserts that n_pointers==0.
    
    In Valgrind-instrumented builds, InnoDB declares allocated memory
    uninitialized.

commit 93078c9cb16a079a2d5f261fc95a0ecf99ac48d0
Author: Marko Mäkelä <marko.makela@oracle.com>
Date:   Wed Aug 31 09:21:13 2016 +0300

    Bug#24444831 MY_ERROR(ER_INNODB_ONLINE_LOG_TOO_BIG) CALLED WITH INVALID INDEX NAME
    
    This bug was introduced in MySQL 5.6.8 with WL#6255.
    When an error occurs while rebuilding a table that only has a
    hidden GEN_CLUST_INDEX inside InnoDB, ha_alter_info->key_info_buffer
    would be invalid and should not be dereferenced.
    
    get_error_key_name(): Get the name of an erroneous key.
    Avoid dereferencing ha_alter_info->key_info_buffer when no keys
    exist in the SQL layer.
    
    ha_innobase::inplace_alter_table(),
    ha_innobase::commit_try_rebuild(): Invoke get_error_key_name()
    for reporting ER_INNODB_ONLINE_LOG_TOO_BIG or ER_INDEX_CORRUPT.
    
    RB: 13834
    Reviewed-by: Jimmy Yang <jimmy.yang@oracle.com>

commit 223eb5fb9a28c11898a3789515d37abe5dceb856
Author: Thirunarayanan Balathandayuthapani <thirunarayanan.balathandayuth@oracle.com>
Date:   Fri Aug 26 11:00:44 2016 +0530

    Bug #20989615 INNODB AUTO_INCREMENT PRODUCES SAME VALUE TWICE
    
    Problem:
    =======
    Autoincrement value gives duplicate values because of the following reasons.
    
    (1) In InnoDB handler function, current autoincrement value is not changed
    based on newly set auto_increment_increment or auto_increment_offset variable.
    
    (2) Handler function does the rounding logic and changes the current
    autoincrement value and InnoDB doesn't aware of the change in current
    autoincrement value.
    
    Solution:
    ========
    Fix the problem(1), InnoDB always respect the auto_increment_increment
    and auto_increment_offset value in case of current autoincrement value.
    By fixing the problem (2), handler layer won't change any current
    autoincrement value.
    
    Reviewed-by: Jimmy Yang <jimmy.yang@oracle.com>
    RB: 13748

commit 01389ee8ac2632db663be16828ba70363f1ea08d
Author: Marko Mäkelä <marko.makela@oracle.com>
Date:   Mon Aug 8 14:19:32 2016 +0300

    Bug#24397406 INNODB: ALGORITHM=INPLACE FAILS TO PROMOTE UNIQUE KEY TO CLUSTERED INDEX
    
    When a table has no PRIMARY KEY, but there is a UNIQUE INDEX
    defined on NOT NULL columns that are not column prefixes,
    that unique index must be treated as the primary key.
    
    This property was being violated by InnoDB when a column was changed
    to NOT NULL, such that a UNIQUE INDEX on that column became eligible
    to being treated as a primary key.
    
    innobase_create_key_defs(): Instead of checking each ADD [UNIQUE] INDEX
    request, check if a GEN_CLUST_INDEX can be replaced with any unique index
    in the altered_table definition. So, we can have new_primary even
    if n_add==0.
    
    prepare_inplace_alter_table_dict(): When the table is not being rebuilt,
    assert that TABLE_SHARE::primary_key is not changing.
    
    RB: 13595
    Reviewed-by: Kevin Lewis <kevin.lewis@oracle.com>

commit 340af4ebc396b7954cb849f1d58ee836db3134fb
Merge: 200ef513448 7d0ac3ade7f
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Apr 24 08:31:59 2017 +0300

    Merge pull request #363 from grooverdan/10.1-MDEV-12488-xtradb-os_thread_pf
    
    MDEV-12488: Remove type mismatch in InnoDB printf-like calls

commit 7d0ac3ade7fb9f1276e87faa7099832d01329200
Author: Daniel Black <daniel.black@au.ibm.com>
Date:   Mon Apr 24 13:02:08 2017 +1000

    MDEV-12488: Remove type mismatch in InnoDB printf-like calls
    
    To fix OSX error:
    
    /Users/travis/build/grooverdan/mariadb-server/storage/xtradb/sync/sync0arr.cc:530:5: warning: format specifies type 'unsigned long' but the argument has type 'os_thread_id_t' (aka '_opaque_pthread_t *') [-Wformat]
                                    mutex->thread_id,
    
                                    ^~~~~~~~~~~~~~~~
    
    Signed-off-by: Daniel Black <daniel.black@au.ibm.com>

commit 47141c9d9b5170bb8e6a401f4456a4d759688fe3
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Apr 21 08:45:48 2017 +0300

    Fix some InnoDB type mismatch
    
    On 64-bit Windows, sizeof(ulint)!=sizeof(ulong).

commit 5684aa220cc4415fe8ee31ac044210b9ff8c7ce1
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Apr 21 05:51:27 2017 +0300

    MDEV-12488 Remove type mismatch in InnoDB printf-like calls
    
    Alias the InnoDB ulint and lint data types to size_t and ssize_t,
    which are the standard names for the machine-word-width data types.
    
    Correspondingly, define ULINTPF as "%zu" and introduce ULINTPFx as "%zx".
    In this way, better compiler warnings for type mismatch are possible.
    
    Furthermore, use PRIu64 for that 64-bit format, and define
    the feature macro __STDC_FORMAT_MACROS to enable it on Red Hat systems.
    
    Fix some errors in error messages, and replace some error messages
    with assertions.
    Most notably, an IMPORT TABLESPACE error message in InnoDB was
    displaying the number of columns instead of the mismatching flags.

commit aafaf05a47221e035039d75a8f62dbda2379d044
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Apr 21 08:45:48 2017 +0300

    Fix some InnoDB type mismatch introduced in 10.1
    
    On 64-bit Windows, sizeof(ulint)!=sizeof(ulong).

commit e056d1f1ca91ebe40467ed46be00be0add9cf247
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Apr 21 17:39:12 2017 +0300

    Fix some InnoDB type mismatch
    
    On 64-bit Windows, sizeof(ulint)!=sizeof(ulong).

commit 87b6df31c4ae97c09dc67e370978112fe39764bb
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Apr 21 04:36:50 2017 +0300

    MDEV-12488 Remove type mismatch in InnoDB printf-like calls
    
    This is a reduced version of an originally much larger patch.
    We will keep the definition of the ulint, lint data types unchanged,
    and we will not be replacing fprintf() calls with ib_logf().
    
    On Windows, use the standard format strings instead of nonstandard
    extensions.
    
    This patch fixes some errors in format strings.
    Most notably, an IMPORT TABLESPACE error message in InnoDB was
    displaying the number of columns instead of the mismatching flags.

commit d0ef1aaf618452efea5a2e74f6d86ed0a586b63e
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Sat Apr 8 19:28:19 2017 +0300

    MDEV-12123 Page contains nonzero PAGE_MAX_TRX_ID
    
    When MDEV-6076 repurposed the field PAGE_MAX_TRX_ID, it was assumed
    that the field always was 0 in the clustered index of old data files.
    This was not the case in IMPORT TABLESPACE (introduced in MySQL 5.6
    and MariaDB 10.0), which is writing the transaction ID to all index
    pages, including clustered index pages.
    
    This means that on a data file that was at some point of its life
    IMPORTed to an InnoDB instance, MariaDB 10.2.4 or later could interpret
    the transaction ID as a persistent AUTO_INCREMENT value.
    
    This also means that future changes that repurpose PAGE_MAX_TRX_ID
    in the clustered index may cause trouble with files that were imported
    at some point of their life.
    
    There is a separate minor issue that InnoDB is writing PAGE_MAX_TRX_ID
    to every secondary index page, even though it is only needed on leaf
    pages. From now on we will write PAGE_MAX_TRX_ID as 0 to non-leaf pages,
    just to be able to keep stricter debug assertions.
    
    btr_root_raise_and_insert(): Reset the PAGE_MAX_TRX_ID field on non-root
    pages of the clustered index, and on the no-longer-leaf root page of
    secondary indexes.
    
    AbstractCallback::is_root_page(): Remove. Use page_is_root() instead.
    
    PageConverter::update_index_page(): Reset the PAGE_MAX_TRX_ID to 0
    on other pages than the clustered index root page or secondary index
    leaf pages.

commit 3bb32e8682f849413ce994277e9029ba5732baae
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Sat Apr 15 03:36:23 2017 +0300

    MDEV-10509: Remove excessive server error logging on InnoDB ALTER TABLE
    
    Disable the output that was added in MDEV-6812 if log_warnings=2 or less.
    Also, remove some redundant messages.
    
    TODO: Implement MDEV-12512 to supercede MDEV-6812 and properly report
    the progress of ALTER TABLE…ALGORITHM=INPLACE.

commit a039d6c3e6dc4f5131432ce5e540c83d04087474
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Apr 10 01:36:33 2017 +0300

    Remove unused tokens from the InnoDB SQL parser.
    
    PARS_INTEGER_TOKEN: Remove. The lexer returns only PARS_INT_TOKEN.
    
    PARS_FIXBINARY_LIT, PARS_BLOB_LIT: Remove. These are never returned
    by the lexer. In sym_tab_add_bound_lit(), use PARS_STR_LIT.

commit 25d69ea0124941cca54dbf0c2ebb2aa20ab2d6a8
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Apr 4 10:13:53 2017 +0300

    MDEV-12198 innodb_defragment=1 crashes server on OPTIMIZE TABLE when FULLTEXT index exists
    
    ha_innobase::defragment_table(): Skip corrupted indexes and
    FULLTEXT INDEX. In InnoDB, FULLTEXT INDEX is implemented with
    auxiliary tables. We will not defragment them on OPTIMIZE TABLE.

commit 8423294acf32d966027ef99a38938bb4acc001d5
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Apr 5 16:24:44 2017 +0300

    Make InnoDB doublewrite buffer creation more robust.
    
    buf_dblwr_create(): Remove a bogus check for the buffer pool size.
    Theoretically, there is no problem if the doublewrite buffer is
    larger than the buffer pool. It could only cause trouble on crash
    recovery, and on recovery the doublewrite buffer is read to a buffer
    that is allocated outside of the buffer pool. Moreover, this check
    was only performed when the database was initialized for the first
    time.
    
    On a normal startup, buf_dblwr_init() would not enforce any
    rule on the innodb_buffer_pool_size.
    
    Furthermore, in case of an error, commit the mini-transaction in order
    to avoid an assertion failure on shutdown. Yes, this will leave the
    doublewrite buffer in a corrupted stage, but the doublewrite buffer
    should only be initialized when the data files are being initialized
    from the scratch in the first place.

commit 8e36216a06603942613f8157b9b790e98f90d608
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Apr 5 14:46:35 2017 +0300

    Import two ALTER TABLE…ALGORITHM=INPLACE tests from MySQL 5.6.
    
    Also, revert part of MDEV-7685 that added an InnoDB abort when
    ALTER TABLE…ALGORITHM=INPLACE is reporting that it ran out of
    file space.

commit 0d34dd7cfb700b91f11c59d189d70142ed652615
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Apr 4 12:19:42 2017 +0300

    MDEV-11840 InnoDB: "Cannot open <ib_buffer_pool file>" should not be an error
    
    buf_load(): When the file cannot be opened for reading, issue a note,
    not an error message.

commit 124bae082bf17e9af1fc77f78bbebd019635be5c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 30 13:11:34 2017 +0300

    MDEV-12289 Keep 128 persistent rollback segments for compatibility and performance
    
    InnoDB divides the allocation of undo logs into rollback segments.
    The DB_ROLL_PTR system column of clustered indexes can address up to
    128 rollback segments (TRX_SYS_N_RSEGS). Originally, InnoDB only
    created one rollback segment. In MySQL 5.5 or in the InnoDB Plugin
    for MySQL 5.1, all 128 rollback segments were created.
    
    MySQL 5.7 hard-codes the rollback segment IDs 1..32 for temporary undo logs.
    On upgrade, unless a slow shutdown (innodb_fast_shutdown=0)
    was performed on the old server instance, these rollback segments
    could be in use by transactions that are in XA PREPARE state or
    transactions that were left behind by a server kill followed by a
    normal shutdown immediately after restart.
    
    Persistent tables cannot refer to temporary undo logs or vice versa.
    Therefore, we should keep two distinct sets of rollback segments:
    one for persistent tables and another for temporary tables. In this way,
    all 128 rollback segments will be available for both types of tables,
    which could improve performance. Also, MariaDB 10.2 will remain more
    compatible than MySQL 5.7 with data files from earlier versions of
    MySQL or MariaDB.
    
    trx_sys_t::temp_rsegs[TRX_SYS_N_RSEGS]: A new array of temporary
    rollback segments. The trx_sys_t::rseg_array[TRX_SYS_N_RSEGS] will
    be solely for persistent undo logs.
    
    srv_tmp_undo_logs. Remove. Use the constant TRX_SYS_N_RSEGS.
    
    srv_available_undo_logs: Change the type to ulong.
    
    trx_rseg_get_on_id(): Remove. Instead, let the callers refer to
    trx_sys directly.
    
    trx_rseg_create(), trx_sysf_rseg_find_free(): Remove unneeded parameters.
    These functions only deal with persistent undo logs.
    
    trx_temp_rseg_create(): New function, to create all temporary rollback
    segments at server startup.
    
    trx_rseg_t::is_persistent(): Determine if the rollback segment is for
    persistent tables.
    
    trx_sys_is_noredo_rseg_slot(): Remove. The callers must know based on
    context (such as table handle) whether the DB_ROLL_PTR is referring to
    a persistent undo log.
    
    trx_sys_create_rsegs(): Remove all parameters, which were always passed
    as global variables. Instead, modify the global variables directly.
    
    enum trx_rseg_type_t: Remove.
    
    trx_t::get_temp_rseg(): A method to ensure that a temporary
    rollback segment has been assigned for the transaction.
    
    trx_t::assign_temp_rseg(): Replaces trx_assign_rseg().
    
    trx_purge_free_segment(), trx_purge_truncate_rseg_history():
    Remove the redundant variable noredo=false.
    Temporary undo logs are discarded immediately at transaction commit
    or rollback, not lazily by purge.
    
    trx_purge_mark_undo_for_truncate(): Remove references to the
    temporary rollback segments.
    
    trx_purge_mark_undo_for_truncate(): Remove a check for temporary
    rollback segments. Only the dedicated persistent undo log tablespaces
    can be truncated.
    
    trx_undo_get_undo_rec_low(), trx_undo_get_undo_rec(): Add the
    parameter is_temp.
    
    trx_rseg_mem_restore(): Split from trx_rseg_mem_create().
    Initialize the undo log and the rollback segment from the file
    data structures.
    
    trx_sysf_get_n_rseg_slots(): Renamed from
    trx_sysf_used_slots_for_redo_rseg(). Count the persistent
    rollback segment headers that have been initialized.
    
    trx_sys_close(): Also free trx_sys->temp_rsegs[].
    
    get_next_redo_rseg(): Merged to trx_assign_rseg_low().
    
    trx_assign_rseg_low(): Remove the parameters and access the
    global variables directly. Revert to simple round-robin, now that
    the whole trx_sys->rseg_array[] is for persistent undo log again.
    
    get_next_noredo_rseg(): Moved to trx_t::assign_temp_rseg().
    
    srv_undo_tablespaces_init(): Remove some parameters and use the
    global variables directly. Clarify some error messages.
    
    Adjust the test innodb.log_file. Apparently, before these changes,
    InnoDB somehow ignored missing dedicated undo tablespace files that
    are pointed by the TRX_SYS header page, possibly losing part of
    essential transaction system state.

commit a0c79bcf0062adc2489f0b0bed98b05d4db8f476
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 30 08:46:12 2017 +0300

    Rename InnoDB transaction undo logging predicates.
    
    trx::has_logged_persistent(): Renamed from trx_is_redo_rseg_updated().
    Determines if a transaction has generated any persistent undo log.
    
    trx::has_logged(): Renamed from trx_is_rseg_updated().
    Determines if a transaction has generated any undo log.

commit 1216244eb9a52c30c7ffe1b1c372bb9e7d86ddf1
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Wed Mar 22 16:17:03 2017 +0100

    MDEV-11703 InnoDB background threads show up in the processlist
    
    give threads more descriptive names

commit cd2fe26116930220666281949fb7af81f3cc2b28
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Mar 24 18:24:46 2017 +0200

    MDEV-11802 innodb.innodb_bug14676111 fails on buildbot
    
    The test was unnecessarily depending on InnoDB purge, which can
    sometimes fail to proceed.
    
    Let us rewrite the test to use BEGIN;INSERT;ROLLBACK to cause the
    immediate removal of the desired records.

commit a821ef76057f17a9532f525d2858bb1d31c0a56d
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Mar 24 18:01:56 2017 +0200

    MDEV-11802 innodb.innodb_bug14676111 fails on buildbot
    
    The test was unnecessarily depending on InnoDB purge, which can
    sometimes fail to proceed.
    
    Let us rewrite the test to use BEGIN;INSERT;ROLLBACK to cause the
    immediate removal of the desired records.

commit a06da5c848e6feeef0b1559e84479890a76c446e
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Sat Mar 18 21:37:36 2017 +0200

    MDEV-12258 InnoDB: Fix the bogus debug assertion introduced in MDEV-12219
    
    After a partial rollback, an undo log segment that is empty
    may carry a duplicate-looking top_undo_no.
    
    Adjust the debug assertions and add a test.

commit 97acc4a1c37974cb2a1e3d6d163e107cb038a7a6
Author: Marko Mäkelä <marko.makela@oracle.com>
Date:   Tue May 26 10:01:12 2015 +0300

    MDEV-12270 Port MySQL 8.0 Bug#21141390 REMOVE UNUSED FUNCTIONS AND CONVERT GLOBAL SYMBOLS TO STATIC
    
    InnoDB defines some functions that are not called at all.
    Other functions are called, but only from the same compilation unit.
    
    Remove some function declarations and definitions, and add 'static'
    keywords. Some symbols must be kept for separately compiled tools,
    such as innochecksum.

commit 4e1116b2c6e1b6e0714fb2ed742842f1ee6bfab5
Author: Marko Mäkelä <marko.makela@oracle.com>
Date:   Fri Apr 22 10:50:45 2016 +0200

    MDEV-12271 Port MySQL 8.0 Bug#23150562 REMOVE UNIV_MUST_NOT_INLINE AND UNIV_NONINL
    
    Also, remove empty .ic files that were not removed by my MySQL commit.
    
    Problem:
    InnoDB used to support a compilation mode that allowed to choose
    whether the function definitions in .ic files are to be inlined or not.
    This stopped making sense when InnoDB moved to C++ in MySQL 5.6
    (and ha_innodb.cc started to #include .ic files), and more so in
    MySQL 5.7 when inline methods and functions were introduced
    in .h files.
    
    Solution:
    Remove all references to UNIV_NONINL and UNIV_MUST_NOT_INLINE from
    all files, assuming that the symbols are never defined.
    Remove the files fut0fut.cc and ut0byte.cc which only mattered when
    UNIV_NONINL was defined.

commit 7668a79a88a3103781ee23eace53ca3e9bbd6644
Author: Marko Mäkelä <marko.makela@oracle.com>
Date:   Tue Mar 29 13:20:32 2016 +0300

    MDEV-12269 Port Bug#22996442 INNODB: MAKE UNIV_DEBUG DEPEND ON DBUG_OFF
    
    This is a partial port of my patch in MySQL 8.0.
    In MySQL 8.0, all InnoDB references to DBUG_OFF were replaced
    with UNIV_DEBUG. We will not do that in MariaDB.
    
    InnoDB used two independent compile-time flags that distinguish
    debug and non-debug builds, which is confusing.
    
    Also, make ut_ad() and alias of DBUG_ASSERT().

commit 105f46ffb801bc1487c0383f73729fefa568f017
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Mar 15 15:56:17 2017 +0200

    MDEV-12273 Remove dict_table_t::does_not_fit_in_memory
    
    In the InnoDB internal SQL parser, there is the keyword
    DOES_NOT_FIT_IN_MEMORY that is never specified in any CREATE TABLE
    statement that is passed to the InnoDB SQL parser
    (que_eval_sql() or pars_sql() or yyparse()). If this keyword were
    ever present, it would set the flag dict_table_t::does_not_fit_in_memory
    which is only present in debug builds.
    
    Let us remove all traces of this.
    
    Also, fix storage/innobase/pars/make_flex.sh so that no the generated
    file storage/innobase/pars/lexyy.cc works as is.
    
    FIXME: Always generate the InnoDB Bison files at build time, similar
    to how sql/sql_yacc.yy is handled. (This would still leave the
    generated scanner files, unless we want to add a build-time dependency
    for Flex.)

commit b5285bd7e201ce522b42d18664f171a4e47f5ecd
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Mar 14 17:11:46 2017 +0200

    MDEV-11873 Unnecessary InnoDB warnings upon bootstrap
    
    dict_create_or_check_foreign_constraint_tables(): Change the warning
    about the foreign key metadata table creation to a note.
    
    Remove messages after metadata table creation. If the creation fails,
    startup will abort with a message. Normally the creation succeeds on
    bootstrap, and the messages would only be noise.
    
    Remove the related suppressions from the tests.

commit 50eb40a2a8aa3af6cc271f6028f4d6d74301d030
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Tue Mar 14 12:56:01 2017 +0200

    MDEV-11738: Mariadb uses 100% of several of my 8 cpus doing nothing
    
    MDEV-11581: Mariadb starts InnoDB encryption threads
    when key has not changed or data scrubbing turned off
    
    Background: Key rotation is based on background threads
    (innodb-encryption-threads) periodically going through
    all tablespaces on fil_system. For each tablespace
    current used key version is compared to max key age
    (innodb-encryption-rotate-key-age). This process
    naturally takes CPU. Similarly, in same time need for
    scrubbing is investigated. Currently, key rotation
    is fully supported on Amazon AWS key management plugin
    only but InnoDB does not have knowledge what key
    management plugin is used.
    
    This patch re-purposes innodb-encryption-rotate-key-age=0
    to disable key rotation and background data scrubbing.
    All new tables are added to special list for key rotation
    and key rotation is based on sending a event to
    background encryption threads instead of using periodic
    checking (i.e. timeout).
    
    fil0fil.cc: Added functions fil_space_acquire_low()
    to acquire a tablespace when it could be dropped concurrently.
    This function is used from fil_space_acquire() or
    fil_space_acquire_silent() that will not print
    any messages if we try to acquire space that does not exist.
    fil_space_release() to release a acquired tablespace.
    fil_space_next() to iterate tablespaces in fil_system
    using fil_space_acquire() and fil_space_release().
    Similarly, fil_space_keyrotation_next() to iterate new
    list fil_system->rotation_list where new tables.
    are added if key rotation is disabled.
    Removed unnecessary functions fil_get_first_space_safe()
    fil_get_next_space_safe()
    
    fil_node_open_file(): After page 0 is read read also
    crypt_info if it is not yet read.
    
    btr_scrub_lock_dict_func()
    buf_page_check_corrupt()
    buf_page_encrypt_before_write()
    buf_merge_or_delete_for_page()
    lock_print_info_all_transactions()
    row_fts_psort_info_init()
    row_truncate_table_for_mysql()
    row_drop_table_for_mysql()
        Use fil_space_acquire()/release() to access fil_space_t.
    
    buf_page_decrypt_after_read():
        Use fil_space_get_crypt_data() because at this point
        we might not yet have read page 0.
    
    fil0crypt.cc/fil0fil.h: Lot of changes. Pass fil_space_t* directly
    to functions needing it and store fil_space_t* to rotation state.
    Use fil_space_acquire()/release() when iterating tablespaces
    and removed unnecessary is_closing from fil_crypt_t. Use
    fil_space_t::is_stopping() to detect when access to
    tablespace should be stopped. Removed unnecessary
    fil_space_get_crypt_data().
    
    fil_space_create(): Inform key rotation that there could
    be something to do if key rotation is disabled and new
    table with encryption enabled is created.
    Remove unnecessary functions fil_get_first_space_safe()
    and fil_get_next_space_safe(). fil_space_acquire()
    and fil_space_release() are used instead. Moved
    fil_space_get_crypt_data() and fil_space_set_crypt_data()
    to fil0crypt.cc.
    
    fsp_header_init(): Acquire fil_space_t*, write crypt_data
    and release space.
    
    check_table_options()
            Renamed FIL_SPACE_ENCRYPTION_* TO FIL_ENCRYPTION_*
    
    i_s.cc: Added ROTATING_OR_FLUSHING field to
    information_schema.innodb_tablespace_encryption
    to show current status of key rotation.

commit 13e5c9de800254dc80a4ba4cc98d788be899acb6
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 9 23:20:51 2017 +0200

    MDEV-12219 Discard temporary undo logs at transaction commit
    
    Starting with MySQL 5.7, temporary tables in InnoDB are handled
    differently from persistent tables. Because temporary tables are
    private to a connection, concurrency control and multi-versioning
    (MVCC) are not applicable. For performance reasons, purge is
    disabled as well. Rollback is supported for temporary tables;
    that is why we have the temporary undo logs in the first place.
    
    Because MVCC and purge are disabled for temporary tables, we should
    discard all temporary undo logs already at transaction commit,
    just like we discard the persistent insert_undo logs. Before this
    change, update_undo logs were being preserved.
    
    trx_temp_undo_t: A wrapper for temporary undo logs, comprising
    a rollback segment and a single temporary undo log.
    
    trx_rsegs_t::m_noredo: Use trx_temp_undo_t.
    (Instead of insert_undo, update_undo, there will be a single undo.)
    
    trx_is_noredo_rseg_updated(), trx_is_rseg_assigned(): Remove.
    
    trx_undo_add_page(): Remove the parameter undo_ptr.
    Acquire and release the rollback segment mutex inside the function.
    
    trx_undo_free_last_page(): Remove the parameter trx.
    
    trx_undo_truncate_end(): Remove the parameter trx, and add the
    parameter is_temp. Clean up the code a bit.
    
    trx_undo_assign_undo(): Split the parameter undo_ptr into rseg, undo.
    
    trx_undo_commit_cleanup(): Renamed from trx_undo_insert_cleanup().
    Replace the parameter undo_ptr with undo.
    This will discard the temporary undo or insert_undo log at
    commit/rollback.
    
    trx_purge_add_update_undo_to_history(), trx_undo_update_cleanup():
    Remove 3 parameters. Always operate on the persistent update_undo.
    
    trx_serialise(): Renamed from trx_serialisation_number_get().
    
    trx_write_serialisation_history(): Simplify the code flow.
    If there are no persistent changes, do not update MONITOR_TRX_COMMIT_UNDO.
    
    trx_commit_in_memory(): Simplify the logic, and add assertions.
    
    trx_undo_page_report_modify(): Keep a direct reference to the
    persistent update_undo log.
    
    trx_undo_report_row_operation(): Simplify some code.
    Always assign TRX_UNDO_INSERT for temporary undo logs.
    
    trx_prepare_low(): Keep only one parameter. Prepare all 3 undo logs.
    
    trx_roll_try_truncate(): Remove the parameter undo_ptr.
    Try to truncate all 3 undo logs of the transaction.
    
    trx_roll_pop_top_rec_of_trx_low(): Remove.
    
    trx_roll_pop_top_rec_of_trx(): Remove the redundant parameter
    trx->roll_limit. Clear roll_limit when exhausting the undo logs.
    Consider all 3 undo logs at once, prioritizing the persistent
    undo logs.
    
    row_undo(): Minor cleanup. Let trx_roll_pop_top_rec_of_trx()
    reset the trx->roll_limit.

commit e5b155a4e5986a16620c3eb359a47bd27feb462a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Mar 10 16:01:02 2017 +0200

    MDEV-12091 Shutdown fails to wait for rollback of recovered transactions to finish
    
    In the 10.1 InnoDB Plugin, a call os_event_free(buf_flush_event) was
    misplaced. The event could be triggered by rollback of resurrected
    transactions while shutdown was in progress. This bug was caught
    by cmake -DWITH_ASAN testing. This call was only present in the
    10.1 InnoDB Plugin, not in other versions, or in XtraDB.
    
    That said, the bug affects all InnoDB versions. Shutdown assumes the
    cessation of any page-dirtying activity, including the activity of
    the background rollback thread. InnoDB only waited for the background
    rollback to finish as part of a slow shutdown (innodb_fast_shutdown=0).
    The default is a clean shutdown (innodb_fast_shutdown=1). In a scenario
    where InnoDB is killed, restarted, and shut down soon enough, the data
    files could become corrupted.
    
    logs_empty_and_mark_files_at_shutdown(): Wait for the
    rollback to finish, except if innodb_fast_shutdown=2
    (crash-like shutdown) was requested.
    
    trx_rollback_or_clean_recovered(): Before choosing the next
    recovered transaction to roll back, terminate early if non-slow
    shutdown was initiated. Roll back everything on slow shutdown
    (innodb_fast_shutdown=0).
    
    srv_innodb_monitor_mutex: Declare as static, because the mutex
    is only used within one module.
    
    In 10.2, os_event_destroy() sets the event to a NULL pointer,
    while os_event_free() in earlier versions did not do that.

commit 032678ad18498bab01d41779313e48df1990f780
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Mar 10 18:33:38 2017 +0200

    MDEV-12091 Shutdown fails to wait for rollback of recovered transactions to finish
    
    In the 10.1 InnoDB Plugin, a call os_event_free(buf_flush_event) was
    misplaced. The event could be signalled by rollback of resurrected
    transactions while shutdown was in progress. This bug was caught
    by cmake -DWITH_ASAN testing. This call was only present in the
    10.1 InnoDB Plugin, not in other versions, or in XtraDB.
    
    That said, the bug affects all InnoDB versions. Shutdown assumes the
    cessation of any page-dirtying activity, including the activity of
    the background rollback thread. InnoDB only waited for the background
    rollback to finish as part of a slow shutdown (innodb_fast_shutdown=0).
    The default is a clean shutdown (innodb_fast_shutdown=1). In a scenario
    where InnoDB is killed, restarted, and shut down soon enough, the data
    files could become corrupted.
    
    logs_empty_and_mark_files_at_shutdown(): Wait for the
    rollback to finish, except if innodb_fast_shutdown=2
    (crash-like shutdown) was requested.
    
    trx_rollback_or_clean_recovered(): Before choosing the next
    recovered transaction to roll back, terminate early if non-slow
    shutdown was initiated. Roll back everything on slow shutdown
    (innodb_fast_shutdown=0).
    
    srv_innodb_monitor_mutex: Declare as static, because the mutex
    is only used within one module.
    
    After each call to os_event_free(), ensure that the freed event
    is not reachable via global variables, by setting the relevant
    variables to NULL.

commit a20340cf859ba1b10174d4b8ee002d1548bf102c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 9 22:06:22 2017 +0200

    Hard-code innodb_page_size as the undo log page size.
    
    InnoDB undo logs currently always use the innodb_page_size,
    whether they are stored in the system tablespace, in a
    dedicated undo tablespace, or in the temporary tablespace.
    Remove redundant page_size parameters.
    
    TrxUndoRsegsIterator::set_next(): return bool instead of page_size.

commit 0ef91c89582fd9cacf0f7b2801351de4772ef374
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 9 22:01:08 2017 +0200

    Simplify InnoDB transaction system initialization.
    
    trx_rseg_mem_create(): Remove the parameter rseg_array.
    Update trx_sys->rseg_array directly.

commit 1417839810de32cce05655fb370998e5af0c5a62
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 9 20:40:48 2017 +0200

    InnoDB purge_sys cleanup.
    
    TrxUndoRsegsIterator::m_purge_sys: Remove. There is only one purge_sys.
    
    purge_sys_t: Renamed from trx_purge_t. Define a constructor and
    destructor. Allocate rseg_iter, purge_queue inline.
    
    purge_sys->trx: Remove. Use purge_sys->sess->trx instead.
    
    purge_sys->view_active: Remove. Access to purge_sys->view is always
    protected by purge_sys->latch.
    
    trx_purge_sys_create(): Replaced by purge_sys_t::purge_sys_t().
    
    trx_purge_sys_close(): Replaced by purge_sys_t::~purge_sys_t().

commit 70a0500d3c29e6e600586faa279c8af58e545075
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 9 17:35:09 2017 +0200

    Remove some InnoDB purge definitions from trx0types.h.

commit 7a30d86e9d45a8e8fe6557cbc12d919315a835b2
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 9 17:28:06 2017 +0200

    Simplify InnoDB startup.
    
    InnoDB needs to collect transactions from the persistent data files
    in trx_rseg_array_init() before trx_lists_init_at_db_start() is
    executed. But there is no need to create purge_sys->purge_queue
    separately from purge_sys.
    
    trx_sys_init_at_db_start(): Change the return type to void.
    Remove the direct call to trx_rseg_array_init(). It will be called
    by trx_lists_init_at_db_start(), which we are calling.
    Initialize the purge system read view.
    
    trx_lists_init_at_db_start(): Call trx_purge_sys_create(), which will
    invoke trx_rseg_array_init() to read the undo log segments.
    
    trx_purge_sys_create(): Remove the parameters. Do not initialize
    the purge system read view, because trx_sys->rw_trx_list has not
    been recovered yet. The purge_sys->view will be initialized at
    the end of trx_sys_init_at_db_start().
    
    trx_rseg_array_init(): Remove the parameter. Use purge_sys->purge_queue
    directly.
    
    innobase_start_or_create_for_mysql(): Remove the local variable
    purge_queue. Do not call trx_purge_sys_create(), because it will be
    called by trx_sys_init_at_db_start().

commit 15bdfeeba82134ed09ee3424db804fad1b613d8c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 9 15:58:33 2017 +0200

    Remove trx_sys_t::pending_purge_rseg_array.
    
    In MySQL 5.7, there is some redundant code for supposedly handling
    an upgrade from an earlier version of InnoDB.
    
    An upgrade of InnoDB between major versions should include a
    slow shutdown (innodb_fast_shutdown=0) of the previous version.
    
    A comment in trx_lists_init_at_db_start() confused clean shutdown
    and slow shutdown. A clean shutdown does not necessarily guarantee
    that there are no active transactions. A slow shutdown guarantees
    that.
    
    Because there was no code to handle rollback of recovered transactions
    that happened to use the rollback segment slots that MySQL 5.7.2
    repurposed for temporary undo logs, the upgrade is not working in all
    cases, and we may as well remove the code to handle purging.
    
    trx_sys_t::pending_purge_rseg_array: Remove.
    
    trx_undo_get_undo_rec_low(): Define as static. Remove the parameter
    is_redo_rseg.
    
    trx_undo_get_undo_rec(), trx_rseg_get_on_id(): Remove the parameter
    is_redo_rseg.
    
    trx_rseg_mem_free(): Remove the second parameter.
    
    trx_sys_get_nth_rseg(): Replace with trx_rseg_get_on_id().
    
    trx_rseg_schedule_pending_purge(): Remove.

commit 498f4a825b29a37cb27f1c76741987de8c510d06
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Mar 9 08:54:07 2017 +0200

    Fix InnoDB/XtraDB compilation warnings on 32-bit builds.

commit 5da6bd7b959af4a9755556afedde8f34d95c679a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Mar 7 17:16:49 2017 +0200

    MDEV-11027 InnoDB log recovery is too noisy
    
    Provide more useful progress reporting of crash recovery.
    
    recv_sys_t::progress_time: The time of the last report.
    
    recv_sys_t::report(ib_time_t): Determine whether progress should
    be reported.
    
    recv_scan_print_counter: Remove.
    
    log_group_read_log_seg(): After after each I/O request, invoke
    recv_sys_t::report() and report progress if needed.
    
    recv_apply_hashed_log_recs(): Change the return type back to void
    (DB_SUCCESS was always returned), and rename the parameter to last_batch.
    At the start of each batch, if there are pages to be recovered,
    issue a message.

commit 9c47beb8bd7e60f00e434d8c1e4bbf2b0befb28c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Mar 8 10:07:50 2017 +0200

    MDEV-11027 InnoDB log recovery is too noisy
    
    Provide more useful progress reporting of crash recovery.
    
    recv_sys_t::progress_time: The time of the last report.
    
    recv_scan_print_counter: Remove.
    
    log_group_read_log_seg(): After after each I/O request,
    report progress if needed.
    
    recv_apply_hashed_log_recs(): At the start of each batch,
    if there are pages to be recovered, issue a message.

commit 2bca41265c802dc9a3e8852bb2b3cda720a5d44a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Mar 7 13:15:29 2017 +0200

    Remove MLOG_COMP_REC_SEC_DELETE_MARK.
    
    The InnoDB redo log record type MLOG_COMP_REC_SEC_DELETE_MARK has
    been unused for a long time, and it has never been written after
    WL#8845 introduced the redo log format identifier in MySQL 5.7.9
    or MariaDB Server 10.2.2. Thus, removing the record type does not
    constitute any functional change.

commit 89d80c1b0be94639d0913dee7b6a284c32787b09
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Mar 1 08:27:39 2017 +0200

    Fix many -Wconversion warnings.
    
    Define my_thread_id as an unsigned type, to avoid mismatch with
    ulonglong.  Change some parameters to this type.
    
    Use size_t in a few more places.
    
    Declare many flag constants as unsigned to avoid sign mismatch
    when shifting bits or applying the unary ~ operator.
    
    When applying the unary ~ operator to enum constants, explictly
    cast the result to an unsigned type, because enum constants can
    be treated as signed.
    
    In InnoDB, change the source code line number parameters from
    ulint to unsigned type. Also, make some InnoDB functions return
    a narrower type (unsigned or uint32_t instead of ulint;
    bool instead of ibool).

commit 7331b83eede25e0186dda0b8cd96152d64df3d8a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Mar 6 10:07:04 2017 +0200

    MDEV-9282 follow-up: Remove an unused variable.
    
    Remove the unused variable innodb_calling_exit which was added
    in MySQL 5.7 in an attempt to avoid failures in other threads when
    an I/O thread calls exit().
    
    Since MDEV-9282, InnoDB or XtraDB MariaDB Server is not calling
    exit() at all, and the variable innodb_calling_exit was never set.

commit 27b9989d316163d00177bfee8fceb10995c2ba9b
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Feb 23 23:05:12 2017 +0200

    MDEV-12121 Introduce build option WITH_INNODB_AHI to disable innodb_adaptive_hash_index
    
    The InnoDB adaptive hash index is sometimes degrading the performance of
    InnoDB, and it is sometimes disabled to get more consistent performance.
    We should have a compile-time option to disable the adaptive hash index.
    
    Let us introduce two options:
    
    OPTION(WITH_INNODB_AHI "Include innodb_adaptive_hash_index" ON)
    OPTION(WITH_INNODB_ROOT_GUESS "Cache index root block descriptors" ON)
    
    where WITH_INNODB_AHI always implies WITH_INNODB_ROOT_GUESS.
    
    As part of this change, the misleadingly named function
    trx_search_latch_release_if_reserved(trx) will be replaced with the macro
    trx_assert_no_search_latch(trx) that will be empty unless
    BTR_CUR_HASH_ADAPT is defined (cmake -DWITH_INNODB_AHI=ON).
    
    We will also remove the unused column
    INFORMATION_SCHEMA.INNODB_TRX.TRX_ADAPTIVE_HASH_TIMEOUT.
    In MariaDB Server 10.1, it used to reflect the value of
    trx_t::search_latch_timeout which could be adjusted during
    row_search_for_mysql(). In 10.2, there is no such field.
    
    Other than the removal of the unused column TRX_ADAPTIVE_HASH_TIMEOUT,
    this is an almost non-functional change to the server when using the
    default build options.
    
    Some tests are adjusted so that they will work with both
    -DWITH_INNODB_AHI=ON and -DWITH_INNODB_AHI=OFF. The test
    innodb.innodb_monitor has been renamed to innodb.monitor
    in order to track MySQL 5.7, and the duplicate tests
    sys_vars.innodb_monitor_* are removed.

commit 29c776cfd1e560846e394f39d79ae43ff7d70c61
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Mar 3 12:03:33 2017 +0200

    MDEV-11520: Retry posix_fallocate() after EINTR.
    
    The function posix_fallocate() as well as the Linux system call
    fallocate() can return EINTR when the operation was interrupted
    by a signal. In that case, keep retrying the operation, except
    if InnoDB shutdown has been initiated.

commit 6b8173b6e97f14509f54c908ae0a714eb6ac1316
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Mar 3 11:47:31 2017 +0200

    MDEV-11520: Retry posix_fallocate() after EINTR.
    
    The function posix_fallocate() as well as the Linux system call
    fallocate() can return EINTR when the operation was interrupted
    by a signal. In that case, keep retrying the operation, except
    if InnoDB shutdown has been initiated.

commit ab8199f38e8f271139ac14ac704324cc1df541ce
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Mar 1 23:43:37 2017 +0200

    MDEV-12103 Reduce the time of looking for MLOG_CHECKPOINT during crash recovery
    
    This fixes MySQL Bug#80788 in MariaDB 10.2.5.
    
    When I made the InnoDB crash recovery more robust by implementing
    WL#7142, I also introduced an extra redo log scan pass that can be
    shortened.
    
    This fix will slightly extend the InnoDB redo log format that I
    introduced in MySQL 5.7.9 by writing the start LSN of the MLOG_CHECKPOINT
    mini-transaction to the end of the log checkpoint page, so that recovery
    can jump straight to it without scanning all the preceding redo log.
    
    LOG_CHECKPOINT_END_LSN: At the end of the checkpoint page, the start LSN
    of the MLOG_CHECKPOINT mini-transaction. Previously, these bytes were
    written as 0.
    
    log_write_checkpoint_info(), log_group_checkpoint(): Add the parameter
    end_lsn for writing LOG_CHECKPOINT_END_LSN.
    
    log_checkpoint(): Remember the LSN at which the MLOG_CHECKPOINT
    mini-transaction is starting (or at which the redo log ends on
    shutdown).
    
    recv_init_crash_recovery(): Remove.
    
    recv_group_scan_log_recs(): Add the parameter checkpoint_lsn.
    
    recv_recovery_from_checkpoint_start(): Read LOG_CHECKPOINT_END_LSN
    and if it is set, start the first scan from it instead of the
    checkpoint LSN. Improve some messages and remove bogus assertions.
    
    recv_parse_log_recs(): Do not skip DBUG_PRINT("ib_log") for some
    file-level redo log records.
    
    recv_parse_or_apply_log_rec_body(): If we have not parsed all redo
    log between the checkpoint and the corresponding MLOG_CHECKPOINT
    record, defer the check for MLOG_FILE_DELETE or MLOG_FILE_NAME records
    to recv_init_crash_recovery_spaces().
    
    recv_init_crash_recovery_spaces(): Refuse recovery if
    MLOG_FILE_NAME or MLOG_FILE_DELETE records are missing.

commit 370cf70136778b4b89bc3d3d2dfc8a35c7f98478
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Wed Feb 22 19:50:27 2017 +0100

    MDEV-11757 KEY_BLOCK_SIZE strangeness when UNCOMPRESSing COMPRESSed InnoDB tables
    
    in ALTER TABLE ... DROP KEY, ADD KEY, don't forget to compare old
    and new keys' block sizes. If they differ - the key definition has changed.

commit fc673a2c121f524a7ed4101b8b9a0cedf8d6fd58
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Feb 28 09:54:12 2017 +0200

    MDEV-12127 InnoDB: Assertion failure loop_count < 5 in file log0log.cc
    
    As suggested in MySQL Bug#58536, increase the limit in this
    debug assertion in order to avoid false positives on heavily
    loaded systems.

commit 78153cf641aea41166d3e79ae99b57b154f6a027
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Feb 24 12:51:55 2017 +0200

    MDEV-11927 InnoDB change buffer is not being merged
    to tables in the system tablespace
    
    This is a regression caused by MDEV-11585, which accidentally
    changed Tablespace::is_undo_tablespace() in an incorrect way,
    causing the InnoDB system tablespace to be reported as a dedicated
    undo tablespace, for which the change buffer is not applicable.
    
    Tablespace::is_undo_tablespace(): Remove. There were only 2
    calls from the function buf_page_io_complete(). Replace those
    calls as appropriate.
    
    Also, merge changes to tablespace import/export tests from
    MySQL 5.7, and clean up the tests a little further, allowing
    them to be run with any innodb_page_size.
    
    Remove duplicated error injection instrumentation for the
    import/export tests.  In MySQL 5.7, the error injection label
    buf_page_is_corrupt_failure was renamed to
    buf_page_import_corrupt_failure.
    
    fil_space_extend_must_retry(): Correct a debug assertion
    (tablespaces can be extended during IMPORT), and remove a
    TODO comment about compressed temporary tables that was
    already addressed in MDEV-11816.
    
    dict_build_tablespace_for_table(): Correct a comment that
    no longer holds after MDEV-11816, and assert that
    ROW_FORMAT=COMPRESSED can only be used in .ibd files.

commit 81695ab8b53013c302b50e015836d38146436cba
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Feb 21 16:52:41 2017 +0200

    MDEV-11520 Extending an InnoDB data file unnecessarily allocates
    a large memory buffer on Windows
    
    fil_extend_space_to_desired_size(), os_file_set_size(): Use calloc()
    for memory allocation, and handle failures. Properly check the return
    status of posix_fallocate(), and pass the correct arguments to
    posix_fallocate().
    
    On Windows, instead of extending the file by at most 1 megabyte at a time,
    write a zero-filled page at the end of the file.
    According to the Microsoft blog post
    https://blogs.msdn.microsoft.com/oldnewthing/20110922-00/?p=9573
    this will physically extend the file by writing zero bytes.
    (InnoDB never uses DeviceIoControl() to set the file sparse.)
    
    I tested that the file extension works properly with a multi-file
    system tablespace, both with --innodb-use-fallocate and
    --skip-innodb-use-fallocate (the default):
    
    ./mtr \
    --mysqld=--innodb-use-fallocate \
    --mysqld=--innodb-autoextend-increment=1 \
    --mysqld=--innodb-data-file-path='ibdata1:5M;ibdata2:5M:autoextend' \
    --parallel=auto --force --retry=0 --suite=innodb &
    
    ls -lsh mysql-test/var/*/mysqld.1/data/ibdata2
    (several samples while running the test)

commit 978179a9d4933d3d8d2ac99028798e8a07095dd4
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Feb 20 17:58:42 2017 +0200

    MDEV-11520 Extending an InnoDB data file unnecessarily allocates
    a large memory buffer on Windows
    
    fil_extend_space_to_desired_size(), os_file_set_size(): Use calloc()
    for memory allocation, and handle failures. Properly check the return
    status of posix_fallocate().
    
    On Windows, instead of extending the file by at most 1 megabyte at a time,
    write a zero-filled page at the end of the file.
    According to the Microsoft blog post
    https://blogs.msdn.microsoft.com/oldnewthing/20110922-00/?p=9573
    this will physically extend the file by writing zero bytes.
    (InnoDB never uses DeviceIoControl() to set the file sparse.)
    
    For innodb_plugin, port the XtraDB fix for MySQL Bug#56433
    (introducing fil_system->file_extend_mutex). The bug was
    fixed differently in MySQL 5.6 (and MariaDB Server 10.0).

commit 2bfe83adec576a27aed2d87ff65cebddc3430d2e
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Feb 20 17:16:59 2017 +0200

    Remove a bogus Valgrind "suppression".
    
    fsp_init_file_page_low() does initialize all pages nowadays,
    even those in the InnoDB system tablespace.

commit 32170cafad643403985754f6d7a41e8927f4a6cf
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Feb 16 11:12:24 2017 +0200

    MDEV-12075 innodb_use_fallocate does not work in MariaDB Server 10.1.21
    
    fil_space_extend_must_retry(): When innodb_use_fallocate=ON,
    initialize pages_added = size - space->size so that posix_fallocate()
    will actually attempt to extend the file, instead of keeping the same size.
    
    This is a regression from MDEV-11556 which refactored
    the InnoDB data file extension.

commit 7a5288015c8afeaaef4d5dd04057f78c7978eeee
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Feb 16 09:16:11 2017 +0200

    MDEV-12072 Do not unnecessarily construct rec_printer objects
    
    I introduced the rec_printer object in MySQL to pretty-print raw InnoDB
    records and index tuples in diagnostic messages. These objects are being
    constructed unconditionally, even though the DBUG_PRINT is not enabled.
    
    The unnecessary work is avoided by simply passing rec_printer(…).str()
    to the DBUG_LOG macro that was introduced in MDEV-11713.

commit 703d0985ee761a81af5d9b8d4374d847dba7cd76
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Feb 15 08:57:43 2017 +0200

    Fix some InnoDB memory leaks.
    
    dict_init_free(): Make global, and move the call from
    dict_close() to srv_free(), because this is initialized
    earlier than dict_sys.
    
    innobase_space_shutdown(): Do not leak srv_allow_writes_event.

commit 743ac7c2d0f7c27699d53f35137e02ee3cfd4b71
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Feb 14 11:13:24 2017 +0200

    MDEV-12061 Allow innodb_log_files_in_group=1
    
    The InnoDB redo log consists of a list of files that logically form
    a bigger file, as if the individual files were concatenated together.
    
    The first file will always be written on redo log checkpoint, because
    the two checkpoint pages are at the start of the single logical
    redo log file.
    
    There is no technical reason why InnoDB requires at least 2 files
    to exist. Let us reduce the minimum number to 1. In that way,
    restoring from backups will become easier, since InnoDB can directly
    deal with a single backed-up redo log file.

commit 1b4b4f688711c2ee99bc70e6cffa37b64820b0f2
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Feb 13 14:06:01 2017 +0200

    MDEV-12057 Embedded server shutdown hangs in InnoDB
    
    Ever since MDEV-5800 enabled indexed virtual columns for InnoDB,
    the InnoDB shutdown relied on close_connections() that would set
    thd->killed for the InnoDB purge threads. Alas, the embedded server
    shutdown is not invoking close_connections(), and thus InnoDB purge
    threads fail to initiate shutdown, causing a hang.
    
    innodb_inited: Remove. Use srv_was_started instead.
    
    innobase_fast_shutdown: Remove. Use srv_fast_shutdown instead.
    
    srv_running: Renamed from thd_destructor_myvar, and made global.
    The value NULL means that shutdown was requested or the purge threads
    should not be running because of innodb_read_only_mode=1.
    
    innobase_init(): Set srv_was_started after ensuring that srv_running
    was initialized. (In innodb_read_only mode, the purge threads are not
    started and we do not care if srv_running==NULL.)
    
    innobase_start_or_create_for_mysql(): Do not set srv_was_started.
    Let it be set by the only caller innobase_init().
    
    srv_purge_should_exit(): Check also srv_was_started and srv_running
    when evaluating thd->killed.

commit 87075e7f87868eb5438f4f5c191e3b1c1a1ea212
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Thu Feb 9 17:43:14 2017 +0100

    MDEV-11704 InnoDB: Failing assertion: dfield_is_null(dfield2) || dfield2->data
    
    relax innodb assertion, because Field_blob::store() clearly says
    that a data pointer can be zero if the length is zero.

commit 1afb11074ea2f156dcfda7c28b9e7e47eb68c5ba
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Thu Feb 9 12:06:15 2017 +0100

    MDEV-11582 InnoDB: Failing assertion: !((field)->vcol_info && !(field)->stored_in_db())
    
    change the parser not to allow SERIAL as a normal data type.
    make a special rule for it, where it could be used for define
    fields, but not generated fields, not return type of a stored function, etc.

commit 1913daf42cfa9b93aceb82dd0f449ea3f3f7b119
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sat Feb 4 19:58:32 2017 +0100

    bugfix: disable ICP in InnoDB for indexes on virtual columns
    
    because it doesn't work, vcols are never calculated for ICP

commit 6c4144a46873abc6b90649ca396b7e057ff3841e
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Mon Jan 30 01:01:28 2017 +0100

    InnoDB: suppress posix_fallocate() failure errors when EINVAL
    
    EINVAL means that the filesystem doesn't support posix_fallocate().
    
    There were two places where this error was issued, one checked for
    EINVAL, the other did not. This commit fixed the other place
    to also check for EINVAL.
    
    Also, remove the space after the REFMAN to get the valid url
    with no space in the middle.
    
    Also don't say "Make sure the file system supports this function."
    when posix_fallocate() fails, because this message is only shown
    when the filesystem does support this function.

commit 588eca31e3c60a6778e59e618717396eb5293ebe
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Feb 13 11:40:19 2017 +0200

    Post-fix for MDEV-12050 Remove unused InnoDB Memcached hooks
    
    Remove also the field trx_t::read_write that was only used by
    the Memcached hooks.

commit a45866c6dbfe744d86c04617b33ed8433aed5ede
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Sat Feb 11 17:45:36 2017 +0200

    MDEV-12050 Remove unused InnoDB Memcached hooks
    
    Oracle introduced a Memcached plugin interface to the InnoDB
    storage engine in MySQL 5.6. That interface is essentially a
    fork of Memcached development snapshot 1.6.0-beta1 of an old
    development branch 'engine-pu'.
    
    To my knowledge, there have not been any updates to the Memcached code
    between MySQL 5.6 and 5.7; only bug fixes and extensions related to
    the Oracle modifications.
    
    The Memcached plugin is not part of the MariaDB Server. Therefore it
    does not make sense to include the InnoDB interfaces for the Memcached
    plugin, or to have any related configuration parameters:
    
        innodb_api_bk_commit_interval
        innodb_api_disable_rowlock
        innodb_api_enable_binlog
        innodb_api_enable_mdl
        innodb_api_trx_level
    
    Removing this code in one commit makes it possible to easily restore
    it, in case it turns out to be needed later.

commit 412ee0330caf1e586a67d40c1e7dd710481a973a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Feb 10 20:06:24 2017 +0200

    Fix a memory leak on aborted InnoDB startup.
    
    innodb_shutdown(), trx_sys_close(): Startup may be aborted between
    purge_sys and trx_sys creation. Therefore, purge_sys must be freed
    independently of trx_sys.
    
    innobase_start_or_create_for_mysql(): Remember to free purge_queue if
    it was not yet attached to purge_sys.

commit 66c6188a4b21d81b8d882386e0b059c4a6d05224
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Feb 9 10:04:00 2017 +0200

    Relax assertions on shutdown after aborted startup.
    
    A proper InnoDB shutdown after aborted startup was introduced
    in commit 81b7fe9d383bdf68a622b95384f067ed68ba342c.
    
    Also related to this is MDEV-11985, making read-only shutdown more robust.
    
    If startup was aborted, there may exist recovered transactions that were
    not rolled back. Relax the assertions accordingly.

commit 6011fb6daa5ac9e6cb97a23b877e4d2568c85d94
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Feb 9 08:47:38 2017 +0200

    Post-push fix for MDEV-11947 InnoDB purge workers fail to shut down
    
    Use the ib_int64_t type alias instead of the standard type int64_t,
    so that the code will compile on Microsoft Visual Studio 2013.

commit d831e4c22a0c4e7367f08f0a45c1bae5afca82fd
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Feb 8 15:42:15 2017 +0200

    MDEV-12024 InnoDB startup fails to wait for recv_writer_thread to finish
    
    recv_writer_thread(): Do not assign recv_writer_thread_active=true
    in order to avoid a race condition with
    recv_recovery_from_checkpoint_finish().
    
    recv_init_crash_recovery(): Assign recv_writer_thread_active=true
    before creating recv_writer_thread.

commit 070a8754c44e29572d1fafbfece251ace23ba41d
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Feb 8 15:42:15 2017 +0200

    MDEV-12024 InnoDB startup fails to wait for recv_writer_thread to finish
    
    recv_writer_thread(): Do not assign recv_writer_thread_active=true
    in order to avoid a race condition with
    recv_recovery_from_checkpoint_finish().
    
    recv_init_crash_recovery_spaces(): Assign recv_writer_thread_active=true
    before creating recv_writer_thread.

commit 3c411e3ad66d0b4ddee2563deb621db249b94432
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Feb 8 12:48:25 2017 +0200

    Test fix for MDEV-6076 Persistent AUTO_INCREMENT for InnoDB
    
    Before killing the server, ensure that the redo log for the
    incomplete transaction is flushed, so that the AUTO_INCREMENT
    sequence will always be updated. Usually the INSERT
    transaction would not have persisted the sequence before the
    server was killed, but sometimes it could happen, causing
    result mismatch.
    
    Note: This test used to be called innodb_fts.innodb_fts_misc_debug.

commit cbdc389ec9cd9bac3f8fc8f4aea81669a629260f
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Feb 8 11:35:35 2017 +0200

    MDEV-12022 InnoDB wrongly ignores the end of an .ibd file
    
    InnoDB can wrongly ignore the end of data files when using
    innodb_page_size=32k or innodb_page_size=64k. These page sizes
    use an allocation extent size of 2 or 4 megabytes, not 1 megabyte.
    
    This issue does not affect MariaDB Server 10.2, which is using
    the correct WL#5757 code from MySQL 5.7.
    
    That said, it does not make sense to ignore the tail of data files.
    The next time the data file needs to be extended, it would be extended
    to a multiple of the extent size, once the size exceeds one extent.

commit c5fc3a903c836c53983896866a64a2f3feda0dcb
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Feb 7 10:57:02 2017 +0200

    MDEV-12004 InnoDB wrongly thinks that a column is indexed
    after failed ADD UNIQUE INDEX
    
    check_col_exists_in_indexes(): Add the parameter only_committed.
    When considering committed indexes, evaluate index->is_committed().
    Else, evaluate index->to_be_dropped.
    
    rollback_inplace_alter_table(): Invoke check_col_exists_in_indexes()
    with only_committed=true.

commit 2aa47d9849e72cab1724b768f11aaa5d953c7153
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Tue Jan 31 12:25:25 2017 +0200

    MDEV-11035: Restore removed disallow-writes for Galera
    
    Galera disallow-writes feature was lost in InnoDB 5.7 merge
    to 10.2. This patch restores this feature and fixes test
    failure on test galera.galera_var_innodb_disallow_writes.

commit 2f00b73a4bc4a87be54ced24969fddc796258e43
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Feb 3 12:25:42 2017 +0200

    MDEV-11985 Make innodb_read_only shutdown more robust
    
    If InnoDB is started in innodb_read_only mode such that
    recovered incomplete transactions exist at startup
    (but the redo logs are clean), an assertion will fail at shutdown,
    because there would exist some non-prepared transactions.
    
    logs_empty_and_mark_files_at_shutdown(): Do not wait for incomplete
    transactions to finish if innodb_read_only or innodb_force_recovery>=3.
    Wait for purge to finish in only one place.
    
    trx_sys_close(): Relax the assertion that would fail first.
    
    trx_free_prepared(): Also free recovered TRX_STATE_ACTIVE transactions
    if innodb_read_only or innodb_force_recovery>=3.
    
    Also, revert my earlier fix to MySQL 5.7 because this fix is more generic:
    
    Bug#20874411 INNODB SHUTDOWN HANGS IF INNODB_FORCE_RECOVERY>=3
    SKIPPED ANY ROLLBACK
    
    trx_undo_fake_prepared(): Remove.
    
    trx_sys_any_active_transactions(): Revert the changes.

commit f1627045701b0dc0ff10ec09cca18dc5da351768
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Jan 30 17:00:51 2017 +0200

    Rewrite the innodb.log_file_size test with DBUG_EXECUTE_IF.
    
    Remove the debug parameter innodb_force_recovery_crash that was
    introduced into MySQL 5.6 by me in WL#6494 which allowed InnoDB
    to resize the redo log on startup.
    
    Let innodb.log_file_size actually start up the server, but ensure
    that the InnoDB storage engine refuses to start up in each of the
    scenarios.

commit 20e8347447d55c06e426821de207091059ebd214
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Feb 3 12:25:42 2017 +0200

    MDEV-11985 Make innodb_read_only shutdown more robust
    
    If InnoDB is started in innodb_read_only mode such that
    recovered incomplete transactions exist at startup
    (but the redo logs are clean), an assertion will fail at shutdown,
    because there would exist some non-prepared transactions.
    
    logs_empty_and_mark_files_at_shutdown(): Do not wait for incomplete
    transactions to finish if innodb_read_only or innodb_force_recovery>=3.
    Wait for purge to finish in only one place.
    
    trx_sys_close(): Relax the assertion that would fail first.
    
    trx_free_prepared(): Also free recovered TRX_STATE_ACTIVE transactions
    if innodb_read_only or innodb_force_recovery>=3.

commit 9f0dbb3120fdc0474d606dc9c48e5f5f7a2c8484
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Feb 3 18:17:36 2017 +0200

    MDEV-11947 InnoDB purge workers fail to shut down
    
    srv_release_threads(): Actually wait for the threads to resume
    from suspension. On CentOS 5 and possibly other platforms,
    os_event_set() may be lost.
    
    srv_resume_thread(): A counterpart of srv_suspend_thread().
    Optionally wait for the event to be set, optionally with a timeout,
    and then release the thread from suspension.
    
    srv_free_slot(): Unconditionally suspend the thread. It is always
    in resumed state when this function is entered.
    
    srv_active_wake_master_thread_low(): Only call os_event_set().
    
    srv_purge_coordinator_suspend(): Use srv_resume_thread() instead
    of the complicated logic.

commit bc12d993d7bc94a9533028a258afc7e4ceb21e92
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Feb 2 18:17:46 2017 +0200

    MDEV-11947 InnoDB purge workers fail to shut down
    
    srv_release_threads(): Actually wait for the threads to resume
    from suspension. On CentOS 5 and possibly other platforms,
    os_event_set() may be lost.
    
    srv_resume_thread(): A counterpart of srv_suspend_thread().
    Optionally wait for the event to be set, optionally with a timeout,
    and then release the thread from suspension.
    
    srv_free_slot(): Unconditionally suspend the thread. It is always
    in resumed state when this function is entered.
    
    srv_active_wake_master_thread_low(): Only call os_event_set().
    
    srv_purge_coordinator_suspend(): Use srv_resume_thread() instead
    of the complicated logic.

commit 650ffcd3a081f0bf4e3b7de93fac72c1b67284e1
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Feb 1 15:47:33 2017 +0200

    Extend the innodb.log_corruption test.
    
    Remove the dependency on unzip. Instead, generate the InnoDB files
    with perl.
    
    log_block_checksum_is_ok(): Correct the error message.
    
    recv_scan_log_recs(): Remove the duplicated error message for
    log block checksum mismatch.
    
    innobase_start_or_create_for_mysql(): If the server is in read-only
    mode or if innodb_force_recovery>=3, do not try to modify the system
    tablespace. (If the doublewrite buffer or the non-core system tables
    do not exist, do not try to create them.)
    
    innodb_shutdown(): Relax a debug assertion. If the system tablespace
    did not contain a doublewrite buffer and if we started up in
    innodb_read_only mode or with innodb_force_recovery>=3, it will not
    be created.
    
    dict_create_or_check_sys_tablespace(): Set the flag
    srv_sys_tablespaces_open when the tables exist.

commit 81b7fe9d383bdf68a622b95384f067ed68ba342c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 31 19:43:03 2017 +0200

    Shut down InnoDB after aborted startup.
    
    This fixes memory leaks in tests that cause InnoDB startup to fail.
    
    buf_pool_free_instance(): Also free buf_pool->flush_rbt, which would
    normally be freed when crash recovery finishes.
    
    fil_node_close_file(), fil_space_free_low(), fil_close_all_files():
    Relax some debug assertions to tolerate !srv_was_started.
    
    innodb_shutdown(): Renamed from innobase_shutdown_for_mysql().
    Changed the return type to void. Do not assume that all subsystems
    were started.
    
    que_init(), que_close(): Remove (empty functions).
    
    srv_init(), srv_general_init(): Remove as global functions.
    
    srv_free(): Allow srv_sys=NULL.
    
    srv_get_active_thread_type(): Only return SRV_PURGE if purge really
    is running.
    
    srv_shutdown_all_bg_threads(): Do not reset srv_start_state. It will
    be needed by innodb_shutdown().
    
    innobase_start_or_create_for_mysql(): Always call srv_boot() so that
    innodb_shutdown() can assume that it was called. Make more subsystems
    dependent on SRV_START_STATE_STAT.
    
    srv_shutdown_bg_undo_sources(): Require SRV_START_STATE_STAT.
    
    trx_sys_close(): Do not assume purge_sys!=NULL. Do not call
    buf_dblwr_free(), because the doublewrite buffer can exist while
    the transaction system does not.
    
    logs_empty_and_mark_files_at_shutdown(): Do a faster shutdown if
    !srv_was_started.
    
    recv_sys_close(): Invoke dblwr.pages.clear() which would normally
    be invoked by buf_dblwr_process().
    
    recv_recovery_from_checkpoint_start(): Always release log_sys->mutex.
    
    row_mysql_close(): Allow the subsystem not to exist.

commit a5d8dc1818f3d563a08d92b3a680c390ae1b55a9
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 31 12:06:52 2017 +0200

    Make the innochecksum tests more robust.
    
    As noted in MDEV-11947, we should disable the InnoDB doublewrite buffer
    during the tests, because when rewriting page checksums, innochecksum
    would skip the pages that are in the doublewrite buffer area. Because
    the doublewrite buffer is emptied on server startup and not shutdown,
    we should initially start with the doublewrite buffer disabled, so that
    there will be no warning messages for wrong page checksums in the
    doublewrite buffer.
    
    Also, correct the obvious typo where restart_options should have been
    $restart_parameters, so that InnoDB is actually verifying that the
    checksums were rewritten.

commit 1293e5e59b6b412156ef8a78f762c0b099a10b50
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Jan 30 17:00:51 2017 +0200

    Rewrite the innodb.log_file_size test with DBUG_EXECUTE_IF.
    
    Remove the debug parameter innodb_force_recovery_crash that was
    introduced into MySQL 5.6 by me in WL#6494 which allowed InnoDB
    to resize the redo log on startup.
    
    Let innodb.log_file_size actually start up the server, but ensure
    that the InnoDB storage engine refuses to start up in each of the
    scenarios.

commit 2a4881800c6fa78a810d29ff2048956175fd0f6f
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Mon Jan 30 01:15:30 2017 +0100

    InnoDB: don't pthread_join() a thread that wasn't created
    
    this fixes the crash in innodb.101_compatibility test

commit 2de0e42af577eb803278187e3b82a5bb17ac3b9a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Jan 25 15:11:46 2017 +0200

    Import and adjust the InnoDB redo log tests from MySQL 5.7.

commit 406e113e9abc2139e40018ec7bd1b1fb018642c9
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Jan 26 14:05:00 2017 +0200

    MDEV-11915 Detect InnoDB system tablespace size mismatch early
    
    InnoDB would refuse to start up if there is a mismatch on
    the size of the system tablespace files. However, before this
    check is conducted, the system tablespace may already have been
    heavily modified.
    
    InnoDB should perform the size check as early as possible.
    
    recv_recovery_from_checkpoint_finish():
    Move the recv_apply_hashed_log_recs() call to
    innobase_start_or_create_for_mysql().
    
    innobase_start_or_create_for_mysql(): Test the mutex functionality
    before doing anything else. Use a compile_time_assert() for a
    sizeof() constraint. Check the size of the system tablespace as
    early as possible.

commit 732672c3044e60fb0d1dfdb466bd3c3d13ea2f8d
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Dec 5 15:25:59 2016 +0200

    MDEV-11233 CREATE FULLTEXT INDEX with a token longer than 127 bytes
    crashes server
    
    This bug is the result of merging the Oracle MySQL follow-up fix
    BUG#22963169 MYSQL CRASHES ON CREATE FULLTEXT INDEX
    without merging the base bug fix:
    Bug#79475 Insert a token of 84 4-bytes chars into fts index causes
    server crash.
    
    Unlike the above mentioned fixes in MySQL, our fix will not change
    the storage format of fulltext indexes in InnoDB or XtraDB
    when a character encoding with mbmaxlen=2 or mbmaxlen=3
    and the length of a word is between 128 and 84*mbmaxlen bytes.
    The Oracle fix would allocate 2 length bytes for these cases.
    
    Compatibility with other MySQL and MariaDB releases is ensured by
    persisting the used maximum length in the SYS_COLUMNS table in the
    InnoDB data dictionary.
    
    This fix also removes some unnecessary strcmp() calls when checking
    for the legacy default collation my_charset_latin1
    (my_charset_latin1.name=="latin1_swedish_ci").
    
    fts_create_one_index_table(): Store the actual length in bytes.
    This metadata will be written to the SYS_COLUMNS table.
    
    fts_zip_initialize(): Initialize only the first byte of the buffer.
    Actually the code should not even care about this first byte, because
    the length is set as 0.
    
    FTX_MAX_WORD_LEN: Define as HA_FT_MAXCHARLEN * 4 aka 336 bytes,
    not as 254 bytes.
    
    row_merge_create_fts_sort_index(): Set the actual maximum length of the
    column in bytes, similar to fts_create_one_index_table().
    
    row_merge_fts_doc_tokenize(): Remove the redundant parameter word_dtype.
    Use the actual maximum length of the column. Calculate the extra_size
    in the same way as row_merge_buf_encode() does.

commit afb461587c0b7dea2e5e70a165e8d4d437c3f964
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Jan 26 14:05:00 2017 +0200

    MDEV-11915 Detect InnoDB system tablespace size mismatch early
    
    InnoDB would refuse to start up if there is a mismatch on
    the size of the system tablespace files. However, before this
    check is conducted, the system tablespace may already have been
    heavily modified.
    
    InnoDB should perform the size check as early as possible.
    
    recv_recovery_from_checkpoint_finish():
    Move the recv_apply_hashed_log_recs() call to
    innobase_start_or_create_for_mysql().
    
    innobase_start_or_create_for_mysql(): Test the mutex functionality
    before doing anything else. Use a compile_time_assert() for a
    sizeof() constraint. Check the size of the system tablespace as
    early as possible.

commit 6495806e59cc27313375fa8d431b7b8e777f73ff
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Tue Jan 24 14:40:58 2017 +0200

    MDEV-11254: innodb-use-trim has no effect in 10.2
    
    Problem was that implementation merged from 10.1 was incompatible
    with InnoDB 5.7.
    
    buf0buf.cc: Add functions to return should we punch hole and
    how big.
    
    buf0flu.cc: Add written page to IORequest
    
    fil0fil.cc: Remove unneeded status call and add test is
    sparse files and punch hole supported by file system when
    tablespace is created. Add call to get file system
    block size. Used file node is added to IORequest. Added
    functions to check is punch hole supported and setting
    punch hole.
    
    ha_innodb.cc: Remove unneeded status variables (trim512-32768)
    and trim_op_saved. Deprecate innodb_use_trim and
    set it ON by default. Add function to set innodb-use-trim
    dynamically.
    
    dberr.h: Add error code DB_IO_NO_PUNCH_HOLE
    if punch hole operation fails.
    
    fil0fil.h: Add punch_hole variable to fil_space_t and
    block size to fil_node_t.
    
    os0api.h: Header to helper functions on buf0buf.cc and
    fil0fil.cc for os0file.h
    
    os0file.h: Remove unneeded m_block_size from IORequest
    and add bpage to IORequest to know actual size of
    the block and m_fil_node to know tablespace file
    system block size and does it support punch hole.
    
    os0file.cc: Add function punch_hole() to IORequest
    to do punch_hole operation,
    get the file system block size and determine
    does file system support sparse files (for punch hole).
    
    page0size.h: remove implicit copy disable and
    use this implicit copy to implement copy_from()
    function.
    
    buf0dblwr.cc, buf0flu.cc, buf0rea.cc, fil0fil.cc, fil0fil.h,
    os0file.h, os0file.cc, log0log.cc, log0recv.cc:
    Remove unneeded write_size parameter from fil_io
    calls.
    
    srv0mon.h, srv0srv.h, srv0mon.cc: Remove unneeded
    trim512-trim32678 status variables. Removed
    these from monitor tests.

commit b7b4c332c0869676ef69276ddaef4ac4521cb04f
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Sun Jan 22 08:44:04 2017 +0200

    MDEV-11614: Syslog messages: "InnoDB: Log sequence number
    
    at the start 759654123 and the end 0 do not match."
    
    For page compressed and encrypted tables log sequence
    number at end is not stored, thus disable this message
    for them.

commit b05bf8ff0f1acf39afeb71e0e8a148090364d8fc
Merge: 833aa97cec7 03497129371
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Jan 19 12:06:13 2017 +0200

    Merge 10.1 to 10.2.
    
    Most notably, this includes MDEV-11623, which includes a fix and
    an upgrade procedure for the InnoDB file format incompatibility
    that is present in MariaDB Server 10.1.0 through 10.1.20.
    
    In other words, this merge should address
    MDEV-11202 InnoDB 10.1 -> 10.2 migration does not work

commit dc557ca817f18e27ab46342865a510898f76822e
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Thu Jan 19 08:19:08 2017 +0200

    MDEV-11835: InnoDB: Failing assertion: free_slot != NULL on
    
    restarting server with encryption and read-only
    
    buf0buf.cc: Temporary slots used in encryption was calculated
    by read_threads * write_threads. However, in read-only mode
    write_threads is zero. Correct way is to calculate
    (read_threads + write_threads) * max pending IO requests.

commit a1315a650a69745bac7166cfe1423215dfaac6e1
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Jan 18 14:02:17 2017 +0200

    MDEV-11202 InnoDB 10.1 -> 10.2 migration does not work
    
    This is the final preparation for the merge of MDEV-11623
    from MariaDB Server 10.1 (correcting the assignment of
    FSP_SPACE_FLAGS in MariaDB Server 10.1).
    
    We must avoid reading FSP_SPACE_FLAGS directly from page 0,
    because the flags that affect the uncompressed page size
    cannot be trusted if we are upgrading from MariaDB 10.1.
    
    We will pass fil_space_t* instead of a numeric tablespace ID
    in many low-level functions, so that fil_space_t::flags
    will be available. This will also reduce the amount o
    tablespace ID lookups and the pressure on fil_system->mutex.
    
    fil_space_is_being_truncated(), fil_space_is_redo_skipped(),
    PageCallback::set_page_size(), fsp_header_get_page_size(): Remove.
    
    fil_node_open_file(), fil_space_get_crypt_data(): Use space->flags.
    
    fsp_free_extent(), fseg_get_first_extent(), fsp_get_space_header(),
    xdes_get_descriptor_with_space_hdr(), xdes_get_descriptor(),
    xdes_lst_get_descriptor(), fsp_space_modify_check(),
    fsp_init_file_page(), fsp_alloc_free_extent(), fsp_page_create(),
    fsp_alloc_free_page(), fsp_free_page(), fsp_alloc_seg_inode_page(),
    fsp_alloc_seg_inode(), fsp_free_seg_inode(), fseg_fill_free_list(),
    fseg_mark_page_used(), fseg_free_page_low(), fseg_free_extent():
    Take fil_space_t* as a parameter, instead of taking a numeric ID.

commit 8780b895296a685da8c0bb2c6f301f748c87cf57
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Jan 18 12:53:35 2017 +0200

    MDEV-11831 Make InnoDB mini-transaction memo checks stricter
    
    InnoDB keeps track of buffer-fixed buf_block_t or acquired rw_lock_t
    within a mini-transaction. There are some memo_contains assertions
    in the code that document when certain blocks or rw_locks must be held.
    But, these assertions only check the mini-transaction memo, not the fact
    whether the rw_lock_t are actually being held by the caller.
    
    btr_pcur_store_position(): Remove #ifdef, and assert that the block
    is always buffer-fixed.
    
    rtr_pcur_getnext_from_path(), rtr_pcur_open_low(),
    ibuf_rec_get_page_no_func(), ibuf_rec_get_space_func(),
    ibuf_rec_get_info_func(), ibuf_rec_get_op_type_func(),
    ibuf_build_entry_from_ibuf_rec_func(), ibuf_rec_get_volume_func(),
    ibuf_get_merge_page_nos_func(), ibuf_get_volume_buffered_count_func()
    ibuf_get_entry_counter_low_func(), page_set_ssn_id(),
    row_vers_old_has_index_entry(), row_vers_build_for_consistent_read(),
    row_vers_build_for_semi_consistent_read(),
    trx_undo_prev_version_build():
    Make use of mtr_memo_contains_page_flagged().
    
    mtr_t::memo_contains(): Take a const memo. Assert rw_lock_own().
    
    FindPage, FlaggedCheck: Assert rw_lock_own_flagged().

commit 085b292a47ee8a6fb141c575e7d8f5ed3b4206bd
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 17 17:08:00 2017 +0200

    MDEV-11824 Allow ROW_FORMAT=DYNAMIC in the InnoDB system tablespace
    
    When MySQL 5.7.9 (and MariaDB Server 10.2) introduced
    innodb_default_row_format and made ROW_FORMAT=DYNAMIC the default,
    it became possible to create any ROW_FORMAT tables in the InnoDB
    system tablespace, except ROW_FORMAT=COMPRESSED.
    
    In MySQL 5.7, it is possible to create ROW_FORMAT=DYNAMIC
    tables when TABLESPACE=innodb_system is explicitly specified.
    Because MariaDB Server 10.2 does not support the MySQL 5.7
    TABLESPACE=innodb_system attribute for tables, we should allow
    ROW_FORMAT=DYNAMIC when innodb_file_per_table=0.
    
    Also, remove the test innodb_zip.innodb-create-options, which was
    an outdated copy of innodb_zip.create_options.

commit 7cf97ed4ee93f7df6d021ad54b9f09964a943c82
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 17 11:37:49 2017 +0200

    MDEV-11816 Disallow CREATE TEMPORARY TABLE…ROW_FORMAT=COMPRESSED
    
    MySQL 5.7 allows temporary tables to be created in ROW_FORMAT=COMPRESSED.
    The usefulness of this is questionable. WL#7899 in MySQL 8.0.0
    prevents the creation of such compressed tables, so that all InnoDB
    temporary tables will be located inside the predefined
    InnoDB temporary tablespace.
    
    Pick up and adjust some tests from MySQL 5.7 and 8.0.
    
    dict_tf_to_fsp_flags(): Remove the parameter is_temp.
    fsp_flags_init(): Remove the parameter is_temporary.
    
    row_mysql_drop_temp_tables(): Remove. There cannot be any temporary
    tables in InnoDB. (This never removed #sql* tables in the datadir
    which were created by DDL.)
    
    dict_table_t::dir_path_of_temp_table: Remove.
    
    create_table_info_t::m_temp_path: Remove.
    
    create_table_info_t::create_options_are_invalid(): Do not allow
    ROW_FORMAT=COMPRESSED or KEY_BLOCK_SIZE for temporary tables.
    
    create_table_info_t::innobase_table_flags(): Do not unnecessarily
    prevent CREATE TEMPORARY TABLE with SPATIAL INDEX.
    (MySQL 5.7 does allow this.)
    
    fil_space_belongs_in_lru(): The only FIL_TYPE_TEMPORARY tablespace
    is never subjected to closing least-recently-used files.

commit 494e4b99a4a6c2f933c7e663cbb6ad5b17e8f84a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Jan 16 16:02:42 2017 +0200

    Remove MYSQL_TABLESPACES.
    
    MySQL 5.7 introduced partial support for user-created shared tablespaces
    (for example, import and export are not supported).
    
    MariaDB Server does not support tablespaces at this point of time.
    Let us remove most InnoDB code and data structures that is related
    to shared tablespaces.

commit 70c11485d2d5982ffbf31740b24798565760a16f
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Jan 16 11:11:14 2017 +0200

    Remove MYSQL_ENCRYPTION.
    
    MariaDB will likely never support MySQL-style encryption for
    InnoDB, because we cannot link with the Oracle encryption plugin.
    This is preparation for merging MDEV-11623.

commit c849b7df616cc8a5378609f243898644c7689f44
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 17 11:52:31 2017 +0200

    MDEV-11785 Remove INFORMATION_SCHEMA.INNODB_TEMP_TABLE_INFO
    
    The INFORMATION_SCHEMA view INNODB_TEMP_TABLE_INFO was added to
    MySQL 5.7 as part of the work to implement temporary tables
    without any redo logging.
    
    The only use case of this view was SELECT COUNT(*) in some tests,
    to see how many temporary tables exist in InnoDB. The columns do
    not report much useful information. For example, the table name
    would not be the user-specified table name, but a generated #sql
    name. Also, the session that created the table is not identified.

commit a9d00db15559749e54fd9d55cf0ff90f83604e17
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Sun Jan 15 14:20:16 2017 +0200

    MDEV-11799 InnoDB can abort if the doublewrite buffer
    contains a bad and a good copy
    
    Clean up the InnoDB doublewrite buffer code.
    
    buf_dblwr_init_or_load_pages(): Do not add empty pages to the buffer.
    
    buf_dblwr_process(): Do consider changes to pages that are all zero.
    Do not abort when finding a corrupted copy of a page in the doublewrite
    buffer, because there could be multiple copies in the doublewrite buffer,
    and only one of them needs to be good.

commit 833fda8f1a0c415ced1f2b8c1851809383bcc639
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Jan 11 14:13:30 2017 +0200

    InnoDB: Enable UNIV_DEBUG_VALGRIND for cmake -DWITH_VALGRIND
    
    The symbol HAVE_VALGRIND_MEMCHECK_H was never defined.
    Instead, the symbol HAVE_VALGRIND should have been used.

commit 4b05d60e62ef6e21d5329a9667813df890034ff0
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Jan 9 09:15:21 2017 +0200

    Make encryption.innodb_lotoftables more robust.
    
    Perform a slow shutdown at the start of the test, and create all
    InnoDB tables with STATS_PERSISTENT=0, so that any I/O related to
    background tasks (change buffer merge, purge, persistent statistics)
    should be eliminated.

commit 11b7dff5eba0923d520c58b951dd801394c7b053
Merge: 30f27b0de04 fb5ee7d6d04
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Jan 5 19:03:56 2017 +0200

    Merge 10.1 to 10.2.
    
    This makes no functional change to MariaDB Server 10.2.
    XtraDB is not being built, and in InnoDB, there was no
    memory leak in buf_dblwr_process() in MariaDB Server 10.2.

commit a8ac6dc5065a82b11b3f1a699be87aabc95d7a10
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Jan 5 11:49:00 2017 +0200

    Fix InnoDB compilation warnings.
    
    Most of them are trivial, except for the thread_sync_t refactoring.
    We must not invoke memset() on non-POD objects.
    
    mtflush_work_initialized: Remove. Refer to mtflush_ctx != NULL instead.
    
    thread_sync_t::thread_sync_t(): Refactored from
    buf_mtflu_handler_init().
    
    thread_sync_t::~thread_sync_t(): Refactored from
    buf_mtflu_io_thread_exit().

commit bf35deda09f18f5c7f3179ace731a2a186e05445
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 3 15:38:09 2017 +0200

    MDEV-11713 Optimize DBUG_PRINT and introduce DBUG_LOG
    
    MariaDB Server is unnecessarily evaluating the arguments of
    DBUG_PRINT() macros when the label is not defined.
    
    The macro DBUG_LOG() for C++ operator<< output which was added for
    InnoDB diagnostics in MySQL 5.7 is missing from MariaDB. Unlike the
    MySQL 5.7 implementation, MariaDB will avoid allocating and
    initializing the output string when the label is not defined.
    
    Introduce DBUG_OUT("crypt") and DBUG_OUT("checksum") for some InnoDB
    diagnostics, replacing some use of ib::info().

commit 4e7b382d3132e6be0e597d19d6467a9f58b459a7
Merge: 348ccb6f038 758af98ff7c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Jan 5 10:48:03 2017 +0200

    Merge 10.1 to 10.2
    
    Most conflicts are related to the MDEV-11638 InnoDB shutdown refactoring.

commit 758af98ff7c47cc1fb5debdc138312fa389d528f
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Jan 5 10:42:19 2017 +0200

    Post-push fix for Part 1 of MDEV-8139 Fix scrubbing tests
    
    In the backport of Bug#24450908 UNDO LOG EXISTS AFTER SLOW SHUTDOWN
    from MySQL 5.7 to the MySQL 5.6 based MariaDB Server 10.1, we must
    use a mutex when HAVE_ATOMIC_BUILTINS is not defined.
    
    Also, correct a function comment. In MySQL 5.6 and MariaDB Server 10.1,
    also temporary InnoDB tables are redo-logged.

commit 719321e78e69249e796a907c17400dac14ef0921
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Jan 4 18:43:32 2017 +0200

    MDEV-11638 Encryption causes race conditions in InnoDB shutdown
    
    InnoDB shutdown failed to properly take fil_crypt_thread() into account.
    The encryption threads were signalled to shut down together with other
    non-critical tasks. This could be much too early in case of slow shutdown,
    which could need minutes to complete the purge. Furthermore, InnoDB
    failed to wait for the fil_crypt_thread() to actually exit before
    proceeding to the final steps of shutdown, causing the race conditions.
    
    Furthermore, the log_scrub_thread() was shut down way too early.
    Also it should remain until the SRV_SHUTDOWN_FLUSH_PHASE.
    
    fil_crypt_threads_end(): Remove. This would cause the threads to
    be terminated way too early.
    
    srv_buf_dump_thread_active, srv_dict_stats_thread_active,
    lock_sys->timeout_thread_active, log_scrub_thread_active,
    srv_monitor_active, srv_error_monitor_active: Remove a race condition
    between startup and shutdown, by setting these in the startup thread
    that creates threads, not in each created thread. In this way, once the
    flag is cleared, it will remain cleared during shutdown.
    
    srv_n_fil_crypt_threads_started, fil_crypt_threads_event: Declare in
    global rather than static scope.
    
    log_scrub_event, srv_log_scrub_thread_active, log_scrub_thread():
    Declare in static rather than global scope. Let these be created by
    log_init() and freed by log_shutdown().
    
    rotate_thread_t::should_shutdown(): Do not shut down before the
    SRV_SHUTDOWN_FLUSH_PHASE.
    
    srv_any_background_threads_are_active(): Remove. These checks now
    exist in logs_empty_and_mark_files_at_shutdown().
    
    logs_empty_and_mark_files_at_shutdown(): Shut down the threads in
    the proper order. Keep fil_crypt_thread() and log_scrub_thread() alive
    until SRV_SHUTDOWN_FLUSH_PHASE, and check that they actually terminate.

commit 80d5d1452a4a6b7bd1627116f2a5a950003fc3cb
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 3 19:32:47 2017 +0200

    MDEV-11694 InnoDB tries to create unused table SYS_ZIP_DICT
    
    MariaDB Server 10.0.28 and 10.1.19 merged code from Percona XtraDB
    that introduced support for compressed columns. Much but not all
    of this code was disabled by placing #ifdef HAVE_PERCONA_COMPRESSED_COLUMNS
    around it.
    
    Among the unused but not disabled code is code to access
    some new system tables related to compressed columns.
    
    The creation of these system tables SYS_ZIP_DICT and SYS_ZIP_DICT_COLS
    would cause a crash in --innodb-read-only mode when upgrading
    from an earlier version to 10.0.28 or 10.1.19.
    
    Let us remove all the dead code related to compressed columns.
    Users who already upgraded to 10.0.28 and 10.1.19 will have the two
    above mentioned empty tables in their InnoDB system tablespace.
    Subsequent versions of MariaDB Server will completely ignore those tables.

commit 8a04b8cadedb4b7388379a30b7d7211a2b607bfe
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 3 13:18:47 2017 +0200

    MDEV-11688 fil_crypt_threads_end() tries to create threads
    after aborted InnoDB startup
    
    This bug was repeatable by starting MariaDB 10.2 with an
    invalid option, such as --innodb-flush-method=foo.
    It is not repeatable in MariaDB 10.1 in the same way, but the
    problem exists already there.

commit fc779252aec56e01c5924d80378cafc8b6ec80b5
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 3 13:18:47 2017 +0200

    MDEV-11688 fil_crypt_threads_end() tries to create threads
    after aborted InnoDB startup
    
    This bug was repeatable by starting MariaDB 10.2 with an
    invalid option, such as --innodb-flush-method=foo.
    It is not repeatable in MariaDB 10.1 in the same way, but the
    problem exists already there.

commit 403f6e96070a3f35745d4d59d12e222d21ac4f38
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Tue Jan 3 11:22:09 2017 +0200

    MDEV-11705: InnoDB: Failing assertion: (&log_sys->mutex)->is_owned() if server started with innodb-scrub-log
    
    Problem was that log_scrub function did not take required log_sys mutex.
    
    Background: Unused space in log blocks are padded with MLOG_DUMMY_RECORD if innodb-scrub-log
    is enabled. As log files are written on circular fashion old log blocks can be reused
    later for new redo-log entries. Scrubbing pads unused space in log blocks to avoid visibility
    of the possible old redo-log contents.
    
    log_scrub(): Take log_sys mutex
    
    log_pad_current_log_block(): Increase srv_stats.n_log_scrubs if padding is done.
    
    srv0srv.cc: Set srv_stats.n_log_scrubs to export vars innodb_scrub_log
    
    ha_innodb.cc: Export innodb_scrub_log to global status.

commit 63574f1275eda0f0ed439f4896b6e7daf6832a8f
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Dec 30 15:04:10 2016 +0200

    MDEV-11690 Remove UNIV_HOTBACKUP
    
    The InnoDB source code contains quite a few references to a closed-source
    hot backup tool which was originally called InnoDB Hot Backup (ibbackup)
    and later incorporated in MySQL Enterprise Backup.
    
    The open source backup tool XtraBackup uses the full database for recovery.
    So, the references to UNIV_HOTBACKUP are only cluttering the source code.

commit 8451e09073e8b1a300f177d74a9e3a530776640a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Dec 28 12:05:43 2016 +0200

    MDEV-11556 InnoDB redo log apply fails to adjust data file sizes
    
    fil_space_t::recv_size: New member: recovered tablespace size in pages;
    0 if no size change was read from the redo log,
    or if the size change was implemented.
    
    fil_space_set_recv_size(): New function for setting space->recv_size.
    
    innodb_data_file_size_debug: A debug parameter for setting the system
    tablespace size in recovery even when the redo log does not contain
    any size changes. It is hard to write a small test case that would
    cause the system tablespace to be extended at the critical moment.
    
    recv_parse_log_rec(): Note those tablespaces whose size is being changed
    by the redo log, by invoking fil_space_set_recv_size().
    
    innobase_init(): Correct an error message, and do not require a larger
    innodb_buffer_pool_size when starting up with a smaller innodb_page_size.
    
    innobase_start_or_create_for_mysql(): Allow startup with any initial
    size of the ibdata1 file if the autoextend attribute is set. Require
    the minimum size of fixed-size system tablespaces to be 640 pages,
    not 10 megabytes. Implement innodb_data_file_size_debug.
    
    open_or_create_data_files(): Round the system tablespace size down
    to pages, not to full megabytes, (Our test truncates the system
    tablespace to more than 800 pages with innodb_page_size=4k.
    InnoDB should not imagine that it was truncated to 768 pages
    and then overwrite good pages in the tablespace.)
    
    fil_flush_low(): Refactored from fil_flush().
    
    fil_space_extend_must_retry(): Refactored from
    fil_extend_space_to_desired_size().
    
    fil_mutex_enter_and_prepare_for_io(): Extend the tablespace if
    fil_space_set_recv_size() was called.
    
    The test case has been successfully run with all the
    innodb_page_size values 4k, 8k, 16k, 32k, 64k.

commit ab89359dde2f8fce2f1b7d233587804f459b9348
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Tue Dec 27 19:40:07 2016 +0100

    enable tests that were skipped because of have_xtradb
    
    * some of these tests run just fine with InnoDB:
       -> s/have_xtradb/have_innodb/
    * sys_var tests did basic tests for xtradb only variables
       -> remove them, they're useless anyway (sysvar_innodb does it better)
    * multi_update had innodb specific tests
       -> move to multi_update_innodb.test

commit 283e9cf4cbb34e1325699707068ab72ec3accfff
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Wed Dec 28 16:14:28 2016 +0200

    MDEV-11656: 'Data structure corruption' IMPORT TABLESPACE doesn't work for encrypted InnoDB tables if space_id changed
    
    Problem was that for encryption we use temporary scratch area for
    reading and writing tablespace pages. But if page was not really
    decrypted the correct updated page was not moved to scratch area
    that was then written. This can happen e.g. for page 0 as it is
    newer encrypted even if encryption is enabled and as we write
    the contents of old page 0 to tablespace it contained naturally
    incorrect space_id that is then later noted and error message
    was written. Updated page with correct space_id was lost.
    
    If tablespace is encrypted we use additional
    temporary scratch area where pages are read
    for decrypting readptr == crypt_io_buffer != io_buffer.
    
    Destination for decryption is a buffer pool block
    block->frame == dst == io_buffer that is updated.
    Pages that did not require decryption even when
    tablespace is marked as encrypted are not copied
    instead block->frame is set to src == readptr.
    
    If tablespace was encrypted we copy updated page to
    writeptr != io_buffer. This fixes above bug.
    
    For encryption we again use temporary scratch area
    writeptr != io_buffer == dst
    that is then written to the tablespace
    
    (1) For normal tables src == dst ==  writeptr
    ut_ad(!encrypted && !page_compressed ?
            src == dst && dst == writeptr + (i * size):1);
    (2) For page compressed tables src == dst == writeptr
    ut_ad(page_compressed && !encrypted ?
            src == dst && dst == writeptr + (i * size):1);
    (3) For encrypted tables src != dst != writeptr
    ut_ad(encrypted ?
            src != dst && dst != writeptr + (i * size):1);

commit d50cf42bc05b1faa5d39c766389ac345e119037e
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Dec 28 15:54:24 2016 +0200

    MDEV-9282 Debian: the Lintian complains about "shlib-calls-exit" in ha_innodb.so
    
    Replace all exit() calls in InnoDB with abort() [possibly via ut_a()].
    Calling exit() in a multi-threaded program is problematic also for
    the reason that other threads could see corrupted data structures
    while some data structures are being cleaned up by atexit() handlers
    or similar.
    
    In the long term, all these calls should be replaced with something
    that returns an error all the way up the call stack.

commit 7e02fd1f710e39e3cfccc507f24ceacee76b9439
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Dec 22 14:20:47 2016 +0200

    MDEV-11630 Call mutex_free() before freeing the mutex list
    
    Make some global fil_crypt_ variables static.
    
    fil_close(): Call mutex_free(&fil_system->mutex) also in InnoDB, not
    only in XtraDB. In InnoDB, sync_close() was called before fil_close().
    
    innobase_shutdown_for_mysql(): Call fil_close() before sync_close(),
    similar to XtraDB shutdown.
    
    fil_space_crypt_cleanup(): Call mutex_free() to pair with
    fil_space_crypt_init().
    
    fil_crypt_threads_cleanup(): Call mutex_free() to pair with
    fil_crypt_threads_init().

commit 8774a02364600279908bd9fb8b92d61dc4fcf60e
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Thu Dec 8 14:20:46 2016 +0400

    MDEV-11227 - mysqlimport -l doesn't issue UNLOCK TABLES
    
    Implementation of MDEV-7660 introduced unwanted incompatible change:
    modifications under LOCK TABLES with autocommit enabled are rolled back on
    disconnect. Previously everything was committed, because LOCK TABLES didn't
    adjust autocommit setting.
    
    This patch restores original behavior by reverting some changes done in
    MDEV-7660:
    - sql/sql_parse.cc: do not reset autocommit on LOCK TABLES
    - sql/sql_base.cc: do not set autocommit on UNLOCK TABLES
    - test cases: main.lock_tables_lost_commit, main.partition_explicit_prune,
      rpl.rpl_switch_stm_row_mixed, tokudb.nested_txn_implicit_commit,
      tokudb_bugs.db806
    
    But it makes InnoDB tables under LOCK TABLES ... READ [LOCAL] not protected
    against DML. To restore protection some changes from WL#6671 were merged,
    specifically MDL_SHARED_READ_ONLY and test cases.
    
    WL#6671 merge highlights:
    - Not all tests merged.
    - In MySQL LOCK TABLES ... READ acquires MDL_SHARED_READ_ONLY for all engines,
      in MariaDB MDL_SHARED_READ is always acquired first and then upgraded to
      MDL_SHARED_READ_ONLY for InnoDB only.
    - The above allows us to omit MDL_SHARED_WRITE_LOW_PRIO implementation in
      MariaDB, which is rather useless with InnoDB. In MySQL it is needed to
      preserve locking behavior between low priority writes and LOCK TABLES ... READ
      for non-InnoDB engines (covered by sys_vars.sql_low_priority_updates_func).
    - Omitted HA_NO_READ_LOCAL_LOCK, we rely on lock_count() instead.
    - Omitted "piglets": in MariaDB stream of DML against InnoDB table may lead to
      concurrent LOCK TABLES ... READ starvation.
    - HANDLER ... OPEN acquires MDL_SHARED_READ instead of MDL_SHARED in MariaDB.
    - Omitted SNRW->X MDL lock upgrade for IMPORT/DISCARD TABLESPAECE under LOCK
      TABLES.
    - Omitted strong locks for views, triggers and SP under LOCK TABLES.
    - Omitted IX schema lock for LOCK TABLES READ.
    - Omitted deadlock weight juggling for LOCK TABLES.
    
    Full WL#6671 merge status:
    - innodb.innodb-lock: fully merged
    - main.alter_table: not merged due to different HANDLER solution
    - main.debug_sync: fully merged
    - main.handler_innodb: not merged due to different HANDLER solution
    - main.handler_myisam: not merged due to different HANDLER solution
    - main.innodb_mysql_lock: fully merged
    - main.insert_notembedded: fully merged
    - main.lock: not merged (due to no strong locks for views)
    - main.lock_multi: not merged
    - main.lock_sync: fully merged (partially in MDEV-7660)
    - main.mdl_sync: not merged
    - main.partition_debug_sync: not merged due to different HANDLER solution
    - main.status: fully merged
    - main.view: fully merged
    - perfschema.mdl_func: not merged (no such test in MariaDB)
    - perfschema.table_aggregate_global_2u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_global_2u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_global_4u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_global_4u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_hist_2u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_hist_2u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_hist_4u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_hist_4u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_thread_2u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_thread_2u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_thread_4u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_aggregate_thread_4u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_global_2u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_global_2u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_global_4u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_global_4u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_hist_2u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_hist_2u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_hist_4u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_hist_4u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_thread_2u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_thread_2u_3t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_thread_4u_2t: not merged (didn't fail in MariaDB)
    - perfschema.table_lock_aggregate_thread_4u_3t: not merged (didn't fail in MariaDB)
    - sys_vars.sql_low_priority_updates_func: not merged
    - include/thr_rwlock.h: not merged, rw_pr_lock_assert_write_owner and
      rw_pr_lock_assert_not_write_owner are macros in MariaDB
    - sql/handler.h: not merged (HA_NO_READ_LOCAL_LOCK)
    - sql/mdl.cc: partially merged (MDL_SHARED_READ_ONLY only)
    - sql/mdl.h: partially merged (MDL_SHARED_READ_ONLY only)
    - sql/lock.cc: fully merged
    - sql/sp_head.cc: not merged
    - sql/sp_head.h: not merged
    - sql/sql_base.cc: partially merged (MDL_SHARED_READ_ONLY only)
    - sql/sql_base.h: not merged
    - sql/sql_class.cc: fully merged
    - sql/sql_class.h: fully merged
    - sql/sql_handler.cc: merged partially (different solution in MariaDB)
    - sql/sql_parse.cc: partially merged, mostly omitted low priority write part
    - sql/sql_reload.cc: not merged comment change
    - sql/sql_table.cc: not merged SNRW->X upgrade for IMPORT/DISCARD TABLESPACE
    - sql/sql_view.cc: not merged
    - sql/sql_yacc.yy: not merged (MDL_SHARED_WRITE_LOW_PRIO, MDL_SHARED_READ_ONLY)
    - sql/table.cc: not merged (MDL_SHARED_WRITE_LOW_PRIO)
    - sql/table.h: not merged (MDL_SHARED_WRITE_LOW_PRIO)
    - sql/trigger.cc: not merged
    - storage/innobase/handler/ha_innodb.cc: merged store_lock()/lock_count()
      changes (in MDEV-7660), didn't merge HA_NO_READ_LOCAL_LOCK
    - storage/innobase/handler/ha_innodb.h: fully merged in MDEV-7660
    - storage/myisammrg/ha_myisammrg.cc: not merged comment change
    - storage/perfschema/table_helper.cc: not merged (no MDL support in MariaDB PFS)
    - unittest/gunit/mdl-t.cc: not merged
    - unittest/gunit/mdl_sync-t.cc: not merged
    
    MariaDB specific changes:
    - handler.heap: different HANDLER solution, MDEV-7660
    - handler.innodb: different HANDLER solution, MDEV-7660
    - handler.interface: different HANDLER solution, MDEV-7660
    - handler.myisam: different HANDLER solution, MDEV-7660
    - main.mdl_sync: MDEV-7660 specific changes
    - main.partition_debug_sync: removed test due to different HANDLER solution,
      MDEV-7660
    - main.truncate_coverage: removed test due to different HANDLER solution,
      MDEV-7660
    - mysql-test/include/mtr_warnings.sql: additional cleanup, MDEV-7660
    - mysql-test/lib/v1/mtr_report.pl: additional cleanup, MDEV-7660
    - plugin/metadata_lock_info/metadata_lock_info.cc: not in MySQL
    - sql/sql_handler.cc: MariaDB specific fix for mysql_ha_read(), MDEV-7660

commit 229dd711d40a25dbbbabcc0f7cef06b01638fd43
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Dec 20 22:42:13 2016 +0200

    MDEV-11585 Hard-code the shared InnoDB temporary tablespace ID
    
    Try hard-coding the ID as -2 instead of -1, so that they will not
    be confused with ULINT_UNDEFINED on 32-bit platforms.

commit 83dbb2d43ae77a87ea483127f77d69345541e271
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Dec 20 12:07:33 2016 +0200

    MDEV-11487 Revert InnoDB internal temporary tables from WL#7682
    
    Post-push fix: Remove the orphaned file sess0sess.h.

commit a01bfc9fc251d02e2a6152276eb805e07d213210
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Dec 19 15:57:41 2016 +0200

    MDEV-11602 InnoDB leaks foreign key metadata on DDL operations
    
    Essentially revert MDEV-6759, which addressed a double free of memory
    by removing the freeing altogether, introducing the memory leaks.
    No double free was observed when running the test suite -DWITH_ASAN.
    
    Replace some mem_heap_free(foreign->heap) with dict_foreign_free(foreign)
    so that the calls can be located and instrumented more easily when needed.

commit 8375a2c1cec3c386f6db797d75f64b8f03c83b37
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Dec 16 16:36:54 2016 +0200

    MDEV-11585 Hard-code the shared InnoDB temporary tablespace ID at -1
    
    MySQL 5.7 supports only one shared temporary tablespace.
    
    MariaDB 10.2 does not support any other shared InnoDB tablespaces than
    the two predefined tablespaces: the persistent InnoDB system tablespace
    (default file name ibdata1) and the temporary tablespace
    (default file name ibtmp1).
    
    InnoDB is unnecessarily allocating a tablespace ID for the predefined
    temporary tablespace on every startup, and it is in several places
    testing whether a tablespace ID matches this dynamically generated ID.
    
    We should use a compile-time constant to reduce code size and to avoid
    unnecessary updates to the DICT_HDR page at every startup.
    
    Using a hard-coded tablespace ID will should make it easier to remove the
    TEMPORARY flag from FSP_SPACE_FLAGS in MDEV-11202.

commit 9f863a15b037c0ddffc2d12c1f7d841466f9f345
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Dec 19 15:57:41 2016 +0200

    MDEV-11602 InnoDB leaks foreign key metadata on DDL operations
    
    Essentially revert MDEV-6759, which addressed a double free of memory
    by removing the freeing altogether, introducing the memory leaks.
    No double free was observed when running the test suite -DWITH_ASAN.
    
    Replace some mem_heap_free(foreign->heap) with dict_foreign_free(foreign)
    so that the calls can be located and instrumented more easily when needed.

commit 8777458a6eb73ac1d7d864ebac390ea7039e21c1
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Dec 14 19:56:39 2016 +0200

    MDEV-6076 Persistent AUTO_INCREMENT for InnoDB
    
    This should be functionally equivalent to WL#6204 in MySQL 8.0.0, with
    the notable difference that the file format changes are limited to
    repurposing a previously unused data field in B-tree pages.
    
    For persistent InnoDB tables, write the last used AUTO_INCREMENT
    value to the root page of the clustered index, in the previously
    unused (0) PAGE_MAX_TRX_ID field, now aliased as PAGE_ROOT_AUTO_INC.
    Unlike some other previously unused InnoDB data fields, this one was
    actually always zero-initialized, at least since MySQL 3.23.49.
    
    The writes to PAGE_ROOT_AUTO_INC are protected by SX or X latch on the
    root page. The SX latch will allow concurrent read access to the root
    page. (The field PAGE_ROOT_AUTO_INC will only be read on the
    first-time call to ha_innobase::open() from the SQL layer. The
    PAGE_ROOT_AUTO_INC can only be updated when executing SQL, so
    read/write races are not possible.)
    
    During INSERT, the PAGE_ROOT_AUTO_INC is updated by the low-level
    function btr_cur_search_to_nth_level(), adding no extra page
    access. [Adaptive hash index lookup will be disabled during INSERT.]
    
    If some rare UPDATE modifies an AUTO_INCREMENT column, the
    PAGE_ROOT_AUTO_INC will be adjusted in a separate mini-transaction in
    ha_innobase::update_row().
    
    When a page is reorganized, we have to preserve the PAGE_ROOT_AUTO_INC
    field.
    
    During ALTER TABLE, the initial AUTO_INCREMENT value will be copied
    from the table. ALGORITHM=COPY and online log apply in LOCK=NONE will
    update PAGE_ROOT_AUTO_INC in real time.
    
    innodb_col_no(): Determine the dict_table_t::cols[] element index
    corresponding to a Field of a non-virtual column.
    (The MySQL 5.7 implementation of virtual columns breaks the 1:1
    relationship between Field::field_index and dict_table_t::cols[].
    Virtual columns are omitted from dict_table_t::cols[]. Therefore,
    we must translate the field_index of AUTO_INCREMENT columns into
    an index of dict_table_t::cols[].)
    
    Upgrade from old data files:
    
    By default, the AUTO_INCREMENT sequence in old data files would appear
    to be reset, because PAGE_MAX_TRX_ID or PAGE_ROOT_AUTO_INC would contain
    the value 0 in each clustered index page. In new data files,
    PAGE_ROOT_AUTO_INC can only be 0 if the table is empty or does not contain
    any AUTO_INCREMENT column.
    
    For backward compatibility, we use the old method of
    SELECT MAX(auto_increment_column) for initializing the sequence.
    
    btr_read_autoinc(): Read the AUTO_INCREMENT sequence from a new-format
    data file.
    
    btr_read_autoinc_with_fallback(): A variant of btr_read_autoinc()
    that will resort to reading MAX(auto_increment_column) for data files
    that did not use AUTO_INCREMENT yet. It was manually tested that during
    the execution of innodb.autoinc_persist the compatibility logic is
    not activated (for new files, PAGE_ROOT_AUTO_INC is never 0 in nonempty
    clustered index root pages).
    
    initialize_auto_increment(): Replaces
    ha_innobase::innobase_initialize_autoinc(). This initializes
    the AUTO_INCREMENT metadata. Only called from ha_innobase::open().
    
    ha_innobase::info_low(): Do not try to lazily initialize
    dict_table_t::autoinc. It must already have been initialized by
    ha_innobase::open() or ha_innobase::create().
    
    Note: The adjustments to class ha_innopart were not tested, because
    the source code (native InnoDB partitioning) is not being compiled.

commit 8938031bc7eb78d406553465341338038cfb2e1a
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Wed Dec 14 17:47:10 2016 +0100

    InnoDB: don't stop purge threads if there's work to do
    
    in slow shutdown mode don't stop purge threads until they've
    purged everything there is

commit 8d770859c9d28c6b7ce8b052eaca706a18651562
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Wed Dec 14 17:46:58 2016 +0100

    InnoDB purge thread and other bg threads
    
    in slow shutdown mode stop all bg threads that might generate
    new undo records to purge before stopping purge threads.

commit 6eaa5fd21081c23f3d4da5be71a32886d98de5e9
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Thu Nov 17 15:47:27 2016 +0100

    bugfix: InnoDB doesn't support ICP on vcols

commit 8b3b6dc377c548b1b72978a015af999cf6e99760
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Mon Nov 21 15:04:57 2016 +0100

    test how MDL blocks InnoDB purge
    
    it must, because purge opens a table that might be being altered right now

commit 1cae1af6f9286ca6695206ce20c63bb639c60310
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Mon Nov 7 22:35:02 2016 +0100

    MDEV-5800 InnoDB support for indexed vcols
    
      * remove old 5.2+ InnoDB support for virtual columns
      * enable corresponding parts of the innodb-5.7 sources
      * copy corresponding test cases from 5.7
      * copy detailed Alter_inplace_info::HA_ALTER_FLAGS flags from 5.7
         - and more detailed detection of changes in fill_alter_inplace_info()
      * more "innodb compatibility hooks" in sql_class.cc to
         - create/destroy/reset a THD (used by background purge threads)
         - find a prelocked table by name
         - open a table (from a background purge thread)
    
      * different from 5.7:
        - new service thread "thd_destructor_proxy" to make sure all THDs are
          destroyed at the correct point in time during the server shutdown
        - proper opening/closing of tables for vcol evaluations in
           + FK checks (use already opened prelocked tables)
           + purge threads (open the table, MDLock it, add it to tdc, close
             when not needed)
        - cache open tables in vc_templ
        - avoid unnecessary allocations, reuse table->record[0] and table->s->default_values
        - not needed in 5.7, because it overcalculates:
          + tell the server to calculate vcols for an on-going inline ADD INDEX
          + calculate vcols for correct error messages
    
      * update other engines (mroonga/tokudb) accordingly

commit 7fca91f2b454db6e33d964a7484237793699f77d
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sat Nov 26 15:26:34 2016 +0100

    cleanup: InnoDB, dict_create_add_foreign_to_dictionary()
    
    remove 'table' argument, remnant of 5.6, does not exist in 5.7

commit 528dd5f20c779382bec7a015bc9e092b1a7187dc
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sat Nov 26 14:43:30 2016 +0100

    cleanup: InnoDB, remove index_field_t::col_name
    
    * remnant of 5.6, does not exist in 5.7. bad merge?
    * also remove dict_table_get_col_name_for_mysql(), it was only
      used when index_field_t::col_name was not NULL

commit b66976abb4ce16db99361262e97ac0db60385e35
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sat Nov 26 14:10:53 2016 +0100

    cleanup: InnoDB, various minor issues
    
    * fix "unused pending_checkpoint_mutex_key" compiler warning
    * clarify/simplify get_field_offset()
    * typos, comments
    * unused (forgotten) declaration of create_options_are_invalid()
    * fix my_error(ER_WRONG_KEY_COLUMN) calls
    * crash in row_upd_sec_index_entry()
    * double if (ret != 0)
    * don't duplucate PSI_INSTRUMENT_ME lines
    * useless break; after return();
    * remove unused xtradb-only "cursor_read_view" stuff
    * code formatting
    * simplify dropped column detection
    * redundant assignment

commit c2b2cb8acd7fd8b84f5929f9c7b52961973c9b9f
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Thu Nov 24 16:07:19 2016 +0100

    TABLE::update_virtual_field to compute just one vcol
    
    will be used later by storage engines (e.g. in MyISAM repair or in
    InnoDB purge)

commit 163478db4512237ca67574fe008ddea5970e67dd
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sun Oct 23 14:04:57 2016 +0200

    cleanup: InnoDB: is_partition()

commit 867809f23a8f09b1ac0aa8f9212ac8afd572efc5
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Tue Nov 8 20:04:09 2016 +0100

    bugfix: compile InnoDB w/o P_S

commit 0852cf534a7828e9ff114915eb8da0fa03c471ec
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sat Oct 15 23:51:03 2016 +0200

    say MariaDB in InnoDB error messages, not MySQL

commit f7dcd8a0e8eeaa2b940ecc180453a8d0f82c25de
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sun Oct 23 00:13:11 2016 +0200

    shut up annoying InnoDB warning when --gdb

commit c868acdf656213cdc081c4c965a1bcf3d22558bb
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Dec 5 21:04:30 2016 +0200

    MDEV-11487 Revert InnoDB internal temporary tables from WL#7682
    
    WL#7682 in MySQL 5.7 introduced the possibility to create light-weight
    temporary tables in InnoDB. These are called 'intrinsic temporary tables'
    in InnoDB, and in MySQL 5.7, they can be created by the optimizer for
    sorting or buffering data in query processing.
    
    In MariaDB 10.2, the optimizer temporary tables cannot be created in
    InnoDB, so we should remove the dead code and related data structures.

commit 7ca1e2abad42a7436e6b668b4568d6fadc2ca165
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Dec 8 14:34:54 2016 +0200

    MDEV-11422 rpl.rpl_parallel_optimistic_nobinlog failed in buildbot with "InnoDB: Killing connection failed Deadlock"
    
    innobase_kill_query(): Remove the bogus warning message
    (for the valid outcome err==DB_DEADLOCK) that was added in
    
    commit fec844aca88e1c6b9c36bb0b811e92d9d023ffb9
    Author: Jan Lindström <jan.lindstrom@mariadb.com>
    Date:   Tue Sep 6 09:43:16 2016 +0300
    
        Merge InnoDB 5.7 from mysql-5.7.14.
    
    Also, remove some redundant variables and add a debug assertion for
    enforcing the proper outcome of lock_trx_handle_wait().

commit cc85ba8f2efdb48de65ac058b0a18edc5b80cf6a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Dec 5 15:25:59 2016 +0200

    MDEV-11233 CREATE FULLTEXT INDEX with a token longer than 127 bytes
    crashes server
    
    This bug is the result of merging the Oracle MySQL follow-up fix
    BUG#22963169 MYSQL CRASHES ON CREATE FULLTEXT INDEX
    without merging the base bug fix:
    Bug#79475 Insert a token of 84 4-bytes chars into fts index causes
    server crash.
    
    Unlike the above mentioned fixes in MySQL, our fix will not change
    the storage format of fulltext indexes in InnoDB or XtraDB
    when a character encoding with mbmaxlen=2 or mbmaxlen=3
    and the length of a word is between 128 and 84*mbmaxlen bytes.
    The Oracle fix would allocate 2 length bytes for these cases.
    
    Compatibility with other MySQL and MariaDB releases is ensured by
    persisting the used maximum length in the SYS_COLUMNS table in the
    InnoDB data dictionary.
    
    This fix also removes some unnecessary strcmp() calls when checking
    for the legacy default collation my_charset_latin1
    (my_charset_latin1.name=="latin1_swedish_ci").
    
    fts_create_one_index_table(): Store the actual length in bytes.
    This metadata will be written to the SYS_COLUMNS table.
    
    fts_zip_initialize(): Initialize only the first byte of the buffer.
    Actually the code should not even care about this first byte, because
    the length is set as 0.
    
    FTX_MAX_WORD_LEN: Define as HA_FT_MAXCHARLEN * 4 aka 336 bytes,
    not as 254 bytes.
    
    row_merge_create_fts_sort_index(): Set the actual maximum length of the
    column in bytes, similar to fts_create_one_index_table().
    
    row_merge_fts_doc_tokenize(): Remove the redundant parameter word_dtype.
    Use the actual maximum length of the column. Calculate the extra_size
    in the same way as row_merge_buf_encode() does.

commit 9199d727598d60e2e56cebaadb74f4fb042cbcd4
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Mon Dec 5 15:25:59 2016 +0200

    MDEV-11233 CREATE FULLTEXT INDEX with a token longer than 127 bytes
    crashes server
    
    This bug is the result of merging the Oracle MySQL follow-up fix
    BUG#22963169 MYSQL CRASHES ON CREATE FULLTEXT INDEX
    without merging the base bug fix:
    Bug#79475 Insert a token of 84 4-bytes chars into fts index causes
    server crash.
    
    Unlike the above mentioned fixes in MySQL, our fix will not change
    the storage format of fulltext indexes in InnoDB or XtraDB
    when a character encoding with mbmaxlen=2 or mbmaxlen=3
    and the length of a word is between 128 and 84*mbmaxlen bytes.
    The Oracle fix would allocate 2 length bytes for these cases.
    
    Compatibility with other MySQL and MariaDB releases is ensured by
    persisting the used maximum length in the SYS_COLUMNS table in the
    InnoDB data dictionary.
    
    This fix also removes some unnecessary strcmp() calls when checking
    for the legacy default collation my_charset_latin1
    (my_charset_latin1.name=="latin1_swedish_ci").
    
    fts_create_one_index_table(): Store the actual length in bytes.
    This metadata will be written to the SYS_COLUMNS table.
    
    fts_zip_initialize(): Initialize only the first byte of the buffer.
    Actually the code should not even care about this first byte, because
    the length is set as 0.
    
    FTX_MAX_WORD_LEN: Define as HA_FT_MAXCHARLEN * 4 aka 336 bytes,
    not as 254 bytes.
    
    row_merge_create_fts_sort_index(): Set the actual maximum length of the
    column in bytes, similar to fts_create_one_index_table().
    
    row_merge_fts_doc_tokenize(): Remove the redundant parameter word_dtype.
    Use the actual maximum length of the column. Calculate the extra_size
    in the same way as row_merge_buf_encode() does.

commit 1e2b46d5d5c0dd4093e2159440cad4b9d7d47ff0
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Fri Dec 2 17:28:39 2016 +0200

    MDEV-11168: InnoDB: Failing assertion: !other_lock || wsrep_thd_is_BF(lock->trx->mysql_thd, FALSE) || wsrep_thd_is_BF(other_lock->trx->mysql_thd, FALSE)
    
    Merge fix from 10.1.

commit 2fd3af44830e8df9d60f2e8a955f9ed17e744986
Author: sensssz <hjmsens@gmail.com>
Date:   Thu Dec 1 13:45:23 2016 -0500

    MDEV-11168: InnoDB: Failing assertion: !other_lock || wsrep_thd_is_BF(lock->trx->mysql_thd, FALSE) || wsrep_thd_is_BF(other_lock->trx->mysql_thd, FALSE)
    
    Merged pull request:
    Fix error in lock_has_higher_priority #266
    https://github.com/MariaDB/server/pull/266
    
    Added test case.

commit 0b66d3f70d365bbb936aae4ca67892c17d68d241
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Dec 1 12:56:23 2016 +0200

    MDEV-11426 Remove InnoDB INFORMATION_SCHEMA.FILES implementation
    
    MySQL 5.7 introduced WL#7943: InnoDB: Implement Information_Schema.Files
    to provide a long-term alternative for accessing tablespace metadata.
    The INFORMATION_SCHEMA.INNODB_* views are considered internal interfaces
    that are subject to change or removal between releases. So, users should
    refer to I_S.FILES instead of I_S.INNODB_SYS_TABLESPACES to fetch metadata
    about CREATE TABLESPACE.
    
    Because MariaDB 10.2 does not support CREATE TABLESPACE or
    CREATE TABLE…TABLESPACE for InnoDB, it does not make sense to support
    I_S.FILES either. So, let MariaDB 10.2 omit the code that was added in
    MySQL 5.7. After this change, I_S.FILES will report the empty result,
    unless some other storage engine in MariaDB 10.2 implements the interface.
    (The I_S.FILES interface was originally created for the NDB Cluster.)

commit 943baa3ba879442679e83842d0cf67bb66f5517c
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Thu Dec 1 12:44:12 2016 +0200

    MDEV-11168: InnoDB: Failing assertion: !other_lock || wsrep_thd_is_BF(lock->trx->mysql_thd, FALSE) || wsrep_thd_is_BF(other_lock->trx->mysql_thd, FALSE)
    
        Problem was that we moved lock request to head of lock queue
        even when lock request has to wait.

commit 2c9bb42d901fc4f48f4884e4a85af74eae6d0929
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Dec 1 08:28:59 2016 +0200

    MDEV-11432 Change the informational redo log format tag to "MariaDB 10.2.3"
    
    MariaDB 10.2 incorporates MySQL 5.7. MySQL 5.7.9 (the first GA release
    of the series) introduced an informational field to the InnoDB redo log
    header, which identifies the server version where the redo log files
    were created (initialized, resized or updated), in
    WL#8845: InnoDB: Redo log format version identifier.
    
    The informational message would be displayed to the user, for example
    if someone tries to start up MySQL 8.0 after killing a MariaDB 10.2 server.
    In the current MariaDB 10.2 source code, the identifier string would
    misleadingly say "MySQL 5.7.14" (using the hard-coded version number in
    univ.i) instead of "MariaDB 10.2.3" (using the contents of the VERSION
    file, the build system copies to config.h and my_config.h).
    
    This is only a cosmetic change. The compatibility check is based on a
    numeric identifier.
    
    We should probably also change the numeric identifier and some logic
    around it. MariaDB 10.2 should refuse to recover from a crashed MySQL 5.7
    instance, because the redo log might contain references to shared tablespaces,
    which are not supported by MariaDB 10.2. Also, when MariaDB 10.2 creates
    an encrypted redo log, there should be a redo log format version tag that
    will prevent MySQL 5.7 or 8.0 from starting up.

commit dc9f919f27fccfeb0de3ab392f33bc5efdfd59a0
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Thu Dec 1 06:42:59 2016 +0200

    MDEV-11005: Incorrect error message when using ONLINE alter table with GIS
    
    Corrected error message when ONLINE alter table with GIS indexes is
    used on InnoDB.

commit 3d0d290fdeb2197b4b31db05cc561dae440321ac
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Wed Nov 30 17:53:30 2016 +0200

    Remove tablespace code from InnoDB compilation as it is not used.

commit 1a1749e38c774ce3a3493da2410b19ebe71eccb5
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Thu Nov 24 18:18:00 2016 +0400

    MDEV-11296 - InnoDB stalls under OLTP RW on P8
    
    Threads may fall asleep forever while acquiring InnoDB rw-lock on Power8. This
    regression was introduced along with InnoDB atomic operations fixes.
    
    The problem was that proper memory order wasn't enforced between "writers"
    store and "lock_word" load:
    
      my_atomic_store32((int32*) &lock->waiters, 1);
      ...
      local_lock_word = lock->lock_word;
    
    Locking protocol is such that store to "writers" must be completed before load
    of "lock_word". my_atomic_store32() was expected to enforce memory order because
    it issues strongest MY_MEMORY_ORDER_SEQ_CST memory barrier.
    
    According to C11:
    - any operation with this memory order is both an acquire operation and a
      release operation
    - for atomic store order must be one of memory_order_relaxed
      memory_order_release or memory_order_seq_cst. Otherwise the behavior is
      undefined.
    
    That is it doesn't say explicitly that this expectation is wrong, but there are
    indications that acquire (which is actually supposed to guarantee memory order
    in this case) may not be issued along with MY_MEMORY_ORDER_SEQ_CST.
    
    A good fix for this is to encode waiters into lock_word, but it is a bit too
    intrusive. Instead we change atomic store to atomic fetch-and-store, which
    does memory load and is guaranteed to issue acquire.

commit fb7caad72b5c37e96c69aad63f9589f8b56855d6
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Wed Nov 23 14:07:17 2016 +0400

    MDEV-11296 - InnoDB stalls under OLTP RW on P8
    
    Simplify away recursive flag: it is not necessary for rw-locks to operate
    properly. Now writer_thread != 0 means recursive.
    
    As we only need correct value of writer_thread only in writer_thread itself
    it is rather safe to load and update it non-atomically.
    
    This patch also fixes potential reorder of "writer_thread" and "recursive"
    loads (aka MDEV-7148), which was reopened along with InnoDB thread fences
    simplification. Previous versions are unaffected, because they have os_rmb
    in rw_lock_lock_word_decr(). It wasn't observed at the moment of writing
    though.

commit 68a853732750902fbd97e8ddd1a7f264f9b199c9
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Wed Nov 23 11:34:50 2016 +0400

    MDEV-11296 - InnoDB stalls under OLTP RW on P8
    
    Clean-up INNODB_RW_LOCKS_USE_ATOMICS: it is always set.

commit 8d010c44ef6f156566bcd5ff7fbdcf23ef96e92e
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Tue Nov 22 14:19:54 2016 +0400

    MDEV-11296 - InnoDB stalls under OLTP RW on P8
    
    Simplified away rw_lock_get_waiters(), rw_lock_set_waiter_flag(),
    rw_lock_reset_waiter_flag(). Let waiters have predictable data type.

commit bb7e84b79ab5243392e3691c27d6d64566e26b39
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Tue Nov 22 14:04:43 2016 +0400

    MDEV-11296 - InnoDB stalls under OLTP RW on P8
    
    Simplified away rw_lock_lock_word_incr().

commit 8da33e3a868e7ab4472823f8f3bfab3d5cd1833e
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Nov 25 06:09:00 2016 +0200

    MDEV-11349 (1/2) Fix some clang 4.0 warnings
    
    In InnoDB and XtraDB functions that declare pointer parameters as nonnull,
    remove nullness checks, because GCC would optimize them away anyway.
    
    Use #ifdef instead of #if when checking for a configuration flag.
    
    Clang says that left shifts of negative values are undefined.
    So, use ~0U instead of ~0 in a number of macros.
    
    Some functions that were defined as UNIV_INLINE were declared as
    UNIV_INTERN. Consistently use the same type of linkage.
    
    ibuf_merge_or_delete_for_page() could pass bitmap_page=NULL to
    buf_page_print(), conflicting with the __attribute__((nonnull)).

commit 03ddc19ab21d585f4aac16ad91e5cba39687cd31
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Thu Nov 17 15:15:20 2016 +0200

    MDEV-6424: MariaDB server crashes with assertion failure in file ha_innodb.c line 11652
    
    This is not a fix, this is instrumentation to find out is MySQL frm dictionary
    and InnoDB data dictionary really out-of-sync when this assertion is fired,
    or is there some other reason (bug).

commit 1122c1f0c219a01cdbe5c760b2a846bba80b5949
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Tue Nov 15 14:56:29 2016 +0400

    InnoDB cleanups
    
    - added missing backslash
    - removed duplicate definition of UT_LOW_PRIORITY_CPU/UT_RESUME_PRIORITY_CPU
    - removed duplicate UT_RESUME_PRIORITY_CPU call

commit 1fee0171bcc9a71eb4f1e503232682e232c0bf6e
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Wed Nov 9 15:23:25 2016 +0200

    MDEV-10692: InnoDB: Failing assertion: lock->trx->lock.wait_lock == lock
    When we enter here wait_lock could be already gone i.e. NULL, that
    should be allowed.

commit ada3d7581bd619a729f1243a730499eb4d07b054
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Wed Nov 9 15:17:55 2016 +0200

    MDEV-10692: InnoDB: Failing assertion: lock->trx->lock.wait_lock == lock
    
    When we enter here wait_lock could be already gone i.e. NULL, that
    should be allowed.

commit 8e5f532dc2cb5922ee59fd6c9a33e9d1614b7b05
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Wed Nov 9 13:32:43 2016 +0200

    MDEV-10692: InnoDB: Failing assertion: lock->trx->lock.wait_lock == lock
    
    This is not a fix, this is instrumentation to find the bug.

commit bba224dd53105ca65e0b3ca304e95248363bfa24
Author: Rasmus Johansson <rasmus@mariadb.com>
Date:   Thu Oct 27 23:24:44 2016 +0300

    Added server variable compression_default, which if 1/ON sets compression on for all new InnoDB/XtraDB tables by default by setting PAGE_COMPRESSED=1

commit d665e79c5b8582f44dc280e5e6df4a8ff4945623
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Fri May 6 13:44:07 2016 +0400

    MDEV-7660 - MySQL WL#6671 "Improve scalability by not using thr_lock.c locks
                for InnoDB tables"
    
    Don't use thr_lock.c locks for InnoDB tables. Below is list of changes that
    were needed to implement this:
    - HANDLER OPEN acquireis MDL_SHARED_READ instead of MDL_SHARED
    - HANDLER READ calls external_lock() even if SE is not going to be locked by
      THR_LOCK
    - InnoDB lock wait timeouts are now honored which are much shorter by default
      than server lock wait timeouts (1 year vs 50 seconds)
    - with @@autocommit= 1 LOCK TABLES disables autocommit implicitely, though
      user still sees @@autocommt= 1
    - the above starts implicit transaction
    - transactions started by LOCK TABLES are now rolled back on disconnect
      (previously everything was committed due to autocommit)
    - transactions started by LOCK TABLES are now rolled back by ROLLBACK
      (previously everything was committed due to autocommit)
    - it is now impossible to change BINLOG_FORMAT under LOCK TABLES (at least
      to statement) due to running transaction
    - LOCK TABLES WRITE is additionally handled by MDL
    - ...in contrast LOCK TABLES READ protection against DML is pure InnoDB
    - combining transactional and non-transactional tables under LOCK TABLES
      may cause rolled back changes in transactional table and "committed"
      changes in non-transactional table
    - user may disable innodb_table_locks, which will cause LOCK TABLES to be
      noop basically
    
    Removed tests for BUG#45143 and BUG#55930 which cover InnoDB + THR_LOCK. To
    operate properly these tests require code flow to go through THR_LOCK debug
    sync points, which is not the case after this patch. These tests are removed
    by WL#6671 as well. An alternative is to port them to different storage engine.

commit 554c60ab0d383e8e6d473294fb86a9db0b0d2b9b
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Mon Oct 31 12:44:06 2016 +0200

    MDEV-11182: InnoDB: Assertion failure in file buf0buf.cc line 4730 (encryption.create_or_replace fails in buildbot and outside)
    
    Analysis: Problem is that page is encrypted but encryption information
    on page 0 has already being changed.
    
    Fix: If page header contains key_version != 0 and even if based on
    current encryption information tablespace is not encrypted we
    need to check is page corrupted. If it is not, then we know that
    page is not encrypted. If page is corrupted, we need to try to
    decrypt it and then compare the stored and calculated checksums
    to see is page corrupted or not.

commit 71e11bce34339a69576321d6c40838fa65208dc7
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Fri Oct 28 12:29:37 2016 +0400

    MDEV-8791 - AIX: Unresolved Symbols during linking
    
    Clean-up nolock.h: it doesn't serve any purpose anymore. Appropriate code moved
    to x86-gcc.h and my_atomic.h.
    
    If gcc sync bultins were detected, we want to make use of them independently of
    __GNUC__ definition. E.g. XLC simulates those, but doesn't define __GNUC__.
    
    HS/Spider: According to AIX manual alloca() returns char*, which cannot be
    casted to any type with static_cast. Use explicit cast instead.
    
    MDL: Removed namemangling pragma, which didn't let MariaDB build with XLC.
    
    WSREP: _int64 seem to be conflicting name with XLC, replaced with _integer64.
    
    CONNECT: RTLD_NOLOAD is GNU extention. Removed rather meaningless check if
    library is loaded. Multiple dlopen()'s of the same library are permitted,
    and it never gets closed anyway. Except for error, which was a bug: it may
    close library, which can still be referenced by other subsystems.
    
    InnoDB: __ppc_get_timebase() is GNU extention. Only use it when __GLIBC__ is
    defined.
    
    Based on contribution by flynn1973.

commit 67e6cfd086e41d8918ae0a6b3077a84880819bc8
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Sun Oct 30 09:16:02 2016 +0200

    Add suppression for new InnoDB error log error as this test
    intentionally produces this error.

commit bc323727de312b32e80ae9590e2346414746a594
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Thu Oct 27 08:18:14 2016 +0300

    MDEV-10977: [ERROR] InnoDB: Block in space_id 0 in file ibdata1 encrypted.
    MDEV-10394: Innodb system table space corrupted
    
    Analysis: After we have read the page in buf_page_io_complete try to
    find if the page is encrypted or corrupted. Encryption was determined
    by reading FIL_PAGE_FILE_FLUSH_LSN_OR_KEY_VERSION field from FIL-header
    as a key_version. However, this field is not always zero even when
    encryption is not used. Thus, incorrect key_version could lead situation where
    decryption is tried to page that is not encrypted.
    
    Fix: We still read key_version information from FIL_PAGE_FILE_FLUSH_LSN_OR_KEY_VERSION
    field but also check if tablespace has encryption information before trying
    encrypt the page.

commit 4edd4ad69807c11a2016ac1477805739270a8ee6
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Mon Oct 24 22:25:54 2016 +0300

    MDEV-10970: Crash while loading mysqldump backup when InnoDB encryption is enabled
    
    Follow-up: Make sure we do not reference NULL-pointer when space is being
    dropped and does not contain any nodes.

commit c455898b2c9aaaa9da2def86523f8a9c5016f49f
Author: sensssz <hjmsens@gmail.com>
Date:   Mon Oct 17 21:56:05 2016 -0400

    Implement VATS in XtraDB and InnoDB.

commit 0b7c35cd6a1130e2ba4332023773ec3307a5a360
Author: sensssz <hjmsens@gmail.com>
Date:   Mon Oct 17 21:56:05 2016 -0400

    Implement VATS in XtraDB and InnoDB.

commit 87abc87004b4498dedd3e55f6208fa09c998a5d8
Author: sensssz <hjmsens@gmail.com>
Date:   Mon Oct 17 21:56:05 2016 -0400

    Implement VATS in XtraDB and InnoDB.

commit 8303aded294ce905bbc513e7ee42623d5f1fdb50
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Thu Sep 15 13:39:41 2016 +0400

    MDEV-7148 - Recurring: InnoDB: Failing assertion: !lock->recursive
    
    On PPC64 high-loaded server may crash due to assertion failure in InnoDB
    rwlocks code.
    
    This happened because load order between "recursive" and "writer_thread"
    wasn't properly enforced.

commit 2b47f8ff03845f7ffe2fa3bd583dd4123dae2b61
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Wed Sep 14 15:12:54 2016 +0400

    MDEV-10813 - Clean-up InnoDB atomics, memory barriers and mutexes
    
    Clean-up periodic mutex/rwlock waiters wake up. This was a hack needed to
    workaround broken mutexes/rwlocks implementation. We must have sane
    implementations now and don't need these anymore: release thread is
    guaranteed to wake up waiters.
    
    Removed redundant ifdef that has equivalent code in both branches.
    
    Removed os0atomic.h and os0atomic.ic: not used anymore.
    
    Clean-up unused cmake checks.

commit 5608a737ea7b5630452957b82deff4c76406041e
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Wed Sep 14 15:56:06 2016 +0400

    MDEV-10813 - Clean-up InnoDB atomics, memory barriers and mutexes
    
    No point to issue RELEASE memory barrier in os_thread_create_func(): thread
    creation is full memory barrier.
    
    No point to issue os_wmb in rw_lock_set_waiter_flag() and
    rw_lock_reset_waiter_flag(): this is deadcode and it is unlikely operational
    anyway. If atomic builtins are unavailable - memory barriers are most certainly
    unavailable too.
    
    RELEASE memory barrier is definitely abused in buf_pool_withdraw_blocks(): most
    probably it was supposed to commit volatile variable update, which is not what
    memory barriers actually do. To operate properly it needs corresponding ACQUIRE
    barrier without an associated atomic operation anyway.
    
    ACQUIRE memory barrier is definitely abused in log_write_up_to(): most probably
    it was supposed to synchronize dirty read of log_sys->write_lsn. To operate
    properly it needs corresponding RELEASE barrier without an associated atomic
    operation anyway.
    
    Removed a bunch of ACQUIRE memory barriers from InnoDB rwlocks. They're
    meaningless without corresponding RELEASE memory barriers.
    
    Valid usage example of memory barriers without an associated atomic operation:
    http://en.cppreference.com/w/cpp/atomic/atomic_thread_fence

commit f4d885c4e9d929639b7075b7382b439f0b4e3cc1
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Fri Sep 9 15:05:59 2016 +0400

    MDEV-10813 - Clean-up InnoDB atomics, memory barriers and mutexes
    
    Replaced InnoDB atomic operations with server atomic operations.
    
    Moved INNODB_RW_LOCKS_USE_ATOMICS - it is always defined (code won't compile
    otherwise).
    
    NOTE: InnoDB uses thread identifiers as a target for atomic operations.
    Thread identifiers should be considered opaque: any attempt to use a
    thread ID other than in pthreads calls is nonportable and can lead to
    unspecified results.

commit d055e28f61ef44f2fdbd139edcaf191c96d14e68
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Tue Sep 13 23:35:20 2016 +0400

    MDEV-10813 - Clean-up InnoDB atomics, memory barriers and mutexes
    
    Simplified InnoDB mutex implementations, corrected memory barriers usage, use
    server atomic builtins.

commit cc49f00994aa9fc4698d1ca88414e533258b5cf3
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Mon Oct 17 12:52:14 2016 +0200

    Move InnoDB/XtraDB to async deadlock kill for parallel replication.
    
    In 10.2, use the thd_rpl_deadlock_check() API. This way, all the
    locking hacks around thd_report_wait_for() can be removed. Now
    parallel replication deadlock kill happens asynchroneously, from the
    slave background thread.
    
    In InnoDB, remove also the buffering of wait reports, to simplify the
    code, as this is no longer needed when the locking issues are gone.
    
    In XtraDB, the buffering is kept for now. This is just because
    presumably XtraDB will eventually be updated to MySQL 5.7-based InnoDB
    as well, so there is little need to modify the existing code only for
    clean-up purposes.
    
    The old synchronous function thd_report_wait_for() is no longer used
    and removed in this patch.
    
    Signed-off-by: Kristian Nielsen <knielsen@knielsen-hq.org>

commit 6100f59ffaed0a4d4c224aa771999983f8acd496
Author: sensssz <hjmsens@gmail.com>
Date:   Tue Oct 11 20:52:35 2016 -0400

    Implement VATS both in InnoDB and XtraDB. Add configuration options for it in both of them.

commit e5019d3f34850a3f6bcee8824f666e3b6c3fcee6
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Fri Sep 30 08:45:51 2016 +0300

    MDEV-10908: innodb_zip.bug56680 fails in buildbot with InnoDB: Failing assertion: bpage->id.space() == page_id.space()
    
    Incorrect merge introduced too strict assertion.

commit a53f3c6d3cfa50b15b1aff26bc9479eb582d8611
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Wed Sep 28 16:12:58 2016 +0300

    MDEV-10649: Optimizer sometimes use "index" instead of "range" access for UPDATE
    
    (Fixing both InnoDB and XtraDB)
    
    Re-opening a TABLE object (after e.g. FLUSH TABLES or open table cache
    eviction) causes ha_innobase to call
    dict_stats_update(DICT_STATS_FETCH_ONLY_IF_NOT_IN_MEMORY).
    
    Inside this call, the following is done:
      dict_stats_empty_table(table);
      dict_stats_copy(table, t);
    
    On the other hand, commands like UPDATE make this call to get the "rows in
    table" statistics in table->stats.records:
    
      ha_innobase->info(HA_STATUS_VARIABLE|HA_STATUS_NO_LOCK)
    
    note the HA_STATUS_NO_LOCK parameter. It means, no locks are taken by
    ::info() If the ::info() call happens between dict_stats_empty_table
    and dict_stats_copy calls, the UPDATE's optimizer will get an estimate
    of table->stats.records=1, which causes it to pick a full table scan,
    which in turn will take a lot of row locks and cause other bad
    consequences.

commit 661d08c36ca9181e9f2469c66160e877e284c23f
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Mon Sep 26 15:16:00 2016 +0300

    MDEV-10887: innodb.innodb_stats_fetch_nonexistent fails in buildbot on Windows
    
    Problem was that test innodb.innodb_stats_fetch_corrupted will post
    a error InnoDB: Error: Table "mysql"."innodb_index_stats" not found
    to a error log and test ignores that message. However, following tests
    might see this error also and they might not ignore this error.
    Force a server restart after innodb.innodb_stats_fetch_corrupted
    to get clean log.

commit 677c44f0c37973ad70550d9b807781e688764fae
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Fri Sep 23 20:27:58 2016 +0200

    MDEV-10775 System table in InnoDB format allowed in MariaDB could lead to crash
    
    when opening a system table for a SELECT-like read, pretend
    (for the sake of engines) it's SQLCOM_SELECT

commit 2bedc3978b90bf5abe1029df393c63ced1849bed
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Thu Sep 22 16:32:26 2016 +0300

    MDEV-9931: InnoDB reads first page of every .ibd file at startup
    
    Analysis: By design InnoDB was reading first page of every .ibd file
    at startup to find out is tablespace encrypted or not. This is
    because tablespace could have been encrypted always, not
    encrypted newer or encrypted based on configuration and this
    information can be find realible only from first page of .ibd file.
    
    Fix: Do not read first page of every .ibd file at startup. Instead
    whenever tablespace is first time accedded we will read the first
    page to find necessary information about tablespace encryption
    status.
    
    TODO: Add support for SYS_TABLEOPTIONS where all table options
    encryption information included will be stored.

commit 4572dca4bd1f876fab085a5eb5fbb1c66cec6f88
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Fri Sep 16 09:53:46 2016 +0200

    increase I_S.FILES.FILE_NANE column length
    
    because InnoDB 5.7 tdecided to store a full path there

commit 62ed88017c8a137bd2b57cb55de1badf36f3906a
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Wed Sep 14 13:53:32 2016 +0300

    Fix test failure on tc_partition_list_directory because
    innodb-strict-mode by default is now ON, disabling it for
    this test because test uses INDEX DICECTORY that is not
    really supported by InnoDB.

commit a7296560064c50b2cc8b42e0ede4d3f9bb84f75a
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Wed Sep 14 11:28:40 2016 +0300

    MDEV-10548: Some of the debug sync waits do not work with InnoDB 5.7 (branch bb-10.2-jan)
    
    Fixed auto_increment_dup test. Current behavior is correct for repeatable read (and
    serializable) isolation levels. Old behavior is correct for read committed
    isolation level.

commit da168b3405f8dddf317ce79339233ca5ed9c9aa3
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Wed Sep 14 08:27:22 2016 +0300

    MDEV-10200: IS tables are not found on 10.2 InnoDB 5.7 (branch bb-10.2-jan)
    
    information_schema.innodb_changed_pages IS table available only on
    xtradb, add possible error for now.

commit d019af402cdaa80bd03ad8a5cf2c11cf54443248
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Sat Sep 10 16:04:44 2016 +0200

    misc after-merge changes:
    
    * remove new InnoDB-specific ER_ and HA_ERR_ codes
    * renamed few old ER_ and HA_ERR_ error messages to be less MyISAM-specific
    * remove duplicate enum definitions (durability_properties, icp_result)
    * move new mysql-test include files to their owner suite
    * rename xtradb.rdiff files to *-disabled
    * remove mistakenly committed helper perl module
    * remove long obsolete handler::ha_statistic_increment() method
    * restore the standard C xid_t structure to not have setters and getters
    * remove xid_t::reset that was cleaning too much
    * move MySQL-5.7 ER_ codes where they belong
    * fir innodb to include service_wsrep.h not internal wsrep headers
    * update tests and results

commit 11ae60d2c582f5f57d5aeca4b48b04ce206efc6c
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Thu Sep 8 18:09:47 2016 +0200

    MDEV-10551 Test innodb.defrag_mdl-9155 hangs on InnoDB 5.7
    
    restore a table_flag lost in a merge

commit 7e0c9de86484815b6e014ce3ad3e3a9b74ec0ce0
Author: Kristian Nielsen <knielsen@knielsen-hq.org>
Date:   Thu Sep 8 15:25:40 2016 +0200

    Parallel replication async deadlock kill
    
    When a deadlock kill is detected inside the storage engine, the kill
    is not done immediately, to avoid calling back into the storage engine
    kill_query method with various lock subsystem mutexes held. Instead the
    kill is queued and done later by a slave background thread.
    
    This patch in preparation for fixing TokuDB optimistic parallel
    replication, as well as for removing locking hacks in InnoDB/XtraDB in
    10.2.
    
    Signed-off-by: Kristian Nielsen <knielsen at knielsen-hq.org>

commit fec844aca88e1c6b9c36bb0b811e92d9d023ffb9
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Tue Sep 6 09:43:16 2016 +0300

    Merge InnoDB 5.7 from mysql-5.7.14.
    
    Contains also:
           MDEV-10549 mysqld: sql/handler.cc:2692: int handler::ha_index_first(uchar*): Assertion `table_share->tmp_table != NO_TMP_TABLE || m_lock_type != 2' failed. (branch bb-10.2-jan)
           Unlike MySQL, InnoDB still uses THR_LOCK in MariaDB
    
           MDEV-10548 Some of the debug sync waits do not work with InnoDB 5.7 (branch bb-10.2-jan)
           enable tests that were fixed in MDEV-10549
    
           MDEV-10548 Some of the debug sync waits do not work with InnoDB 5.7 (branch bb-10.2-jan)
           fix main.innodb_mysql_sync - re-enable online alter for partitioned innodb tables

commit 2e814d4702d71a04388386a9f591d14a35980bfe
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Fri Aug 12 11:17:45 2016 +0300

    Merge InnoDB 5.7 from mysql-5.7.9.
    
    Contains also
    
    MDEV-10547: Test multi_update_innodb fails with InnoDB 5.7
    
            The failure happened because 5.7 has changed the signature of
            the bool handler::primary_key_is_clustered() const
            virtual function ("const" was added). InnoDB was using the old
            signature which caused the function not to be used.
    
    MDEV-10550: Parallel replication lock waits/deadlock handling does not work with InnoDB 5.7
    
            Fixed mutexing problem on lock_trx_handle_wait. Note that
            rpl_parallel and rpl_optimistic_parallel tests still
            fail.
    
    MDEV-10156 : Group commit tests fail on 10.2 InnoDB (branch bb-10.2-jan)
      Reason: incorrect merge
    
    MDEV-10550: Parallel replication can't sync with master in InnoDB 5.7 (branch bb-10.2-jan)
      Reason: incorrect merge

commit ed99e2cdd3928c03ed090ce3adcd3bcb698e91fa
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Thu Aug 18 14:00:40 2016 +0300

    MDEV-10341: InnoDB: Failing assertion: mutex_own(mutex) - mutex_exit_func
    
    Followup from 5.5 patch. Removing memory barriers on intel is wrong as
    this doesn't prevent the compiler and/or processor from reorganizing reads
    before the mutex release. Forcing a memory barrier before reading the waiters will
    guarantee that no speculative reading takes place.

commit 9b42f09902f63249cc14abb173513cf9474e3408
Author: Philip Stoev <philip.stoev@galeracluster.com>
Date:   Mon Apr 4 07:09:32 2016 -0700

    Galera MTR Tests: Add test for GAL-382, codership/galera#382 - InnoDB: Failing assertion: xid_seqno > trx_sys_cur_xid_seqno in trx0sys.cc line 356

commit b3df257cfde490066933c4dc8329f9670aa8de58
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Tue Aug 9 16:51:35 2016 +0300

    MDEV-10469: innodb.innodb-alter-tempfile fails in buildbot: InnoDB: Warning: database page corruption or a failed
    
    Test case intentionally crashes the server and that could lead partially
    written pages that are then restored from doublewrite buffer.

commit 5ad02062d928cccbd29c0a2db6f0f7ceb33195d1
Author: Vicențiu Ciorbaru <vicentiu@mariadb.org>
Date:   Tue Aug 9 16:15:10 2016 +0300

    MDEV-10341: InnoDB: Failing assertion: mutex_own(mutex) - mutex_exit_func
    
    Fix memory barrier issues on releasing mutexes. We must have a full
    memory barrier between releasing a mutex lock and reading its waiters.
    This prevents us from missing to release waiters due to reading the
    number of waiters speculatively before releasing the lock. If threads
    try and wait between us reading the waiters count and releasing the
    lock, those threads might stall indefinitely.
    
    Also, we must use proper ACQUIRE/RELEASE semantics for atomic
    operations, not ACQUIRE/ACQUIRE.

commit 86975e0492c03535271aea67e0b5e7e8fd0b1b78
Author: Oleksandr Byelkin <sanja@mariadb.com>
Date:   Mon Aug 1 19:24:55 2016 +0200

    MDEV-7901: re-implement analyze table for low impact
    
    Table before collecting engine independent statistics now is reopened in read mode,
    InnoDB allow write operations in this case.

commit 35c9c856347fe340f3d564f33e76bb6f9ea05e76
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Wed Aug 3 13:40:53 2016 +0300

    MDEV-10217: innodb.innodb_bug59641 fails sporadically in buildbot: InnoDB: Failing assertion: current_rec != insert_rec in file page0cur.c line 1052
    
    Added record printout when current_rec == insert_rec with lengths for
    debug builds.

commit 49ad08450369dbf7ee85759786b6b844e1460471
Author: Alexey Kopytov <akopytov@gmail.com>
Date:   Fri Apr 1 11:31:53 2016 +1100

    Few improvements related to CPU cache line size and padding:
    
    Bug #79636: CACHE_LINE_SIZE should be 128 on AArch64
    Bug #79637: Hard-coded cache line size
    Bug #79638: Reconcile CACHE_LINE_SIZE with CPU_LEVEL1_DCACHE_LINESIZE
    Bug #79652: Suspicious padding in srv_conc_t
    
    - changed CPU_LEVEL1_DCACHE_LINESIZE to default to 128 bytes on POWER
      and AArch64 architectures in cases when no value could be detected
      by CMake using getconf
    
    - changed CACHE_LINE_SIZE definition in ut0counter.h to be an alias of
      CPU_LEVEL1_DCACHE_LINESIZE
    
    - changed a number of hard-coded 64-byte cache line size values in the
      InnoDB code
    
    - fixed insufficient padding for srv_conc members in srv0conc.cc
    
    Ported to Mariadb by Daniel Black <daniel.black@au.ibm.com>
    Added s390 cache size of 256 at same time.

commit 454589b67f9609a78f00e521fe2ef0994eed4f3f
Author: Alexander Barkov <bar@mariadb.org>
Date:   Mon Jan 11 17:20:16 2016 +0400

    MDEV-9393 Split Copy_field::get_copy_func() into virtual methods in Field
    
    Also fixes:
    MDEV-9391 InnoDB does not produce warnings when doing WHERE int_column=varchar_column
    MDEV-9337 ALTER from DECIMAL and INT to DATETIME returns a wrong result
    MDEV-9340 Copying from INT/DOUBLE to ENUM is inconsistent
    MDEV-9392 Copying from DECIMAL to YEAR is not consistent about warnings
For keyword flush:
commit e8889c800223db6a9b9e6d02dcb09a97524a1f16
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue May 9 10:00:49 2017 +0300

    MDEV-12745 InnoDB Assertion `0' failed at row0umod.cc:1181
    
    row_undo_mod_parse_undo_rec(): Relax the too strict assertion and
    correct the comment.
    
    innodb.innodb-blob: Force a flush of the redo log right before
    killing the server, to ensure that the code path gets exercised.
    (The bogus debug assertion failed on the rollback of the statement
    UPDATE t3 SET c=REPEAT('j',3000) WHERE a=2 which did not modify
    any indexes before the server was killed.)

commit fc25437aff119adcfe5bc831e9f1af28cfa0b8a3
Author: Monty <monty@mariadb.org>
Date:   Fri May 5 13:08:23 2017 +0300

    MDEV-10104 Table lock race condition with replication
    
    Problem was two race condtion in Aria page cache:
    - find_block() didn't inform free_block() that it had released requests
    - free_block() didn't handle pinned blocks, which could happen if
      free_block() was called as part of flush. This is fixed by not freeing
      blocks that are pinned.  This is safe as when maria_close() is called
      when last thread is using a table, there can be no pinned blocks. For
      other flush calls it's safe to ignore pinned blocks.

commit e3521ab904866f16fcdf4bdf930634195b4de5e6
Author: Monty <monty@mariadb.org>
Date:   Fri May 5 13:03:41 2017 +0300

    Fixed some bugs in fork_big.pl which caused some tests to die early
    
    - Changed to 'strict'
    - Fixed scope of variables
    - Made timing smaller for of repair, check, flush and alter to get them to
      trigger earlier

commit 07d329a7588a17b6a42f1478b6247dd46e2f9f5e
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Tue May 2 09:36:16 2017 -0400

    Continuation of the previous cset: rename sysvar's test, too.
    
    use_direct_writes was renamed to use_direct_io_for_flush_and_compaction

commit e13e1eea9672fa6e0cff24d86cb86cb5495178e1
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Mon May 1 17:50:18 2017 +0300

    MyRocks: update to latest rocksdb
    
    - Update rocksdb submodule to revision
      d616ebea23fa88cb9c2c8588533526a566d9cfab
    - Normally this should be done by doing a merge from upstream
      MyRocks, but now we are just updating rocksdb, MyRocks merge will
      follow later.
    - Apply a part of 4f6f072f6c74513087004755508eb6d6c432c5c1
      use_direct_writes was renamed to use_direct_io_for_flush_and_compaction
    - Update build_rocksdb.cmake - RocksDB have moved files around

commit 765a43605a42c069ede604826ede2d93d72c4fdd
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Wed Apr 26 15:19:16 2017 +0300

    MDEV-12253: Buffer pool blocks are accessed after they have been freed
    
    Problem was that bpage was referenced after it was already freed
    from LRU. Fixed by adding a new variable encrypted that is
    passed down to buf_page_check_corrupt() and used in
    buf_page_get_gen() to stop processing page read.
    
    This patch should also address following test failures and
    bugs:
    
    MDEV-12419: IMPORT should not look up tablespace in
    PageConverter::validate(). This is now removed.
    
    MDEV-10099: encryption.innodb_onlinealter_encryption fails
    sporadically in buildbot
    
    MDEV-11420: encryption.innodb_encryption-page-compression
    failed in buildbot
    
    MDEV-11222: encryption.encrypt_and_grep failed in buildbot on P8
    
    Removed dict_table_t::is_encrypted and dict_table_t::ibd_file_missing
    and replaced these with dict_table_t::file_unreadable. Table
    ibd file is missing if fil_get_space(space_id) returns NULL
    and encrypted if not. Removed dict_table_t::is_corrupted field.
    
    Ported FilSpace class from 10.2 and using that on buf_page_check_corrupt(),
    buf_page_decrypt_after_read(), buf_page_encrypt_before_write(),
    buf_dblwr_process(), buf_read_page(), dict_stats_save_defrag_stats().
    
    Added test cases when enrypted page could be read while doing
    redo log crash recovery. Also added test case for row compressed
    blobs.
    
    btr_cur_open_at_index_side_func(),
    btr_cur_open_at_rnd_pos_func(): Avoid referencing block that is
    NULL.
    
    buf_page_get_zip(): Issue error if page read fails.
    
    buf_page_get_gen(): Use dberr_t for error detection and
    do not reference bpage after we hare freed it.
    
    buf_mark_space_corrupt(): remove bpage from LRU also when
    it is encrypted.
    
    buf_page_check_corrupt(): @return DB_SUCCESS if page has
    been read and is not corrupted,
    DB_PAGE_CORRUPTED if page based on checksum check is corrupted,
    DB_DECRYPTION_FAILED if page post encryption checksum matches but
    after decryption normal page checksum does not match. In read
    case only DB_SUCCESS is possible.
    
    buf_page_io_complete(): use dberr_t for error handling.
    
    buf_flush_write_block_low(),
    buf_read_ahead_random(),
    buf_read_page_async(),
    buf_read_ahead_linear(),
    buf_read_ibuf_merge_pages(),
    buf_read_recv_pages(),
    fil_aio_wait():
            Issue error if page read fails.
    
    btr_pcur_move_to_next_page(): Do not reference page if it is
    NULL.
    
    Introduced dict_table_t::is_readable() and dict_index_t::is_readable()
    that will return true if tablespace exists and pages read from
    tablespace are not corrupted or page decryption failed.
    Removed buf_page_t::key_version. After page decryption the
    key version is not removed from page frame. For unencrypted
    pages, old key_version is removed at buf_page_encrypt_before_write()
    
    dict_stats_update_transient_for_index(),
    dict_stats_update_transient()
            Do not continue if table decryption failed or table
            is corrupted.
    
    dict0stats.cc: Introduced a dict_stats_report_error function
    to avoid code duplication.
    
    fil_parse_write_crypt_data():
            Check that key read from redo log entry is found from
            encryption plugin and if it is not, refuse to start.
    
    PageConverter::validate(): Removed access to fil_space_t as
    tablespace is not available during import.
    
    Fixed error code on innodb.innodb test.
    
    Merged test cased innodb-bad-key-change5 and innodb-bad-key-shutdown
    to innodb-bad-key-change2.  Removed innodb-bad-key-change5 test.
    Decreased unnecessary complexity on some long lasting tests.
    
    Removed fil_inc_pending_ops(), fil_decr_pending_ops(),
    fil_get_first_space(), fil_get_next_space(),
    fil_get_first_space_safe(), fil_get_next_space_safe()
    functions.
    
    fil_space_verify_crypt_checksum(): Fixed bug found using ASAN
    where FIL_PAGE_END_LSN_OLD_CHECKSUM field was incorrectly
    accessed from row compressed tables. Fixed out of page frame
    bug for row compressed tables in
    fil_space_verify_crypt_checksum() found using ASAN. Incorrect
    function was called for compressed table.
    
    Added new tests for discard, rename table and drop (we should allow them
    even when page decryption fails). Alter table rename is not allowed.
    Added test for restart with innodb-force-recovery=1 when page read on
    redo-recovery cant be decrypted. Added test for corrupted table where
    both page data and FIL_PAGE_FILE_FLUSH_LSN_OR_KEY_VERSION is corrupted.
    
    Adjusted the test case innodb_bug14147491 so that it does not anymore
    expect crash. Instead table is just mostly not usable.
    
    fil0fil.h: fil_space_acquire_low is not visible function
    and fil_space_acquire and fil_space_acquire_silent are
    inline functions. FilSpace class uses fil_space_acquire_low
    directly.
    
    recv_apply_hashed_log_recs() does not return anything.

commit 0871a00a62efe63d23e3dde5a0bcd667583ee717
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Apr 21 11:28:18 2017 +0300

    MDEV-12545 Reduce the amount of fil_space_t lookups
    
    buf_flush_write_block_low(): Acquire the tablespace reference once,
    and pass it to lower-level functions. This is only a start; further
    calls may be removed.
    
    fil_decompress_page(): Remove unsafe use of fil_space_get_by_id().

commit 996c7d5cb5e369de178da3482f3dfc36d57fd6a9
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Apr 21 17:32:02 2017 +0300

    MDEV-12545 Reduce the amount of fil_space_t lookups
    
    buf_flush_write_block_low(): Acquire the tablespace reference once,
    and pass it to lower-level functions. This is only a start; further
    calls may be removed later.

commit cd79be82d1d2c17d9f43f993b13412a2172032c4
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Thu Apr 6 14:47:55 2017 +0200

    cleanup: unused method LOGGER::flush_logs

commit c010f06380f004adbc6f7062f656ab9dfa73e15f
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Wed Mar 15 23:19:33 2017 +0300

    MariaRocks: Run rocksdb testsuite with @@rocksdb_flush_log_at_trx_commit=0
    
    The default value of 1 causes many tests to time out (primary reason is
    that many tests populate tables with one-row INSERT statements that
    run with autocommit=1).

commit e5b155a4e5986a16620c3eb359a47bd27feb462a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Mar 10 16:01:02 2017 +0200

    MDEV-12091 Shutdown fails to wait for rollback of recovered transactions to finish
    
    In the 10.1 InnoDB Plugin, a call os_event_free(buf_flush_event) was
    misplaced. The event could be triggered by rollback of resurrected
    transactions while shutdown was in progress. This bug was caught
    by cmake -DWITH_ASAN testing. This call was only present in the
    10.1 InnoDB Plugin, not in other versions, or in XtraDB.
    
    That said, the bug affects all InnoDB versions. Shutdown assumes the
    cessation of any page-dirtying activity, including the activity of
    the background rollback thread. InnoDB only waited for the background
    rollback to finish as part of a slow shutdown (innodb_fast_shutdown=0).
    The default is a clean shutdown (innodb_fast_shutdown=1). In a scenario
    where InnoDB is killed, restarted, and shut down soon enough, the data
    files could become corrupted.
    
    logs_empty_and_mark_files_at_shutdown(): Wait for the
    rollback to finish, except if innodb_fast_shutdown=2
    (crash-like shutdown) was requested.
    
    trx_rollback_or_clean_recovered(): Before choosing the next
    recovered transaction to roll back, terminate early if non-slow
    shutdown was initiated. Roll back everything on slow shutdown
    (innodb_fast_shutdown=0).
    
    srv_innodb_monitor_mutex: Declare as static, because the mutex
    is only used within one module.
    
    In 10.2, os_event_destroy() sets the event to a NULL pointer,
    while os_event_free() in earlier versions did not do that.

commit 65d01da29c03c44f3c059a999c7c1cc6e001ead8
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Sat Mar 11 07:17:42 2017 +0300

    Copy of
    commit ba00e640f658ad8d0a4dff09a497a51b8a4de935
    Author: Herman Lee <herman@fb.com>
    Date:   Wed Feb 22 06:30:06 2017 -0800
    
        Improve add_index_alter_cardinality test
    
        Summary:
        Split add_index_inplace_cardinality test out and add a debug_sync point
        to it so that the flush of the memtable occurs while the alter is
        running.
        Closes https://github.com/facebook/mysql-5.6/pull/539
    
        Reviewed By: alxyang
    
        Differential Revision: D4597887
    
        Pulled By: hermanlee
    
        fbshipit-source-id: faedda2

commit 7c512138a19abd4d8e8761b1f0eb2bd8c9809a28
Author: Vladislav Vaintroub <wlad@mariadb.com>
Date:   Fri Mar 10 19:01:14 2017 +0000

    Revert MySQL commit that disables writing on Windows while flush is in progress
    
    Reason : after running sysbench tests (rw,update_no_index), in all cases
    the throughout was considerably (approx 15%) better with the patch removed.
    
    Reverted commit info
    commit 8dc03bee3ade2edcc53a3a257346f4a0a9f0b44c
    Author: Yasufumi Kinoshita <yasufumi.kinoshita@oracle.com>
    Date:   Wed Nov 20 17:02:24 2013 +0900
    
    Bug #17824101 : WL#7050 CAUSES RW PERFORMANCE REGRESSION AT SOME WINDOWS ENVIRONMENT

commit 032678ad18498bab01d41779313e48df1990f780
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Mar 10 18:33:38 2017 +0200

    MDEV-12091 Shutdown fails to wait for rollback of recovered transactions to finish
    
    In the 10.1 InnoDB Plugin, a call os_event_free(buf_flush_event) was
    misplaced. The event could be signalled by rollback of resurrected
    transactions while shutdown was in progress. This bug was caught
    by cmake -DWITH_ASAN testing. This call was only present in the
    10.1 InnoDB Plugin, not in other versions, or in XtraDB.
    
    That said, the bug affects all InnoDB versions. Shutdown assumes the
    cessation of any page-dirtying activity, including the activity of
    the background rollback thread. InnoDB only waited for the background
    rollback to finish as part of a slow shutdown (innodb_fast_shutdown=0).
    The default is a clean shutdown (innodb_fast_shutdown=1). In a scenario
    where InnoDB is killed, restarted, and shut down soon enough, the data
    files could become corrupted.
    
    logs_empty_and_mark_files_at_shutdown(): Wait for the
    rollback to finish, except if innodb_fast_shutdown=2
    (crash-like shutdown) was requested.
    
    trx_rollback_or_clean_recovered(): Before choosing the next
    recovered transaction to roll back, terminate early if non-slow
    shutdown was initiated. Roll back everything on slow shutdown
    (innodb_fast_shutdown=0).
    
    srv_innodb_monitor_mutex: Declare as static, because the mutex
    is only used within one module.
    
    After each call to os_event_free(), ensure that the freed event
    is not reachable via global variables, by setting the relevant
    variables to NULL.

commit 9928dbe5f6f106241bb91333480c7837d562d8ca
Author: Vladislav Vaintroub <wlad@mariadb.com>
Date:   Thu Mar 9 22:47:29 2017 +0100

    Add SRV_ALL_O_DIRECT_FSYNC to  switch(srv_flush_method) in log0log.c.
    
    Also in log_checkpoint(), where fil_flush_file_spaces() was
    not done on Windows, it is not done.

commit a98009ab0276841b481839599c413f5f7e99678a
Author: Vladislav Vaintroub <wlad@mariadb.com>
Date:   Thu Mar 9 14:32:17 2017 +0000

    MDEV-12201 innodb_flush_method are not available on Windows
    
     Remove srv_win_file_flush_method
    
    - Rename srv_unix_file_flush_method to srv_file_flush_method, and
      rename constants to remove UNIX from them, i.e SRV_UNIX_FSYNC=>SRV_FSYNC
    
    - Add SRV_ALL_O_DIRECT_FSYNC corresponding to current Windows default
    (no buffering for either log or data, flush on both log and data)
    
    - change os_file_open on Windows to behave identically to Unix wrt
    O_DIRECT and O_DSYNC settings. map O_DIRECT to FILE_FLAG_NO_BUFFERING and
    O_DSYNC to FILE_FLAG_WRITE_THROUGH
    
    - remove various #ifdef _WIN32

commit 29a980cf5cca0f27477d55c86a31c2cf01e3b52b
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Mar 8 22:36:10 2017 +0200

    MDEV-11688 follow-up: More robust shutdown after aborted startup.
    
    After starting MariaDB 10.2 with an invalid value of
    --innodb-flush-method= (the empty string), shutdown would
    attempt to dereference some NULL pointers. This was probably broken
    in commit 81b7fe9d383bdf68a622b95384f067ed68ba342c which implemented
    shutdown after aborted startup.
    
    logs_empty_and_mark_files_at_shutdown(): Allow shutdown even if
    lock_sys, log_sys, or fil_system is NULL.
    
    os_aio_free(): Tolerate os_aio_segment_wait_events==NULL.
    
    innobase_start_or_create_for_mysql(): Do not invoke
    srv_init_abort() before initializing all mutexes for the temporary files.
    
    innodb_shutdown(): Tolerate buf_pool_ptr==NULL.

commit 0af8b565f282f5e765fb279e28740385f3dbdaf1
Author: Daniel Black <grooverdan@users.sourceforge.net>
Date:   Tue Feb 28 21:39:34 2017 +1100

    MDEV-11610: mysqladmin flush-X-log options
    
    Add the following options to mysqladmin
    
    +  flush-binary-log        Flush binary log
    +  flush-engine-log        Flush engine log(s)
    +  flush-error-log         Flush error log
    +  flush-general-log       Flush general log
    +  flush-relay-log         Flush relay log
    +  flush-user-resources    Flush user resources

commit 4bad74e13955ee21015c6b8a9d4bd07624924efa
Author: Monty <monty@mariadb.org>
Date:   Sun Feb 5 02:23:49 2017 +0200

    Added error checking for all calls to flush_relay_log_info() and stmt_done()

commit a13a636c74d9778ec0430ec963dcfd1614f7c81e
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Feb 17 10:32:21 2017 +0200

    MDEV-11802 innodb.innodb_bug14676111 fails
    
    The function trx_purge_stop() was calling os_event_reset(purge_sys->event)
    before calling rw_lock_x_lock(&purge_sys->latch). The os_event_set()
    call in srv_purge_coordinator_suspend() is protected by that X-latch.
    
    It would seem a good idea to consistently protect both os_event_set()
    and os_event_reset() calls with a common mutex or rw-lock in those
    cases where os_event_set() and os_event_reset() are used
    like condition variables, tied to changes of shared state.
    
    For each os_event_t, we try to document the mutex or rw-lock that is
    being used. For some events, frequent calls to os_event_set() seem to
    try to avoid hangs. Some events are never waited for infinitely, only
    timed waits, and os_event_set() is used for early termination of these
    waits.
    
    os_aio_simulated_put_read_threads_to_sleep(): Define as a null macro
    on other systems than Windows. TODO: remove this altogether and disable
    innodb_use_native_aio on Windows.
    
    os_aio_segment_wait_events[]: Initialize only if innodb_use_native_aio=0.
    
    log_write_flush_to_disk_low(): Invoke log_mutex_enter() at the end, to
    avoid race conditions when changing the system state. (No potential
    race condition existed before MySQL 5.7.)

commit 3c411e3ad66d0b4ddee2563deb621db249b94432
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Feb 8 12:48:25 2017 +0200

    Test fix for MDEV-6076 Persistent AUTO_INCREMENT for InnoDB
    
    Before killing the server, ensure that the redo log for the
    incomplete transaction is flushed, so that the AUTO_INCREMENT
    sequence will always be updated. Usually the INSERT
    transaction would not have persisted the sequence before the
    server was killed, but sometimes it could happen, causing
    result mismatch.
    
    Note: This test used to be called innodb_fts.innodb_fts_misc_debug.

commit 81b7fe9d383bdf68a622b95384f067ed68ba342c
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 31 19:43:03 2017 +0200

    Shut down InnoDB after aborted startup.
    
    This fixes memory leaks in tests that cause InnoDB startup to fail.
    
    buf_pool_free_instance(): Also free buf_pool->flush_rbt, which would
    normally be freed when crash recovery finishes.
    
    fil_node_close_file(), fil_space_free_low(), fil_close_all_files():
    Relax some debug assertions to tolerate !srv_was_started.
    
    innodb_shutdown(): Renamed from innobase_shutdown_for_mysql().
    Changed the return type to void. Do not assume that all subsystems
    were started.
    
    que_init(), que_close(): Remove (empty functions).
    
    srv_init(), srv_general_init(): Remove as global functions.
    
    srv_free(): Allow srv_sys=NULL.
    
    srv_get_active_thread_type(): Only return SRV_PURGE if purge really
    is running.
    
    srv_shutdown_all_bg_threads(): Do not reset srv_start_state. It will
    be needed by innodb_shutdown().
    
    innobase_start_or_create_for_mysql(): Always call srv_boot() so that
    innodb_shutdown() can assume that it was called. Make more subsystems
    dependent on SRV_START_STATE_STAT.
    
    srv_shutdown_bg_undo_sources(): Require SRV_START_STATE_STAT.
    
    trx_sys_close(): Do not assume purge_sys!=NULL. Do not call
    buf_dblwr_free(), because the doublewrite buffer can exist while
    the transaction system does not.
    
    logs_empty_and_mark_files_at_shutdown(): Do a faster shutdown if
    !srv_was_started.
    
    recv_sys_close(): Invoke dblwr.pages.clear() which would normally
    be invoked by buf_dblwr_process().
    
    recv_recovery_from_checkpoint_start(): Always release log_sys->mutex.
    
    row_mysql_close(): Allow the subsystem not to exist.

commit ebdf70db2a36bba0ccdab7c680a252040c350a50
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Fri Jan 27 09:13:48 2017 +0200

    Fix test failure on innodb-wl5522
    
    Added flush tables to avoid corruption of mtr/test_suppressions
    table.

commit 1628a2ae27cfc8b96e4b50d85d430955625e2d88
Author: Monty <monty@mariadb.org>
Date:   Tue Dec 27 01:30:20 2016 +0200

    Fixed issues found by buildbot
    
    - MDEV-11621 rpl.rpl_gtid_stop_start fails sporadically in buildbot
    - MDEV-11620 rpl.rpl_upgrade_master_info fails sporadically in buildbot
    
    The issue above was probably that the build machine was overworked and the
    shutdown took longer than 30 resp 10 seconds, which caused MyISAM tables
    to be marked as crashed.
    Fixed by flushing myisam tables before doing a forced shutdown/kill.
    I also increased timeout for forced shutdown from 10 seconds to 60 seconds
    to fix other possible issues on slow machines.
    
    Fixed also some compiler warnings

commit 78e6fafcaa93bdd2cf793a82a812137eb7a779a7
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 10 14:11:32 2017 +0200

    Fix an innodb_plugin leak noted in MDEV-11686
    
    buf_flush_init_flush_rbt() was called too early in MariaDB server 10.0,
    10.1, MySQL 5.5 and MySQL 5.6. The memory leak has been fixed in
    the XtraDB storage engine and in MySQL 5.7.
    
    As a result, when the server is started to initialize new data files,
    the buf_pool->flush_rbt will be created unnecessarily and then leaked.
    This memory leak was noticed in MariaDB server 10.1 when running the
    test encryption.innodb_first_page.

commit a8ac6dc5065a82b11b3f1a699be87aabc95d7a10
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Thu Jan 5 11:49:00 2017 +0200

    Fix InnoDB compilation warnings.
    
    Most of them are trivial, except for the thread_sync_t refactoring.
    We must not invoke memset() on non-POD objects.
    
    mtflush_work_initialized: Remove. Refer to mtflush_ctx != NULL instead.
    
    thread_sync_t::thread_sync_t(): Refactored from
    buf_mtflu_handler_init().
    
    thread_sync_t::~thread_sync_t(): Refactored from
    buf_mtflu_io_thread_exit().

commit 8a04b8cadedb4b7388379a30b7d7211a2b607bfe
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 3 13:18:47 2017 +0200

    MDEV-11688 fil_crypt_threads_end() tries to create threads
    after aborted InnoDB startup
    
    This bug was repeatable by starting MariaDB 10.2 with an
    invalid option, such as --innodb-flush-method=foo.
    It is not repeatable in MariaDB 10.1 in the same way, but the
    problem exists already there.

commit fc779252aec56e01c5924d80378cafc8b6ec80b5
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Tue Jan 3 13:18:47 2017 +0200

    MDEV-11688 fil_crypt_threads_end() tries to create threads
    after aborted InnoDB startup
    
    This bug was repeatable by starting MariaDB 10.2 with an
    invalid option, such as --innodb-flush-method=foo.
    It is not repeatable in MariaDB 10.1 in the same way, but the
    problem exists already there.

commit 8451e09073e8b1a300f177d74a9e3a530776640a
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Wed Dec 28 12:05:43 2016 +0200

    MDEV-11556 InnoDB redo log apply fails to adjust data file sizes
    
    fil_space_t::recv_size: New member: recovered tablespace size in pages;
    0 if no size change was read from the redo log,
    or if the size change was implemented.
    
    fil_space_set_recv_size(): New function for setting space->recv_size.
    
    innodb_data_file_size_debug: A debug parameter for setting the system
    tablespace size in recovery even when the redo log does not contain
    any size changes. It is hard to write a small test case that would
    cause the system tablespace to be extended at the critical moment.
    
    recv_parse_log_rec(): Note those tablespaces whose size is being changed
    by the redo log, by invoking fil_space_set_recv_size().
    
    innobase_init(): Correct an error message, and do not require a larger
    innodb_buffer_pool_size when starting up with a smaller innodb_page_size.
    
    innobase_start_or_create_for_mysql(): Allow startup with any initial
    size of the ibdata1 file if the autoextend attribute is set. Require
    the minimum size of fixed-size system tablespaces to be 640 pages,
    not 10 megabytes. Implement innodb_data_file_size_debug.
    
    open_or_create_data_files(): Round the system tablespace size down
    to pages, not to full megabytes, (Our test truncates the system
    tablespace to more than 800 pages with innodb_page_size=4k.
    InnoDB should not imagine that it was truncated to 768 pages
    and then overwrite good pages in the tablespace.)
    
    fil_flush_low(): Refactored from fil_flush().
    
    fil_space_extend_must_retry(): Refactored from
    fil_extend_space_to_desired_size().
    
    fil_mutex_enter_and_prepare_for_io(): Extend the tablespace if
    fil_space_set_recv_size() was called.
    
    The test case has been successfully run with all the
    innodb_page_size values 4k, 8k, 16k, 32k, 64k.

commit d379963d73491485a75f05bd8412669f147cc139
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Fri Dec 30 02:18:56 2016 +0300

    MariaRocks port: remove target_lsn parameter of rocksdb_flush_wal
    
    - It's from a webscalesql feature that we dont have
    - MyRocks ignores it anyway

commit d247d64988fb3b5d348e412813593a13f3be91fa
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Nov 25 06:28:02 2016 +0200

    MDEV-11349 (2/2) Fix some bogus-looking Valgrind warnings
    
    buf_block_init(): Initialize buf_page_t::flush_type.
    For some reason, Valgrind 3.12.0 would seem to flag some
    bits in adjacent bitfields as uninitialized, even though only
    the two bits of flush_type were left uninitialized. Initialize
    the field to get rid of many warnings.
    
    buf_page_init_low(): Initialize buf_page_t::old.
    For some reason, Valgrind 3.12.0 would seem to flag all 32
    bits uninitialized when buf_page_init_for_read() invokes
    buf_LRU_add_block(bpage, TRUE). This would trigger bogus warnings
    for buf_page_t::freed_page_clock being uninitialized.
    (The V-bits would later claim that only "old" is initialized
    in the 32-bit word.) Perhaps recent compilers
    (GCC 6.2.1 and clang 4.0.0) generate more optimized x86_64 code
    for bitfield operations, confusing Valgrind?
    
    mach_write_to_1(), mach_write_to_2(), mach_write_to_3():
    Rewrite the assertions that ensure that the most significant
    bits are zero. Apparently, clang 4.0.0 would optimize expressions
    of the form ((n | 0xFF) <= 0x100) to (n <= 0x100). The redundant
    0xFF was added in the first place in order to suppress a
    Valgrind warning. (Valgrind would warn about comparing uninitialized
    values even in the case when the uninitialized bits do not affect
    the result of the comparison.)

commit a68d1352b60bfc3a424fd290a4f5a1beae1bb71e
Author: Marko Mäkelä <marko.makela@mariadb.com>
Date:   Fri Nov 25 06:28:02 2016 +0200

    MDEV-11349 (2/2) Fix some bogus-looking Valgrind warnings
    
    buf_block_init(): Initialize buf_page_t::flush_type.
    For some reason, Valgrind 3.12.0 would seem to flag some
    bits in adjacent bitfields as uninitialized, even though only
    the two bits of flush_type were left uninitialized. Initialize
    the field to get rid of many warnings.
    
    buf_page_init_low(): Initialize buf_page_t::old.
    For some reason, Valgrind 3.12.0 would seem to flag all 32
    bits uninitialized when buf_page_init_for_read() invokes
    buf_LRU_add_block(bpage, TRUE). This would trigger bogus warnings
    for buf_page_t::freed_page_clock being uninitialized.
    (The V-bits would later claim that only "old" is initialized
    in the 32-bit word.) Perhaps recent compilers
    (GCC 6.2.1 and clang 4.0.0) generate more optimized x86_64 code
    for bitfield operations, confusing Valgrind?
    
    mach_write_to_1(), mach_write_to_2(), mach_write_to_3():
    Rewrite the assertions that ensure that the most significant
    bits are zero. Apparently, clang 4.0.0 would optimize expressions
    of the form ((n | 0xFF) <= 0x100) to (n <= 0x100). The redundant
    0xFF was added in the first place in order to suppress a
    Valgrind warning. (Valgrind would warn about comparing uninitialized
    values even in the case when the uninitialized bits do not affect
    the result of the comparison.)

commit 8c038239748f6a9666e07e601a46967d3a0381d0
Author: Jan Lindström <jan.lindstrom@mariadb.com>
Date:   Thu Nov 10 09:42:49 2016 +0200

    MDEV-11250: mtflush threads stall on shutdown
    
    Code calling mtflush threads to exit was too late.

commit e951fd17e81d4524e8090fe0f268bdcf7952b519
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Wed Oct 19 12:00:22 2016 +0000

    MariaRocks port: make rocksdb_flush_wal() match handlerton::flush_logs definition
    
    The original parameter comes from
    commit a869c56d361bb44f46c0efeb11a8f03561676247
    write/sync redo log before flushing binlog cache to file
    
    we've already disabled some of that patch in
    8cde1d449a3ad6c3e294b9cbc0a1494863433e16

commit 8cde1d449a3ad6c3e294b9cbc0a1494863433e16
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Sun Oct 16 14:16:58 2016 +0000

    MariaRocks port: disable thd_store_lsn() call
    
    It is from "write/sync redo log before flushing binlog cache to file"
    feature that MariaDB doesn't have (or need?)

commit e56a53920b0075f9a534610032ee05f2e249e3ae
Author: Sergey Vojtovich <svoj@mariadb.org>
Date:   Fri Jul 1 13:57:18 2016 +0400

    MDEV-10315 - Online ALTER TABLE may get stuck in tdc_remove_table
    
    There was race condition between online ALTER TABLE and statements performing
    TABLE_SHARE release without marking it flushed (e.g. in case of table cache
    overflow, SET @@global.table_open_cache, manager thread purging table cache).
    
    The reason was missing mysql_cond_broadcast().

commit 2d65679384c36ae2e46b2f62538223c3d71fb00a
Author: Sergei Petrunia <psergey@askmonty.org>
Date:   Thu Aug 25 19:47:38 2016 +0300

    MDEV-10665: Json_writer produces extra members in output
    
    Fix an issue in Single_line_formatting_helper: flush_on_one_line()
    didn't clean up the buffered items which could cause them to be
    printed for the second time.
    
    This can't be ever observed by a user (see MDEV text for details).

commit f01a16b54196ef5f816ca5a1bb590262ce0381e6
Author: Philip Stoev <philip.stoev@galeracluster.com>
Date:   Thu Aug 4 00:33:12 2016 -0700

    Galera MTR Tests: fortify galera_bf_abort_flush_for_export against sporadic failures.

commit df9b4554b729aac895d699b2af5a5684b026a85a
Author: Nirbhay Choubey <nirbhay@mariadb.com>
Date:   Mon Aug 8 17:26:06 2016 -0400

    MDEV-10216: Assertion `strcmp(share->unique_file_name,filename) ||
    
    .. share->last_version' failed in myisam/mi_open.c:67: test_if_reopen
    
    During the RENAME operation since the renamed temporary table is also
    opened and added to myisam_open_list/maria_open_list, resetting the
    last_version at the end of operation (HA_EXTRA_PREPARE_FOR_RENAME)
    will cause an assertion failure when a subsequent query tries to open
    an additional temporary table instance and thus attempts to reuse it
    from the open table list.
    
    This commit fixes the issue by skipping flush/close operations executed
    toward the end of ALTER for temporary tables. It also enables a shortcut
    for simple ALTERs (like rename, disable/enable keys) on temporary
    tables.
    
    As safety checks, added some assertions at code points that should not
    be hit for temporary tables.

commit 4f1c81de2875cbce4180e152d12a8a1df60c717a
Author: Sergei Golubchik <serg@mariadb.org>
Date:   Fri Apr 29 18:39:18 2016 +0200

    after-merge: simplify, fix a bug
    
    * simplify the code at default: label
    * bugfix: flush the checksum for NULL fields
      (perfschema.checksum was failing)
    * cleanup: put repeated code into a function
